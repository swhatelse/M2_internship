#+TITLE:  LabBook
#+AUTHOR: Steven QUINITO MASNADA
#+BABEL: :tangle yes
#+TAGS: Arnaud(a) Brice(b) Script(s)

* TODO [3/8]
  - [ ] Run brute force with load_overlap = [true,false],
    vector_recompute = [true,false] and different combination of
    local_work_size
  - [X] Try D-Optimal design if we can get enough information
  - [X] Add checkpointing mechanism
  - [X] Add Constraint mechanism
  - [ ] Try to correctly tuned the Genetic algo
  - [ ] Express the search in two different ways
  - [ ] Find how many points do we need for the D-Optimal
  - [ ] Correct the bug of nil seed in the brute force optimizer
* Memo
  - Get opencl platform
    #+begin_src R :results output :session :exports both
      require 'opencl_ruby_ffi'
      OpenCL::get_platforms
    #+end_src
  - Get usefull info
    #+begin_src sh :results output :exports both
      inxi -Fx
    #+end_src
  - Find opened tty
    #+begin_src sh :results output :exports both
      ps -ft pts/0 -t pts/2    
    #+end_src
  - Bench optimizer
   #+begin_src sh :results output :exports both
     OPTIMIZER_LOG_FILE=/tmp/test2.yaml OPTIMIZER_LOG=true ruby bench_optimizer.rb test_parameters.yaml test.yaml
   #+end_src
  - Tmux
    Detach : ctrl + b d
* Installation
  Here the installation that download and install al the necessary tools.
** Base
   #+begin_src sh :results output :exports both :tangle ../setup.sh
     #!/bin/bash
   #+end_src
*** Directory
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      ROOT_DIR=$PWD
      BOAST_DIR=$ROOT_DIR/boast
      DARWIN_DIR=$ROOT_DIR/darwinning
      BOAST_LIG_DIR=$ROOT_DIR/boast-lig
      TOOLS_DIR=$ROOT_DIR/apps
    #+end_src
*** Ruby
   #+begin_src sh :results output :exports both :tangle ../setup.sh
     echo "=========== Install ruby ============="
     gksudo "apt-get install -y ruby ruby-dev"
   #+end_src
*** Install fortran
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      echo "=========== Install fortran ============="
      gksudo "apt-get install -y gfortran"
    #+end_src
*** Install Opencl
   #+begin_src sh :results output :exports both :tangle ../setup.sh
     echo "=========== Install OpenCL ============="
     gksudo "apt-get install -y ocl-icd-libopencl1 ocl-icd-opencl-dev"
     if [ "$HOSTNAME" = "titan" ] ; then
         mkdir -p $TOOLS_DIR
         cd $TOOLS_DIR
         gksudo "apt-get install -y rpm alien libnuma1"
         wget http://registrationcenter.intel.com/irc_nas/4181/opencl_runtime_14.2_x64_4.5.0.8.tgz
         tar xvzf opencl_runtime_14.2_x64_4.5.0.8.tgz
         cd pset_opencl_runtime_14.1_x64_4.5.0.8/rpm/
         fakeroot alien --to-deb opencl-1.2-intel-cpu-4.5.0.8-1.x86_64.rpm
         gksudo "dpkg -i opencl-1.2-intel-cpu_4.5.0.8-2_amd64.deb"
         gksudo "mkdir -p /etc/OpenCL"
         gksudo "mkdir -p /etc/OpenCL/vendors"
         gksudo "cp /opt/intel/opencl-1.2-4.5.0.8/etc/intel64.icd /etc/OpenCL/vendors/"
     else
         gksudo "apt-get install -y nvidia-opencl-icd-340"
     fi
   #+end_src

** Boast
   #+begin_src sh :results output :exports both :tangle ../setup.sh
     echo "========= Installing Boast ========="
     cd $ROOT_DIR
     git clone git@github.com:Nanosim-LIG/boast.git
     cd $BOAST_DIR
     gem build *.gemspec
     gem install --user-install *.gem
   #+end_src
   
   To avoid retriving from internet:
   #+begin_src sh :results output :exports both
     gem install --user-install -l *.gem
   #+end_src

** Darwining
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      echo "========= Installing Darwining ========="
      cd $ROOT_DIR
      git clone git@github.com:Nanosim-LIG/darwinning.git
      cd $DARWIN_DIR
      gem build *.gemspec
      gem install --user-install *.gem
    #+end_src

   Install minitest:
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      gem install --user-install minitest
    #+end_src

** Boast-lig
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      echo "========= Installing Boast-lig ========="
      cd $ROOT_DIR
      git clone https://forge.imag.fr/anonscm/git/boast/boast.git boast-lig
    #+end_src

** Grid5k setup
*** Reserving node
    -I : Interactive
    -l : list of parameters
    #+begin_src sh :results output :exports both
      oarsub -p "gpu='YES'" -I -t deploy -l nodes=nbNodes,walltime=duration
      oarsub -p "gpu='YES'" -t deploy -l nodes=nbNodes,walltime=duration -r 'yyyy-mm-dd hh:mm:ss'
    #+end_src
*** Deploying an environment
    -k : no password mode, using key ssh
    #+begin_src sh :results output :exports both
      kadeploy3 -a environment.env -f $OAR_FILE_NODES -k
    #+end_src
*** Connection:
     #+begin_src sh :results output :exports both
       ssh root@node
     #+end_src
*** BOAST
     #+begin_src sh :results output :exports both
       rsync -avzP --exclude '.git' boast squinitomasnada@access.grid5000.fr:~/grenoble/boast
       rsync -avzP --exclude '.git' boast-lig squinitomasnada@access.grid5000.fr:~/grenoble/boast
     #+end_src
* February
** 2016-02-02 Notes from Arnaud :Arnaud:
- [[http://mescal.imag.fr/membres/arnaud.legrand/research/M2R_boast.pdf][internships]]
- Stephan Wild's slides at JLPC
- Pointer from Emmanuel Aggulo: [[https://www.gerad.ca/~orban/papers.html][Dominique Orban]]
  - http://dpo.github.io/opal/ One of these articles mentions the
    ability to handle nicely discrete and continuous factors.
  - http://www.gerad.ca/~orban/_static/templating.pdf
- Travaux de Grigori Fursin sur http://www.ctuning.org/ (machine
  learning/big data).
- [[https://hal.inria.fr/hal-00872482][Old article mentioning early results with BOAST]]

Have a look at
https://en.wikipedia.org/wiki/Genetic_algorithm#Limitations
** 2016-02-02
*** Summary discussion with Arnaud :Arnaud:
    Optimization can be seen as:
    - _Minimization problem_
      E.g gradient approach if the function is convexe and second
      derivative \to good conditions.
    - _Fixed Point problem_
      If k-Lipschitz property (f is contraction mapping) can converge very quickly.
      
    Those methods can be generic, we can apply f multiple time to have
    good "conditions".

    - A good starting point would be to characterize the autotuning
      search problem.
** 2016-02-05
*** Discussion with Brice :Brice:
    - Local search only gives local optimal. It is quicker but the
      result can far from the global optimal unless we know where to
      search.
    - It is important to be able to put a bound on the value we want
      to minimize/maximize.
    - Combining global and local
    - It would be interesting to see how a problem looks like when
      changing architecture, it is possible that the search space is
      different.  
** 2016-02-09
*** Summary of the discussion with Arnaud :Arnaud:
    - It is possible to translate the constraint problem into a
      non-constraint one \to moving the constraint into the Obj. Func.
      Use of barrier methods.
    - I have to try to generate data and analyze it with R.
*** Analyse des donnÃ©es autotuning de Brice                         :Brice:ATTACH:
    Retrieved from Arnaud.
:PROPERTIES:
:Attachments: res_arnaud.txt
:ID:       f8f8e899-bef1-40b7-add3-788636a18c68
:END:      
    
Formatting of the data to use it with R:
#+BEGIN_SRC ruby :results output :exports both :var output = "/tmp/file.csv" input="data/f8/f8e899-bef1-40b7-add3-788636a18c68/res_arnaud.txt"
  require 'yaml'
  require 'pp'

  h = YAML::load(File::open(input).read)

  t = []

  h.each { |e|
    e[:measurements].each { |m|
       t.push e[:parameters].clone.update({:x => m[:dimension][0], :y => m[:dimension][1], :duration => m[:duration]})
    }
  }

  # pp t

  # puts YAML::dump(t)

  File::open(output,"w") { |f|
    head = t.first
    f.puts head.each_key.collect { |k| k}.join(", ")
    # head.each_key.to_a.join(", ")

    t.each { |e|
      f.puts e.each_value.collect { |k| k}.join(", ")
    }
  }
#+END_SRC
    
#+RESULTS:

#+begin_src R :results output :session :exports both :var input="/tmp/file.csv"
df = read.csv(input,strip.white=T,header=T)
head(df)
dim(df)
#+end_src

#+RESULTS:
#+begin_example
  x_component_number vector_length y_component_number temporary_size
1                  1            16                  2              2
2                  1            16                  2              2
3                  1            16                  2              2
4                  1            16                  2              2
5                  1            16                  2              2
6                  4            16                  1              2
  vector_recompute load_overlap    x    y    duration
1             true        false  768  432 0.020760143
2             true        false 2560 1600 0.256392290
3             true        false 2048 2048 0.263635845
4             true        false 5760 3240 1.180488412
5             true        false 7680 4320 2.076793683
6            false         true  768  432 0.005698532
[1] 4000    9
#+end_example

#+begin_src R :results output :session :exports both
str(df);
summary(df);
#+end_src

#+RESULTS:
#+begin_example
'data.frame':	4000 obs. of  9 variables:
 $ x_component_number: int  1 1 1 1 1 4 4 4 4 4 ...
 $ vector_length     : int  16 16 16 16 16 16 16 16 16 16 ...
 $ y_component_number: int  2 2 2 2 2 1 1 1 1 1 ...
 $ temporary_size    : int  2 2 2 2 2 2 2 2 2 2 ...
 $ vector_recompute  : Factor w/ 2 levels "false","true": 2 2 2 2 2 1 1 1 1 1 ...
 $ load_overlap      : Factor w/ 2 levels "false","true": 1 1 1 1 1 2 2 2 2 2 ...
 $ x                 : int  768 2560 2048 5760 7680 768 2560 2048 5760 7680 ...
 $ y                 : int  432 1600 2048 3240 4320 432 1600 2048 3240 4320 ...
 $ duration          : num  0.0208 0.2564 0.2636 1.1805 2.0768 ...
 x_component_number vector_length  y_component_number temporary_size
 Min.   : 1.0       Min.   : 1.0   Min.   :1.00       Min.   :2     
 1st Qu.: 2.0       1st Qu.: 2.0   1st Qu.:1.75       1st Qu.:2     
 Median : 4.0       Median : 4.0   Median :2.50       Median :3     
 Mean   : 6.2       Mean   : 6.2   Mean   :2.50       Mean   :3     
 3rd Qu.: 8.0       3rd Qu.: 8.0   3rd Qu.:3.25       3rd Qu.:4     
 Max.   :16.0       Max.   :16.0   Max.   :4.00       Max.   :4     
 vector_recompute load_overlap       x              y           duration       
 false:2000       false:2000   Min.   : 768   Min.   : 432   Min.   :0.000204  
 true :2000       true :2000   1st Qu.:2048   1st Qu.:1600   1st Qu.:0.006667  
                               Median :2560   Median :2048   Median :0.023882  
                               Mean   :3763   Mean   :2328   Mean   :0.072823  
                               3rd Qu.:5760   3rd Qu.:3240   3rd Qu.:0.088747  
                               Max.   :7680   Max.   :4320   Max.   :3.472179
#+end_example

#+begin_src R :results output :session :exports both
df$flops = with(df, 9*(x-2)*(y-2)/duration)
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 700 :sessiona
plot(df[!(names(df)%in%c("duration"))]);
#+end_src

#+RESULTS:
[[file:/tmp/babel-30783Rp/figure30781gR.png]]


#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
hist(df$flops)
#+end_src

#+RESULTS:
[[file:/tmp/babel-30783Rp/figure3078pJq.png]]


#+begin_src R :results output :session :exports both
names(df)
#+end_src

#+RESULTS:
:  [1] "x_component_number" "vector_length"      "y_component_number"
:  [4] "temporary_size"     "vector_recompute"   "load_overlap"
:  [7] "x"                  "y"                  "duration"
: [10] "flops"


#+begin_src R :results output :session :exports both
summary(lm(data=df, flops ~ (x_component_number + y_component_number + vector_length +
                            factor(temporary_size) + factor(vector_recompute) + factor(load_overlap) +
                            x + y)))
#+end_src

#+RESULTS:
#+begin_example
 
Call:
lm(formula = flops ~ (x_component_number + y_component_number + 
    vector_length + factor(temporary_size) + factor(vector_recompute) + 
    factor(load_overlap) + x + y), data = df)

Residuals:
       Min         1Q     Median         3Q        Max 
-4.532e+09 -1.340e+09 -4.478e+08  5.483e+08  1.239e+10 

Coefficients:
                               Estimate Std. Error t value Pr(>|t|)    
(Intercept)                   827765774  145444921   5.691 1.35e-08 ***
x_component_number            168354043    6796767  24.770  < 2e-16 ***
y_component_number            324149508   33163768   9.774  < 2e-16 ***
vector_length                  -7796884    6796767  -1.147 0.251390    
factor(temporary_size)4      -281970610   74156439  -3.802 0.000145 ***
factor(vector_recompute)true -178649163   74156439  -2.409 0.016038 *  
factor(load_overlap)true      518930201   74156439   6.998 3.04e-12 ***
x                               -104684      60695  -1.725 0.084649 .  
y                                291403     115655   2.520 0.011788 *  
---
Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

Residual standard error: 2.345e+09 on 3991 degrees of freedom
Multiple R-squared:  0.1661,	Adjusted R-squared:  0.1645 
F-statistic: 99.39 on 8 and 3991 DF,  p-value: < 2.2e-16
#+end_example

Bon, on n'y comprends pas grand chose, il y a un R^2 tout petit et
quand on regarde le plot d'interactions prÃ©cÃ©dent, on peut aisÃ©ment
voir que =vector_length= ou =x_component_number= ne sont pas du tout
linÃ©aires et qu'un modÃ¨le quadratique serait plus appropriÃ©. D'autre
part, il y a potentiellement des interactions entre ces diffÃ©rents
facteurs. Voyons ce que cela donne

#+begin_src R :results output :session :exports both
summary(lm(data=df, flops ~ (x_component_number + I(x_component_number^2) +
                            y_component_number + I(y_component_number^2) +
                            vector_length      + I(vector_length^2) +
                            factor(temporary_size) + factor(vector_recompute) + factor(load_overlap) +
                            x + y)^2))
#+end_src

#+RESULTS:
#+begin_example
 
Call:
lm(formula = flops ~ (x_component_number + I(x_component_number^2) + 
    y_component_number + I(y_component_number^2) + vector_length + 
    I(vector_length^2) + factor(temporary_size) + factor(vector_recompute) + 
    factor(load_overlap) + x + y)^2, data = df)

Residuals:
       Min         1Q     Median         3Q        Max 
-5.030e+09 -6.204e+08 -1.971e+07  5.541e+08  6.033e+09 

Coefficients:
                                                        Estimate Std. Error
(Intercept)                                            3.138e+09  5.423e+08
x_component_number                                    -8.962e+08  1.090e+08
I(x_component_number^2)                                1.128e+07  1.011e+07
y_component_number                                    -6.111e+08  5.901e+08
I(y_component_number^2)                               -9.967e+07  2.167e+08
vector_length                                         -8.809e+08  1.090e+08
I(vector_length^2)                                    -2.535e+07  1.011e+07
factor(temporary_size)4                                2.232e+09  2.461e+08
factor(vector_recompute)true                          -7.003e+08  2.461e+08
factor(load_overlap)true                              -2.130e+09  2.461e+08
x                                                      3.832e+05  1.991e+05
y                                                     -6.403e+05  3.719e+05
x_component_number:I(x_component_number^2)             1.452e+06  3.490e+05
x_component_number:y_component_number                  2.094e+08  7.516e+07
x_component_number:I(y_component_number^2)            -2.324e+07  1.480e+07
x_component_number:vector_length                       4.965e+08  1.203e+07
x_component_number:I(vector_length^2)                 -2.907e+07  6.795e+05
x_component_number:factor(temporary_size)4            -8.615e+07  2.960e+07
x_component_number:factor(vector_recompute)true        2.159e+08  2.960e+07
x_component_number:factor(load_overlap)true            2.061e+08  2.960e+07
x_component_number:x                                  -1.128e+04  2.422e+04
x_component_number:y                                   5.191e+04  4.616e+04
I(x_component_number^2):y_component_number            -8.905e+06  4.245e+06
I(x_component_number^2):I(y_component_number^2)        6.882e+05  8.357e+05
I(x_component_number^2):vector_length                 -2.094e+07  6.795e+05
I(x_component_number^2):I(vector_length^2)             1.273e+06  3.837e+04
I(x_component_number^2):factor(temporary_size)4        2.743e+06  1.671e+06
I(x_component_number^2):factor(vector_recompute)true  -1.063e+07  1.671e+06
I(x_component_number^2):factor(load_overlap)true      -7.750e+06  1.671e+06
I(x_component_number^2):x                             -1.683e+02  1.368e+03
I(x_component_number^2):y                             -9.343e+02  2.607e+03
y_component_number:I(y_component_number^2)             3.670e+07  2.713e+07
y_component_number:vector_length                       6.273e+08  7.516e+07
y_component_number:I(vector_length^2)                 -3.551e+07  4.245e+06
y_component_number:factor(temporary_size)4            -1.989e+08  1.849e+08
y_component_number:factor(vector_recompute)true       -1.776e+07  1.849e+08
y_component_number:factor(load_overlap)true            3.792e+08  1.849e+08
y_component_number:x                                  -6.029e+04  1.513e+05
y_component_number:y                                   1.512e+05  2.884e+05
I(y_component_number^2):vector_length                 -8.728e+07  1.480e+07
I(y_component_number^2):I(vector_length^2)             4.942e+06  8.357e+05
I(y_component_number^2):factor(temporary_size)4        2.857e+07  3.640e+07
I(y_component_number^2):factor(vector_recompute)true   4.712e+06  3.640e+07
I(y_component_number^2):factor(load_overlap)true      -7.237e+07  3.640e+07
I(y_component_number^2):x                              9.786e+03  2.979e+04
I(y_component_number^2):y                             -2.360e+04  5.677e+04
vector_length:I(vector_length^2)                       4.587e+06  3.490e+05
vector_length:factor(temporary_size)4                 -7.301e+08  2.960e+07
vector_length:factor(vector_recompute)true             6.302e+07  2.960e+07
vector_length:factor(load_overlap)true                 5.385e+08  2.960e+07
vector_length:x                                       -6.791e+04  2.422e+04
vector_length:y                                        1.823e+05  4.616e+04
I(vector_length^2):factor(temporary_size)4             4.266e+07  1.671e+06
I(vector_length^2):factor(vector_recompute)true       -6.746e+06  1.671e+06
I(vector_length^2):factor(load_overlap)true           -2.998e+07  1.671e+06
I(vector_length^2):x                                   3.807e+03  1.368e+03
I(vector_length^2):y                                  -1.029e+04  2.607e+03
factor(temporary_size)4:factor(vector_recompute)true  -2.517e+08  7.280e+07
factor(temporary_size)4:factor(load_overlap)true      -1.834e+08  7.280e+07
factor(temporary_size)4:x                              2.555e+04  5.959e+04
factor(temporary_size)4:y                             -6.267e+04  1.135e+05
factor(vector_recompute)true:factor(load_overlap)true  3.116e+08  7.280e+07
factor(vector_recompute)true:x                        -1.071e+04  5.959e+04
factor(vector_recompute)true:y                        -1.125e+03  1.135e+05
factor(load_overlap)true:x                            -4.277e+04  5.959e+04
factor(load_overlap)true:y                             1.277e+05  1.135e+05
x:y                                                   -3.127e+01  8.001e+00
                                                      t value Pr(>|t|)    
(Intercept)                                             5.787 7.71e-09 ***
x_component_number                                     -8.226 2.61e-16 ***
I(x_component_number^2)                                 1.116 0.264635    
y_component_number                                     -1.036 0.300474    
I(y_component_number^2)                                -0.460 0.645550    
vector_length                                          -8.085 8.20e-16 ***
I(vector_length^2)                                     -2.508 0.012185 *  
factor(temporary_size)4                                 9.070  < 2e-16 ***
factor(vector_recompute)true                           -2.845 0.004461 ** 
factor(load_overlap)true                               -8.653  < 2e-16 ***
x                                                       1.925 0.054320 .  
y                                                      -1.722 0.085220 .  
x_component_number:I(x_component_number^2)              4.160 3.25e-05 ***
x_component_number:y_component_number                   2.786 0.005366 ** 
x_component_number:I(y_component_number^2)             -1.571 0.116374    
x_component_number:vector_length                       41.266  < 2e-16 ***
x_component_number:I(vector_length^2)                 -42.784  < 2e-16 ***
x_component_number:factor(temporary_size)4             -2.911 0.003622 ** 
x_component_number:factor(vector_recompute)true         7.294 3.62e-13 ***
x_component_number:factor(load_overlap)true             6.964 3.85e-12 ***
x_component_number:x                                   -0.466 0.641385    
x_component_number:y                                    1.125 0.260777    
I(x_component_number^2):y_component_number             -2.098 0.035992 *  
I(x_component_number^2):I(y_component_number^2)         0.823 0.410285    
I(x_component_number^2):vector_length                 -30.818  < 2e-16 ***
I(x_component_number^2):I(vector_length^2)             33.185  < 2e-16 ***
I(x_component_number^2):factor(temporary_size)4         1.641 0.100889    
I(x_component_number^2):factor(vector_recompute)true   -6.362 2.21e-10 ***
I(x_component_number^2):factor(load_overlap)true       -4.637 3.66e-06 ***
I(x_component_number^2):x                              -0.123 0.902113    
I(x_component_number^2):y                              -0.358 0.720055    
y_component_number:I(y_component_number^2)              1.353 0.176258    
y_component_number:vector_length                        8.346  < 2e-16 ***
y_component_number:I(vector_length^2)                  -8.365  < 2e-16 ***
y_component_number:factor(temporary_size)4             -1.076 0.282210    
y_component_number:factor(vector_recompute)true        -0.096 0.923490    
y_component_number:factor(load_overlap)true             2.051 0.040360 *  
y_component_number:x                                   -0.398 0.690373    
y_component_number:y                                    0.524 0.600107    
I(y_component_number^2):vector_length                  -5.898 3.98e-09 ***
I(y_component_number^2):I(vector_length^2)              5.913 3.64e-09 ***
I(y_component_number^2):factor(temporary_size)4         0.785 0.432530    
I(y_component_number^2):factor(vector_recompute)true    0.129 0.897005    
I(y_component_number^2):factor(load_overlap)true       -1.988 0.046879 *  
I(y_component_number^2):x                               0.328 0.742588    
I(y_component_number^2):y                              -0.416 0.677657    
vector_length:I(vector_length^2)                       13.144  < 2e-16 ***
vector_length:factor(temporary_size)4                 -24.670  < 2e-16 ***
vector_length:factor(vector_recompute)true              2.130 0.033270 *  
vector_length:factor(load_overlap)true                 18.195  < 2e-16 ***
vector_length:x                                        -2.804 0.005077 ** 
vector_length:y                                         3.949 7.98e-05 ***
I(vector_length^2):factor(temporary_size)4             25.523  < 2e-16 ***
I(vector_length^2):factor(vector_recompute)true        -4.036 5.54e-05 ***
I(vector_length^2):factor(load_overlap)true           -17.935  < 2e-16 ***
I(vector_length^2):x                                    2.782 0.005421 ** 
I(vector_length^2):y                                   -3.948 8.03e-05 ***
factor(temporary_size)4:factor(vector_recompute)true   -3.458 0.000551 ***
factor(temporary_size)4:factor(load_overlap)true       -2.518 0.011825 *  
factor(temporary_size)4:x                               0.429 0.668131    
factor(temporary_size)4:y                              -0.552 0.581004    
factor(vector_recompute)true:factor(load_overlap)true   4.279 1.92e-05 ***
factor(vector_recompute)true:x                         -0.180 0.857361    
factor(vector_recompute)true:y                         -0.010 0.992093    
factor(load_overlap)true:x                             -0.718 0.472966    
factor(load_overlap)true:y                              1.124 0.260960    
x:y                                                    -3.909 9.43e-05 ***
---
Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

Residual standard error: 1.151e+09 on 3933 degrees of freedom
Multiple R-squared:  0.802,	Adjusted R-squared:  0.7987 
F-statistic: 241.3 on 66 and 3933 DF,  p-value: < 2.2e-16
#+end_example

Bon, lÃ , c'est pas mal, le R^2 n'est pas ridicule et bien des
paramÃ¨tres sont non significatifs (dont =x= et =y= mais on peut voir que
=x*y= l'est...).


IdÃ©alement, on voudrait donc maintenant rÃ©duire le modÃ¨le. J'enlÃ¨ve
ceux qui semblent sans importance: =x=, =y=, =y_component_number=. C'est un
peu pÃ©nible car =I(x_component_number^2)= est non significatif mais sa
contribution s'est perdue dans les interactions avec les autres
paramÃ¨tres. On voit l'intÃ©rÃªt qu'il y aurait ici Ã  utiliser une
approche MDL... D'autre part, certains paramÃ¨tres semblent significatifs
sans pour autant Ãªtre importants (par exemple =vector_recompute=)

#+begin_src R :results output :session :exports both
summary(lm(data=df, flops ~ (x_component_number + I(x_component_number^2) +
                            vector_length      + I(vector_length^2) +
                            factor(temporary_size) + factor(vector_recompute) + factor(load_overlap))^2))
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = flops ~ (x_component_number + I(x_component_number^2) +
    vector_length + I(vector_length^2) + factor(temporary_size) +
    factor(vector_recompute) + factor(load_overlap))^2, data = df)

Residuals:
       Min         1Q     Median         3Q        Max
-5.459e+09 -6.205e+08 -2.736e+07  5.874e+08  6.409e+09

Coefficients:
                                                        Estimate Std. Error
(Intercept)                                            1.531e+09  1.873e+08
x_component_number                                    -4.687e+08  7.410e+07
I(x_component_number^2)                               -8.632e+06  9.824e+06
vector_length                                          2.015e+08  7.410e+07
I(vector_length^2)                                    -8.669e+07  9.824e+06
factor(temporary_size)4                                1.900e+09  1.393e+08a
factor(vector_recompute)true                          -7.523e+08  1.393e+08
factor(load_overlap)true                              -1.588e+09  1.393e+08
x_component_number:I(x_component_number^2)             1.452e+06  3.868e+05
x_component_number:vector_length                       4.965e+08  1.333e+07
x_component_number:I(vector_length^2)                 -2.907e+07  7.531e+05
x_component_number:factor(temporary_size)4            -8.615e+07  3.280e+07
x_component_number:factor(vector_recompute)true        2.159e+08  3.280e+07
x_component_number:factor(load_overlap)true            2.061e+08  3.280e+07
I(x_component_number^2):vector_length                 -2.094e+07  7.531e+05
I(x_component_number^2):I(vector_length^2)             1.273e+06  4.253e+04
I(x_component_number^2):factor(temporary_size)4        2.743e+06  1.853e+06
I(x_component_number^2):factor(vector_recompute)true  -1.063e+07  1.853e+06
I(x_component_number^2):factor(load_overlap)true      -7.750e+06  1.853e+06
vector_length:I(vector_length^2)                       4.587e+06  3.868e+05
vector_length:factor(temporary_size)4                 -7.301e+08  3.280e+07
vector_length:factor(vector_recompute)true             6.302e+07  3.280e+07
vector_length:factor(load_overlap)true                 5.385e+08  3.280e+07
I(vector_length^2):factor(temporary_size)4             4.266e+07  1.853e+06
I(vector_length^2):factor(vector_recompute)true       -6.746e+06  1.853e+06
I(vector_length^2):factor(load_overlap)true           -2.998e+07  1.853e+06
factor(temporary_size)4:factor(vector_recompute)true  -2.517e+08  8.070e+07
factor(temporary_size)4:factor(load_overlap)true      -1.834e+08  8.070e+07
factor(vector_recompute)true:factor(load_overlap)true  3.116e+08  8.070e+07
                                                      t value Pr(>|t|)
(Intercept)                                             8.175 3.93e-16 ***
x_component_number                                     -6.325 2.81e-10 ***
I(x_component_number^2)                                -0.879 0.379645
vector_length                                           2.720 0.006564 **
I(vector_length^2)                                     -8.824  < 2e-16 ***
factor(temporary_size)4                                13.641  < 2e-16 ***
factor(vector_recompute)true                           -5.402 6.99e-08 ***
factor(load_overlap)true                              -11.406  < 2e-16 ***
x_component_number:I(x_component_number^2)              3.753 0.000177 ***
x_component_number:vector_length                       37.231  < 2e-16 ***
x_component_number:I(vector_length^2)                 -38.600  < 2e-16 ***
x_component_number:factor(temporary_size)4             -2.626 0.008662 **
x_component_number:factor(vector_recompute)true         6.581 5.29e-11 ***
x_component_number:factor(load_overlap)true             6.283 3.67e-10 ***
I(x_component_number^2):vector_length                 -27.804  < 2e-16 ***
I(x_component_number^2):I(vector_length^2)             29.940  < 2e-16 ***
I(x_component_number^2):factor(temporary_size)4         1.480 0.138824
I(x_component_number^2):factor(vector_recompute)true   -5.740 1.02e-08 ***
I(x_component_number^2):factor(load_overlap)true       -4.183 2.94e-05 ***
vector_length:I(vector_length^2)                       11.859  < 2e-16 ***
vector_length:factor(temporary_size)4                 -22.257  < 2e-16 ***
vector_length:factor(vector_recompute)true              1.921 0.054764 .
vector_length:factor(load_overlap)true                 16.415  < 2e-16 ***
I(vector_length^2):factor(temporary_size)4             23.028  < 2e-16 ***
I(vector_length^2):factor(vector_recompute)true        -3.641 0.000275 ***
I(vector_length^2):factor(load_overlap)true           -16.182  < 2e-16 ***
factor(temporary_size)4:factor(vector_recompute)true   -3.119 0.001825 **
factor(temporary_size)4:factor(load_overlap)true       -2.272 0.023127 *
factor(vector_recompute)true:factor(load_overlap)true   3.861 0.000115 ***
---
Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

Residual standard error: 1.276e+09 on 3971 degrees of freedom
Multiple R-squared:  0.7544,    Adjusted R-squared:  0.7526
F-statistic: 435.6 on 28 and 3971 DF,  p-value: < 2.2e-16
#+end_example

#+end_src

Y verrait-on plus clair en se concentrant sur les rÃ©sultats
"intÃ©ressants". Pas sÃ»r...

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 600 :session
plot(df[df$flops>1E10 & df$temporary_size==2 & df$vector_length==8 & df$load_overlap=="true",!(names(df) %in% c("duration","x","y"))]) # ,"temporary_size","vector_length"
#+end_src

#+RESULTS:
[[file:/tmp/babel-30783Rp/figure30782Tw.png]]

But as we have less points and do not cover the parameter space,
fitting the previous model is now meaningless.

Entered on [2015-11-19 jeu. 20:56]
** 2016-02-11
   - Wrong hypothesis can lead to bad solution \to need to make less
     hypothesis as possible.
** 2016-02-16
   - Activate performance logs:
     #+begin_src sh :results output :exports both
     OPTIMIZER_LOG_FILE=file OPTIMIZER_LOG=true ruby prog.rb
   #+end_src
   - Using bench_optimizer:
     #+begin_src sh :results output :exports both
     OPTIMIZER_LOG_FILE=/tmp/test2.yaml OPTIMIZER_LOG=true ruby bench_optimizer.rb test_parameters.yaml test.yaml
   #+end_src
   - Let's try to make a first experiment and how look likes the
     optimization space of the Laplacian.rb by running brute force on
     adonis nodes to see if we can see something interesting, and
     compare it with Brice's results. Let's also run the experiment
     several time to see how is the variability. 
   - Send to grenoble:
     #+begin_src sh :results output :exports both :tangle scripts/send_to_grenoble.sh
       BASE="$PWD/../.."
       ssh squinitomasnada@access.grid5000.fr 'mkdir -p ~/grenoble/boast'
       rsync -avzP --exclude '.git' $BASE/boast squinitomasnada@access.grid5000.fr:~/grenoble/boast
       rsync -avzP --exclude '.git' $BASE/boast-lig squinitomasnada@access.grid5000.fr:~/grenoble/boast
       rsync -avzP --exclude '.git' $BASE/org/scripts squinitomasnada@access.grid5000.fr:~/grenoble/boast
     #+end_src
   - Send to nodes:
     #+begin_src sh :results output :exports both :tangle scripts/send_to_nodes.sh
       #!/bin/bash
       BASE="$PWD/.."
       PREV_NODE=''
       while read NODE; do
           if [[ "$NODE" != "$PREV_NODE" ]]; then
               ssh root@$NODE 'mkdir -p ~/boast'
               rsync -avzP --exclude '.git' $BASE/boast root@$NODE:~/boast
               rsync -avzP --exclude '.git' $BASE/boast-lig root@$NODE:~/boast
               rsync -avzP --exclude '.git' $BASE/scripts root@$NODE:~/boast
               PREV_NODE=$NODE
               fi
       done < $OAR_NODE_FILE

     #+end_src

   - The results below are obtained from different executions of
     Laplacian.rb on adonis platforms. The best configuration is found
     as follow:
     - For each configurations:
       - For each size of image [768x432, 2560x1600, 2048x2048, 5760x3240,
         7680x4320]:
         - Laplacian is computed 4 times:
           - Each time is calculated the average time to compute a
             pixel (for a given image)
           - Keep the minimum of the average time to compute a pixel
         - Make the average of the of the min the different size of
           image
       - Keep the best value.

     - Which more formally would look like this:
       min(avg_k(min_j(t_i))) 
       let:
       - t be an image
       - i \in {0..3} is the number of try
       - j \in {768x432,2560x1600,2048x2048,5760x3240,7680x4320} be the sizes of images
       - k \in X which is the set of configuration.

       Here are the best configurations found:
     - Adonis-5 15:32:21
       - [[file:data/2016_02_19/15_32_21_adonis-5/Info15_32_21.org][Infos-Adonis-5]] 
       - [[file:data/2016_02_19/15_32_21_adonis-5/Data15_32_21.yaml][Results-Adonis-5]] 
       - Best candidate:
         #+BEGIN_SRC 
         {:x_component_number=>1, :vector_length=>8, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
         6.381553113495854e-10
         #+END_SRC
     - Adonis-9 15:23:23
       - [[file:data/2016_02_19/15_23_23_adonis-9/Info15_23_23.org][Infos-Adonis-9]] 
       - [[file:data/2016_02_19/15_23_23_adonis-9/Data15_23_23.yaml][Results-Adonis-9]] 
       - Best candidate:
         #+BEGIN_SRC 
         {:x_component_number=>1, :vector_length=>16, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
         6.379672182710354e-10
         #+END_SRC
     - Adonis-6 15:42:14
       - [[file:data/2016_02_19/15_42_14_adonis-6/Info15_42_14.org][Infos-Adonis-6]] 
       - [[file:data/2016_02_19/15_42_14_adonis-6/Data15_42_14.yaml][Results-Adonis-6]] 
       - Best candidate:
         #+BEGIN_SRC 
         {:x_component_number=>8, :vector_length=>8, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false}
         1.7839996605890094e-09
         #+END_SRC
     - Adonis-2 15:51:36
       - [[file:data/2016_02_19/15_51_36_adonis-2/Info15_51_36.org][Infos-Adonis-2]] 
       - [[file:data/2016_02_19/15_51_36_adonis-2/Data15_51_36.yaml][Results-Adonis-2]] 
       - Best candidate:
         #+BEGIN_SRC 
         {:x_component_number=>8, :vector_length=>8, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>false}
         1.7518950929881022e-09
         #+END_SRC
     It is seems we have a lot of variability (~3x)
   - Let's try to make some plots to see if the result have the same shape:
     - Formatting data:
       *Warning:* this is an outdated version
       #+BEGIN_SRC ruby
         require 'yaml'
         require 'pp'
         
         input = ARGV[0]
         
         # h = YAML::load(File::open("../data/2016_02_19/15_23_23_adonis-9/Data15_23_23.yaml").read)
         h = YAML::load(File::open(input).read)
         
         t = []
         t2 = []
         head = []
         
         h.first[0].each {|key, value| head.push key } 
         head.push :time_per_pixel
         
         h.each {|key, value| 
           t2 = []
           key.each { |key2, value2|
             t2.push value2
           }
           t2.push value
           t.push t2
         }
         
         # sorted = t.sort{ |a,b| (a[0] <=> b[0]) == 0 ? (a[1] <=> b[1]) == 0 ? (a[2] <=> b[2]) == 0 ? (a[3] <=> b[3]) == 0 ? a[4] ? a[5] ? 1 : 0 : 1 : (a[3] <=> b[3])  : (a[2] <=> b[2]) : (a[1] <=> b[1]) : (a[0] <=> b[0]) }
         
         File::open("/tmp/test.csv", "w"){ |f|
           f.puts head.collect{ |v| v }.join(", ")
           t.each{ |e|
             f.puts e.collect{ |v| v }.join(", ")
           }
         }
       #+END_SRC
     - Adonis-5 15:32:21
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_19/15_32_21_adonis-5/Data15_32_21.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure133112eT.png]]
     - Adonis-9 15:23:23:
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_19/15_23_23_adonis-9/Data15_23_23.yaml
       #+end_src

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]
       #+end_src

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-4721NXH/figure4721oFw.png]]
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         hist(sorted$time_per_pixel)
       #+end_src
   
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-12889xAc/figure12889LDa.png]]
     - Adonis-6 15:42:14
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_19/15_42_14_adonis-6/Data15_42_14.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]
       #+end_src

       #+RESULTS:
       : The following objects are masked from df (pos = 3):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure133113Ry.png]]

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         hist(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure13311pbB.png]]
     - Adonis-2 15:51:36
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_19/15_51_36_adonis-2/Data15_51_36.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:
       : The following objects are masked from df (pos = 3):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number
       : 
       : The following objects are masked from df (pos = 4):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure13311dEa.png]]
     - We can see that the structure is completly different between
       Adonis-5 and Adonis-6 it seemed to be due to some
       variability but Adonis-5 and Adonis-9 have the same structure
       and Adonis-6 and Adonis-2 also. So the difference is not
       related to a big variablity but to other things.
     - Lets have a look on Adonis-6 with another test:
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_22/15_14_33_adonis-6.grenoble.grid5000.fr/Data15_14_33.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:
       #+begin_example
       The following objects are masked from df (pos = 3):

           load_overlap, temporary_size, time_per_pixel, vector_length,
           vector_recompute, x_component_number, y_component_number

       The following objects are masked from df (pos = 4):

           load_overlap, temporary_size, time_per_pixel, vector_length,
           vector_recompute, x_component_number, y_component_number

       The following objects are masked from df (pos = 5):

           load_overlap, temporary_size, time_per_pixel, vector_length,
           vector_recompute, x_component_number, y_component_number
#+end_example

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure13311Rty.png]]

       - We have the same structure has before maybe there are some
         differences between Adonis platform.
** 2016-02-29
   - [X] Check if there are errors in the kernel computation
     Yes, there are!
   - [X] Check which implementation of OpenCL is used
     
   - Let's try with the check on adonis-9 and adonis-6:
     #+begin_src sh :session foo :results output :exports both 
       oarsub -p "gpu='YES' and network_address in ('adonis-9.grenoble.grid5000.fr', 'adonis-6.grenoble.grid5000.fr')" -t deploy -l nodes=2,walltime=3 -I
     #+end_src
   - Results adonis-6
     - 14:15:35
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_29/adonis-6.grenoble.grid5000.fr/14_15_35/Data14_15_35.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-9562LHG/figure95629pq.png]]
      
     - 15:12:51
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_29/adonis-6.grenoble.grid5000.fr/15_12_51/Data15_12_51.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:
       : The following objects are masked from df (pos = 3):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-9562LHG/figure9562WSM.png]]
   - Results adonis-9
     - 14:08:07
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_29/adonis-9.grenoble.grid5000.fr/14_08_07/Data14_08_07.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:
       : The following objects are masked from df (pos = 3):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number
       : 
       : The following objects are masked from df (pos = 4):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-9562LHG/figure9562K7k.png]]
     - 15:05:38
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_29/adonis-9.grenoble.grid5000.fr/15_05_38/Data15_05_38.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-9562LHG/figure9562YGy.png]]

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-10001xgG/figure10001vhG.png]]


   - The previous differences we had between adonis-6 and adonis-9
     came from the fact that on one machine the nvidia implementation
     of the opencl was not used.
* Mars
** 2016-03-01
 - Result on a machine with a GPU Nvidia GTX960 
   - [[file:data/2016_03_01/pantheon/22_11_09/Info22_11_09.org][Conditions of experiment]]
   - [[file:data/2016_03_01/pantheon/22_11_09/Data22_11_09_parameters.yaml][Search space]]
   - [[file:data/2016_03_01/pantheon/22_11_09/Data22_11_09.yaml][Results of experiment]]
 - Observations:    
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_03_01/pantheon/22_11_09/Data22_11_09.yaml
       #+end_src

       #+RESULTS:

   - Best candidate:
     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       df[df$time_per_pixel==min(df$time_per_pixel),]
     #+end_src

     #+RESULTS:
     :    x_component_number vector_length y_component_number temporary_size
     : 33                  1             1                  4              4
     :    vector_recompute load_overlap time_per_pixel
     : 33            false        false   1.432887e-10

   - Lets plot simply the result
       #+begin_src R :results output graphics :file img/not_ordered.png :exports both :width 700 :height 500 :session
         plot(df$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:img/not_ordered.png]]
     - Here we can see no structure because the configuration are
       generated in random order 
   - Now lets try plot in certain order
       #+begin_src R :results output graphics :file img/ordered.png :exports both :width 700 :height 500 :session
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
     [[file:img/ordered.png]]

       #+begin_src R :results output graphics :file img/another_order.png :exports both :width 700 :height 500 :session
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(y_component_number, x_component_number,  temporary_size, vector_length,  vector_recompute, load_overlap),]         

         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
     [[file:img/another_order.png]]

   - Lets see what are the parameters that have the bigger impact:
     #+begin_src R :results output :session :exports both
       head(df)
     #+end_src

     #+RESULTS:
     #+begin_example
     x_component_number vector_length y_component_number temporary_size
     1                  1             2                  3              2
     2                  1             2                  1              2
     3                  4             2                  1              2
     4                 16             8                  3              4
     5                  2             4                  4              4
     6                  8             1                  3              4
     vector_recompute load_overlap time_per_pixel
     1            false        false   1.604461e-10
     2             true         true   4.561930e-10
     3            false         true   3.974526e-10
     4             true        false   5.710954e-10
     5            false        false   1.572302e-10
     6            false         true   3.197862e-10
     #+end_example

     #+begin_src R :results output :session :exports both
       summary(lm(data=df,time_per_pixel ~ x_component_number + vector_length + y_component_number + vector_recompute  )) # + temporary_size + load_overlap
     #+end_src

     #+RESULTS:
     #+begin_example
     
     Call:
     lm(formula = time_per_pixel ~ x_component_number + vector_length + 
     y_component_number + vector_recompute, data = df)
     
     Residuals:
       Min         1Q     Median         3Q        Max 
     -3.494e-10 -1.409e-10 -3.041e-11  8.200e-11  1.627e-09 
     
     Coefficients:
                       Estimate Std. Error t value Pr(>|t|)    
     (Intercept)           2.770e-10  2.622e-11  10.567   <2e-16 ***
     x_component_number    1.364e-11  1.552e-12   8.785   <2e-16 ***
     vector_length         2.308e-11  1.552e-12  14.870   <2e-16 ***
     y_component_number   -6.680e-11  7.575e-12  -8.819   <2e-16 ***
     vector_recomputetrue  2.162e-10  1.694e-11  12.763   <2e-16 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1
     
     Residual standard error: 2.395e-10 on 795 degrees of freedom
     Multiple R-squared:  0.404,	Adjusted R-squared:  0.401 
     F-statistic: 134.7 on 4 and 795 DF,  p-value: < 2.2e-16
     #+end_example

     We can see that temporary_size and load_overlap don't any impact on
     the result.

   - By keeping the best value for the most important parameters we can
    get the best times per pixel
     #+begin_src R :results output :session :exports both
       x = min(df$x_component_number)
       v = min(df$vector_length)
       y = max(df$y_component_number)
       min(df$time_per_pixel)
       df[df$x_component_number==x & df$y_component_number==y & df$vector_length == v & df$vector_recompute == "false", ]
     #+end_src

     #+RESULTS:
     #+begin_example
     [1] 1.432887e-10
     x_component_number vector_length y_component_number temporary_size
     33                   1             1                  4              4
     165                  1             1                  4              4
     389                  1             1                  4              2
     789                  1             1                  4              2
     vector_recompute load_overlap time_per_pixel
     33             false        false   1.432887e-10
     165            false         true   1.436893e-10
     389            false         true   1.449263e-10
     789            false        false   1.444410e-10
     #+end_example

   - Now can make the same conclusion by using less measurement. For
    example here we try to take 80 points at with a totally random
    strategy and we most of the time we can get which are the more
    important parameters.
     #+begin_src R :results output :session :exports both
       summary(lm(data=df[sample(size = 80, x = 1:length(df$time_per_pixel),replace = F),],time_per_pixel ~ x_component_number + vector_length + y_component_number + vector_recompute + temporary_size + load_overlap )) 
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = time_per_pixel ~ x_component_number + vector_length + 
     y_component_number + vector_recompute + temporary_size + 
     load_overlap, data = df[sample(size = 80, x = 1:length(df$time_per_pixel), 
     replace = F), ])
     
     Residuals:
       Min         1Q     Median         3Q        Max 
     -1.750e-10 -5.990e-11 -1.045e-11  4.103e-11  3.183e-10 
     
     Coefficients:
                       Estimate Std. Error t value Pr(>|t|)    
     (Intercept)           3.554e-10  5.668e-11   6.270 2.28e-08 ***
     x_component_number    2.519e-11  2.210e-12  11.398  < 2e-16 ***
     vector_length         8.272e-12  2.308e-12   3.584 0.000608 ***
     y_component_number   -7.489e-11  1.211e-11  -6.183 3.27e-08 ***
     vector_recomputetrue  1.145e-10  2.437e-11   4.697 1.21e-05 ***
     temporary_size       -1.910e-11  1.217e-11  -1.570 0.120790    
     load_overlaptrue      5.258e-12  2.413e-11   0.218 0.828133    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1
     
     Residual standard error: 1.062e-10 on 73 degrees of freedom
     Multiple R-squared:  0.7412,	Adjusted R-squared:   0.72 
     F-statistic: 34.85 on 6 and 73 DF,  p-value: < 2.2e-16
     #+end_example

     #+end_src
   - Lets try better order
       #+begin_src R :results output graphics :file img/ordered_1.png :exports both :width 700 :height 500 :session
                  df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
                  attach(df)
                  # sorted <- df[order(x_component_number, -y_component_number, vector_length, vector_recompute, temporary_size, load_overlap ),]         
                  # sorted <- df[order( -vector_recompute, x_component_number, -y_component_number, vector_length, temporary_size, load_overlap),]        
                  # sorted <- df[order( -vector_recompute, x_component_number, -y_component_number, vector_length),]         
                  # sorted <- df[order(vector_length, -vector_recompute, -y_component_number, x_component_number),]         
                                                 # sorted <- df[order(x_component_number, -y_component_number, -vector_recompute, vector_length),]        
                  sorted <- df[order(x_component_number, -y_component_number, -vector_recompute, vector_length),]         
                  plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:img/ordered_1.png]]

** 2016-03-02
*** Meeting report
    Atlas ~ brute force?
    Berkley autotuning
    - Next meeting : 4 avril 14h
** 2016-03-07
*** Bruteforce on Pilipili2
**** Results
     - [[file:data/2016_03_07/pilipili2/10_19_36/Info10_19_36.org][Conditions of experiment]]
     - [[file:data/2016_03_07/pilipili2/10_19_36/Data10_19_36_parameters.yaml][Search space]]
     - [[file:data/2016_03_07/pilipili2/10_19_36/Data10_19_36.yaml][Results of experiment]]
**** Observations
     #+begin_src sh :results output :exports both
       ruby scripts/format_data.rb data/2016_03_07/pilipili2/10_19_36/Data10_19_36.yaml
     #+end_src

     #+RESULTS:

     - The structure is close to what was obtained earlier with a
       GTX960 but they are some little differences. We can see that
       we have 5 groups of points due to the five value that can take
       x_component_number. And in this groups we can distinguish 4
       others which seems to be related to the y_component_number. 

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, -y_component_number, -vector_recompute, vector_length),]         
       #+end_src

       #+RESULTS:
       : Warning message:
       : In Ops.factor(vector_recompute) : â-â not meaningful for factors

     - *Warning* it seems that the result are not coherent:
       #+begin_src R :results output :session :exports both
         df[df$time_per_pixel==min(df$time_per_pixel),]
       #+end_src

       #+RESULTS:
       :     x_component_number vector_length y_component_number temporary_size
       : 605                  4            16                  4              4
       :     vector_recompute load_overlap time_per_pixel
       : 605            false        false   1.747586e-10


       #+begin_src R :results output graphics :file img/pilipili2_gtx960_order.png :exports both :width 600 :height 400 :session
         plot(sorted$time_per_pixel)
       #+end_src
     
       #+RESULTS:
       [[file:img/pilipili2_gtx960_order.png]]
    
     - At first sight the other factors don't seems to have any
       impact, so try to order according to : 

       #+begin_src R :results output :session :exports both
         sorted <- df[order(x_component_number, -y_component_number ),]         
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:

     - But when we try to make a linear regression it tells me that
       vector_length and vector_recompute have an impact
       #+begin_src R :results output :session :exports both
         summary(lm(data=df,time_per_pixel ~ x_component_number + vector_length + y_component_number + vector_recompute  )) #+ temporary_size + load_overlap
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = time_per_pixel ~ x_component_number + vector_length + 
           y_component_number + vector_recompute, data = df)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -3.104e-10 -1.517e-10 -3.305e-11  6.809e-11  1.588e-09 

       Coefficients:
                              Estimate Std. Error t value Pr(>|t|)    
       (Intercept)           4.563e-10  2.605e-11  17.512  < 2e-16 ***
       x_component_number   -6.055e-12  1.543e-12  -3.925 9.42e-05 ***
       vector_length         1.758e-11  1.543e-12  11.393  < 2e-16 ***
       y_component_number   -8.612e-11  7.528e-12 -11.441  < 2e-16 ***
       vector_recomputetrue  1.868e-10  1.683e-11  11.096  < 2e-16 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.38e-10 on 795 degrees of freedom
       Multiple R-squared:  0.3343,	Adjusted R-squared:  0.3309 
       F-statistic: 99.81 on 4 and 795 DF,  p-value: < 2.2e-16
       #+end_example
       
       - Locally they have almost no impact:
         #+begin_src R :results output graphics :file img/pilipili2_local_impact.png :exports both :width 600 :height 400 :session
           sorted <- df[ order(x_component_number, -y_component_number, vector_recompute, vector_length),]         
           plot(sorted$time_per_pixel)
         #+end_src

         #+RESULTS:
         [[file:img/pilipili2_local_impact.png]]

       - Globally we can see that outliers are linked to
         vector_recompute=false
         #+begin_src R :results output graphics :file img/pilipili2_global_impact.png :exports both :width 600 :height 400 :session
           sorted <- df[ order(-vector_recompute, vector_length, -y_component_number, x_component_number),]         
           plot(sorted$time_per_pixel)
         #+end_src

         #+RESULTS:
         [[file:img/pilipili2_global_impact.png]]

       - Trying with another model:
         #+begin_src R :results output :session :exports both
           model <- lm(data=df,time_per_pixel ~ x_component_number + y_component_number + (vector_length : vector_recompute) +  (x_component_number : vector_length : vector_recompute))
           summary(model)
         #+end_src

         #+RESULTS:
         #+begin_example

         Call:
         lm(formula = time_per_pixel ~ x_component_number + y_component_number + 
             (vector_length:vector_recompute) + (x_component_number:vector_length:vector_recompute), 
             data = df)

         Residuals:
                Min         1Q     Median         3Q        Max 
         -4.746e-10 -8.865e-11 -1.000e-13  6.870e-11  1.108e-09 

         Coefficients:
                                                                Estimate Std. Error
         (Intercept)                                             4.575e-10  2.010e-11
         x_component_number                                      8.807e-12  1.742e-12
         y_component_number                                     -8.612e-11  5.614e-12
         vector_length:vector_recomputefalse                     1.938e-12  2.088e-12
         vector_length:vector_recomputetrue                      6.294e-11  2.088e-12
         x_component_number:vector_length:vector_recomputefalse -9.141e-14  2.528e-13
         x_component_number:vector_length:vector_recomputetrue  -4.703e-12  2.528e-13
                                                                t value Pr(>|t|)    
         (Intercept)                                             22.765  < 2e-16 ***
         x_component_number                                       5.056 5.31e-07 ***
         y_component_number                                     -15.340  < 2e-16 ***
         vector_length:vector_recomputefalse                      0.929    0.353    
         vector_length:vector_recomputetrue                      30.152  < 2e-16 ***
         x_component_number:vector_length:vector_recomputefalse  -0.362    0.718    
         x_component_number:vector_length:vector_recomputetrue  -18.605  < 2e-16 ***
         ---
         Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

         Residual standard error: 1.775e-10 on 793 degrees of freedom
         Multiple R-squared:  0.6307,	Adjusted R-squared:  0.6279 
         F-statistic: 225.7 on 6 and 793 DF,  p-value: < 2.2e-16
         #+end_example

     - Lets try to visualize with higher dimension:
       #+begin_src R :results output graphics :file img/multi_dim_pilipili2.png :exports both :width 800 :height 700 :session
         library(ggplot2)
         df$vector_length.cat <- as.factor(df$vector_length)
         ggplot(df) + aes(x=x_component_number, y=time_per_pixel, color=vector_recompute, shape=load_overlap) + geom_point(alpha=0.5) + facet_grid( vector_length ~ y_component_number)       
       #+end_src

       #+RESULTS:
       [[file:img/multi_dim_pilipili2.png]]

     - With this plot we see that in the different configuration the
       result is very similar except the with vector_recompute the
       bigger is the vector_length and the smaller is the
       x_component_number is and the bigger worst the performances but
       this case doesn't interest us. 

**** Quick study of optimization of Laplacian.rb
     To be able to understand the result I must first understand
     exactly what is done.
     
     The laplacian filter is optimized according to 6 parameters:
     - x_component_number and y_component_number : split the image into
       part on which a thread will work.
     - vector_length : Number of component that are vectorized
     - temporary_size : size of the temporary type
     - vector_recompute : As it is ARM code it prevent segfault on
       Intel. 
     - load_overlap : activate the synthetizing load optimization
** 2016-03-09
*** Changing the search space
    - By exlporing values for global_work_size and local_work_size
      - Local_work_size \to Number of work-items in a group. Limited by the
        physical device. 
      - Global_work_size \to Total number of work-items. Each dimension
        should be a multiple of the corresponding dimension in
        local_work_size and it also dependson the size of the work. So it 
        should be equal to the be number of work-groups *
        local_work_size.       
      - It seems that for the K40 GPU I can not have more than 256
        work item per work-group.
        In fact I'm only limited by the size of the work group but
        also by the number of element that can be load for a work
        group.
*** Bruteforce on pilipili2
**** Results
     - [[file:data/2016_03_11/pilipili2/19_13_54/Info19_13_54.org][Conditions of experiment]]
     - [[file:data/2016_03_11/pilipili2/19_13_54/Data19_13_54_parameters.yaml][Search space]]
     - [[file:data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml][Results of experiments]]
**** Formatting data script :Script:
       #+BEGIN_SRC ruby
         require 'yaml'
         require 'pp'
         require 'csv'
         input = ARGV[0]

         # h = YAML::load(File::open(input).read)
         h = YAML::load_documents(File::open(input).read)

         t = []
         t2 = []
         head = []

         h.first[0].each {|key, value| head.push key } 
         head.push :time_per_pixel

         h.each {|key, value| 
           t2 = []
           key.each { |key2, value2|
             t2.push value2
           }
           t2.push value
           t.push t2
         }

         CSV.open("/tmp/test.csv", "w"){ |f|
           f << head
           t.each{ |e|
             f << e
           }
         }                  
       #+END_SRC
**** Formatting data 2 :Script:
     #+BEGIN_SRC ruby :tangle scripts/format_data.rb
       require 'yaml'
       require 'pp'
       require 'csv'
       input = ARGV[0]

       t = []
       t2 = []
       head = []

       # h = YAML::load(File::open(input).read)
       h = YAML::load_documents(File::open(input).read){ |doc|

         if head.empty?
           # h.first[0].each {|key, value| head.push key }
           doc.first[0].each {|key, value| head.push key } 
           head.push :time_per_pixel
         end

         # h.each {|key, value| 
         doc.each {|key, value| 
           t2 = []
           key.each { |key2, value2|
             t2.push value2
           }
           t2.push value
           t.push t2
         }
       }

       CSV.open("/tmp/test.csv", "w"){ |f|
         f << head
         t.each{ |e|
           f << e
         }
       }
     #+END_SRC
**** Observations
     #+begin_src sh :results output :exports both
       ruby scripts/format_data.rb data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml
     #+end_src
     
     #+RESULTS:

     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       attach(df)
       summary(df)
     #+end_src

     #+RESULTS:
     #+begin_example
     The following objects are masked from df (pos = 3):

         load_overlap, local_work_size, temporary_size, time_per_pixel,
         vector_length, vector_recompute, x_component_number,
         y_component_number
      x_component_number vector_length  y_component_number temporary_size
      Min.   : 1.0       Min.   : 1.0   Min.   :1.00       Min.   :2     
      1st Qu.: 2.0       1st Qu.: 2.0   1st Qu.:1.75       1st Qu.:2     
      Median : 4.0       Median : 4.0   Median :2.50       Median :3     
      Mean   : 6.2       Mean   : 6.2   Mean   :2.50       Mean   :3     
      3rd Qu.: 8.0       3rd Qu.: 8.0   3rd Qu.:3.25       3rd Qu.:4     
      Max.   :16.0       Max.   :16.0   Max.   :4.00       Max.   :4     

      vector_recompute load_overlap    local_work_size time_per_pixel     
      true:2000        true:2000    [128, 1, 1]:200    Min.   :1.247e-10  
                                    [128, 2, 1]:200    1st Qu.:2.308e-10  
                                    [256, 1, 1]:200    Median :3.568e-10  
                                    [32, 1, 1] :200    Mean   :4.410e-10  
                                    [32, 2, 1] :200    3rd Qu.:5.040e-10  
                                    [32, 4, 1] :200    Max.   :2.420e-09  
                                    (Other)    :800
#+end_example

     #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_sg.png :exports both :width 800 :height 600 :session
       plot(df)
     #+end_src
     
     #+RESULTS:
     [[file:img/20160311/pilipili2/pilipili2_sg.png]]
     
     - Lets fit a model to see what are the factor that have an
       impaact and then refine the model by removing factors that
       don't have any significant impact and check the interactions
       #+begin_src R :results output :session :exports both
         summary(lm(data=df,time_per_pixel ~ x_component_number + y_component_number + vector_length + temporary_size +  factor(local_work_size)))

         # Par curiositÃ© 
         summary(lm(data=df[sample(1:length(df$x_component_number),size = 200,replace = FALSE),],time_per_pixel ~ x_component_number + y_component_number + vector_length + temporary_size +  factor(local_work_size)))

         summary(lm(data=df,time_per_pixel ~ x_component_number * y_component_number * vector_length)) # + temporary_size +  factor(local_work_size)

         summary(lm(data=df[df$x_component_number==1 & df$y_component_number==4 & df$vector_length==1,],time_per_pixel ~ temporary_size + factor(local_work_size)))
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = time_per_pixel ~ x_component_number + y_component_number + 
           vector_length + temporary_size + factor(local_work_size), 
           data = df)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -4.124e-10 -1.586e-10 -5.260e-11  1.101e-10  1.413e-09 

       Coefficients:
                                            Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                         4.817e-10  2.810e-11  17.145  < 2e-16 ***
       x_component_number                 -1.027e-11  9.989e-13 -10.283  < 2e-16 ***
       y_component_number                 -8.007e-11  4.874e-12 -16.428  < 2e-16 ***
       vector_length                       3.376e-11  9.989e-13  33.801  < 2e-16 ***
       temporary_size                     -8.882e-14  5.449e-12  -0.016  0.98700    
       factor(local_work_size)[128, 2, 1]  1.118e-11  2.437e-11   0.459  0.64637    
       factor(local_work_size)[256, 1, 1]  1.568e-11  2.437e-11   0.644  0.51993    
       factor(local_work_size)[32, 1, 1]   7.581e-11  2.437e-11   3.111  0.00189 ** 
       factor(local_work_size)[32, 2, 1]   2.476e-12  2.437e-11   0.102  0.91907    
       factor(local_work_size)[32, 4, 1]  -2.783e-12  2.437e-11  -0.114  0.90910    
       factor(local_work_size)[32, 8, 1]   7.394e-12  2.437e-11   0.303  0.76161    
       factor(local_work_size)[64, 1, 1]   2.301e-11  2.437e-11   0.944  0.34508    
       factor(local_work_size)[64, 2, 1]  -1.268e-12  2.437e-11  -0.052  0.95851    
       factor(local_work_size)[64, 4, 1]   9.419e-12  2.437e-11   0.386  0.69917    
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.437e-10 on 1986 degrees of freedom
       Multiple R-squared:  0.4359,	Adjusted R-squared:  0.4322 
       F-statistic:   118 on 13 and 1986 DF,  p-value: < 2.2e-16

       Call:
       lm(formula = time_per_pixel ~ x_component_number + y_component_number + 
           vector_length + temporary_size + factor(local_work_size), 
           data = df[sample(1:length(df$x_component_number), size = 50, 
               replace = FALSE), ])

       Residuals:
              Min         1Q     Median         3Q        Max 
       -4.758e-10 -1.220e-10 -2.107e-11  7.927e-11  9.323e-10 

       Coefficients:
                                            Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                         8.823e-10  1.844e-10   4.786 2.89e-05 ***
       x_component_number                 -5.166e-12  6.657e-12  -0.776  0.44275    
       y_component_number                 -1.033e-10  3.188e-11  -3.240  0.00257 ** 
       vector_length                       3.208e-11  7.069e-12   4.538 6.10e-05 ***
       temporary_size                     -6.956e-11  3.674e-11  -1.894  0.06634 .  
       factor(local_work_size)[128, 2, 1] -1.964e-10  1.594e-10  -1.232  0.22599    
       factor(local_work_size)[256, 1, 1] -2.297e-10  2.755e-10  -0.834  0.40993    
       factor(local_work_size)[32, 1, 1]  -8.517e-11  1.522e-10  -0.559  0.57930    
       factor(local_work_size)[32, 2, 1]  -4.067e-10  2.159e-10  -1.884  0.06771 .  
       factor(local_work_size)[32, 4, 1]  -1.508e-10  1.856e-10  -0.813  0.42177    
       factor(local_work_size)[32, 8, 1]  -5.817e-11  1.495e-10  -0.389  0.69955    
       factor(local_work_size)[64, 1, 1]  -2.941e-10  1.648e-10  -1.784  0.08279 .  
       factor(local_work_size)[64, 2, 1]  -1.105e-10  1.681e-10  -0.658  0.51502    
       factor(local_work_size)[64, 4, 1]  -1.923e-10  1.496e-10  -1.285  0.20694    
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.372e-10 on 36 degrees of freedom
       Multiple R-squared:  0.5141,	Adjusted R-squared:  0.3386 
       F-statistic:  2.93 on 13 and 36 DF,  p-value: 0.005383

       Call:
       lm(formula = time_per_pixel ~ x_component_number * y_component_number * 
           vector_length, data = df)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -4.722e-10 -1.029e-10 -1.970e-11  9.081e-11  1.130e-09 

       Coefficients:
                                                             Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                                          2.452e-10  2.520e-11   9.730  < 2e-16 ***
       x_component_number                                   2.071e-11  3.051e-12   6.788 1.49e-11 ***
       y_component_number                                  -4.981e-11  9.201e-12  -5.414 6.93e-08 ***
       vector_length                                        7.962e-11  3.051e-12  26.095  < 2e-16 ***
       x_component_number:y_component_number               -1.123e-12  1.114e-12  -1.008    0.314    
       x_component_number:vector_length                    -5.881e-12  3.695e-13 -15.918  < 2e-16 ***
       y_component_number:vector_length                    -7.072e-12  1.114e-12  -6.347 2.71e-10 ***
       x_component_number:y_component_number:vector_length  5.345e-13  1.349e-13   3.962 7.70e-05 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.008e-10 on 1992 degrees of freedom
       Multiple R-squared:  0.616,	Adjusted R-squared:  0.6147 
       F-statistic: 456.5 on 7 and 1992 DF,  p-value: < 2.2e-16

       Call:
       lm(formula = time_per_pixel ~ temporary_size + factor(local_work_size), 
           data = df[df$x_component_number == 1 & df$y_component_number == 
               4 & df$vector_length == 1, ])

       Residuals:
              Min         1Q     Median         3Q        Max 
       -3.576e-12 -1.469e-12  0.000e+00  1.469e-12  3.576e-12 

       Coefficients:
                                            Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                         1.334e-10  2.612e-12  51.056 2.13e-12 ***
       temporary_size                     -1.890e-12  5.993e-13  -3.154 0.011671 *  
       factor(local_work_size)[128, 2, 1]  3.680e-13  2.680e-12   0.137 0.893822    
       factor(local_work_size)[256, 1, 1] -8.104e-13  2.680e-12  -0.302 0.769234    
       factor(local_work_size)[32, 1, 1]   1.096e-10  2.680e-12  40.903 1.55e-11 ***
       factor(local_work_size)[32, 2, 1]   1.896e-11  2.680e-12   7.073 5.84e-05 ***
       factor(local_work_size)[32, 4, 1]   1.484e-12  2.680e-12   0.554 0.593215    
       factor(local_work_size)[32, 8, 1]  -3.554e-13  2.680e-12  -0.133 0.897422    
       factor(local_work_size)[64, 1, 1]   1.716e-11  2.680e-12   6.403 0.000125 ***
       factor(local_work_size)[64, 2, 1]  -1.290e-12  2.680e-12  -0.481 0.641876    
       factor(local_work_size)[64, 4, 1]   6.897e-13  2.680e-12   0.257 0.802697    
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.68e-12 on 9 degrees of freedom
       Multiple R-squared:  0.997,	Adjusted R-squared:  0.9936 
       F-statistic: 294.7 on 10 and 9 DF,  p-value: 4.455e-10
       #+end_example

      #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_lws_impact_best_comb.png :exports both :width 600 :height 400 :session
        library(ggplot2)
        ggplot(df[df$x_component_number==1 & df$y_component_number==4 & df$vector_length==1,]) + 
        aes(x=local_work_size, y=time_per_pixel) + 
        scale_y_log10() + 
        geom_boxplot() + 
        geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of the local work size the performances")
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_lws_impact_best_comb.png]]

     - We can see the impact of the local_work_size: 
       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_f_lws.png :exports both :width 800 :height 600 :session
         library(ggplot2)
         df$y_component_number.cat <- as.factor(df$y_component_number)
         df$vector_length.cat <- as.factor(df$vector_length)
         ggplot(df) + 
             aes(x=x_component_number, y=time_per_pixel, color=vector_length.cat) + 
             scale_y_log10() + 
             geom_point(alpha=0.5) + 
             facet_wrap(~ local_work_size, ncol=10) + 
             geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2)
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_f_lws.png]]

       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_bp_lws.png :exports both :width 600 :height 400 :session
         ggplot(df) + 
             aes(x=local_work_size, y=time_per_pixel) + 
             scale_y_log10() + 
             geom_boxplot() + 
             geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
             ggtitle("Impact of the local work size the performances") +
             theme(axis.text=element_text(size=12),
                axis.title=element_text(size=12))
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_bp_lws.png]]

     - x component number impact:
       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_x_comp_impact.png :exports both :width 600 :height 400 :session
         library(ggplot2)
         ggplot(df) + 
         aes(x=factor(x_component_number), y=time_per_pixel) + 
         scale_y_log10() + 
         geom_boxplot() + 
         geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
         ggtitle("Impact of the number of components on x-axis on the performances")
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_x_comp_impact.png]]

     - y component number impact:
       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_y_comp_impact.png :exports both :width 600 :height 400 :session
         library(ggplot2)
         ggplot(df) + 
         aes(x=factor(y_component_number), y=time_per_pixel) + 
         scale_y_log10() + 
         geom_boxplot() + 
         geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
         ggtitle("Impact of the number of components on y-axis on the performances")
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_y_comp_impact.png]]

     - vector length impact:
       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_v_len_impact.png :exports both :width 600 :height 400 :session
         library(ggplot2)
         ggplot(df) + 
         aes(x=factor(vector_length), y=time_per_pixel) + 
         scale_y_log10() + 
         geom_boxplot() + 
         geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
         ggtitle("Impact of size of vectors on the performances")
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_v_len_impact.png]]

     - The 3 factors:
       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_3_factors_impact.png :exports both :width 800 :height 500 :session
      library(ggplot2)
      library(gridExtra)

      p1 <- qplot(factor(df$x_component_number), df$time_per_pixel) + 
          scale_y_log10() + 
          geom_boxplot() + 
          geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
          ggtitle("Impact of x component number") +
          theme(axis.text=element_text(size=12),
                axis.title=element_text(size=14,face="bold"))

      p2 <- qplot(factor(df$y_component_number), df$time_per_pixel) + 
          scale_y_log10() + 
          geom_boxplot() + 
          geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
          ggtitle("Impact of y components number") +
          theme(axis.text=element_text(size=12),
                axis.title=element_text(size=14,face="bold"))

      p3 <- qplot(factor(df$vector_length), df$time_per_pixel) + 
          scale_y_log10() + 
          geom_boxplot() + 
          geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
          ggtitle("Impact of of the vector length") +
          theme(axis.text=element_text(size=12),
                axis.title=element_text(size=14,face="bold"))

      grid.arrange(p1, p2, p3, ncol=3, top="") 
     #+end_src

       #+RESULTS:
     [[file:img/20160311/pilipili2/pilipili2_3_factors_impact.png]]

**** Genetic algo on brute force results
       #+begin_src sh :results output :exports both
         ruby ../boast/optimizer_benchmarks/bench_optimizer.rb data/2016_03_11/pilipili2/19_13_54/Data19_13_54_parameters.yaml data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml
       #+end_src

       #+RESULTS:
       : {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       : 1.2466509034021744e-10
       : 2000
       : {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       : 1.2466509034021744e-10
       : 210
     - How frequently the genetic algo can hit the best value:
       #+begin_src sh :results output :exports both
         for i in `seq 1 100`; do
             ruby ../boast/optimizer_benchmarks/bench_optimizer.rb data/2016_03_11/pilipili2/19_13_54/Data19_13_54_parameters.yaml data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml -r data/2016_03_11/pilipili2/19_13_54/GenData19_13_54.yaml
         done
       #+end_src

       #+RESULTS:
       #+begin_example
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.355607181964973e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4719812116126017e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.505875915195742e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.592122967721286e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.2792532564187264e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4719812116126017e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5757451430312544e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.3677113531099145e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5757451430312544e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.4815754215803011e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5757451430312544e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4719812116126017e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.4651616091154568e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.5935495827052707e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5165358603283972e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5582289103262858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.4817793636426216e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4719812116126017e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2829227608170006e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.4815754215803011e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5757451430312544e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2875093575170066e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.505875915195742e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.592122967721286e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.4029326473013859e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2875093575170066e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.4817793636426216e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.3675932183855746e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.2762727494278176e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.3926561402808184e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5582289103262858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       #+end_example

       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_03_11/pilipili2/19_13_54/GenData19_13_54.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
         attach(df)
         summary(df)
       #+end_src

       #+RESULTS:
       #+begin_example
       The following objects are masked from df (pos = 3):

           load_overlap, local_work_size, temporary_size, time_per_pixel,
           vector_length, vector_recompute, x_component_number,
           y_component_number

       The following objects are masked from df (pos = 4):

           load_overlap, local_work_size, temporary_size, time_per_pixel,
           vector_length, vector_recompute, x_component_number,
           y_component_number

       The following objects are masked from df (pos = 7):

           load_overlap, local_work_size, temporary_size, time_per_pixel,
           vector_length, vector_recompute, x_component_number,
           y_component_number

       The following objects are masked from df (pos = 8):

           load_overlap, local_work_size, temporary_size, time_per_pixel,
           vector_length, vector_recompute, x_component_number,
           y_component_number
        x_component_number vector_length  y_component_number temporary_size
        Min.   :1.00       Min.   :1.00   Min.   :3.00       Min.   :2.0   
        1st Qu.:1.00       1st Qu.:1.00   1st Qu.:4.00       1st Qu.:2.0   
        Median :1.00       Median :1.00   Median :4.00       Median :4.0   
        Mean   :1.47       Mean   :1.37   Mean   :3.93       Mean   :3.2   
        3rd Qu.:2.00       3rd Qu.:2.00   3rd Qu.:4.00       3rd Qu.:4.0   
        Max.   :4.00       Max.   :4.00   Max.   :4.00       Max.   :4.0   

        vector_recompute load_overlap    local_work_size time_per_pixel     
        true:100         true:100     [64, 2, 1] :29     Min.   :1.247e-10  
                                      [128, 2, 1]:24     1st Qu.:1.258e-10  
                                      [256, 1, 1]:11     Median :1.273e-10  
                                      [32, 8, 1] :11     Mean   :1.354e-10  
                                      [128, 1, 1]: 8     3rd Qu.:1.462e-10  
                                      [32, 4, 1] : 7     Max.   :1.594e-10  
                                      (Other)    :10
#+end_example

       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_gen_100.png :exports both :width 700 :height 500 :session       
         # default <- par()
         # count <- table(df$time_per_pixel)
         # par(mar=c(11.1,5.1,2.1,2.1))
         # barplot(count, xlab="time_per_pixel", ylab="frequency", space=1, las=2)
         # par(default)

         ggplot(df) +
             aes(factor(time_per_pixel)) +
             geom_bar() +
             ggtitle("Optimal found by the genetic algorithm on 100 runs") +
             theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12))
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_gen_100.png]]


       On this 100 runs the global optimium is hit more 15% of the time.

       #+begin_src R :results output :session :exports both
         count
       #+end_src

       #+RESULTS:
       #+begin_example

       1.24665090340217e-10 1.25777380150395e-10 1.26405067536272e-10 
                         17                   17                    9 
       1.26451863659571e-10  1.2733542924771e-10 1.27627274942782e-10 
                          5                    5                    1 
       1.27925325641873e-10   1.282922760817e-10 1.28750935751701e-10 
                          1                    1                    2 
       1.35560718196497e-10 1.36759321838557e-10 1.36771135310991e-10 
                          1                    1                    1 
       1.39265614028082e-10 1.40293264730139e-10 1.45457283804712e-10 
                          1                    1                    7 
       1.46060948820559e-10 1.46516160911546e-10  1.4719812116126e-10 
                          5                    1                    4 
        1.4799300946579e-10  1.4815754215803e-10 1.48177936364262e-10 
                          4                    2                    2 
       1.50587591519574e-10  1.5165358603284e-10 1.55822891032629e-10 
                          2                    1                    2 
       1.57574514303125e-10 1.59212296772129e-10 1.59354958270527e-10 
                          4                    2                    1
       #+end_example

       - Here are the 30 first best combinations of the entire search space
         #+begin_src R :results output :session :exports both
           options(width=150)
           head(df[order(time_per_pixel),],n=30)
         #+end_src

         #+RESULTS:
         #+begin_example
              x_component_number vector_length y_component_number temporary_size vector_recompute load_overlap local_work_size time_per_pixel
         806                   1             1                  4              4             true         true     [128, 2, 1]   1.246651e-10
         1492                  1             1                  4              4             true         true      [64, 2, 1]   1.257774e-10
         276                   1             1                  4              4             true         true      [32, 8, 1]   1.264051e-10
         1028                  1             1                  4              4             true         true     [256, 1, 1]   1.264519e-10
         676                   1             1                  4              2             true         true      [64, 2, 1]   1.270515e-10
         241                   1             1                  4              2             true         true     [256, 1, 1]   1.273354e-10
         536                   1             1                  4              4             true         true     [128, 1, 1]   1.276273e-10
         1024                  1             1                  4              2             true         true     [128, 1, 1]   1.277809e-10
         1740                  1             1                  4              4             true         true      [64, 4, 1]   1.279253e-10
         1573                  1             1                  4              2             true         true      [32, 8, 1]   1.282923e-10
         1168                  1             1                  4              4             true         true      [32, 4, 1]   1.287509e-10
         680                   1             1                  4              2             true         true      [64, 4, 1]   1.288623e-10
         1588                  1             1                  4              2             true         true      [32, 4, 1]   1.296257e-10
         32                    1             1                  4              2             true         true     [128, 2, 1]   1.314790e-10
         77                    1             1                  3              4             true         true     [256, 1, 1]   1.355607e-10
         361                   1             1                  3              4             true         true      [32, 8, 1]   1.367593e-10
         1816                  1             1                  3              4             true         true      [64, 4, 1]   1.367711e-10
         1753                  1             1                  3              2             true         true      [64, 4, 1]   1.367997e-10
         684                   1             1                  3              4             true         true      [32, 4, 1]   1.369153e-10
         1991                  1             1                  3              4             true         true      [64, 2, 1]   1.371417e-10
         1167                  1             1                  3              2             true         true      [64, 2, 1]   1.376082e-10
         1885                  1             1                  3              2             true         true      [32, 8, 1]   1.377295e-10
         158                   1             1                  3              2             true         true     [128, 1, 1]   1.386640e-10
         514                   1             1                  3              4             true         true     [128, 2, 1]   1.392656e-10
         1059                  1             1                  3              4             true         true     [128, 1, 1]   1.393014e-10
         917                   1             1                  3              2             true         true     [256, 1, 1]   1.397919e-10
         613                   1             1                  3              2             true         true      [32, 4, 1]   1.402933e-10
         946                   1             1                  4              4             true         true      [64, 1, 1]   1.413883e-10
         135                   1             1                  4              4             true         true      [32, 2, 1]   1.431177e-10
         608                   1             1                  3              2             true         true     [128, 2, 1]   1.433538e-10
              y_component_number.cat vector_length.cat
         806                       4                 1
         1492                      4                 1
         276                       4                 1
         1028                      4                 1
         676                       4                 1
         241                       4                 1
         536                       4                 1
         1024                      4                 1
         1740                      4                 1
         1573                      4                 1
         1168                      4                 1
         680                       4                 1
         1588                      4                 1
         32                        4                 1
         77                        3                 1
         361                       3                 1
         1816                      3                 1
         1753                      3                 1
         684                       3                 1
         1991                      3                 1
         1167                      3                 1
         1885                      3                 1
         158                       3                 1
         514                       3                 1
         1059                      3                 1
         917                       3                 1
         613                       3                 1
         946                       4                 1
         135                       4                 1
         608                       3                 1
         #+end_example

       - Do we have lots of good combinations?
         #+begin_src sh :results output :exports both
           ruby scripts/format_data.rb data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml
         #+END_SRC

         #+RESULTS:

         #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_sp_rep.png :exports both :width 600 :height 400 :session
           df <- read.csv("/tmp/test.csv", strip.white=T,header=T)
           attach(df)
           x <- min(df$time_per_pixel)
           y <- max(df$time_per_pixel)
           b <- (y - x) / 1.2733542924771e-10
           library(ggplot2)
           ggplot(df) +
               aes(time_per_pixel) +
               geom_histogram(bins = b) +
               ggtitle("Repartion of combinations over the search space") +
               theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12))
         #+end_src

         #+RESULTS:
         [[file:img/20160311/pilipili2/pilipili2_sp_rep.png]]

** 2016-03-16
*** Optimal design 
    - Generating combination of local_work_size. Useless for the
        moment but could be usefull later 
        #+begin_src R :results output :session :exports both
          x <- list()
        count <- 1
        for( i in 1:4 ){ 
            for( j in 1:log2(2^i)-1 ){
                x[[count]] <-  c( 2^(i+4) / 2^j, 2^j )
                count <- count + 1
                x[[count]] <-  c( 2^j, 2^(i+4) / 2^j )
                count <- count + 1
            }
        }
        x
        #+end_src

        #+RESULTS:
        #+begin_example
      [[1]]
      [1] 32  1

      [[2]]
      [1]  1 32

      [[3]]
      [1] 64  1

      [[4]]
      [1]  1 64

      [[5]]
      [1] 32  2

      [[6]]
      [1]  2 32

      [[7]]
      [1] 128   1

      [[8]]
      [1]   1 128

      [[9]]
      [1] 64  2

      [[10]]
      [1]  2 64

      [[11]]
      [1] 32  4

      [[12]]
      [1]  4 32

      [[13]]
      [1] 256   1

      [[14]]
      [1]   1 256

      [[15]]
      [1] 128   2

      [[16]]
      [1]   2 128

      [[17]]
      [1] 64  4

      [[18]]
      [1]  4 64

      [[19]]
      [1] 32  8

      [[20]]
      [1]  8 32
      #+end_example
    - Building and applying D-Optimal design
      #+begin_src sh :results output :exports both
       ruby scripts/format_data.rb data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml
      #+end_src

      #+RESULTS:

      #+begin_src R :results output :session :exports both
        library(DoE.base)
        library(DoE.wrapper)
        Design.1 <- lhs.design( type= "maximin" , nruns= 500 ,nfactors= 5 ,digits= NULL ,seed=20049 , factor.names=list(log_x_component_number=c(0,4), y_component_number=c(1,4),
                                                                                                                        log_vector_length=c(0,4), local_work_size_index=c(1,10),
                                                                                                                        log_temporary_size=c(1,2) ) )
        ## creator element of design.info will be different, when using the command line command!
        # plot( Design.1 , select = c( "log_x_component_number","y_component_number",
        #                             "log_vector_length","local_work_size_index",
        #                             "log_temporary_size" ))
        Design.1.rounded <- round(Design.1) # Ideally we would like to express factor(local_work_size_index) but the Dopt.design does not know how to handle it
        Design.1.Dopt <- Dopt.design( 60 , data= Design.1.rounded , formula= 
                                                              "~(log_x_component_number  + y_component_number  + log_vector_length  + local_work_size_index  + log_temporary_size )^2" , nRepeat= 5 ,randomize= TRUE ,seed= 28517 )

        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        set <- data.frame()
        for(i in 1:nrow(Design.1.Dopt)){
            set <- rbind(set, df[ df$x_component_number == 2^Design.1.Dopt$log_x_component_number[i]
                                 & df$y_component_number == Design.1.Dopt$y_component_number[i]
                                 & df$vector_length == 2^Design.1.Dopt$log_vector_length[i]
                                 & df$temporary_size == 2^Design.1.Dopt$log_temporary_size[i] 
                                 & as.numeric(df$local_work_size) == Design.1.Dopt$local_work_size_index[i], ])


        }

        summary(lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length))  # + local_work_size + temporary_size
        summary(lm(data=set, time_per_pixel ~ x_component_number * y_component_number * vector_length))  # + local_work_size + temporary_size
        summary(lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length + x_component_number:vector_length))  # + local_work_size + temporary_size
      #+end_src

      #+RESULTS:
      #+begin_example
      Le chargement a nÃ©cessitÃ© le package : grid
      Le chargement a nÃ©cessitÃ© le package : conf.design

      Attachement du package : âDoE.baseâ

      The following objects are masked from âpackage:statsâ:

          aov, lm

      The following object is masked from âpackage:graphicsâ:

          plot.design

      The following object is masked from âpackage:baseâ:

          lengths
      Le chargement a nÃ©cessitÃ© le package : FrF2
      Le chargement a nÃ©cessitÃ© le package : rsm

      Call:
      lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
          vector_length, data = set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -4.493e-10 -2.389e-10 -5.766e-11  2.031e-10  8.749e-10 

      Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
      (Intercept)         6.540e-10  1.194e-10   5.478 1.06e-06 ***
      x_component_number -2.019e-11  6.648e-12  -3.037  0.00362 ** 
      y_component_number -8.546e-11  3.202e-11  -2.669  0.00994 ** 
      vector_length       4.126e-11  6.690e-12   6.167 8.11e-08 ***
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 3.449e-10 on 56 degrees of freedom
      Multiple R-squared:  0.5265,	Adjusted R-squared:  0.5011 
      F-statistic: 20.76 on 3 and 56 DF,  p-value: 3.617e-09

      Call:
      lm.default(formula = time_per_pixel ~ x_component_number * y_component_number * 
          vector_length, data = set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -5.829e-10 -7.267e-11 -1.375e-11  7.602e-11  5.229e-10 

      Coefficients:
                                                            Estimate Std. Error
      (Intercept)                                          2.574e-10  1.679e-10
      x_component_number                                   2.740e-11  1.705e-11
      y_component_number                                  -4.707e-11  5.665e-11
      vector_length                                        9.656e-11  1.432e-11
      x_component_number:y_component_number               -2.337e-12  5.615e-12
      x_component_number:vector_length                    -7.727e-12  1.661e-12
      y_component_number:vector_length                    -6.872e-12  5.127e-12
      x_component_number:y_component_number:vector_length  8.645e-13  5.453e-13
                                                          t value Pr(>|t|)    
      (Intercept)                                           1.533    0.131    
      x_component_number                                    1.607    0.114    
      y_component_number                                   -0.831    0.410    
      vector_length                                         6.743 1.27e-08 ***
      x_component_number:y_component_number                -0.416    0.679    
      x_component_number:vector_length                     -4.653 2.29e-05 ***
      y_component_number:vector_length                     -1.340    0.186    
      x_component_number:y_component_number:vector_length   1.585    0.119    
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 2.448e-10 on 52 degrees of freedom
      Multiple R-squared:  0.7784,	Adjusted R-squared:  0.7486 
      F-statistic:  26.1 on 7 and 52 DF,  p-value: 6.446e-15

      Call:
      lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
          vector_length + x_component_number:vector_length, data = set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -5.388e-10 -8.124e-11  9.820e-12  7.812e-11  6.241e-10 

      Coefficients:
                                         Estimate Std. Error t value Pr(>|t|)    
      (Intercept)                       3.131e-10  9.776e-11   3.203  0.00226 ** 
      x_component_number                2.108e-11  7.406e-12   2.847  0.00620 ** 
      y_component_number               -6.970e-11  2.313e-11  -3.013  0.00390 ** 
      vector_length                     8.010e-11  7.175e-12  11.163 9.36e-16 ***
      x_component_number:vector_length -5.426e-12  7.435e-13  -7.297 1.23e-09 ***
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 2.481e-10 on 55 degrees of freedom
      Multiple R-squared:  0.7594,	Adjusted R-squared:  0.7419 
      F-statistic:  43.4 on 4 and 55 DF,  p-value: < 2.2e-16
      #+end_example

      #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_OptD.png :exports both :width 600 :height 400 :session
        plot( Design.1.Dopt , select = c( "log_x_component_number","y_component_number","log_vector_length","local_work_size_index","log_temporary_size" ))
      #+end_src

      #+RESULTS:
      [[file:img/20160311/pilipili2/pilipili2_OptD.png]]

      #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_OptD_set.png :exports both :width 800 :height 600 :session
        plot(set)
      #+end_src

      #+RESULTS:
      [[file:img/20160311/pilipili2/pilipili2_OptD_set.png]]

      #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_OptD_model.png :exports both :width 800 :height 600 :session
        model <- lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length + x_component_number:vector_length)  # + local_work_size + temporary_size
        default <- par()
        par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
        plot(model)
        par(default)
      #+end_src

      #+RESULTS:
      [[file:img/20160311/pilipili2/pilipili2_OptD_model.png]]

    - How does it compare to a random sample?
        Some times it can find the impact of the x_component_number but
        it is rare and generally the R-squared is worse than the
        D-Opitmal set
        #+begin_src R :results output :session :exports both
          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          random_sample <- df[sample(1:length(df$x_component_number),size = 40,replace = FALSE),]
          summary(lm(data=random_sample, time_per_pixel ~ x_component_number + y_component_number + vector_length))  # + local_work_size + temporary_size
          summary(lm(data=random_sample, time_per_pixel ~ x_component_number * y_component_number * vector_length))  # + local_work_size + temporary_size
          summary(lm(data=random_sample, time_per_pixel ~ x_component_number + y_component_number + vector_length + x_component_number:vector_length))  # + local_work_size + temporary_size

        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
            vector_length, data = random_sample)

        Residuals:
               Min         1Q     Median         3Q        Max 
        -2.388e-10 -1.167e-10 -2.010e-11  9.716e-11  3.453e-10 

        Coefficients:
                             Estimate Std. Error t value Pr(>|t|)    
        (Intercept)         4.789e-10  6.469e-11   7.403 9.79e-09 ***
        x_component_number -6.879e-12  5.582e-12  -1.232   0.2259    
        y_component_number -8.009e-11  2.295e-11  -3.489   0.0013 ** 
        vector_length       2.786e-11  5.691e-12   4.896 2.07e-05 ***
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 1.581e-10 on 36 degrees of freedom
        Multiple R-squared:  0.5472,	Adjusted R-squared:  0.5095 
        F-statistic:  14.5 on 3 and 36 DF,  p-value: 2.364e-06

        Call:
        lm.default(formula = time_per_pixel ~ x_component_number * y_component_number * 
            vector_length, data = random_sample)

        Residuals:
               Min         1Q     Median         3Q        Max 
        -1.603e-10 -5.627e-11 -2.693e-11  3.685e-11  2.826e-10 

        Coefficients:
                                                              Estimate Std. Error
        (Intercept)                                          2.536e-10  9.209e-11
        x_component_number                                   1.089e-11  2.109e-11
        y_component_number                                  -2.340e-11  3.393e-11
        vector_length                                        9.764e-11  1.508e-11
        x_component_number:y_component_number               -5.327e-13  6.726e-12
        x_component_number:vector_length                    -8.234e-12  3.251e-12
        y_component_number:vector_length                    -2.291e-11  6.204e-12
        x_component_number:y_component_number:vector_length  2.005e-12  9.256e-13
                                                            t value Pr(>|t|)    
        (Intercept)                                           2.754 0.009627 ** 
        x_component_number                                    0.516 0.609212    
        y_component_number                                   -0.690 0.495359    
        vector_length                                         6.476 2.76e-07 ***
        x_component_number:y_component_number                -0.079 0.937361    
        x_component_number:vector_length                     -2.533 0.016410 *  
        y_component_number:vector_length                     -3.693 0.000824 ***
        x_component_number:y_component_number:vector_length   2.167 0.037818 *  
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 1.167e-10 on 32 degrees of freedom
        Multiple R-squared:  0.7809,	Adjusted R-squared:  0.7329 
        F-statistic: 16.29 on 7 and 32 DF,  p-value: 6.336e-09

        Call:
        lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
            vector_length + x_component_number:vector_length, data = random_sample)

        Residuals:
               Min         1Q     Median         3Q        Max 
        -3.402e-10 -7.496e-11 -1.920e-12  7.877e-11  2.814e-10 

        Coefficients:
                                           Estimate Std. Error t value Pr(>|t|)    
        (Intercept)                       3.534e-10  6.748e-11   5.237 7.83e-06 ***
        x_component_number                1.004e-11  6.943e-12   1.446  0.15699    
        y_component_number               -6.751e-11  2.046e-11  -3.300  0.00223 ** 
        vector_length                     4.963e-11  8.064e-12   6.154 4.84e-07 ***
        x_component_number:vector_length -3.350e-12  9.748e-13  -3.436  0.00154 ** 
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 1.387e-10 on 35 degrees of freedom
        Multiple R-squared:  0.6614,	Adjusted R-squared:  0.6227 
        F-statistic: 17.09 on 4 and 35 DF,  p-value: 7.386e-08
        #+end_example
      
    - How does it compare to LHS?
        #+begin_src R :results output :session :exports both
          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

          Design.2 <- lhs.design( type= "maximin" , nruns= 60 ,nfactors= 5 ,digits= NULL ,seed=20049 , factor.names=list(log_x_component_number=c(0,4), y_component_number=c(1,4),
                                                                                                                         log_vector_length=c(0,4), local_work_size_index=c(1,10),
                                                                                                                         log_temporary_size=c(1,2) ) )
          Design.2.rounded <- round(Design.2)

          lhs_sample <- data.frame()
          for(i in 1:nrow(Design.2.rounded)){
              lhs_sample <- rbind(lhs_sample, df[ x_component_number == 2^Design.2.rounded$log_x_component_number[i]
                                   & y_component_number == Design.2.rounded$y_component_number[i]
                                   & vector_length == 2^Design.2.rounded$log_vector_length[i]
                                   & temporary_size == 2^Design.2.rounded$log_temporary_size[i] 
                                   & as.numeric(local_work_size) == Design.2.rounded$local_work_size_index[i], ])


          }

          summary(lm(data=lhs_sample, time_per_pixel ~ x_component_number + y_component_number + vector_length))
          summary(lm(data=lhs_sample, time_per_pixel ~ x_component_number * y_component_number * vector_length))  # + local_work_size + temporary_size
          summary(lm(data=lhs_sample, time_per_pixel ~ x_component_number + y_component_number + vector_length + x_component_number:vector_length))  # + local_work_size + temporary_size

        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
            vector_length, data = lhs_sample)

        Residuals:
               Min         1Q     Median         3Q        Max 
        -3.862e-10 -1.577e-10 -4.072e-11  1.310e-10  9.883e-10 

        Coefficients:
                             Estimate Std. Error t value Pr(>|t|)    
        (Intercept)         5.544e-10  1.141e-10   4.861 9.84e-06 ***
        x_component_number -1.224e-11  7.188e-12  -1.703 0.094084 .  
        y_component_number -1.305e-10  3.546e-11  -3.682 0.000523 ***
        vector_length       4.272e-11  7.202e-12   5.931 1.97e-07 ***
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 2.626e-10 on 56 degrees of freedom
        Multiple R-squared:  0.4826,	Adjusted R-squared:  0.4549 
        F-statistic: 17.41 on 3 and 56 DF,  p-value: 4.153e-08

        Call:
        lm.default(formula = time_per_pixel ~ x_component_number * y_component_number * 
            vector_length, data = lhs_sample)

        Residuals:
               Min         1Q     Median         3Q        Max 
        -3.129e-10 -9.116e-11 -2.833e-11  4.119e-11  6.000e-10 

        Coefficients:
                                                              Estimate Std. Error
        (Intercept)                                         -9.618e-11  1.622e-10
        x_component_number                                   6.444e-11  2.416e-11
        y_component_number                                   4.243e-11  6.155e-11
        vector_length                                        1.674e-10  2.092e-11
        x_component_number:y_component_number               -1.328e-11  1.008e-11
        x_component_number:vector_length                    -1.690e-11  3.457e-12
        y_component_number:vector_length                    -3.424e-11  7.959e-12
        x_component_number:y_component_number:vector_length  3.517e-12  1.385e-12
                                                            t value Pr(>|t|)    
        (Intercept)                                          -0.593   0.5557    
        x_component_number                                    2.667   0.0102 *  
        y_component_number                                    0.689   0.4937    
        vector_length                                         8.000 1.27e-10 ***
        x_component_number:y_component_number                -1.316   0.1938    
        x_component_number:vector_length                     -4.889 1.01e-05 ***
        y_component_number:vector_length                     -4.302 7.48e-05 ***
        x_component_number:y_component_number:vector_length   2.539   0.0142 *  
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 1.832e-10 on 52 degrees of freedom
        Multiple R-squared:  0.7662,	Adjusted R-squared:  0.7347 
        F-statistic: 24.35 on 7 and 52 DF,  p-value: 2.504e-14

        Call:
        lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
            vector_length + x_component_number:vector_length, data = lhs_sample)

        Residuals:
               Min         1Q     Median         3Q        Max 
        -4.262e-10 -1.122e-10 -6.709e-11  7.745e-11  7.377e-10 

        Coefficients:
                                           Estimate Std. Error t value Pr(>|t|)    
        (Intercept)                       3.047e-10  1.034e-10   2.948 0.004692 ** 
        x_component_number                3.179e-11  9.961e-12   3.192 0.002337 ** 
        y_component_number               -1.162e-10  2.893e-11  -4.016 0.000181 ***
        vector_length                     8.310e-11  9.433e-12   8.809 4.28e-12 ***
        x_component_number:vector_length -8.423e-12  1.543e-12  -5.458 1.19e-06 ***
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 2.134e-10 on 55 degrees of freedom
        Multiple R-squared:  0.6644,	Adjusted R-squared:   0.64 
        F-statistic: 27.22 on 4 and 55 DF,  p-value: 1.758e-12
        #+end_example
      
    - More accurate D-Optimal
      #+begin_src sh :results output :exports both
       ruby scripts/format_data.rb data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml
      #+end_src

      #+RESULTS:

      #+begin_src R :results output :session :exports both
        library(DoE.base)
        library(DoE.wrapper)
        Design.1 <- lhs.design( type= "maximin" , nruns= 1000 ,nfactors= 5 ,digits= NULL ,seed=20049 , factor.names=list(log_x_component_number=c(0,4), y_component_number=c(1,4),
                                                                                                                        log_vector_length=c(0,4), local_work_size_index=c(1,10),
                                                                                                                        log_temporary_size=c(1,2) ) )
        ## creator element of design.info will be different, when using the command line command!
        # plot( Design.1 , select = c( "log_x_component_number","y_component_number",
        #                             "log_vector_length","local_work_size_index",
        #                             "log_temporary_size" ))
        Design.1.rounded <- round(Design.1) # Ideally we would like to express factor(local_work_size_index) but the Dopt.design does not know how to handle it
        Design.1.Dopt <- Dopt.design( 120 , data= Design.1.rounded , formula= 
                                                              "~(log_x_component_number  + y_component_number  + log_vector_length  + local_work_size_index  + log_temporary_size )^2" , nRepeat= 5 ,randomize= TRUE ,seed= 28517 )

        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        set <- data.frame()
        for(i in 1:nrow(Design.1.Dopt)){
            set <- rbind(set, df[ df$x_component_number == 2^Design.1.Dopt$log_x_component_number[i]
                                 & df$y_component_number == Design.1.Dopt$y_component_number[i]
                                 & df$vector_length == 2^Design.1.Dopt$log_vector_length[i]
                                 & df$temporary_size == 2^Design.1.Dopt$log_temporary_size[i] 
                                 & as.numeric(df$local_work_size) == Design.1.Dopt$local_work_size_index[i], ])


        }

        summary(lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length))  # + local_work_size + temporary_size
        summary(lm(data=set, time_per_pixel ~ x_component_number * y_component_number * vector_length))  # + local_work_size + temporary_size
        summary(lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length + x_component_number:vector_length))  # + local_work_size + temporary_size
      #+end_src

      #+RESULTS:

    - D-opt without LHS
      #+begin_src R :results output :session :exports both
        log_x_component_number = c()
        y_component_number = c()
        log_vector_length = c()
        log_temporary_size = c()
        local_work_size_index = c()
        for (x_comp in 0:4){
            for(y_comp in 1:4){
                for(vec_len in 0:4){
                    for(temp_size in 1:2){
                        for(lws in 1:10){
                            log_x_component_number[length(log_x_component_number)+1] = 2^x_comp 
                            y_component_number[length(y_component_number)+1] = y_comp 
                            log_vector_length[length(log_vector_length)+1] = 2^vec_len 
                            log_temporary_size[length(log_temporary_size)+1] = 2^temp_size 
                            local_work_size_index[length(local_work_size_index)+1] = lws 
                        }
                    }
                }
            }
        }

        pts <- data.frame(log_x_component_number,y_component_number,log_vector_length,log_temporary_size,local_work_size_index)

        Design.1.Dopt <- Dopt.design( 200 , data= pts , formula= 
                                                            "~(log_x_component_number  + y_component_number  + log_vector_length  + local_work_size_index  + log_temporary_size )^2" , nRepeat= 5 ,randomize= TRUE ,seed= 28517 )


        for(i in 1:nrow(Design.1.Dopt)){
            set <- rbind(set, df[ df$x_component_number == 2^Design.1.Dopt$log_x_component_number[i]
                                 & df$y_component_number == Design.1.Dopt$y_component_number[i]
                                 & df$vector_length == 2^Design.1.Dopt$log_vector_length[i]
                                 & df$temporary_size == 2^Design.1.Dopt$log_temporary_size[i] 
                                 & as.numeric(df$local_work_size) == Design.1.Dopt$local_work_size_index[i], ])


        }

        summary(lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length))  # + local_work_size + temporary_size
        summary(lm(data=set, time_per_pixel ~ x_component_number * y_component_number * vector_length))  # + local_work_size + temporary_size
        summary(lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length + x_component_number:vector_length))  # + local_work_size + temporary_size

      #+end_src

      #+RESULTS:
      #+begin_example

      Call:
      lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
          vector_length, data = set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -4.069e-10 -1.934e-10 -1.000e-10  2.042e-10  9.566e-10 

      Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
      (Intercept)         5.178e-10  4.189e-11  12.361  < 2e-16 ***
      x_component_number -1.516e-11  2.664e-12  -5.691 3.10e-08 ***
      y_component_number -6.877e-11  1.206e-11  -5.701 2.95e-08 ***
      vector_length       4.050e-11  2.576e-12  15.718  < 2e-16 ***
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 2.836e-10 on 288 degrees of freedom
      Multiple R-squared:  0.5133,	Adjusted R-squared:  0.5082 
      F-statistic: 101.2 on 3 and 288 DF,  p-value: < 2.2e-16

      Call:
      lm.default(formula = time_per_pixel ~ x_component_number * y_component_number * 
          vector_length, data = set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -5.090e-10 -6.158e-11 -1.017e-11  8.704e-11  6.056e-10 

      Coefficients:
                                                            Estimate Std. Error
      (Intercept)                                          2.464e-10  4.819e-11
      x_component_number                                   2.292e-11  6.110e-12
      y_component_number                                  -4.974e-11  1.685e-11
      vector_length                                        8.592e-11  5.537e-12
      x_component_number:y_component_number               -1.192e-12  2.108e-12
      x_component_number:vector_length                    -5.850e-12  6.445e-13
      y_component_number:vector_length                    -4.485e-12  1.961e-12
      x_component_number:y_component_number:vector_length  3.173e-13  2.264e-13
                                                          t value Pr(>|t|)    
      (Intercept)                                           5.114 5.82e-07 ***
      x_component_number                                    3.751 0.000213 ***
      y_component_number                                   -2.951 0.003431 ** 
      vector_length                                        15.519  < 2e-16 ***
      x_component_number:y_component_number                -0.565 0.572208    
      x_component_number:vector_length                     -9.077  < 2e-16 ***
      y_component_number:vector_length                     -2.287 0.022923 *  
      x_component_number:y_component_number:vector_length   1.402 0.162029    
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 1.95e-10 on 284 degrees of freedom
      Multiple R-squared:  0.7732,	Adjusted R-squared:  0.7677 
      F-statistic: 138.4 on 7 and 284 DF,  p-value: < 2.2e-16

      Call:
      lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
          vector_length + x_component_number:vector_length, data = set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -5.290e-10 -6.643e-11 -6.900e-13  8.697e-11  6.726e-10 

      Coefficients:
                                         Estimate Std. Error t value Pr(>|t|)    
      (Intercept)                       3.029e-10  3.134e-11   9.665  < 2e-16 ***
      x_component_number                2.001e-11  2.699e-12   7.414 1.38e-12 ***
      y_component_number               -7.267e-11  8.333e-12  -8.721 2.27e-16 ***
      vector_length                     7.478e-11  2.622e-12  28.524  < 2e-16 ***
      x_component_number:vector_length -5.063e-12  2.844e-13 -17.805  < 2e-16 ***
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 1.959e-10 on 287 degrees of freedom
      Multiple R-squared:  0.7687,	Adjusted R-squared:  0.7655 
      F-statistic: 238.5 on 4 and 287 DF,  p-value: < 2.2e-16
#+end_example

** 2016-03-21
*** Study of Nvidia architecture and programming model
**** General architecture
   - Contains several SMX with a global L2 memory:
      [[file:img/nvidia/nvidia_gk110.jpg]]
   - SMX: corresponds to OpenCL compute unit
     The register file is the set of registers that is shared by the
     threads in the SMX. There is a shared memory that allows threads
     to communicated between each others. In a SMX more than one
     threads block can be executed concurrently thus they have to
     share the ressources (registers, local memory and compute units). 
     - Characteristics of K40:
       - Max Warps: 64
       - Max threads: 2048
       - Max thread blocks: 16
       - Number of 32-bits registers: 65536
       - Shared memory: 48K
   - Notes: CUDA is scalar architecture. Vectorization does not brings
     anything?

     [[file:img/nvidia/smx.png]]
**** How does it works
     - Terminology Cuda <-> OpenCL
       | CUDA         | OpenCL       |
       | SMX          | Compute Unit |
       | Thread-block | Work Group   |
       | Grid         | NDRange      |
       | Warps        | Wave-front   |
     - Thread-blocks
       - Group of threads
       - 1 block is executed on one SMX
         It can not be executed on more than one SMX because the size
         of a block is limited by the number of threads and the number
         of memory ressources that are less than an SMX. But an SMX
         can execute many block at a time.
       - The program is splitted into thread-blocks that are dispatched
         on SMX.
       - In a thread-block threads can communicate and synchronized
         between them.
       - Each thread-block are independent from each others.
     - Warps 
       - group of 32 threads
       - Unit of scheduling, 32 threads are scheduled at a time.
       - Thread blocks are splitted into warps.
     - Local NDRange determine how the threads are schedule? 
**** Programming a GPU
     - Maximize performance 
       - keep busy the GPU as much as possible by maximizing the
         number of active threads. That means spliting correctly the
         work. A block represents how the work is distributed among
         the SMX. The size of a block is limited by a maximal number
         of threads and the quantity of memory available on a SMX.
         To have the maximum number of active threads the quantity of
         memory they use has to be small enough otherwise the
         occupancy will dicrease.
       - Reduce memory access
         - access pattern
         - locality
     - Number of register for a thread-block = the number of register
       used by the kernel * the number of thread in the block.
       More precisely: 
       ceil(number of register for the kernel x ceil(Number of thread
       per block,32), Number of register max per SMX / 32 )
**** Optimizing
     - Bigger thread-blocks \to more efficient data sharing
       but if not enough thread blocks \to SMX idle.
     - Wrapping together threads that have coherent execution
       avoid branch divergence
     - The size of thread-blocks
     - The quantity of data need per block/thread
     - Grouping memory access
     - The occupancy of a SMX depends on:
       - The number of threads per threads-block
       - The number of registers need per thread
       - The quantity of shared memory used by the thread-block
     - Maximizing occupancy doesn't necessary bring maximum
       performances.
    to 48.
    

*** Thinking about the search space
    - Pilipili2 platform :
      with the limit of 1024 threads the maximum number of component
      is 53.
    - Finding the right distribution of the work
      - In how many pieces shall we split the work?
        - How many threads do we need? = What size of the work of a
          thread?
          number of threads = number of pieces = image_size /
          (x_component_number * y_component_number) 
        - How the threads are grouped?
          - Finding the right size of the block \to enough block to
            avoid idle SMX. Big enough to have a more efficient data
            sharing.         
          - Block size are restricted by the maximal node of threads
            per block which is 1024 in the case of the K40 and by the
            quantity memory ressources of an SMX.
            The maximum number of threads per SMX can be reached if
            each threads uses less than 32 32bits-registers.
            Threads using 48 registers with a block size of 1024 we
            would have only one block per SMX at a time. But we 32
            registers per threads we would have 2 block at a time.
      - Few threads using lots of registers or lots of threads using
        few registers?
        Trade of between the number of component processed by a thread
        and the number of threads \to maximizing occupancy or not
      - Size and number of blocks
        Maximizing the number of SMX used or maximizing occupancy of
        an SMX.
      - Shape of the blocks
    - Finding the right amount of work per-threads
      It is determined by the quantity of component the thread has to
      process which is give by x_component_number x y_component_number
    
    - What do we want to describe?
    - What is the best formulation of the search?
      - x_comp * y_comp and lws_x * lws_y
      - nb_comp / x_comp and nb_thread / lws_x
**** Adding rules
     Added constraint mechanism to the OptimzationSpace. Constraint
     can be expressed by the mean of set of rules which simple boolean
     expressions 
** 2016-03-30
*** R explanations
    - What is exactly the t value?
      Does it compare the population means to the mean of the model?
      How do we interpret it?
      Does it have to be the closer that zero as possible?
*** Genetic Algo  
    - Generation limit 6, population size 10
       #+begin_src sh :results output :exports both
         DATE=`date +%Y_%m_%d`
         HOUR=`date +%H_%M_%S`
         mkdir -p data/$DATE
         mkdir -p data/$DATE/pilipili2/
         mkdir -p data/$DATE/pilipili2/$HOUR
         for i in `seq 1 100`; do
             ruby ../boast/optimizer_benchmarks/bench_optimizer.rb data/2016_03_11/pilipili2/19_13_54/Data19_13_54_parameters.yaml data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml -r data/$DATE/pilipili2/$HOUR/Gen.yaml
         done
       #+end_src

       #+RESULTS:
       #+begin_example
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       2.0395561797940489e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.386640103650782e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2829227608170006e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.6065195978784932e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       59
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.4651616091154568e-10
       77
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       82
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5126163282188272e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5836338267983517e-10
       82
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.7751437060682563e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       2.0642969462798655e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.5012345785385922e-10
       67
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       73
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.578352009085073e-10
       65
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.575261193496042e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5779168866016592e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.49649628722573e-10
       80
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       2.1326553446355615e-10
       65
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.5578905005894488e-10
       60
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.590561740096958e-10
       64
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.575261193496042e-10
       69
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.2792532564187264e-10
       61
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.592122967721286e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       1.5950281221489474e-10
       58
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>2, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       2.0908523222858496e-10
       86
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.6036169613743593e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.5921544538144275e-10
       70
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.547677150425057e-10
       77
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.5578905005894488e-10
       72
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       1.7548989072015348e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.6347924392063966e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.3675932183855746e-10
       71
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.590561740096958e-10
       72
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.5901888227910537e-10
       64
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5836338267983517e-10
       60
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5779168866016592e-10
       67
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 1, 1]}
       1.9101854861440305e-10
       75
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.2778089021568624e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2875093575170066e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.592122967721286e-10
       89
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.3691527116178554e-10
       88
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.3675932183855746e-10
       75
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.3675932183855746e-10
       72
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4985909684911903e-10
       64
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.5974870072656843e-10
       82
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.5935495827052707e-10
       74
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.607395525733797e-10
       67
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.3691527116178554e-10
       63
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>8, :y_component_number=>2, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       2.621397690949779e-10
       68
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       2.0564823945729724e-10
       65
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.4817793636426216e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.4815754215803011e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.6036169613743593e-10
       75
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       2.0294981249101428e-10
       72
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>8, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       2.214744585322556e-10
       71
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.6107789005500414e-10
       58
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       1.5946349843734293e-10
       82
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5271361682808377e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>2, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       2.6234927924119923e-10
       76
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.7511588913561927e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.57919893896012e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.6356704264910098e-10
       80
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2875093575170066e-10
       65
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5877653861513516e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.5827833170411175e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       1.8895472378649059e-10
       63
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>2, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 1, 1]}
       2.356149588346123e-10
       61
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.575261193496042e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.6429236743346444e-10
       78
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       1.5020474850241375e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.3979191045644557e-10
       65
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       2.0632542527372036e-10
       76
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.49649628722573e-10
       70
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.2792532564187264e-10
       75
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.7511588913561927e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.3691527116178554e-10
       57
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       1.6693137507068782e-10
       79
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.3926561402808184e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.5012345785385922e-10
       59
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.5966520530934737e-10
       62
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.578352009085073e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5582289103262858e-10
       80
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.7540887976059921e-10
       74
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2962572950269056e-10
       75
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5779168866016592e-10
       61
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>4, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       2.8900097603139324e-10
       83
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>8, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       2.0623395915723989e-10
       58
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.4872307664444858e-10
       75
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.6356704264910098e-10
       82
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.590561740096958e-10
       90
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.737334985611548e-10
       80
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.5177561489363142e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.737334985611548e-10
       73
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       2.0632542527372036e-10
       64
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2875093575170066e-10
       80
#+end_example

       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_03_30/pilipili2/18_16_33/Gen.yaml 
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
         attach(df)
         default <- par()
         count <- table(df$time_per_pixel)
         par(mar=c(11.1,5.1,2.1,2.1))
         barplot(count, xlab="time_per_pixel", ylab="frequency", space=1, las=2)
         par(default)
       #+end_src

       #+RESULTS:
       : Warning messages:
       : 1: In par(default) : le paramÃ¨tre graphique "cin" ne peut Ãªtre changÃ©
       : 2: In par(default) : le paramÃ¨tre graphique "cra" ne peut Ãªtre changÃ©
       : 3: In par(default) : le paramÃ¨tre graphique "csi" ne peut Ãªtre changÃ©
       : 4: In par(default) : le paramÃ¨tre graphique "cxy" ne peut Ãªtre changÃ©
       : 5: In par(default) : le paramÃ¨tre graphique "din" ne peut Ãªtre changÃ©
       : 6: In par(default) : le paramÃ¨tre graphique "page" ne peut Ãªtre changÃ©

** 2016-04-01
   - [ ] Have look at the too big residue error when vector recompute
     is false. 
*** OUT_OF_RESSOURCES constraints
   - Config limit
     #+BEGIN_EXAMPLE
      opt_space = OptimizationSpace::new( :x_component_number => [53],
                                     :vector_length      => [1],
                                     :y_component_number => [1],
                                     :temporary_size     => [2],
                                     :vector_recompute   => [true],
                                     :load_overlap       => [true],
                                     :threads_number => [1024],
                                     :threads_number_divider => [1]
                                     )
     #+END_EXAMPLE

     #+begin_src R :results output :session :exports both
       f <- function(elements_number, y_component_number=1, vector_length=1, temporary_size=2, threads_number=32) {
           vector_number <- ceiling((elements_number / y_component_number) / vector_length)

           tempload <- (vector_number * vector_length) / vector_length * vector_length
           temp <-  3 * vector_number * (y_component_number+2) * vector_length
           res <- vector_number * y_component_number * vector_length
           tempc <- 3 * vector_number * (y_component_number + 2) * temporary_size * vector_length
           resc <- vector_number * y_component_number * temporary_size * vector_length

           tot <- (tempload + temp + res + tempc + resc) * threads_number
       }

       g <- function(x) {
           f(elements_number = 24, y_component_number = 6, vector_length = x, temporary_size = 2, threads_number = 1024)
       }

                                               # curve(g, 1, 6)

       print(f(53,1,1,2,1024)) # OK
       print(f(elements_number = 53, y_component_number = 1, vector_length = 1, temporary_size = 1, threads_number = 1024)) 

       # :elements_number=>6, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false, :threads_number=>1024, :lws_y=>2 NOK
       print(f(elements_number = 6, y_component_number = 3, vector_length = 16, temporary_size = 2, threads_number = 1024)) 

       # :elements_number=>12, :y_component_number=>6, :vector_length=>16, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :threads_number=>1024, :lws_y=>512 NOK
       print(f(elements_number = 12, y_component_number = 6, vector_length = 16, temporary_size = 4, threads_number = 1024)) # This shoud be normally filtered

       # :elements_number=>3, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false, :threads_number=>1024, :lws_y=>2 NOK
       print(f(elements_number = 3, y_component_number = 3, vector_length = 16, temporary_size = 2, threads_number = 1024))
     #+end_src

     #+RESULTS:
     : [1] 1682432
     : [1] 1139712
     : [1] 901120
     : [1] 2473984
     : [1] 901120

     - Load_overlap seems to have a bigger impact than I tought:
     #+BEGIN_EXAMPLE
     {:elements_number=>3, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false, :threads_number=>1024, :lws_y=>512} NOK

     {:elements_number=>3, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :threads_number=>1024, :lws_y=>512} Ok     
     #+END_EXAMPLE

     In fact it either temp either tempload depending if load_overlap
     is true. And we also may have an additionnal cost if load_overlap
     is false: (y_comp + 2) * 3 * vector_number * vector_length

     
     And the casting also have a big impact, we need to take it into account:
        #+begin_src R :results output :session :exports both
          f <- function(elements_number, y_component_number=1, vector_length=1, temporary_size=2, load_overlap=0, threads_number=32) {
              vector_number <- ceiling((elements_number / y_component_number) / vector_length)

              tempload <- (1 - load_overlap) * (vector_number * vector_length) / vector_length * vector_length
              temp <-  load_overlap * 3 * vector_number * (y_component_number+2) * vector_length
              res <- vector_number * y_component_number * vector_length
              tempc <- 3 * vector_number * (y_component_number + 2) * temporary_size * vector_length
              # out_vec = (1 - load_overlap) * 3 * vector_number * (y_component_number + 2) * temporary_size * vector_length
              out_vec = (1 - load_overlap) * tempc
              resc <- vector_number * y_component_number * temporary_size * vector_length

              tot <- (tempload + temp + res + tempc + out_vec + resc) * threads_number
          }

          g <- function(x) {
              f(elements_number = 24, y_component_number = 2, vector_length = x, temporary_size = 2,threads_number = 1024)
          }

          plot(g, 1, 16)


          print(paste("OK:",f(elements_number = 53, y_component_number = 1, vector_length = 1, temporary_size = 2, load_overlap = 1, threads_number = 1024))) #OK

          # :elements_number=>6, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false, :threads_number=>1024, :lws_y=>2 NOK
          print(paste("NOK:",f(elements_number = 6, y_component_number = 3, vector_length = 16, temporary_size = 2, load_overlap = 0, threads_number = 1024)) )

          # :elements_number=>3, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false, :threads_number=>1024, :lws_y=>2 NOK
          print(paste("NOK:",f(elements_number = 3, y_component_number = 3, vector_length = 16, temporary_size = 2, load_overlap = 0, threads_number = 1024)))
          print(paste("OK:",f(elements_number = 3, y_component_number = 3, vector_length = 16, temporary_size = 2, load_overlap = 1, threads_number = 1024)))

          # :elements_number=>12, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false, :threads_number=>1024, :lws_y=>1
          print(paste("NOK:",f(elements_number = 12, y_component_number = 3, vector_length = 16, temporary_size = 2, load_overlap = 0, threads_number = 1024)))

          print(paste("NOK:",f(elements_number = 6, y_component_number = 6, vector_length = 8, temporary_size = 2, load_overlap = 0, threads_number = 1024)))
     #+end_src

        #+RESULTS:
        : [1] "OK: 1628160"
        : [1] "NOK: 1146880"
        : [1] "NOK: 1146880"
        : [1] "OK: 884736"
        : [1] "NOK: 1146880"
        : [1] "NOK: 942080"

     The first combination works but use more ressources than the
     other that do not works. There is something wrong with my modelization

     #+BEGIN_SRC ruby
       def compute_kernel_size(elements_number=1, y_component_number=1, vector_length=1, temporary_size=2, load_overlap=FALSE, threads_number=32)
         vector_number = ((elements_number / y_component_number).to_f / vector_length).ceil
         l_o = load_overlap ? 1 : 0
         
         tempload = (1 - l_o) * (vector_number * vector_length) / vector_length * vector_length
         temp =  l_o * 3 * vector_number * (y_component_number+2) * vector_length
         res = vector_number * y_component_number * vector_length
         tempc = 3 * vector_number * (y_component_number + 2) * temporary_size * vector_length
         out_vec = (1 - l_o) * tempc
         resc = vector_number * y_component_number * temporary_size * vector_length
         
         return (tempload + temp + res + tempc + out_vec + resc) * threads_number
       end

       compute_kernel_size(53, 1, 1, 2, true, 1024)
       # compute_kernel_size(6, 3, 16, 2, false, 1024)
       # compute_kernel_size(6, 3, 16, 2, false, 1024)
       # compute_kernel_size(12, 6, 16, 4, true, 1024)
       # compute_kernel_size(3, 3, 16, 2, false, 1024)
       compute_kernel_size(3, 3, 16, 2, true, 1024)
       # compute_kernel_size(12, 3, 16, 2, false, 1024)
                   
     #+END_SRC

     #+RESULTS:
     : 884736

** 2016-04-06
*** Detailed format data :script:   
     #+BEGIN_SRC ruby :tangle scripts/format_data_detailed.rb
       require 'yaml'
       require 'pp'
       require 'csv'
       input = ARGV[0]

       tab = []
       tab_temp = []
       head = []

       # h = YAML::load(File::open(input).read)
       hash = YAML::load_documents(File::open(input).read){ |doc|

         if head.empty?
           doc.first[0].each {|key, value| head.push key } 
           head.push :run_index
           head.push :time_per_pixel
         end

         doc.each {|combination, sizes| 
           

           sizes.each{|size, runs|
             runs.each_index{|index|
               tab_temp = []    
               combination.each { |option, option_value|
                 tab_temp.push option_value
               }
               tab_temp.push size[0]
               tab_temp.push size[1]
               tab_temp.push index
               tab_temp.push runs[index]
               tab.push tab_temp
             }
           }
         }
       }

       CSV.open("/tmp/test.csv", "w"){ |f|
         f << head
         tab.each{ |e|
           f << e
         }
       }

     #+END_SRC

*** Bruteforce pilipili2
**** Results
     - [[file:data/2016_04_02/pilipili2/19_13_54/Info19_38_38.org][Conditions of experiment]]
     - [[file:data/2016_04_02/pilipili2/19_38_38/Data19_38_38_parameters.yaml][Search space]]
     - [[file:data/test_space_2016_04_02_2.yaml][Results of experiments]]
**** Observations

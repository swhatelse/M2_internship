#+TITLE:  LabBook
#+AUTHOR: Steven QUINITO MASNADA
#+BABEL: :tangle yes
#+TAGS: Arnaud(a) Brice(b) Script(s) Analysis (c) Ruby(r) R(t) deprecated(d) Modifications(m)

* TODO [10/15]
  - [X] Run brute force with load_overlap = [true,false]
    and different combination of local_work_size
  - [X] Try D-Optimal design if we can get enough information
  - [X] Add checkpointing mechanism
  - [X] Add Constraint mechanism
  - [ ] Correctly tune the Genetic algo
  - [X] Express the search in two different ways
  - [ ] Find how many points do we need for the D-Optimal
  - [X] Correct the bug of nil seed in the brute force optimizer
  - [ ] Take a look to statistic of extreme events and minimum
    estimtation
  - [X] Check when to give the report \to 15 juin 2016, 12H
  - [X] Testing simple method like a gradian descent
  - [ ] Run brute force on another plate form 
  - [X] Constraints for genetic algorithm
  - [ ] Bug in optimizer benchmark with the constraints
  - [X] Ask on stackoverflow for the backsolve problem
* Memo
  - Get opencl platform
    #+begin_src R :results output :session :exports both
      require 'opencl_ruby_ffi'
      OpenCL::get_platforms
    #+end_src
  - Get usefull info
    #+begin_src sh :results output :exports both
      inxi -Fx
    #+end_src
  - Find opened tty
    #+begin_src sh :results output :exports both
      ps -ft pts/0 -t pts/2    
    #+end_src
  - Bench optimizer
   #+begin_src sh :results output :exports both
     OPTIMIZER_LOG_FILE=/tmp/test2.yaml OPTIMIZER_LOG=true ruby bench_optimizer.rb test_parameters.yaml test.yaml
   #+end_src
  - Tmux
    Detach : ctrl + b d
* Installation
  Here the installation that download and install al the necessary tools.
** Base
   #+begin_src sh :results output :exports both :tangle ../setup.sh
     #!/bin/bash
   #+end_src
*** Directory
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      ROOT_DIR=$PWD
      BOAST_DIR=$ROOT_DIR/boast
      DARWIN_DIR=$ROOT_DIR/darwinning
      BOAST_LIG_DIR=$ROOT_DIR/boast-lig
      TOOLS_DIR=$ROOT_DIR/apps
    #+end_src
*** Ruby
   #+begin_src sh :results output :exports both :tangle ../setup.sh
     echo "=========== Install ruby ============="
     gksudo "apt-get install -y ruby ruby-dev"
   #+end_src
*** Install fortran
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      echo "=========== Install fortran ============="
      gksudo "apt-get install -y gfortran"
    #+end_src
*** Install Opencl
    Download from here http://developer.amd.com/tools-and-sdks/opencl-zone/amd-accelerated-parallel-processing-app-sdk/
    #+begin_src sh :results output :exports both
      VENDOR=`cat /proc/cpuinfo | grep -m 1 'vendor_id' | cut -d: -f2 | awk '{print $1}'`
      mkdir -p $TOOLS_DIR
      if [ "$VENDOR" = "AuthenticAMD" ] ; then
          cd $TOOLS_DIR
          
      fi
    #+end_src

    #+RESULTS:
    : AuthenticAMD

   #+begin_src sh :results output :exports both :tangle ../setup.sh
     echo "=========== Install OpenCL ============="
     gksudo "apt-get install -y ocl-icd-libopencl1 ocl-icd-opencl-dev"
     if [ "$HOSTNAME" = "titan" ] ; then
         mkdir -p $TOOLS_DIR
         cd $TOOLS_DIR
         gksudo "apt-get install -y rpm alien libnuma1"
         wget http://registrationcenter.intel.com/irc_nas/4181/opencl_runtime_14.2_x64_4.5.0.8.tgz
         tar xvzf opencl_runtime_14.2_x64_4.5.0.8.tgz
         cd pset_opencl_runtime_14.1_x64_4.5.0.8/rpm/
         fakeroot alien --to-deb opencl-1.2-intel-cpu-4.5.0.8-1.x86_64.rpm
         gksudo "dpkg -i opencl-1.2-intel-cpu_4.5.0.8-2_amd64.deb"
         gksudo "mkdir -p /etc/OpenCL"
         gksudo "mkdir -p /etc/OpenCL/vendors"
         gksudo "cp /opt/intel/opencl-1.2-4.5.0.8/etc/intel64.icd /etc/OpenCL/vendors/"
     else
         gksudo "apt-get install -y nvidia-opencl-icd-352 nvidia-libopencl1-352"
     fi
   #+end_src

** Boast
   #+begin_src sh :results output :exports both :tangle ../setup.sh
     echo "========= Installing Boast ========="
     cd $ROOT_DIR
     git clone git@github.com:Nanosim-LIG/boast.git
     cd $BOAST_DIR
     gem build *.gemspec
     gem install --user-install *.gem
   #+end_src
   
   To avoid retriving from internet:
   #+begin_src sh :results output :exports both
     gem install --user-install -l *.gem
   #+end_src

** Darwining
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      echo "========= Installing Darwining ========="
      cd $ROOT_DIR
      git clone git@github.com:Nanosim-LIG/darwinning.git
      cd $DARWIN_DIR
      gem build *.gemspec
      gem install --user-install *.gem
    #+end_src

   Install minitest:
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      gem install --user-install minitest
    #+end_src

** Boast-lig
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      echo "========= Installing Boast-lig ========="
      cd $ROOT_DIR
      git clone https://forge.imag.fr/anonscm/git/boast/boast.git boast-lig
    #+end_src

** Grid5k setup
*** Reserving node
    -I : Interactive
    -l : list of parameters
    #+begin_src sh :results output :exports both
      oarsub -p "gpu='YES'" -I -t deploy -l nodes=nbNodes,walltime=duration
      oarsub -p "gpu='YES'" -t deploy -l nodes=nbNodes,walltime=duration -r 'yyyy-mm-dd hh:mm:ss'
    #+end_src
*** Deploying an environment
    -k : no password mode, using key ssh
    #+begin_src sh :results output :exports both
      kadeploy3 -a environment.env -f $OAR_FILE_NODES -k
    #+end_src
*** Connection:
     #+begin_src sh :results output :exports both
       ssh root@node
     #+end_src
*** BOAST
     #+begin_src sh :results output :exports both
       rsync -avzP --exclude '.git' boast squinitomasnada@access.grid5000.fr:~/grenoble/boast
       rsync -avzP --exclude '.git' boast-lig squinitomasnada@access.grid5000.fr:~/grenoble/boast
     #+end_src
** R
   sudo apt-get install liblas-dev liblapack-dev gsl-bin libgsl0-dev
   - Rcmdr
   - ggplot2
   - plyr
   - quantreg
   - extraGrid
   - gsl
   - polynom
   - DoE.base
   - DoE.wrapper
* February
** 2016-02-02 Notes from Arnaud :Arnaud:
- [[http://mescal.imag.fr/membres/arnaud.legrand/research/M2R_boast.pdf][internships]]
- Stephan Wild's slides at JLPC
- Pointer from Emmanuel Aggulo: [[https://www.gerad.ca/~orban/papers.html][Dominique Orban]]
  - http://dpo.github.io/opal/ One of these articles mentions the
    ability to handle nicely discrete and continuous factors.
  - http://www.gerad.ca/~orban/_static/templating.pdf
- Travaux de Grigori Fursin sur http://www.ctuning.org/ (machine
  learning/big data).
- [[https://hal.inria.fr/hal-00872482][Old article mentioning early results with BOAST]]

Have a look at
https://en.wikipedia.org/wiki/Genetic_algorithm#Limitations
** 2016-02-02
*** Summary discussion with Arnaud :Arnaud:
    Optimization can be seen as:
    - _Minimization problem_
      E.g gradient approach if the function is convexe and second
      derivative \to good conditions.
    - _Fixed Point problem_
      If k-Lipschitz property (f is contraction mapping) can converge very quickly.
      
    Those methods can be generic, we can apply f multiple time to have
    good "conditions".

    - A good starting point would be to characterize the autotuning
      search problem.
** 2016-02-05
*** Discussion with Brice :Brice:
    - Local search only gives local optimal. It is quicker but the
      result can far from the global optimal unless we know where to
      search.
    - It is important to be able to put a bound on the value we want
      to minimize/maximize.
    - Combining global and local
    - It would be interesting to see how a problem looks like when
      changing architecture, it is possible that the search space is
      different.  
** 2016-02-09
*** Summary of the discussion with Arnaud :Arnaud:
    - It is possible to translate the constraint problem into a
      non-constraint one \to moving the constraint into the Obj. Func.
      Use of barrier methods.
    - I have to try to generate data and analyze it with R.
*** Analyse des donnÃ©es autotuning de Brice                         :Brice:ATTACH:
    Retrieved from Arnaud.
:PROPERTIES:
:Attachments: res_arnaud.txt
:ID:       f8f8e899-bef1-40b7-add3-788636a18c68
:END:      
    
Formatting of the data to use it with R:
#+BEGIN_SRC ruby :results output :exports both :var output = "/tmp/file.csv" input="../data/f8/f8e899-bef1-40b7-add3-788636a18c68/res_arnaud.txt"
  require 'yaml'
  require 'pp'

  h = YAML::load(File::open(input).read)

  t = []

  h.each { |e|
    e[:measurements].each { |m|
       t.push e[:parameters].clone.update({:x => m[:dimension][0], :y => m[:dimension][1], :duration => m[:duration]})
    }
  }

  # pp t

  # puts YAML::dump(t)

  File::open(output,"w") { |f|
    head = t.first
    f.puts head.each_key.collect { |k| k}.join(", ")
    # head.each_key.to_a.join(", ")

    t.each { |e|
      f.puts e.each_value.collect { |k| k}.join(", ")
    }
  }
#+END_SRC
    
#+RESULTS:

#+begin_src R :results output :session :exports both :var input="/tmp/file.csv"
df = read.csv(input,strip.white=T,header=T)
head(df)
dim(df)
#+end_src

#+RESULTS:
#+begin_example
  x_component_number vector_length y_component_number temporary_size
1                  1            16                  2              2
2                  1            16                  2              2
3                  1            16                  2              2
4                  1            16                  2              2
5                  1            16                  2              2
6                  4            16                  1              2
  vector_recompute load_overlap    x    y    duration
1             true        false  768  432 0.020760143
2             true        false 2560 1600 0.256392290
3             true        false 2048 2048 0.263635845
4             true        false 5760 3240 1.180488412
5             true        false 7680 4320 2.076793683
6            false         true  768  432 0.005698532
[1] 4000    9
#+end_example

#+begin_src R :results output :session :exports both
str(df);
summary(df);
#+end_src

#+RESULTS:
#+begin_example
'data.frame':	4000 obs. of  9 variables:
 $ x_component_number: int  1 1 1 1 1 4 4 4 4 4 ...
 $ vector_length     : int  16 16 16 16 16 16 16 16 16 16 ...
 $ y_component_number: int  2 2 2 2 2 1 1 1 1 1 ...
 $ temporary_size    : int  2 2 2 2 2 2 2 2 2 2 ...
 $ vector_recompute  : Factor w/ 2 levels "false","true": 2 2 2 2 2 1 1 1 1 1 ...
 $ load_overlap      : Factor w/ 2 levels "false","true": 1 1 1 1 1 2 2 2 2 2 ...
 $ x                 : int  768 2560 2048 5760 7680 768 2560 2048 5760 7680 ...
 $ y                 : int  432 1600 2048 3240 4320 432 1600 2048 3240 4320 ...
 $ duration          : num  0.0208 0.2564 0.2636 1.1805 2.0768 ...
 x_component_number vector_length  y_component_number temporary_size
 Min.   : 1.0       Min.   : 1.0   Min.   :1.00       Min.   :2     
 1st Qu.: 2.0       1st Qu.: 2.0   1st Qu.:1.75       1st Qu.:2     
 Median : 4.0       Median : 4.0   Median :2.50       Median :3     
 Mean   : 6.2       Mean   : 6.2   Mean   :2.50       Mean   :3     
 3rd Qu.: 8.0       3rd Qu.: 8.0   3rd Qu.:3.25       3rd Qu.:4     
 Max.   :16.0       Max.   :16.0   Max.   :4.00       Max.   :4     
 vector_recompute load_overlap       x              y           duration       
 false:2000       false:2000   Min.   : 768   Min.   : 432   Min.   :0.000204  
 true :2000       true :2000   1st Qu.:2048   1st Qu.:1600   1st Qu.:0.006667  
                               Median :2560   Median :2048   Median :0.023882  
                               Mean   :3763   Mean   :2328   Mean   :0.072823  
                               3rd Qu.:5760   3rd Qu.:3240   3rd Qu.:0.088747  
                               Max.   :7680   Max.   :4320   Max.   :3.472179
#+end_example

#+begin_src R :results output :session :exports both
df$flops = with(df, 9*(x-2)*(y-2)/duration)
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 700 :sessiona
plot(df[!(names(df)%in%c("duration"))]);
#+end_src

#+RESULTS:
[[file:/tmp/babel-30783Rp/figure30781gR.png]]


#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
hist(df$flops)
#+end_src

#+RESULTS:
[[file:/tmp/babel-30783Rp/figure3078pJq.png]]


#+begin_src R :results output :session :exports both
names(df)
#+end_src

#+RESULTS:
:  [1] "x_component_number" "vector_length"      "y_component_number"
:  [4] "temporary_size"     "vector_recompute"   "load_overlap"
:  [7] "x"                  "y"                  "duration"
: [10] "flops"


#+begin_src R :results output :session :exports both
summary(lm(data=df, flops ~ (x_component_number + y_component_number + vector_length +
                            factor(temporary_size) + factor(vector_recompute) + factor(load_overlap) +
                            x + y)))
#+end_src

#+RESULTS:
#+begin_example
 
Call:
lm(formula = flops ~ (x_component_number + y_component_number + 
    vector_length + factor(temporary_size) + factor(vector_recompute) + 
    factor(load_overlap) + x + y), data = df)

Residuals:
       Min         1Q     Median         3Q        Max 
-4.532e+09 -1.340e+09 -4.478e+08  5.483e+08  1.239e+10 

Coefficients:
                               Estimate Std. Error t value Pr(>|t|)    
(Intercept)                   827765774  145444921   5.691 1.35e-08 ***
x_component_number            168354043    6796767  24.770  < 2e-16 ***
y_component_number            324149508   33163768   9.774  < 2e-16 ***
vector_length                  -7796884    6796767  -1.147 0.251390    
factor(temporary_size)4      -281970610   74156439  -3.802 0.000145 ***
factor(vector_recompute)true -178649163   74156439  -2.409 0.016038 *  
factor(load_overlap)true      518930201   74156439   6.998 3.04e-12 ***
x                               -104684      60695  -1.725 0.084649 .  
y                                291403     115655   2.520 0.011788 *  
---
Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

Residual standard error: 2.345e+09 on 3991 degrees of freedom
Multiple R-squared:  0.1661,	Adjusted R-squared:  0.1645 
F-statistic: 99.39 on 8 and 3991 DF,  p-value: < 2.2e-16
#+end_example

Bon, on n'y comprends pas grand chose, il y a un R^2 tout petit et
quand on regarde le plot d'interactions prÃ©cÃ©dent, on peut aisÃ©ment
voir que =vector_length= ou =x_component_number= ne sont pas du tout
linÃ©aires et qu'un modÃ¨le quadratique serait plus appropriÃ©. D'autre
part, il y a potentiellement des interactions entre ces diffÃ©rents
facteurs. Voyons ce que cela donne

#+begin_src R :results output :session :exports both
summary(lm(data=df, flops ~ (x_component_number + I(x_component_number^2) +
                            y_component_number + I(y_component_number^2) +
                            vector_length      + I(vector_length^2) +
                            factor(temporary_size) + factor(vector_recompute) + factor(load_overlap) +
                            x + y)^2))
#+end_src

#+RESULTS:
#+begin_example
 
Call:
lm(formula = flops ~ (x_component_number + I(x_component_number^2) + 
    y_component_number + I(y_component_number^2) + vector_length + 
    I(vector_length^2) + factor(temporary_size) + factor(vector_recompute) + 
    factor(load_overlap) + x + y)^2, data = df)

Residuals:
       Min         1Q     Median         3Q        Max 
-5.030e+09 -6.204e+08 -1.971e+07  5.541e+08  6.033e+09 

Coefficients:
                                                        Estimate Std. Error
(Intercept)                                            3.138e+09  5.423e+08
x_component_number                                    -8.962e+08  1.090e+08
I(x_component_number^2)                                1.128e+07  1.011e+07
y_component_number                                    -6.111e+08  5.901e+08
I(y_component_number^2)                               -9.967e+07  2.167e+08
vector_length                                         -8.809e+08  1.090e+08
I(vector_length^2)                                    -2.535e+07  1.011e+07
factor(temporary_size)4                                2.232e+09  2.461e+08
factor(vector_recompute)true                          -7.003e+08  2.461e+08
factor(load_overlap)true                              -2.130e+09  2.461e+08
x                                                      3.832e+05  1.991e+05
y                                                     -6.403e+05  3.719e+05
x_component_number:I(x_component_number^2)             1.452e+06  3.490e+05
x_component_number:y_component_number                  2.094e+08  7.516e+07
x_component_number:I(y_component_number^2)            -2.324e+07  1.480e+07
x_component_number:vector_length                       4.965e+08  1.203e+07
x_component_number:I(vector_length^2)                 -2.907e+07  6.795e+05
x_component_number:factor(temporary_size)4            -8.615e+07  2.960e+07
x_component_number:factor(vector_recompute)true        2.159e+08  2.960e+07
x_component_number:factor(load_overlap)true            2.061e+08  2.960e+07
x_component_number:x                                  -1.128e+04  2.422e+04
x_component_number:y                                   5.191e+04  4.616e+04
I(x_component_number^2):y_component_number            -8.905e+06  4.245e+06
I(x_component_number^2):I(y_component_number^2)        6.882e+05  8.357e+05
I(x_component_number^2):vector_length                 -2.094e+07  6.795e+05
I(x_component_number^2):I(vector_length^2)             1.273e+06  3.837e+04
I(x_component_number^2):factor(temporary_size)4        2.743e+06  1.671e+06
I(x_component_number^2):factor(vector_recompute)true  -1.063e+07  1.671e+06
I(x_component_number^2):factor(load_overlap)true      -7.750e+06  1.671e+06
I(x_component_number^2):x                             -1.683e+02  1.368e+03
I(x_component_number^2):y                             -9.343e+02  2.607e+03
y_component_number:I(y_component_number^2)             3.670e+07  2.713e+07
y_component_number:vector_length                       6.273e+08  7.516e+07
y_component_number:I(vector_length^2)                 -3.551e+07  4.245e+06
y_component_number:factor(temporary_size)4            -1.989e+08  1.849e+08
y_component_number:factor(vector_recompute)true       -1.776e+07  1.849e+08
y_component_number:factor(load_overlap)true            3.792e+08  1.849e+08
y_component_number:x                                  -6.029e+04  1.513e+05
y_component_number:y                                   1.512e+05  2.884e+05
I(y_component_number^2):vector_length                 -8.728e+07  1.480e+07
I(y_component_number^2):I(vector_length^2)             4.942e+06  8.357e+05
I(y_component_number^2):factor(temporary_size)4        2.857e+07  3.640e+07
I(y_component_number^2):factor(vector_recompute)true   4.712e+06  3.640e+07
I(y_component_number^2):factor(load_overlap)true      -7.237e+07  3.640e+07
I(y_component_number^2):x                              9.786e+03  2.979e+04
I(y_component_number^2):y                             -2.360e+04  5.677e+04
vector_length:I(vector_length^2)                       4.587e+06  3.490e+05
vector_length:factor(temporary_size)4                 -7.301e+08  2.960e+07
vector_length:factor(vector_recompute)true             6.302e+07  2.960e+07
vector_length:factor(load_overlap)true                 5.385e+08  2.960e+07
vector_length:x                                       -6.791e+04  2.422e+04
vector_length:y                                        1.823e+05  4.616e+04
I(vector_length^2):factor(temporary_size)4             4.266e+07  1.671e+06
I(vector_length^2):factor(vector_recompute)true       -6.746e+06  1.671e+06
I(vector_length^2):factor(load_overlap)true           -2.998e+07  1.671e+06
I(vector_length^2):x                                   3.807e+03  1.368e+03
I(vector_length^2):y                                  -1.029e+04  2.607e+03
factor(temporary_size)4:factor(vector_recompute)true  -2.517e+08  7.280e+07
factor(temporary_size)4:factor(load_overlap)true      -1.834e+08  7.280e+07
factor(temporary_size)4:x                              2.555e+04  5.959e+04
factor(temporary_size)4:y                             -6.267e+04  1.135e+05
factor(vector_recompute)true:factor(load_overlap)true  3.116e+08  7.280e+07
factor(vector_recompute)true:x                        -1.071e+04  5.959e+04
factor(vector_recompute)true:y                        -1.125e+03  1.135e+05
factor(load_overlap)true:x                            -4.277e+04  5.959e+04
factor(load_overlap)true:y                             1.277e+05  1.135e+05
x:y                                                   -3.127e+01  8.001e+00
                                                      t value Pr(>|t|)    
(Intercept)                                             5.787 7.71e-09 ***
x_component_number                                     -8.226 2.61e-16 ***
I(x_component_number^2)                                 1.116 0.264635    
y_component_number                                     -1.036 0.300474    
I(y_component_number^2)                                -0.460 0.645550    
vector_length                                          -8.085 8.20e-16 ***
I(vector_length^2)                                     -2.508 0.012185 *  
factor(temporary_size)4                                 9.070  < 2e-16 ***
factor(vector_recompute)true                           -2.845 0.004461 ** 
factor(load_overlap)true                               -8.653  < 2e-16 ***
x                                                       1.925 0.054320 .  
y                                                      -1.722 0.085220 .  
x_component_number:I(x_component_number^2)              4.160 3.25e-05 ***
x_component_number:y_component_number                   2.786 0.005366 ** 
x_component_number:I(y_component_number^2)             -1.571 0.116374    
x_component_number:vector_length                       41.266  < 2e-16 ***
x_component_number:I(vector_length^2)                 -42.784  < 2e-16 ***
x_component_number:factor(temporary_size)4             -2.911 0.003622 ** 
x_component_number:factor(vector_recompute)true         7.294 3.62e-13 ***
x_component_number:factor(load_overlap)true             6.964 3.85e-12 ***
x_component_number:x                                   -0.466 0.641385    
x_component_number:y                                    1.125 0.260777    
I(x_component_number^2):y_component_number             -2.098 0.035992 *  
I(x_component_number^2):I(y_component_number^2)         0.823 0.410285    
I(x_component_number^2):vector_length                 -30.818  < 2e-16 ***
I(x_component_number^2):I(vector_length^2)             33.185  < 2e-16 ***
I(x_component_number^2):factor(temporary_size)4         1.641 0.100889    
I(x_component_number^2):factor(vector_recompute)true   -6.362 2.21e-10 ***
I(x_component_number^2):factor(load_overlap)true       -4.637 3.66e-06 ***
I(x_component_number^2):x                              -0.123 0.902113    
I(x_component_number^2):y                              -0.358 0.720055    
y_component_number:I(y_component_number^2)              1.353 0.176258    
y_component_number:vector_length                        8.346  < 2e-16 ***
y_component_number:I(vector_length^2)                  -8.365  < 2e-16 ***
y_component_number:factor(temporary_size)4             -1.076 0.282210    
y_component_number:factor(vector_recompute)true        -0.096 0.923490    
y_component_number:factor(load_overlap)true             2.051 0.040360 *  
y_component_number:x                                   -0.398 0.690373    
y_component_number:y                                    0.524 0.600107    
I(y_component_number^2):vector_length                  -5.898 3.98e-09 ***
I(y_component_number^2):I(vector_length^2)              5.913 3.64e-09 ***
I(y_component_number^2):factor(temporary_size)4         0.785 0.432530    
I(y_component_number^2):factor(vector_recompute)true    0.129 0.897005    
I(y_component_number^2):factor(load_overlap)true       -1.988 0.046879 *  
I(y_component_number^2):x                               0.328 0.742588    
I(y_component_number^2):y                              -0.416 0.677657    
vector_length:I(vector_length^2)                       13.144  < 2e-16 ***
vector_length:factor(temporary_size)4                 -24.670  < 2e-16 ***
vector_length:factor(vector_recompute)true              2.130 0.033270 *  
vector_length:factor(load_overlap)true                 18.195  < 2e-16 ***
vector_length:x                                        -2.804 0.005077 ** 
vector_length:y                                         3.949 7.98e-05 ***
I(vector_length^2):factor(temporary_size)4             25.523  < 2e-16 ***
I(vector_length^2):factor(vector_recompute)true        -4.036 5.54e-05 ***
I(vector_length^2):factor(load_overlap)true           -17.935  < 2e-16 ***
I(vector_length^2):x                                    2.782 0.005421 ** 
I(vector_length^2):y                                   -3.948 8.03e-05 ***
factor(temporary_size)4:factor(vector_recompute)true   -3.458 0.000551 ***
factor(temporary_size)4:factor(load_overlap)true       -2.518 0.011825 *  
factor(temporary_size)4:x                               0.429 0.668131    
factor(temporary_size)4:y                              -0.552 0.581004    
factor(vector_recompute)true:factor(load_overlap)true   4.279 1.92e-05 ***
factor(vector_recompute)true:x                         -0.180 0.857361    
factor(vector_recompute)true:y                         -0.010 0.992093    
factor(load_overlap)true:x                             -0.718 0.472966    
factor(load_overlap)true:y                              1.124 0.260960    
x:y                                                    -3.909 9.43e-05 ***
---
Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

Residual standard error: 1.151e+09 on 3933 degrees of freedom
Multiple R-squared:  0.802,	Adjusted R-squared:  0.7987 
F-statistic: 241.3 on 66 and 3933 DF,  p-value: < 2.2e-16
#+end_example

Bon, lÃ , c'est pas mal, le R^2 n'est pas ridicule et bien des
paramÃ¨tres sont non significatifs (dont =x= et =y= mais on peut voir que
=x*y= l'est...).


IdÃ©alement, on voudrait donc maintenant rÃ©duire le modÃ¨le. J'enlÃ¨ve
ceux qui semblent sans importance: =x=, =y=, =y_component_number=. C'est un
peu pÃ©nible car =I(x_component_number^2)= est non significatif mais sa
contribution s'est perdue dans les interactions avec les autres
paramÃ¨tres. On voit l'intÃ©rÃªt qu'il y aurait ici Ã  utiliser une
approche MDL... D'autre part, certains paramÃ¨tres semblent significatifs
sans pour autant Ãªtre importants (par exemple =vector_recompute=)

#+begin_src R :results output :session :exports both
summary(lm(data=df, flops ~ (x_component_number + I(x_component_number^2) +
                            vector_length      + I(vector_length^2) +
                            factor(temporary_size) + factor(vector_recompute) + factor(load_overlap))^2))
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = flops ~ (x_component_number + I(x_component_number^2) +
    vector_length + I(vector_length^2) + factor(temporary_size) +
    factor(vector_recompute) + factor(load_overlap))^2, data = df)

Residuals:
       Min         1Q     Median         3Q        Max
-5.459e+09 -6.205e+08 -2.736e+07  5.874e+08  6.409e+09

Coefficients:
                                                        Estimate Std. Error
(Intercept)                                            1.531e+09  1.873e+08
x_component_number                                    -4.687e+08  7.410e+07
I(x_component_number^2)                               -8.632e+06  9.824e+06
vector_length                                          2.015e+08  7.410e+07
I(vector_length^2)                                    -8.669e+07  9.824e+06
factor(temporary_size)4                                1.900e+09  1.393e+08a
factor(vector_recompute)true                          -7.523e+08  1.393e+08
factor(load_overlap)true                              -1.588e+09  1.393e+08
x_component_number:I(x_component_number^2)             1.452e+06  3.868e+05
x_component_number:vector_length                       4.965e+08  1.333e+07
x_component_number:I(vector_length^2)                 -2.907e+07  7.531e+05
x_component_number:factor(temporary_size)4            -8.615e+07  3.280e+07
x_component_number:factor(vector_recompute)true        2.159e+08  3.280e+07
x_component_number:factor(load_overlap)true            2.061e+08  3.280e+07
I(x_component_number^2):vector_length                 -2.094e+07  7.531e+05
I(x_component_number^2):I(vector_length^2)             1.273e+06  4.253e+04
I(x_component_number^2):factor(temporary_size)4        2.743e+06  1.853e+06
I(x_component_number^2):factor(vector_recompute)true  -1.063e+07  1.853e+06
I(x_component_number^2):factor(load_overlap)true      -7.750e+06  1.853e+06
vector_length:I(vector_length^2)                       4.587e+06  3.868e+05
vector_length:factor(temporary_size)4                 -7.301e+08  3.280e+07
vector_length:factor(vector_recompute)true             6.302e+07  3.280e+07
vector_length:factor(load_overlap)true                 5.385e+08  3.280e+07
I(vector_length^2):factor(temporary_size)4             4.266e+07  1.853e+06
I(vector_length^2):factor(vector_recompute)true       -6.746e+06  1.853e+06
I(vector_length^2):factor(load_overlap)true           -2.998e+07  1.853e+06
factor(temporary_size)4:factor(vector_recompute)true  -2.517e+08  8.070e+07
factor(temporary_size)4:factor(load_overlap)true      -1.834e+08  8.070e+07
factor(vector_recompute)true:factor(load_overlap)true  3.116e+08  8.070e+07
                                                      t value Pr(>|t|)
(Intercept)                                             8.175 3.93e-16 ***
x_component_number                                     -6.325 2.81e-10 ***
I(x_component_number^2)                                -0.879 0.379645
vector_length                                           2.720 0.006564 **
I(vector_length^2)                                     -8.824  < 2e-16 ***
factor(temporary_size)4                                13.641  < 2e-16 ***
factor(vector_recompute)true                           -5.402 6.99e-08 ***
factor(load_overlap)true                              -11.406  < 2e-16 ***
x_component_number:I(x_component_number^2)              3.753 0.000177 ***
x_component_number:vector_length                       37.231  < 2e-16 ***
x_component_number:I(vector_length^2)                 -38.600  < 2e-16 ***
x_component_number:factor(temporary_size)4             -2.626 0.008662 **
x_component_number:factor(vector_recompute)true         6.581 5.29e-11 ***
x_component_number:factor(load_overlap)true             6.283 3.67e-10 ***
I(x_component_number^2):vector_length                 -27.804  < 2e-16 ***
I(x_component_number^2):I(vector_length^2)             29.940  < 2e-16 ***
I(x_component_number^2):factor(temporary_size)4         1.480 0.138824
I(x_component_number^2):factor(vector_recompute)true   -5.740 1.02e-08 ***
I(x_component_number^2):factor(load_overlap)true       -4.183 2.94e-05 ***
vector_length:I(vector_length^2)                       11.859  < 2e-16 ***
vector_length:factor(temporary_size)4                 -22.257  < 2e-16 ***
vector_length:factor(vector_recompute)true              1.921 0.054764 .
vector_length:factor(load_overlap)true                 16.415  < 2e-16 ***
I(vector_length^2):factor(temporary_size)4             23.028  < 2e-16 ***
I(vector_length^2):factor(vector_recompute)true        -3.641 0.000275 ***
I(vector_length^2):factor(load_overlap)true           -16.182  < 2e-16 ***
factor(temporary_size)4:factor(vector_recompute)true   -3.119 0.001825 **
factor(temporary_size)4:factor(load_overlap)true       -2.272 0.023127 *
factor(vector_recompute)true:factor(load_overlap)true   3.861 0.000115 ***
---
Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

Residual standard error: 1.276e+09 on 3971 degrees of freedom
Multiple R-squared:  0.7544,    Adjusted R-squared:  0.7526
F-statistic: 435.6 on 28 and 3971 DF,  p-value: < 2.2e-16
#+end_example

#+end_src

Y verrait-on plus clair en se concentrant sur les rÃ©sultats
"intÃ©ressants". Pas sÃ»r...

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 600 :session
plot(df[df$flops>1E10 & df$temporary_size==2 & df$vector_length==8 & df$load_overlap=="true",!(names(df) %in% c("duration","x","y"))]) # ,"temporary_size","vector_length"
#+end_src

#+RESULTS:
[[file:/tmp/babel-30783Rp/figure30782Tw.png]]

But as we have less points and do not cover the parameter space,
fitting the previous model is now meaningless.

Entered on [2015-11-19 jeu. 20:56]
** 2016-02-11
   - Wrong hypothesis can lead to bad solution \to need to make less
     hypothesis as possible.
** 2016-02-16
   - Activate performance logs:
     #+begin_src sh :results output :exports both
     OPTIMIZER_LOG_FILE=file OPTIMIZER_LOG=true ruby prog.rb
   #+end_src
   - Using bench_optimizer:
     #+begin_src sh :results output :exports both
     OPTIMIZER_LOG_FILE=/tmp/test2.yaml OPTIMIZER_LOG=true ruby bench_optimizer.rb test_parameters.yaml test.yaml
   #+end_src
   - Let's try to make a first experiment and how look likes the
     optimization space of the Laplacian.rb by running brute force on
     adonis nodes to see if we can see something interesting, and
     compare it with Brice's results. Let's also run the experiment
     several time to see how is the variability. 
   - Send to grenoble:
     #+begin_src sh :results output :exports both :tangle ../scripts/send_to_grenoble.sh
       BASE="$PWD/../.."
       ssh squinitomasnada@access.grid5000.fr 'mkdir -p ~/grenoble/boast'
       rsync -avzP --exclude '.git' $BASE/boast squinitomasnada@access.grid5000.fr:~/grenoble/boast
       rsync -avzP --exclude '.git' $BASE/boast-lig squinitomasnada@access.grid5000.fr:~/grenoble/boast
       rsync -avzP --exclude '.git' $BASE/org/scripts squinitomasnada@access.grid5000.fr:~/grenoble/boast
     #+end_src
   - Send to nodes:
     #+begin_src sh :results output :exports both :tangle ../scripts/send_to_nodes.sh
       #!/bin/bash
       BASE="$PWD/.."
       PREV_NODE=''
       while read NODE; do
           if [[ "$NODE" != "$PREV_NODE" ]]; then
               ssh root@$NODE 'mkdir -p ~/boast'
               rsync -avzP --exclude '.git' $BASE/boast root@$NODE:~/boast
               rsync -avzP --exclude '.git' $BASE/boast-lig root@$NODE:~/boast
               rsync -avzP --exclude '.git' $BASE/scripts root@$NODE:~/boast
               PREV_NODE=$NODE
               fi
       done < $OAR_NODE_FILE

     #+end_src

   - The results below are obtained from different executions of
     Laplacian.rb on adonis platforms. The best configuration is found
     as follow:
     - For each configurations:
       - For each size of image [768x432, 2560x1600, 2048x2048, 5760x3240,
         7680x4320]:
         - Laplacian is computed 4 times:
           - Each time is calculated the average time to compute a
             pixel (for a given image)
           - Keep the minimum of the average time to compute a pixel
         - Make the average of the of the min the different size of
           image
       - Keep the best value.

     - Which more formally would look like this:
       min(avg_k(min_j(t_i))) 
       let:
       - t be an image
       - i \in {0..3} is the number of try
       - j \in {768x432,2560x1600,2048x2048,5760x3240,7680x4320} be the sizes of images
       - k \in X which is the set of configuration.

       Here are the best configurations found:
     - Adonis-5 15:32:21
       - [[file:../data/2016_02_19/15_32_21_adonis-5/Info15_32_21.org][Infos-Adonis-5]] 
       - [[file:../data/2016_02_19/15_32_21_adonis-5/Data15_32_21.yaml][Results-Adonis-5]] 
       - Best candidate:
         #+BEGIN_SRC 
         {:x_component_number=>1, :vector_length=>8, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
         6.381553113495854e-10
         #+END_SRC
     - Adonis-9 15:23:23
       - [[file:../data/2016_02_19/15_23_23_adonis-9/Info15_23_23.org][Infos-Adonis-9]] 
       - [[file:../data/2016_02_19/15_23_23_adonis-9/Data15_23_23.yaml][Results-Adonis-9]] 
       - Best candidate:
         #+BEGIN_SRC 
         {:x_component_number=>1, :vector_length=>16, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
         6.379672182710354e-10
         #+END_SRC
     - Adonis-6 15:42:14
       - [[file:../data/2016_02_19/15_42_14_adonis-6/Info15_42_14.org][Infos-Adonis-6]] 
       - [[file:../data/2016_02_19/15_42_14_adonis-6/Data15_42_14.yaml][Results-Adonis-6]] 
       - Best candidate:
         #+BEGIN_SRC 
         {:x_component_number=>8, :vector_length=>8, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false}
         1.7839996605890094e-09
         #+END_SRC
     - Adonis-2 15:51:36
       - [[file:../data/2016_02_19/15_51_36_adonis-2/Info15_51_36.org][Infos-Adonis-2]] 
       - [[file:../data/2016_02_19/15_51_36_adonis-2/Data15_51_36.yaml][Results-Adonis-2]] 
       - Best candidate:
         #+BEGIN_SRC 
         {:x_component_number=>8, :vector_length=>8, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>false}
         1.7518950929881022e-09
         #+END_SRC
     It is seems we have a lot of variability (~3x)
   - Let's try to make some plots to see if the result have the same shape:
     - Formatting data:
       *Warning:* this is an outdated version
       #+BEGIN_SRC ruby
         require 'yaml'
         require 'pp'
         
         input = ARGV[0]
         
         # h = YAML::load(File::open("../data/2016_02_19/15_23_23_adonis-9/Data15_23_23.yaml").read)
         h = YAML::load(File::open(input).read)
         
         t = []
         t2 = []
         head = []
         
         h.first[0].each {|key, value| head.push key } 
         head.push :time_per_pixel
         
         h.each {|key, value| 
           t2 = []
           key.each { |key2, value2|
             t2.push value2
           }
           t2.push value
           t.push t2
         }
         
         # sorted = t.sort{ |a,b| (a[0] <=> b[0]) == 0 ? (a[1] <=> b[1]) == 0 ? (a[2] <=> b[2]) == 0 ? (a[3] <=> b[3]) == 0 ? a[4] ? a[5] ? 1 : 0 : 1 : (a[3] <=> b[3])  : (a[2] <=> b[2]) : (a[1] <=> b[1]) : (a[0] <=> b[0]) }
         
         File::open("/tmp/test.csv", "w"){ |f|
           f.puts head.collect{ |v| v }.join(", ")
           t.each{ |e|
             f.puts e.collect{ |v| v }.join(", ")
           }
         }
       #+END_SRC
     - Adonis-5 15:32:21
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_02_19/15_32_21_adonis-5/Data15_32_21.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure133112eT.png]]
     - Adonis-9 15:23:23:
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_02_19/15_23_23_adonis-9/Data15_23_23.yaml
       #+end_src

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]
       #+end_src

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-4721NXH/figure4721oFw.png]]
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         hist(sorted$time_per_pixel)
       #+end_src
   
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-12889xAc/figure12889LDa.png]]
     - Adonis-6 15:42:14
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_02_19/15_42_14_adonis-6/Data15_42_14.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]
       #+end_src

       #+RESULTS:
       : The following objects are masked from df (pos = 3):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure133113Ry.png]]

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         hist(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure13311pbB.png]]
     - Adonis-2 15:51:36
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_02_19/15_51_36_adonis-2/Data15_51_36.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:
       : The following objects are masked from df (pos = 3):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number
       : 
       : The following objects are masked from df (pos = 4):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure13311dEa.png]]
     - We can see that the structure is completly different between
       Adonis-5 and Adonis-6 it seemed to be due to some
       variability but Adonis-5 and Adonis-9 have the same structure
       and Adonis-6 and Adonis-2 also. So the difference is not
       related to a big variablity but to other things.
     - Lets have a look on Adonis-6 with another test:
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_02_22/15_14_33_adonis-6.grenoble.grid5000.fr/Data15_14_33.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:
       #+begin_example
       The following objects are masked from df (pos = 3):

           load_overlap, temporary_size, time_per_pixel, vector_length,
           vector_recompute, x_component_number, y_component_number

       The following objects are masked from df (pos = 4):

           load_overlap, temporary_size, time_per_pixel, vector_length,
           vector_recompute, x_component_number, y_component_number

       The following objects are masked from df (pos = 5):

           load_overlap, temporary_size, time_per_pixel, vector_length,
           vector_recompute, x_component_number, y_component_number
#+end_example

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure13311Rty.png]]

       - We have the same structure has before maybe there are some
         differences between Adonis platform.
** 2016-02-29
   - [X] Check if there are errors in the kernel computation
     Yes, there are!
   - [X] Check which implementation of OpenCL is used
     
   - Let's try with the check on adonis-9 and adonis-6:
     #+begin_src sh :session foo :results output :exports both 
       oarsub -p "gpu='YES' and network_address in ('adonis-9.grenoble.grid5000.fr', 'adonis-6.grenoble.grid5000.fr')" -t deploy -l nodes=2,walltime=3 -I
     #+end_src
   - Results adonis-6
     - 14:15:35
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_02_29/adonis-6.grenoble.grid5000.fr/14_15_35/Data14_15_35.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-9562LHG/figure95629pq.png]]
      
     - 15:12:51
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_02_29/adonis-6.grenoble.grid5000.fr/15_12_51/Data15_12_51.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:
       : The following objects are masked from df (pos = 3):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-9562LHG/figure9562WSM.png]]
   - Results adonis-9
     - 14:08:07
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_02_29/adonis-9.grenoble.grid5000.fr/14_08_07/Data14_08_07.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:
       : The following objects are masked from df (pos = 3):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number
       : 
       : The following objects are masked from df (pos = 4):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-9562LHG/figure9562K7k.png]]
     - 15:05:38
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_02_29/adonis-9.grenoble.grid5000.fr/15_05_38/Data15_05_38.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-9562LHG/figure9562YGy.png]]

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-10001xgG/figure10001vhG.png]]


   - The previous differences we had between adonis-6 and adonis-9
     came from the fact that on one machine the nvidia implementation
     of the opencl was not used.
* Mach
** 2016-03-01
 - Result on a machine with a GPU Nvidia GTX960 
   - [[file:../data/2016_03_01/pantheon/22_11_09/Info22_11_09.org][Conditions of experiment]]
   - [[file:../data/2016_03_01/pantheon/22_11_09/Data22_11_09_parameters.yaml][Search space]]
   - [[file:../data/2016_03_01/pantheon/22_11_09/Data22_11_09.yaml][Results of experiment]]
 - Observations:    
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_03_01/pantheon/22_11_09/Data22_11_09.yaml
       #+end_src

       #+RESULTS:

   - Best candidate:
     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       df[df$time_per_pixel==min(df$time_per_pixel),]
     #+end_src

     #+RESULTS:
     :    x_component_number vector_length y_component_number temporary_size
     : 33                  1             1                  4              4
     :    vector_recompute load_overlap time_per_pixel
     : 33            false        false   1.432887e-10

   - Lets plot simply the result
       #+begin_src R :results output graphics :file img/not_ordered.png :exports both :width 700 :height 500 :session
         plot(df$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:img/not_ordered.png]]
     - Here we can see no structure because the configuration are
       generated in random order 
   - Now lets try plot in certain order
       #+begin_src R :results output graphics :file img/ordered.png :exports both :width 700 :height 500 :session
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
     [[file:img/ordered.png]]

       #+begin_src R :results output graphics :file img/another_order.png :exports both :width 700 :height 500 :session
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(y_component_number, x_component_number,  temporary_size, vector_length,  vector_recompute, load_overlap),]         

         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
     [[file:img/another_order.png]]

   - Lets see what are the parameters that have the bigger impact:
     #+begin_src R :results output :session :exports both
       head(df)
     #+end_src

     #+RESULTS:
     #+begin_example
     x_component_number vector_length y_component_number temporary_size
     1                  1             2                  3              2
     2                  1             2                  1              2
     3                  4             2                  1              2
     4                 16             8                  3              4
     5                  2             4                  4              4
     6                  8             1                  3              4
     vector_recompute load_overlap time_per_pixel
     1            false        false   1.604461e-10
     2             true         true   4.561930e-10
     3            false         true   3.974526e-10
     4             true        false   5.710954e-10
     5            false        false   1.572302e-10
     6            false         true   3.197862e-10
     #+end_example

     #+begin_src R :results output :session :exports both
       summary(lm(data=df,time_per_pixel ~ x_component_number + vector_length + y_component_number + vector_recompute  )) # + temporary_size + load_overlap
     #+end_src

     #+RESULTS:
     #+begin_example
     
     Call:
     lm(formula = time_per_pixel ~ x_component_number + vector_length + 
     y_component_number + vector_recompute, data = df)
     
     Residuals:
       Min         1Q     Median         3Q        Max 
     -3.494e-10 -1.409e-10 -3.041e-11  8.200e-11  1.627e-09 
     
     Coefficients:
                       Estimate Std. Error t value Pr(>|t|)    
     (Intercept)           2.770e-10  2.622e-11  10.567   <2e-16 ***
     x_component_number    1.364e-11  1.552e-12   8.785   <2e-16 ***
     vector_length         2.308e-11  1.552e-12  14.870   <2e-16 ***
     y_component_number   -6.680e-11  7.575e-12  -8.819   <2e-16 ***
     vector_recomputetrue  2.162e-10  1.694e-11  12.763   <2e-16 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1
     
     Residual standard error: 2.395e-10 on 795 degrees of freedom
     Multiple R-squared:  0.404,	Adjusted R-squared:  0.401 
     F-statistic: 134.7 on 4 and 795 DF,  p-value: < 2.2e-16
     #+end_example

     We can see that temporary_size and load_overlap don't any impact on
     the result.

   - By keeping the best value for the most important parameters we can
    get the best times per pixel
     #+begin_src R :results output :session :exports both
       x = min(df$x_component_number)
       v = min(df$vector_length)
       y = max(df$y_component_number)
       min(df$time_per_pixel)
       df[df$x_component_number==x & df$y_component_number==y & df$vector_length == v & df$vector_recompute == "false", ]
     #+end_src

     #+RESULTS:
     #+begin_example
     [1] 1.432887e-10
     x_component_number vector_length y_component_number temporary_size
     33                   1             1                  4              4
     165                  1             1                  4              4
     389                  1             1                  4              2
     789                  1             1                  4              2
     vector_recompute load_overlap time_per_pixel
     33             false        false   1.432887e-10
     165            false         true   1.436893e-10
     389            false         true   1.449263e-10
     789            false        false   1.444410e-10
     #+end_example

   - Now can we make the same conclusion by using less measurement? For
    example here we try to take 80 points at with a totally random
    strategy and we see that most of the time we can get which are the more
    important parameters.
     #+begin_src R :results output :session :exports both
       summary(lm(data=df[sample(size = 80, x = 1:length(df$time_per_pixel),replace = F),],time_per_pixel ~ x_component_number + vector_length + y_component_number + vector_recompute + temporary_size + load_overlap )) 
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = time_per_pixel ~ x_component_number + vector_length + 
     y_component_number + vector_recompute + temporary_size + 
     load_overlap, data = df[sample(size = 80, x = 1:length(df$time_per_pixel), 
     replace = F), ])
     
     Residuals:
       Min         1Q     Median         3Q        Max 
     -1.750e-10 -5.990e-11 -1.045e-11  4.103e-11  3.183e-10 
     
     Coefficients:
                       Estimate Std. Error t value Pr(>|t|)    
     (Intercept)           3.554e-10  5.668e-11   6.270 2.28e-08 ***
     x_component_number    2.519e-11  2.210e-12  11.398  < 2e-16 ***
     vector_length         8.272e-12  2.308e-12   3.584 0.000608 ***
     y_component_number   -7.489e-11  1.211e-11  -6.183 3.27e-08 ***
     vector_recomputetrue  1.145e-10  2.437e-11   4.697 1.21e-05 ***
     temporary_size       -1.910e-11  1.217e-11  -1.570 0.120790    
     load_overlaptrue      5.258e-12  2.413e-11   0.218 0.828133    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1
     
     Residual standard error: 1.062e-10 on 73 degrees of freedom
     Multiple R-squared:  0.7412,	Adjusted R-squared:   0.72 
     F-statistic: 34.85 on 6 and 73 DF,  p-value: < 2.2e-16
     #+end_example

   - Lets try better order
       #+begin_src R :results output graphics :file img/ordered_1.png :exports both :width 700 :height 500 :session
                  df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
                  attach(df)
                  # sorted <- df[order(x_component_number, -y_component_number, vector_length, vector_recompute, temporary_size, load_overlap ),]         
                  # sorted <- df[order( -vector_recompute, x_component_number, -y_component_number, vector_length, temporary_size, load_overlap),]        
                  # sorted <- df[order( -vector_recompute, x_component_number, -y_component_number, vector_length),]         
                  # sorted <- df[order(vector_length, -vector_recompute, -y_component_number, x_component_number),]         
                                                 # sorted <- df[order(x_component_number, -y_component_number, -vector_recompute, vector_length),]        
                  sorted <- df[order(x_component_number, -y_component_number, -vector_recompute, vector_length),]         
                  plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:img/ordered_1.png]]

** 2016-03-02
*** Meeting report
    Atlas ~ brute force?
    Berkley autotuning
    - Next meeting : 4 avril 14h
** 2016-03-07
*** Bruteforce on Pilipili2
**** Results
     - [[file:../data/2016_03_07/pilipili2/10_19_36/Info10_19_36.org][Conditions of experiment]]
     - [[file:../data/2016_03_07/pilipili2/10_19_36/Data10_19_36_parameters.yaml][Search space]]
     - [[file:../data/2016_03_07/pilipili2/10_19_36/Data10_19_36.yaml][Results of experiment]]
**** Observations
     _WARNING_: I thought I was using the GPU but it seems that it is
     not the case because the vector length for the best combination
     should not be 16 because there is no vector support on NVIDIA GPUs.
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_03_07/pilipili2/10_19_36/Data10_19_36.yaml
     #+end_src

     #+RESULTS:

     - The structure is close to what was obtained earlier with a
       GTX960 but they are some little differences. We can see that
       we have 5 groups of points due to the five value that can take
       x_component_number. And in this groups we can distinguish 4
       others which seems to be related to the y_component_number. 

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, -y_component_number, -vector_recompute, vector_length),]         
       #+end_src

       #+RESULTS:
       : Warning message:
       : In Ops.factor(vector_recompute) : â-â not meaningful for factors

     - *Warning* it seems that the result are not coherent:
       #+begin_src R :results output :session :exports both
         df[df$time_per_pixel==min(df$time_per_pixel),]
       #+end_src

       #+RESULTS:
       :     x_component_number vector_length y_component_number temporary_size
       : 605                  4            16                  4              4
       :     vector_recompute load_overlap time_per_pixel
       : 605            false        false   1.747586e-10


       #+begin_src R :results output graphics :file img/pilipili2_gtx960_order.png :exports both :width 600 :height 400 :session
         plot(sorted$time_per_pixel)
       #+end_src
     
       #+RESULTS:
       [[file:img/pilipili2_gtx960_order.png]]
    
     - At first sight the other factors don't seems to have any
       impact, so try to order according to : 

       #+begin_src R :results output :session :exports both
         sorted <- df[order(x_component_number, -y_component_number ),]         
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:

     - But when we try to make a linear regression it tells me that
       vector_length and vector_recompute have an impact
       #+begin_src R :results output :session :exports both
         summary(lm(data=df,time_per_pixel ~ x_component_number + vector_length + y_component_number + vector_recompute  )) #+ temporary_size + load_overlap
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = time_per_pixel ~ x_component_number + vector_length + 
           y_component_number + vector_recompute, data = df)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -3.104e-10 -1.517e-10 -3.305e-11  6.809e-11  1.588e-09 

       Coefficients:
                              Estimate Std. Error t value Pr(>|t|)    
       (Intercept)           4.563e-10  2.605e-11  17.512  < 2e-16 ***
       x_component_number   -6.055e-12  1.543e-12  -3.925 9.42e-05 ***
       vector_length         1.758e-11  1.543e-12  11.393  < 2e-16 ***
       y_component_number   -8.612e-11  7.528e-12 -11.441  < 2e-16 ***
       vector_recomputetrue  1.868e-10  1.683e-11  11.096  < 2e-16 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.38e-10 on 795 degrees of freedom
       Multiple R-squared:  0.3343,	Adjusted R-squared:  0.3309 
       F-statistic: 99.81 on 4 and 795 DF,  p-value: < 2.2e-16
       #+end_example
       
       - Locally they have almost no impact:
         #+begin_src R :results output graphics :file img/pilipili2_local_impact.png :exports both :width 600 :height 400 :session
           sorted <- df[ order(x_component_number, -y_component_number, vector_recompute, vector_length),]         
           plot(sorted$time_per_pixel)
         #+end_src

         #+RESULTS:
         [[file:img/pilipili2_local_impact.png]]

       - Globally we can see that outliers are linked to
         vector_recompute=false
         #+begin_src R :results output graphics :file img/pilipili2_global_impact.png :exports both :width 600 :height 400 :session
           sorted <- df[ order(-vector_recompute, vector_length, -y_component_number, x_component_number),]         
           plot(sorted$time_per_pixel)
         #+end_src

         #+RESULTS:
         [[file:img/pilipili2_global_impact.png]]

       - Trying with another model:
         #+begin_src R :results output :session :exports both
           model <- lm(data=df,time_per_pixel ~ x_component_number + y_component_number + (vector_length : vector_recompute) +  (x_component_number : vector_length : vector_recompute))
           summary(model)
         #+end_src

         #+RESULTS:
         #+begin_example

         Call:
         lm(formula = time_per_pixel ~ x_component_number + y_component_number + 
             (vector_length:vector_recompute) + (x_component_number:vector_length:vector_recompute), 
             data = df)

         Residuals:
                Min         1Q     Median         3Q        Max 
         -4.746e-10 -8.865e-11 -1.000e-13  6.870e-11  1.108e-09 

         Coefficients:
                                                                Estimate Std. Error
         (Intercept)                                             4.575e-10  2.010e-11
         x_component_number                                      8.807e-12  1.742e-12
         y_component_number                                     -8.612e-11  5.614e-12
         vector_length:vector_recomputefalse                     1.938e-12  2.088e-12
         vector_length:vector_recomputetrue                      6.294e-11  2.088e-12
         x_component_number:vector_length:vector_recomputefalse -9.141e-14  2.528e-13
         x_component_number:vector_length:vector_recomputetrue  -4.703e-12  2.528e-13
                                                                t value Pr(>|t|)    
         (Intercept)                                             22.765  < 2e-16 ***
         x_component_number                                       5.056 5.31e-07 ***
         y_component_number                                     -15.340  < 2e-16 ***
         vector_length:vector_recomputefalse                      0.929    0.353    
         vector_length:vector_recomputetrue                      30.152  < 2e-16 ***
         x_component_number:vector_length:vector_recomputefalse  -0.362    0.718    
         x_component_number:vector_length:vector_recomputetrue  -18.605  < 2e-16 ***
         ---
         Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

         Residual standard error: 1.775e-10 on 793 degrees of freedom
         Multiple R-squared:  0.6307,	Adjusted R-squared:  0.6279 
         F-statistic: 225.7 on 6 and 793 DF,  p-value: < 2.2e-16
         #+end_example

     - Lets try to visualize with higher dimension:
       #+begin_src R :results output graphics :file img/multi_dim_pilipili2.png :exports both :width 800 :height 700 :session
         library(ggplot2)
         df$vector_length.cat <- as.factor(df$vector_length)
         ggplot(df) + aes(x=x_component_number, y=time_per_pixel, color=vector_recompute, shape=load_overlap) + geom_point(alpha=0.5) + facet_grid( vector_length ~ y_component_number)       
       #+end_src

       #+RESULTS:
       [[file:img/multi_dim_pilipili2.png]]

     - With this plot we see that in the different configuration the
       result is very similar except the with vector_recompute the
       bigger is the vector_length and the smaller is the
       x_component_number is and the bigger worst the performances but
       this case doesn't interest us. 

**** Quick study of optimization of Laplacian.rb
     To be able to understand the result I must first understand
     exactly what is done.
     
     The laplacian filter is optimized according to 6 parameters:
     - x_component_number and y_component_number : split the image into
       part on which a thread will work.
     - vector_length : Number of component that are vectorized
     - temporary_size : size of the temporary type
     - vector_recompute : As it is ARM code it prevent segfault on
       Intel. 
     - load_overlap : activate the synthetizing load optimization
** 2016-03-09
*** Changing the search space
    - By exlporing values for global_work_size and local_work_size
      - Local_work_size \to Number of work-items in a group. Limited by the
        physical device. 
      - Global_work_size \to Total number of work-items. Each dimension
        should be a multiple of the corresponding dimension in
        local_work_size and it also dependson the size of the work. So it 
        should be equal to the be number of work-groups *
        local_work_size.       
      - It seems that for the K40 GPU I can not have more than 256
        work item per work-group.
        In fact I'm only limited by the size of the work group but
        also by the number of element that can be load for a work
        group.
*** Bruteforce on pilipili2
**** Results
     - [[file:../data/2016_03_11/pilipili2/19_13_54/Info19_13_54.org][Conditions of experiment]]
     - [[file:../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_parameters.yaml][Search space]]
     - [[file:../data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml][Results of experiments]]
**** Formatting data script :Script:
       #+BEGIN_SRC ruby
         require 'yaml'
         require 'pp'
         require 'csv'
         input = ARGV[0]

         # h = YAML::load(File::open(input).read)
         h = YAML::load_documents(File::open(input).read)

         t = []
         t2 = []
         head = []

         h.first[0].each {|key, value| head.push key } 
         head.push :time_per_pixel

         h.each {|key, value| 
           t2 = []
           key.each { |key2, value2|
             t2.push value2
           }
           t2.push value
           t.push t2
         }

         CSV.open("/tmp/test.csv", "w"){ |f|
           f << head
           t.each{ |e|
             f << e
           }
         }                  
       #+END_SRC
**** Formatting data 2 :Script:
     #+BEGIN_SRC ruby :tangle ../scripts/format_data.rb
       require 'yaml'
       require 'pp'
       require 'csv'
       input = ARGV[0]

       t = []
       t2 = []
       head = []

       # h = YAML::load(File::open(input).read)
       h = YAML::load_documents(File::open(input).read){ |doc|

         if head.empty?
           # h.first[0].each {|key, value| head.push key }
           doc.first[0].each {|key, value| head.push key } 
           head.push :time_per_pixel
         end

         # h.each {|key, value| 
         doc.each {|key, value| 
           t2 = []
           key.each { |key2, value2|
             t2.push value2
           }
           t2.push value
           t.push t2
         }
       }

       CSV.open("/tmp/test.csv", "w"){ |f|
         f << head
         t.each{ |e|
           f << e
         }
       }
     #+END_SRC
**** Observations
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml
     #+end_src
     
     #+RESULTS:

     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       attach(df)
       summary(df)
     #+end_src

     #+RESULTS:
     #+begin_example
     The following objects are masked from df (pos = 3):

         load_overlap, temporary_size, time_per_pixel, vector_length,
         vector_recompute, y_component_number
      x_component_number vector_length  y_component_number temporary_size
      Min.   : 1.0       Min.   : 1.0   Min.   :1.00       Min.   :2     
      1st Qu.: 2.0       1st Qu.: 2.0   1st Qu.:1.75       1st Qu.:2     
      Median : 4.0       Median : 4.0   Median :2.50       Median :3     
      Mean   : 6.2       Mean   : 6.2   Mean   :2.50       Mean   :3     
      3rd Qu.: 8.0       3rd Qu.: 8.0   3rd Qu.:3.25       3rd Qu.:4     
      Max.   :16.0       Max.   :16.0   Max.   :4.00       Max.   :4     

      vector_recompute load_overlap    local_work_size time_per_pixel     
      true:2000        true:2000    [128, 1, 1]:200    Min.   :1.247e-10  
                                    [128, 2, 1]:200    1st Qu.:2.308e-10  
                                    [256, 1, 1]:200    Median :3.568e-10  
                                    [32, 1, 1] :200    Mean   :4.410e-10  
                                    [32, 2, 1] :200    3rd Qu.:5.040e-10  
                                    [32, 4, 1] :200    Max.   :2.420e-09  
                                    (Other)    :800
#+end_example

     #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_sg.png :exports both :width 800 :height 600 :session
       plot(df)
     #+end_src
     
     #+RESULTS:
     [[file:img/20160311/pilipili2/pilipili2_sg.png]]
     
     - Lets fit a model to see what are the factor that have an
       impaact and then refine the model by removing factors that
       don't have any significant impact and check the interactions
       #+begin_src R :results output :session :exports both
         summary(lm(data=df,time_per_pixel ~ x_component_number + y_component_number + vector_length + temporary_size +  factor(local_work_size)))

         # Par curiositÃ© 
         summary(lm(data=df[sample(1:length(df$x_component_number),size = 200,replace = FALSE),],time_per_pixel ~ x_component_number + y_component_number + vector_length + temporary_size +  factor(local_work_size)))

         summary(lm(data=df,time_per_pixel ~ x_component_number * y_component_number * vector_length)) # + temporary_size +  factor(local_work_size)

         summary(lm(data=df[df$x_component_number==1 & df$y_component_number==4 & df$vector_length==1,],time_per_pixel ~ temporary_size + factor(local_work_size)))
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = time_per_pixel ~ x_component_number + y_component_number + 
           vector_length + temporary_size + factor(local_work_size), 
           data = df)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -4.124e-10 -1.586e-10 -5.260e-11  1.101e-10  1.413e-09 

       Coefficients:
                                            Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                         4.817e-10  2.810e-11  17.145  < 2e-16 ***
       x_component_number                 -1.027e-11  9.989e-13 -10.283  < 2e-16 ***
       y_component_number                 -8.007e-11  4.874e-12 -16.428  < 2e-16 ***
       vector_length                       3.376e-11  9.989e-13  33.801  < 2e-16 ***
       temporary_size                     -8.882e-14  5.449e-12  -0.016  0.98700    
       factor(local_work_size)[128, 2, 1]  1.118e-11  2.437e-11   0.459  0.64637    
       factor(local_work_size)[256, 1, 1]  1.568e-11  2.437e-11   0.644  0.51993    
       factor(local_work_size)[32, 1, 1]   7.581e-11  2.437e-11   3.111  0.00189 ** 
       factor(local_work_size)[32, 2, 1]   2.476e-12  2.437e-11   0.102  0.91907    
       factor(local_work_size)[32, 4, 1]  -2.783e-12  2.437e-11  -0.114  0.90910    
       factor(local_work_size)[32, 8, 1]   7.394e-12  2.437e-11   0.303  0.76161    
       factor(local_work_size)[64, 1, 1]   2.301e-11  2.437e-11   0.944  0.34508    
       factor(local_work_size)[64, 2, 1]  -1.268e-12  2.437e-11  -0.052  0.95851    
       factor(local_work_size)[64, 4, 1]   9.419e-12  2.437e-11   0.386  0.69917    
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.437e-10 on 1986 degrees of freedom
       Multiple R-squared:  0.4359,	Adjusted R-squared:  0.4322 
       F-statistic:   118 on 13 and 1986 DF,  p-value: < 2.2e-16

       Call:
       lm(formula = time_per_pixel ~ x_component_number + y_component_number + 
           vector_length + temporary_size + factor(local_work_size), 
           data = df[sample(1:length(df$x_component_number), size = 50, 
               replace = FALSE), ])

       Residuals:
              Min         1Q     Median         3Q        Max 
       -4.758e-10 -1.220e-10 -2.107e-11  7.927e-11  9.323e-10 

       Coefficients:
                                            Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                         8.823e-10  1.844e-10   4.786 2.89e-05 ***
       x_component_number                 -5.166e-12  6.657e-12  -0.776  0.44275    
       y_component_number                 -1.033e-10  3.188e-11  -3.240  0.00257 ** 
       vector_length                       3.208e-11  7.069e-12   4.538 6.10e-05 ***
       temporary_size                     -6.956e-11  3.674e-11  -1.894  0.06634 .  
       factor(local_work_size)[128, 2, 1] -1.964e-10  1.594e-10  -1.232  0.22599    
       factor(local_work_size)[256, 1, 1] -2.297e-10  2.755e-10  -0.834  0.40993    
       factor(local_work_size)[32, 1, 1]  -8.517e-11  1.522e-10  -0.559  0.57930    
       factor(local_work_size)[32, 2, 1]  -4.067e-10  2.159e-10  -1.884  0.06771 .  
       factor(local_work_size)[32, 4, 1]  -1.508e-10  1.856e-10  -0.813  0.42177    
       factor(local_work_size)[32, 8, 1]  -5.817e-11  1.495e-10  -0.389  0.69955    
       factor(local_work_size)[64, 1, 1]  -2.941e-10  1.648e-10  -1.784  0.08279 .  
       factor(local_work_size)[64, 2, 1]  -1.105e-10  1.681e-10  -0.658  0.51502    
       factor(local_work_size)[64, 4, 1]  -1.923e-10  1.496e-10  -1.285  0.20694    
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.372e-10 on 36 degrees of freedom
       Multiple R-squared:  0.5141,	Adjusted R-squared:  0.3386 
       F-statistic:  2.93 on 13 and 36 DF,  p-value: 0.005383

       Call:
       lm(formula = time_per_pixel ~ x_component_number * y_component_number * 
           vector_length, data = df)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -4.722e-10 -1.029e-10 -1.970e-11  9.081e-11  1.130e-09 

       Coefficients:
                                                             Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                                          2.452e-10  2.520e-11   9.730  < 2e-16 ***
       x_component_number                                   2.071e-11  3.051e-12   6.788 1.49e-11 ***
       y_component_number                                  -4.981e-11  9.201e-12  -5.414 6.93e-08 ***
       vector_length                                        7.962e-11  3.051e-12  26.095  < 2e-16 ***
       x_component_number:y_component_number               -1.123e-12  1.114e-12  -1.008    0.314    
       x_component_number:vector_length                    -5.881e-12  3.695e-13 -15.918  < 2e-16 ***
       y_component_number:vector_length                    -7.072e-12  1.114e-12  -6.347 2.71e-10 ***
       x_component_number:y_component_number:vector_length  5.345e-13  1.349e-13   3.962 7.70e-05 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.008e-10 on 1992 degrees of freedom
       Multiple R-squared:  0.616,	Adjusted R-squared:  0.6147 
       F-statistic: 456.5 on 7 and 1992 DF,  p-value: < 2.2e-16

       Call:
       lm(formula = time_per_pixel ~ temporary_size + factor(local_work_size), 
           data = df[df$x_component_number == 1 & df$y_component_number == 
               4 & df$vector_length == 1, ])

       Residuals:
              Min         1Q     Median         3Q        Max 
       -3.576e-12 -1.469e-12  0.000e+00  1.469e-12  3.576e-12 

       Coefficients:
                                            Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                         1.334e-10  2.612e-12  51.056 2.13e-12 ***
       temporary_size                     -1.890e-12  5.993e-13  -3.154 0.011671 *  
       factor(local_work_size)[128, 2, 1]  3.680e-13  2.680e-12   0.137 0.893822    
       factor(local_work_size)[256, 1, 1] -8.104e-13  2.680e-12  -0.302 0.769234    
       factor(local_work_size)[32, 1, 1]   1.096e-10  2.680e-12  40.903 1.55e-11 ***
       factor(local_work_size)[32, 2, 1]   1.896e-11  2.680e-12   7.073 5.84e-05 ***
       factor(local_work_size)[32, 4, 1]   1.484e-12  2.680e-12   0.554 0.593215    
       factor(local_work_size)[32, 8, 1]  -3.554e-13  2.680e-12  -0.133 0.897422    
       factor(local_work_size)[64, 1, 1]   1.716e-11  2.680e-12   6.403 0.000125 ***
       factor(local_work_size)[64, 2, 1]  -1.290e-12  2.680e-12  -0.481 0.641876    
       factor(local_work_size)[64, 4, 1]   6.897e-13  2.680e-12   0.257 0.802697    
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.68e-12 on 9 degrees of freedom
       Multiple R-squared:  0.997,	Adjusted R-squared:  0.9936 
       F-statistic: 294.7 on 10 and 9 DF,  p-value: 4.455e-10
       #+end_example

      #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_lws_impact_best_comb.png :exports both :width 600 :height 400 :session
        library(ggplot2)
        ggplot(df[df$x_component_number==1 & df$y_component_number==4 & df$vector_length==1,]) + 
        aes(x=local_work_size, y=time_per_pixel) + 
        scale_y_log10() + 
        geom_boxplot() + 
        geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of the local work size the performances")
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_lws_impact_best_comb.png]]

     - We can see the impact of the local_work_size: 
       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_f_lws.png :exports both :width 800 :height 600 :session
         library(ggplot2)
         df$y_component_number.cat <- as.factor(df$y_component_number)
         df$vector_length.cat <- as.factor(df$vector_length)
         ggplot(df) + 
             aes(x=x_component_number, y=time_per_pixel, color=vector_length.cat) + 
             scale_y_log10() + 
             geom_point(alpha=0.5) + 
             facet_wrap(~ local_work_size, ncol=10) + 
             geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2)
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_f_lws.png]]

       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_bp_lws.png :exports both :width 600 :height 400 :session
         ggplot(df) + 
             aes(x=local_work_size, y=time_per_pixel) + 
             scale_y_log10() + 
             geom_boxplot() + 
             geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
             ggtitle("Impact of the local work size the performances") +
             theme(axis.text=element_text(size=12),
                axis.title=element_text(size=12))
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_bp_lws.png]]

     - x component number impact:
       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_x_comp_impact.png :exports both :width 600 :height 400 :session
         library(ggplot2)
         ggplot(df) + 
         aes(x=factor(x_component_number), y=time_per_pixel) + 
         scale_y_log10() + 
         geom_boxplot() + 
         geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
         ggtitle("Impact of the number of components on x-axis on the performances")
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_x_comp_impact.png]]

     - y component number impact:
       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_y_comp_impact.png :exports both :width 600 :height 400 :session
         library(ggplot2)
         ggplot(df) + 
         aes(x=factor(y_component_number), y=time_per_pixel) + 
         scale_y_log10() + 
         geom_boxplot() + 
         geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
         ggtitle("Impact of the number of components on y-axis on the performances")
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_y_comp_impact.png]]

     - vector length impact:
       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_v_len_impact.png :exports both :width 600 :height 400 :session
         library(ggplot2)
         ggplot(df) + 
         aes(x=factor(vector_length), y=time_per_pixel) + 
         scale_y_log10() + 
         geom_boxplot() + 
         geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
         ggtitle("Impact of size of vectors on the performances")
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_v_len_impact.png]]
     - The 3 factors:
       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_3_factors_impact.png :exports both :width 800 :height 500 :session
      library(ggplot2)
      library(gridExtra)

      p1 <- qplot(factor(df$x_component_number), df$time_per_pixel) + 
          # scale_y_log10() + 
          geom_boxplot() + 
          geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
          ggtitle("Impact of x component number") +
          theme(axis.text=element_text(size=12),
                axis.title=element_text(size=14,face="bold"))

      p2 <- qplot(factor(df$y_component_number), df$time_per_pixel) + 
          # scale_y_log10() + 
          geom_boxplot() + 
          geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
          ggtitle("Impact of y components number") +
          theme(axis.text=element_text(size=12),
                axis.title=element_text(size=14,face="bold"))

      p3 <- qplot(factor(df$vector_length), df$time_per_pixel) + 
          # scale_y_log10() + 
          geom_boxplot() + 
          geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
          ggtitle("Impact of of the vector length") +
          theme(axis.text=element_text(size=12),
                axis.title=element_text(size=14,face="bold"))

      grid.arrange(p1, p2, p3, ncol=3, top="") 
     #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_3_factors_impact.png]]

**** Genetic algo on brute force results
       #+begin_src sh :results output :exports both
         ruby ../boast/optimizer_benchmarks/bench_optimizer.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_parameters.yaml ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml
       #+end_src

       #+RESULTS:
       : {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       : 1.2466509034021744e-10
       : 2000
       : {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       : 1.2466509034021744e-10
       : 210
     - How frequently the genetic algo can hit the best value:
       #+begin_src sh :results output :exports both
         for i in `seq 1 100`; do
             ruby ../boast/optimizer_benchmarks/bench_optimizer.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_parameters.yaml ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml -r ../data/2016_03_11/pilipili2/19_13_54/GenData19_13_54.yaml
         done
       #+end_src

       #+RESULTS:
       #+begin_example
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.355607181964973e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4719812116126017e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.505875915195742e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.592122967721286e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.2792532564187264e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4719812116126017e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5757451430312544e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.3677113531099145e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5757451430312544e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.4815754215803011e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5757451430312544e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4719812116126017e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.4651616091154568e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.5935495827052707e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5165358603283972e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5582289103262858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.4817793636426216e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4719812116126017e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2829227608170006e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.4815754215803011e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5757451430312544e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2875093575170066e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.505875915195742e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.592122967721286e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.4029326473013859e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2875093575170066e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.4817793636426216e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.3675932183855746e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.2762727494278176e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.3926561402808184e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5582289103262858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       #+end_example

       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/GenData19_13_54.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
         attach(df)
         summary(df)
       #+end_src

       #+RESULTS:
       #+begin_example
       The following objects are masked from df (pos = 3):

           load_overlap, local_work_size, temporary_size, time_per_pixel,
           vector_length, vector_recompute, x_component_number,
           y_component_number

       The following objects are masked from df (pos = 4):

           load_overlap, local_work_size, temporary_size, time_per_pixel,
           vector_length, vector_recompute, x_component_number,
           y_component_number

       The following objects are masked from df (pos = 7):

           load_overlap, local_work_size, temporary_size, time_per_pixel,
           vector_length, vector_recompute, x_component_number,
           y_component_number

       The following objects are masked from df (pos = 8):

           load_overlap, local_work_size, temporary_size, time_per_pixel,
           vector_length, vector_recompute, x_component_number,
           y_component_number
        x_component_number vector_length  y_component_number temporary_size
        Min.   :1.00       Min.   :1.00   Min.   :3.00       Min.   :2.0   
        1st Qu.:1.00       1st Qu.:1.00   1st Qu.:4.00       1st Qu.:2.0   
        Median :1.00       Median :1.00   Median :4.00       Median :4.0   
        Mean   :1.47       Mean   :1.37   Mean   :3.93       Mean   :3.2   
        3rd Qu.:2.00       3rd Qu.:2.00   3rd Qu.:4.00       3rd Qu.:4.0   
        Max.   :4.00       Max.   :4.00   Max.   :4.00       Max.   :4.0   

        vector_recompute load_overlap    local_work_size time_per_pixel     
        true:100         true:100     [64, 2, 1] :29     Min.   :1.247e-10  
                                      [128, 2, 1]:24     1st Qu.:1.258e-10  
                                      [256, 1, 1]:11     Median :1.273e-10  
                                      [32, 8, 1] :11     Mean   :1.354e-10  
                                      [128, 1, 1]: 8     3rd Qu.:1.462e-10  
                                      [32, 4, 1] : 7     Max.   :1.594e-10  
                                      (Other)    :10
#+end_example

       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_gen_100.png :exports both :width 700 :height 500 :session       
         # default <- par()
         # count <- table(df$time_per_pixel)
         # par(mar=c(11.1,5.1,2.1,2.1))
         # barplot(count, xlab="time_per_pixel", ylab="frequency", space=1, las=2)
         # par(default)

         ggplot(df) +
             aes(factor(time_per_pixel)) +
             geom_bar() +
             ggtitle("Optimal found by the genetic algorithm on 100 runs") +
             theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12))
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_gen_100.png]]


       On this 100 runs the global optimium is hit more 15% of the time.

       #+begin_src R :results output :session :exports both
         count
       #+end_src

       #+RESULTS:
       #+begin_example

       1.24665090340217e-10 1.25777380150395e-10 1.26405067536272e-10 
                         17                   17                    9 
       1.26451863659571e-10  1.2733542924771e-10 1.27627274942782e-10 
                          5                    5                    1 
       1.27925325641873e-10   1.282922760817e-10 1.28750935751701e-10 
                          1                    1                    2 
       1.35560718196497e-10 1.36759321838557e-10 1.36771135310991e-10 
                          1                    1                    1 
       1.39265614028082e-10 1.40293264730139e-10 1.45457283804712e-10 
                          1                    1                    7 
       1.46060948820559e-10 1.46516160911546e-10  1.4719812116126e-10 
                          5                    1                    4 
        1.4799300946579e-10  1.4815754215803e-10 1.48177936364262e-10 
                          4                    2                    2 
       1.50587591519574e-10  1.5165358603284e-10 1.55822891032629e-10 
                          2                    1                    2 
       1.57574514303125e-10 1.59212296772129e-10 1.59354958270527e-10 
                          4                    2                    1
       #+end_example

       - Here are the 30 first best combinations of the entire search space
         #+begin_src R :results output :session :exports both
           options(width=150)
           head(df[order(time_per_pixel),],n=30)
         #+end_src

         #+RESULTS:
         #+begin_example
              x_component_number vector_length y_component_number temporary_size vector_recompute load_overlap local_work_size time_per_pixel
         806                   1             1                  4              4             true         true     [128, 2, 1]   1.246651e-10
         1492                  1             1                  4              4             true         true      [64, 2, 1]   1.257774e-10
         276                   1             1                  4              4             true         true      [32, 8, 1]   1.264051e-10
         1028                  1             1                  4              4             true         true     [256, 1, 1]   1.264519e-10
         676                   1             1                  4              2             true         true      [64, 2, 1]   1.270515e-10
         241                   1             1                  4              2             true         true     [256, 1, 1]   1.273354e-10
         536                   1             1                  4              4             true         true     [128, 1, 1]   1.276273e-10
         1024                  1             1                  4              2             true         true     [128, 1, 1]   1.277809e-10
         1740                  1             1                  4              4             true         true      [64, 4, 1]   1.279253e-10
         1573                  1             1                  4              2             true         true      [32, 8, 1]   1.282923e-10
         1168                  1             1                  4              4             true         true      [32, 4, 1]   1.287509e-10
         680                   1             1                  4              2             true         true      [64, 4, 1]   1.288623e-10
         1588                  1             1                  4              2             true         true      [32, 4, 1]   1.296257e-10
         32                    1             1                  4              2             true         true     [128, 2, 1]   1.314790e-10
         77                    1             1                  3              4             true         true     [256, 1, 1]   1.355607e-10
         361                   1             1                  3              4             true         true      [32, 8, 1]   1.367593e-10
         1816                  1             1                  3              4             true         true      [64, 4, 1]   1.367711e-10
         1753                  1             1                  3              2             true         true      [64, 4, 1]   1.367997e-10
         684                   1             1                  3              4             true         true      [32, 4, 1]   1.369153e-10
         1991                  1             1                  3              4             true         true      [64, 2, 1]   1.371417e-10
         1167                  1             1                  3              2             true         true      [64, 2, 1]   1.376082e-10
         1885                  1             1                  3              2             true         true      [32, 8, 1]   1.377295e-10
         158                   1             1                  3              2             true         true     [128, 1, 1]   1.386640e-10
         514                   1             1                  3              4             true         true     [128, 2, 1]   1.392656e-10
         1059                  1             1                  3              4             true         true     [128, 1, 1]   1.393014e-10
         917                   1             1                  3              2             true         true     [256, 1, 1]   1.397919e-10
         613                   1             1                  3              2             true         true      [32, 4, 1]   1.402933e-10
         946                   1             1                  4              4             true         true      [64, 1, 1]   1.413883e-10
         135                   1             1                  4              4             true         true      [32, 2, 1]   1.431177e-10
         608                   1             1                  3              2             true         true     [128, 2, 1]   1.433538e-10
              y_component_number.cat vector_length.cat
         806                       4                 1
         1492                      4                 1
         276                       4                 1
         1028                      4                 1
         676                       4                 1
         241                       4                 1
         536                       4                 1
         1024                      4                 1
         1740                      4                 1
         1573                      4                 1
         1168                      4                 1
         680                       4                 1
         1588                      4                 1
         32                        4                 1
         77                        3                 1
         361                       3                 1
         1816                      3                 1
         1753                      3                 1
         684                       3                 1
         1991                      3                 1
         1167                      3                 1
         1885                      3                 1
         158                       3                 1
         514                       3                 1
         1059                      3                 1
         917                       3                 1
         613                       3                 1
         946                       4                 1
         135                       4                 1
         608                       3                 1
         #+end_example

       - Do we have lots of good combinations?
         #+begin_src sh :results output :exports both
           ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml
         #+END_SRC

         #+RESULTS:

         #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_sp_rep.png :exports both :width 600 :height 400 :session
           df <- read.csv("/tmp/test.csv", strip.white=T,header=T)
           attach(df)
           x <- min(df$time_per_pixel)
           y <- max(df$time_per_pixel)
           b <- (y - x) / 1.2733542924771e-10
           library(ggplot2)
           ggplot(df) +
               aes(time_per_pixel) +
               geom_histogram(bins = b) +
               ggtitle("Repartion of combinations over the search space") +
               theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12))
         #+end_src

         #+RESULTS:
         [[file:img/20160311/pilipili2/pilipili2_sp_rep.png]]

** 2016-03-16
*** Optimal design 
    - Generating combination of local_work_size. Useless for the
        moment but could be usefull later 
        #+begin_src R :results output :session :exports both
          x <- list()
        count <- 1
        for( i in 1:4 ){ 
            for( j in 1:log2(2^i)-1 ){
                x[[count]] <-  c( 2^(i+4) / 2^j, 2^j )
                count <- count + 1
                x[[count]] <-  c( 2^j, 2^(i+4) / 2^j )
                count <- count + 1
            }
        }
        x
        #+end_src

        #+RESULTS:
        #+begin_example
      [[1]]
      [1] 32  1

      [[2]]
      [1]  1 32

      [[3]]
      [1] 64  1

      [[4]]
      [1]  1 64

      [[5]]
      [1] 32  2

      [[6]]
      [1]  2 32

      [[7]]
      [1] 128   1

      [[8]]
      [1]   1 128

      [[9]]
      [1] 64  2

      [[10]]
      [1]  2 64

      [[11]]
      [1] 32  4

      [[12]]
      [1]  4 32

      [[13]]
      [1] 256   1

      [[14]]
      [1]   1 256

      [[15]]
      [1] 128   2

      [[16]]
      [1]   2 128

      [[17]]
      [1] 64  4

      [[18]]
      [1]  4 64

      [[19]]
      [1] 32  8

      [[20]]
      [1]  8 32
      #+end_example
    - Building and applying D-Optimal design
      #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml
      #+end_src

      #+RESULTS:

      #+begin_src R :results output :session :exports both
        library(DoE.base)
        library(DoE.wrapper)
        Design.1 <- lhs.design( type= "maximin" , nruns= 500 ,nfactors= 5 ,digits= NULL ,seed=20049 , factor.names=list(log_x_component_number=c(0,4), y_component_number=c(1,4),
                                                                                                                        log_vector_length=c(0,4), local_work_size_index=c(1,10),
                                                                                                                        log_temporary_size=c(1,2) ) )
        ## creator element of design.info will be different, when using the command line command!
        # plot( Design.1 , select = c( "log_x_component_number","y_component_number",
        #                             "log_vector_length","local_work_size_index",
        #                             "log_temporary_size" ))
        Design.1.rounded <- round(Design.1) # Ideally we would like to express factor(local_work_size_index) but the Dopt.design does not know how to handle it
        Design.1.Dopt <- Dopt.design( 60 , data= Design.1.rounded , formula= 
                                                              "~(log_x_component_number  + y_component_number  + log_vector_length  + local_work_size_index  + log_temporary_size )^2" , nRepeat= 5 ,randomize= TRUE ,seed= 28517 )

        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        set <- data.frame()
        for(i in 1:nrow(Design.1.Dopt)){
            set <- rbind(set, df[ df$x_component_number == 2^Design.1.Dopt$log_x_component_number[i]
                                 & df$y_component_number == Design.1.Dopt$y_component_number[i]
                                 & df$vector_length == 2^Design.1.Dopt$log_vector_length[i]
                                 & df$temporary_size == 2^Design.1.Dopt$log_temporary_size[i] 
                                 & as.numeric(df$local_work_size) == Design.1.Dopt$local_work_size_index[i], ])


        }

        summary(lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length))  # + local_work_size + temporary_size
        summary(lm(data=set, time_per_pixel ~ x_component_number * y_component_number * vector_length))  # + local_work_size + temporary_size
        summary(lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length + x_component_number:vector_length))  # + local_work_size + temporary_size
      #+end_src

      #+RESULTS:
      #+begin_example
      Le chargement a nÃ©cessitÃ© le package : grid
      Le chargement a nÃ©cessitÃ© le package : conf.design

      Attachement du package : âDoE.baseâ

      The following objects are masked from âpackage:statsâ:

          aov, lm

      The following object is masked from âpackage:graphicsâ:

          plot.design

      The following object is masked from âpackage:baseâ:

          lengths
      Le chargement a nÃ©cessitÃ© le package : FrF2
      Le chargement a nÃ©cessitÃ© le package : rsm

      Call:
      lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
          vector_length, data = set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -4.493e-10 -2.389e-10 -5.766e-11  2.031e-10  8.749e-10 

      Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
      (Intercept)         6.540e-10  1.194e-10   5.478 1.06e-06 ***
      x_component_number -2.019e-11  6.648e-12  -3.037  0.00362 ** 
      y_component_number -8.546e-11  3.202e-11  -2.669  0.00994 ** 
      vector_length       4.126e-11  6.690e-12   6.167 8.11e-08 ***
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 3.449e-10 on 56 degrees of freedom
      Multiple R-squared:  0.5265,	Adjusted R-squared:  0.5011 
      F-statistic: 20.76 on 3 and 56 DF,  p-value: 3.617e-09

      Call:
      lm.default(formula = time_per_pixel ~ x_component_number * y_component_number * 
          vector_length, data = set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -5.829e-10 -7.267e-11 -1.375e-11  7.602e-11  5.229e-10 

      Coefficients:
                                                            Estimate Std. Error
      (Intercept)                                          2.574e-10  1.679e-10
      x_component_number                                   2.740e-11  1.705e-11
      y_component_number                                  -4.707e-11  5.665e-11
      vector_length                                        9.656e-11  1.432e-11
      x_component_number:y_component_number               -2.337e-12  5.615e-12
      x_component_number:vector_length                    -7.727e-12  1.661e-12
      y_component_number:vector_length                    -6.872e-12  5.127e-12
      x_component_number:y_component_number:vector_length  8.645e-13  5.453e-13
                                                          t value Pr(>|t|)    
      (Intercept)                                           1.533    0.131    
      x_component_number                                    1.607    0.114    
      y_component_number                                   -0.831    0.410    
      vector_length                                         6.743 1.27e-08 ***
      x_component_number:y_component_number                -0.416    0.679    
      x_component_number:vector_length                     -4.653 2.29e-05 ***
      y_component_number:vector_length                     -1.340    0.186    
      x_component_number:y_component_number:vector_length   1.585    0.119    
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 2.448e-10 on 52 degrees of freedom
      Multiple R-squared:  0.7784,	Adjusted R-squared:  0.7486 
      F-statistic:  26.1 on 7 and 52 DF,  p-value: 6.446e-15

      Call:
      lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
          vector_length + x_component_number:vector_length, data = set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -5.388e-10 -8.124e-11  9.820e-12  7.812e-11  6.241e-10 

      Coefficients:
                                         Estimate Std. Error t value Pr(>|t|)    
      (Intercept)                       3.131e-10  9.776e-11   3.203  0.00226 ** 
      x_component_number                2.108e-11  7.406e-12   2.847  0.00620 ** 
      y_component_number               -6.970e-11  2.313e-11  -3.013  0.00390 ** 
      vector_length                     8.010e-11  7.175e-12  11.163 9.36e-16 ***
      x_component_number:vector_length -5.426e-12  7.435e-13  -7.297 1.23e-09 ***
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 2.481e-10 on 55 degrees of freedom
      Multiple R-squared:  0.7594,	Adjusted R-squared:  0.7419 
      F-statistic:  43.4 on 4 and 55 DF,  p-value: < 2.2e-16
      #+end_example

      #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_OptD.png :exports both :width 600 :height 400 :session
        plot( Design.1.Dopt , select = c( "log_x_component_number","y_component_number","log_vector_length","local_work_size_index","log_temporary_size" ))
      #+end_src

      #+RESULTS:
      [[file:img/20160311/pilipili2/pilipili2_OptD.png]]

      #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_OptD_set.png :exports both :width 800 :height 600 :session
        plot(set)
      #+end_src

      #+RESULTS:
      [[file:img/20160311/pilipili2/pilipili2_OptD_set.png]]

      #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_OptD_model.png :exports both :width 800 :height 600 :session
        model <- lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length + x_component_number:vector_length)  # + local_work_size + temporary_size
        default <- par()
        par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
        plot(model)
        par(default)
      #+end_src

      #+RESULTS:
      [[file:img/20160311/pilipili2/pilipili2_OptD_model.png]]

    - How does it compare to a random sample?
        Some times it can find the impact of the x_component_number but
        it is rare and generally the R-squared is worse than the
        D-Opitmal set
        #+begin_src R :results output :session :exports both
          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          random_sample <- df[sample(1:length(df$x_component_number),size = 40,replace = FALSE),]
          summary(lm(data=random_sample, time_per_pixel ~ x_component_number + y_component_number + vector_length))  # + local_work_size + temporary_size
          summary(lm(data=random_sample, time_per_pixel ~ x_component_number * y_component_number * vector_length))  # + local_work_size + temporary_size
          summary(lm(data=random_sample, time_per_pixel ~ x_component_number + y_component_number + vector_length + x_component_number:vector_length))  # + local_work_size + temporary_size

        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
            vector_length, data = random_sample)

        Residuals:
               Min         1Q     Median         3Q        Max 
        -2.388e-10 -1.167e-10 -2.010e-11  9.716e-11  3.453e-10 

        Coefficients:
                             Estimate Std. Error t value Pr(>|t|)    
        (Intercept)         4.789e-10  6.469e-11   7.403 9.79e-09 ***
        x_component_number -6.879e-12  5.582e-12  -1.232   0.2259    
        y_component_number -8.009e-11  2.295e-11  -3.489   0.0013 ** 
        vector_length       2.786e-11  5.691e-12   4.896 2.07e-05 ***
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 1.581e-10 on 36 degrees of freedom
        Multiple R-squared:  0.5472,	Adjusted R-squared:  0.5095 
        F-statistic:  14.5 on 3 and 36 DF,  p-value: 2.364e-06

        Call:
        lm.default(formula = time_per_pixel ~ x_component_number * y_component_number * 
            vector_length, data = random_sample)

        Residuals:
               Min         1Q     Median         3Q        Max 
        -1.603e-10 -5.627e-11 -2.693e-11  3.685e-11  2.826e-10 

        Coefficients:
                                                              Estimate Std. Error
        (Intercept)                                          2.536e-10  9.209e-11
        x_component_number                                   1.089e-11  2.109e-11
        y_component_number                                  -2.340e-11  3.393e-11
        vector_length                                        9.764e-11  1.508e-11
        x_component_number:y_component_number               -5.327e-13  6.726e-12
        x_component_number:vector_length                    -8.234e-12  3.251e-12
        y_component_number:vector_length                    -2.291e-11  6.204e-12
        x_component_number:y_component_number:vector_length  2.005e-12  9.256e-13
                                                            t value Pr(>|t|)    
        (Intercept)                                           2.754 0.009627 ** 
        x_component_number                                    0.516 0.609212    
        y_component_number                                   -0.690 0.495359    
        vector_length                                         6.476 2.76e-07 ***
        x_component_number:y_component_number                -0.079 0.937361    
        x_component_number:vector_length                     -2.533 0.016410 *  
        y_component_number:vector_length                     -3.693 0.000824 ***
        x_component_number:y_component_number:vector_length   2.167 0.037818 *  
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 1.167e-10 on 32 degrees of freedom
        Multiple R-squared:  0.7809,	Adjusted R-squared:  0.7329 
        F-statistic: 16.29 on 7 and 32 DF,  p-value: 6.336e-09

        Call:
        lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
            vector_length + x_component_number:vector_length, data = random_sample)

        Residuals:
               Min         1Q     Median         3Q        Max 
        -3.402e-10 -7.496e-11 -1.920e-12  7.877e-11  2.814e-10 

        Coefficients:
                                           Estimate Std. Error t value Pr(>|t|)    
        (Intercept)                       3.534e-10  6.748e-11   5.237 7.83e-06 ***
        x_component_number                1.004e-11  6.943e-12   1.446  0.15699    
        y_component_number               -6.751e-11  2.046e-11  -3.300  0.00223 ** 
        vector_length                     4.963e-11  8.064e-12   6.154 4.84e-07 ***
        x_component_number:vector_length -3.350e-12  9.748e-13  -3.436  0.00154 ** 
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 1.387e-10 on 35 degrees of freedom
        Multiple R-squared:  0.6614,	Adjusted R-squared:  0.6227 
        F-statistic: 17.09 on 4 and 35 DF,  p-value: 7.386e-08
        #+end_example
      
    - How does it compare to LHS?
        #+begin_src R :results output :session :exports both
          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

          Design.2 <- lhs.design( type= "maximin" , nruns= 60 ,nfactors= 5 ,digits= NULL ,seed=20049 , factor.names=list(log_x_component_number=c(0,4), y_component_number=c(1,4),
                                                                                                                         log_vector_length=c(0,4), local_work_size_index=c(1,10),
                                                                                                                         log_temporary_size=c(1,2) ) )
          Design.2.rounded <- round(Design.2)

          lhs_sample <- data.frame()
          for(i in 1:nrow(Design.2.rounded)){
              lhs_sample <- rbind(lhs_sample, df[ x_component_number == 2^Design.2.rounded$log_x_component_number[i]
                                   & y_component_number == Design.2.rounded$y_component_number[i]
                                   & vector_length == 2^Design.2.rounded$log_vector_length[i]
                                   & temporary_size == 2^Design.2.rounded$log_temporary_size[i] 
                                   & as.numeric(local_work_size) == Design.2.rounded$local_work_size_index[i], ])


          }

          summary(lm(data=lhs_sample, time_per_pixel ~ x_component_number + y_component_number + vector_length))
          summary(lm(data=lhs_sample, time_per_pixel ~ x_component_number * y_component_number * vector_length))  # + local_work_size + temporary_size
          summary(lm(data=lhs_sample, time_per_pixel ~ x_component_number + y_component_number + vector_length + x_component_number:vector_length))  # + local_work_size + temporary_size

        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
            vector_length, data = lhs_sample)

        Residuals:
               Min         1Q     Median         3Q        Max 
        -3.862e-10 -1.577e-10 -4.072e-11  1.310e-10  9.883e-10 

        Coefficients:
                             Estimate Std. Error t value Pr(>|t|)    
        (Intercept)         5.544e-10  1.141e-10   4.861 9.84e-06 ***
        x_component_number -1.224e-11  7.188e-12  -1.703 0.094084 .  
        y_component_number -1.305e-10  3.546e-11  -3.682 0.000523 ***
        vector_length       4.272e-11  7.202e-12   5.931 1.97e-07 ***
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 2.626e-10 on 56 degrees of freedom
        Multiple R-squared:  0.4826,	Adjusted R-squared:  0.4549 
        F-statistic: 17.41 on 3 and 56 DF,  p-value: 4.153e-08

        Call:
        lm.default(formula = time_per_pixel ~ x_component_number * y_component_number * 
            vector_length, data = lhs_sample)

        Residuals:
               Min         1Q     Median         3Q        Max 
        -3.129e-10 -9.116e-11 -2.833e-11  4.119e-11  6.000e-10 

        Coefficients:
                                                              Estimate Std. Error
        (Intercept)                                         -9.618e-11  1.622e-10
        x_component_number                                   6.444e-11  2.416e-11
        y_component_number                                   4.243e-11  6.155e-11
        vector_length                                        1.674e-10  2.092e-11
        x_component_number:y_component_number               -1.328e-11  1.008e-11
        x_component_number:vector_length                    -1.690e-11  3.457e-12
        y_component_number:vector_length                    -3.424e-11  7.959e-12
        x_component_number:y_component_number:vector_length  3.517e-12  1.385e-12
                                                            t value Pr(>|t|)    
        (Intercept)                                          -0.593   0.5557    
        x_component_number                                    2.667   0.0102 *  
        y_component_number                                    0.689   0.4937    
        vector_length                                         8.000 1.27e-10 ***
        x_component_number:y_component_number                -1.316   0.1938    
        x_component_number:vector_length                     -4.889 1.01e-05 ***
        y_component_number:vector_length                     -4.302 7.48e-05 ***
        x_component_number:y_component_number:vector_length   2.539   0.0142 *  
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 1.832e-10 on 52 degrees of freedom
        Multiple R-squared:  0.7662,	Adjusted R-squared:  0.7347 
        F-statistic: 24.35 on 7 and 52 DF,  p-value: 2.504e-14

        Call:
        lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
            vector_length + x_component_number:vector_length, data = lhs_sample)

        Residuals:
               Min         1Q     Median         3Q        Max 
        -4.262e-10 -1.122e-10 -6.709e-11  7.745e-11  7.377e-10 

        Coefficients:
                                           Estimate Std. Error t value Pr(>|t|)    
        (Intercept)                       3.047e-10  1.034e-10   2.948 0.004692 ** 
        x_component_number                3.179e-11  9.961e-12   3.192 0.002337 ** 
        y_component_number               -1.162e-10  2.893e-11  -4.016 0.000181 ***
        vector_length                     8.310e-11  9.433e-12   8.809 4.28e-12 ***
        x_component_number:vector_length -8.423e-12  1.543e-12  -5.458 1.19e-06 ***
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 2.134e-10 on 55 degrees of freedom
        Multiple R-squared:  0.6644,	Adjusted R-squared:   0.64 
        F-statistic: 27.22 on 4 and 55 DF,  p-value: 1.758e-12
        #+end_example
      
    - More accurate D-Optimal
      #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml
      #+end_src

      #+RESULTS:

      #+begin_src R :results output :session :exports both
        library(DoE.base)
        library(DoE.wrapper)
        Design.1 <- lhs.design( type= "maximin" , nruns= 1000 ,nfactors= 5 ,digits= NULL ,seed=20049 , factor.names=list(log_x_component_number=c(0,4), y_component_number=c(1,4),
                                                                                                                        log_vector_length=c(0,4), local_work_size_index=c(1,10),
                                                                                                                        log_temporary_size=c(1,2) ) )
        ## creator element of design.info will be different, when using the command line command!
        # plot( Design.1 , select = c( "log_x_component_number","y_component_number",
        #                             "log_vector_length","local_work_size_index",
        #                             "log_temporary_size" ))
        Design.1.rounded <- round(Design.1) # Ideally we would like to express factor(local_work_size_index) but the Dopt.design does not know how to handle it
        Design.1.Dopt <- Dopt.design( 120 , data= Design.1.rounded , formula= 
                                                              "~(log_x_component_number  + y_component_number  + log_vector_length  + local_work_size_index  + log_temporary_size )^2" , nRepeat= 5 ,randomize= TRUE ,seed= 28517 )

        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        set <- data.frame()
        for(i in 1:nrow(Design.1.Dopt)){
            set <- rbind(set, df[ df$x_component_number == 2^Design.1.Dopt$log_x_component_number[i]
                                 & df$y_component_number == Design.1.Dopt$y_component_number[i]
                                 & df$vector_length == 2^Design.1.Dopt$log_vector_length[i]
                                 & df$temporary_size == 2^Design.1.Dopt$log_temporary_size[i] 
                                 & as.numeric(df$local_work_size) == Design.1.Dopt$local_work_size_index[i], ])


        }

        summary(lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length))  # + local_work_size + temporary_size
        summary(lm(data=set, time_per_pixel ~ x_component_number * y_component_number * vector_length))  # + local_work_size + temporary_size
        summary(lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length + x_component_number:vector_length))  # + local_work_size + temporary_size
      #+end_src

      #+RESULTS:

    - D-opt without LHS
      #+begin_src R :results output :session :exports both
        log_x_component_number = c()
        y_component_number = c()
        log_vector_length = c()
        log_temporary_size = c()
        local_work_size_index = c()
        for (x_comp in 0:4){
            for(y_comp in 1:4){
                for(vec_len in 0:4){
                    for(temp_size in 1:2){
                        for(lws in 1:10){
                            log_x_component_number[length(log_x_component_number)+1] = 2^x_comp 
                            y_component_number[length(y_component_number)+1] = y_comp 
                            log_vector_length[length(log_vector_length)+1] = 2^vec_len 
                            log_temporary_size[length(log_temporary_size)+1] = 2^temp_size 
                            local_work_size_index[length(local_work_size_index)+1] = lws 
                        }
                    }
                }
            }
        }

        pts <- data.frame(log_x_component_number,y_component_number,log_vector_length,log_temporary_size,local_work_size_index)

        Design.1.Dopt <- Dopt.design( 200 , data= pts , formula= 
                                                            "~(log_x_component_number  + y_component_number  + log_vector_length  + local_work_size_index  + log_temporary_size )^2" , nRepeat= 5 ,randomize= TRUE ,seed= 28517 )


        for(i in 1:nrow(Design.1.Dopt)){
            set <- rbind(set, df[ df$x_component_number == 2^Design.1.Dopt$log_x_component_number[i]
                                 & df$y_component_number == Design.1.Dopt$y_component_number[i]
                                 & df$vector_length == 2^Design.1.Dopt$log_vector_length[i]
                                 & df$temporary_size == 2^Design.1.Dopt$log_temporary_size[i] 
                                 & as.numeric(df$local_work_size) == Design.1.Dopt$local_work_size_index[i], ])


        }

        summary(lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length))  # + local_work_size + temporary_size
        summary(lm(data=set, time_per_pixel ~ x_component_number * y_component_number * vector_length))  # + local_work_size + temporary_size
        summary(lm(data=set, time_per_pixel ~ x_component_number + y_component_number + vector_length + x_component_number:vector_length))  # + local_work_size + temporary_size

      #+end_src

      #+RESULTS:
      #+begin_example

      Call:
      lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
          vector_length, data = set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -4.069e-10 -1.934e-10 -1.000e-10  2.042e-10  9.566e-10 

      Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
      (Intercept)         5.178e-10  4.189e-11  12.361  < 2e-16 ***
      x_component_number -1.516e-11  2.664e-12  -5.691 3.10e-08 ***
      y_component_number -6.877e-11  1.206e-11  -5.701 2.95e-08 ***
      vector_length       4.050e-11  2.576e-12  15.718  < 2e-16 ***
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 2.836e-10 on 288 degrees of freedom
      Multiple R-squared:  0.5133,	Adjusted R-squared:  0.5082 
      F-statistic: 101.2 on 3 and 288 DF,  p-value: < 2.2e-16

      Call:
      lm.default(formula = time_per_pixel ~ x_component_number * y_component_number * 
          vector_length, data = set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -5.090e-10 -6.158e-11 -1.017e-11  8.704e-11  6.056e-10 

      Coefficients:
                                                            Estimate Std. Error
      (Intercept)                                          2.464e-10  4.819e-11
      x_component_number                                   2.292e-11  6.110e-12
      y_component_number                                  -4.974e-11  1.685e-11
      vector_length                                        8.592e-11  5.537e-12
      x_component_number:y_component_number               -1.192e-12  2.108e-12
      x_component_number:vector_length                    -5.850e-12  6.445e-13
      y_component_number:vector_length                    -4.485e-12  1.961e-12
      x_component_number:y_component_number:vector_length  3.173e-13  2.264e-13
                                                          t value Pr(>|t|)    
      (Intercept)                                           5.114 5.82e-07 ***
      x_component_number                                    3.751 0.000213 ***
      y_component_number                                   -2.951 0.003431 ** 
      vector_length                                        15.519  < 2e-16 ***
      x_component_number:y_component_number                -0.565 0.572208    
      x_component_number:vector_length                     -9.077  < 2e-16 ***
      y_component_number:vector_length                     -2.287 0.022923 *  
      x_component_number:y_component_number:vector_length   1.402 0.162029    
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 1.95e-10 on 284 degrees of freedom
      Multiple R-squared:  0.7732,	Adjusted R-squared:  0.7677 
      F-statistic: 138.4 on 7 and 284 DF,  p-value: < 2.2e-16

      Call:
      lm.default(formula = time_per_pixel ~ x_component_number + y_component_number + 
          vector_length + x_component_number:vector_length, data = set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -5.290e-10 -6.643e-11 -6.900e-13  8.697e-11  6.726e-10 

      Coefficients:
                                         Estimate Std. Error t value Pr(>|t|)    
      (Intercept)                       3.029e-10  3.134e-11   9.665  < 2e-16 ***
      x_component_number                2.001e-11  2.699e-12   7.414 1.38e-12 ***
      y_component_number               -7.267e-11  8.333e-12  -8.721 2.27e-16 ***
      vector_length                     7.478e-11  2.622e-12  28.524  < 2e-16 ***
      x_component_number:vector_length -5.063e-12  2.844e-13 -17.805  < 2e-16 ***
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 1.959e-10 on 287 degrees of freedom
      Multiple R-squared:  0.7687,	Adjusted R-squared:  0.7655 
      F-statistic: 238.5 on 4 and 287 DF,  p-value: < 2.2e-16
#+end_example

** 2016-03-21
*** Study of Nvidia architecture and programming model
**** General architecture
   - Contains several SMX with a global L2 memory:
      [[file:img/nvidia/nvidia_gk110.jpg]]
   - SMX: corresponds to OpenCL compute unit
     The register file is the set of registers that is shared by the
     threads in the SMX. There is a shared memory that allows threads
     to communicated between each others. In a SMX more than one
     threads block can be executed concurrently thus they have to
     share the ressources (registers, local memory and compute units). 
     - Characteristics of K40:
       - Max Warps: 64
       - Max threads: 2048
       - Max thread blocks: 16
       - Number of 32-bits registers: 65536
       - Shared memory: 48K
   - Notes: CUDA is scalar architecture. Vectorization does not brings
     anything?

     [[file:img/nvidia/smx.png]]
**** How does it works
     - Terminology Cuda <-> OpenCL
       | CUDA         | OpenCL       |
       | SMX          | Compute Unit |
       | Thread-block | Work Group   |
       | Grid         | NDRange      |
       | Warps        | Wave-front   |
     - Thread-blocks
       - Group of threads
       - 1 block is executed on one SMX
         It can not be executed on more than one SMX because the size
         of a block is limited by the number of threads and the number
         of memory ressources that are less than an SMX. But an SMX
         can execute many block at a time.
       - The program is splitted into thread-blocks that are dispatched
         on SMX.
       - In a thread-block threads can communicate and synchronized
         between them.
       - Each thread-block are independent from each others.
     - Warps 
       - group of 32 threads
       - Unit of scheduling, 32 threads are scheduled at a time.
       - Thread blocks are splitted into warps.
     - Local NDRange determine how the threads are schedule? 
**** Programming a GPU
     - Maximize performance 
       - keep busy the GPU as much as possible by maximizing the
         number of active threads. That means spliting correctly the
         work. A block represents how the work is distributed among
         the SMX. The size of a block is limited by a maximal number
         of threads and the quantity of memory available on a SMX.
         To have the maximum number of active threads the quantity of
         memory they use has to be small enough otherwise the
         occupancy will dicrease.
       - Reduce memory access
         - access pattern
         - locality
     - Number of register for a thread-block = the number of register
       used by the kernel * the number of thread in the block.
       More precisely: 
       ceil(number of register for the kernel x ceil(Number of thread
       per block,32), Number of register max per SMX / 32 )
**** Optimizing
     - Bigger thread-blocks \to more efficient data sharing
       but if not enough thread blocks \to SMX idle.
     - Wrapping together threads that have coherent execution
       avoid branch divergence
     - The size of thread-blocks
     - The quantity of data need per block/thread
     - Grouping memory access
     - The occupancy of a SMX depends on:
       - The number of threads per threads-block
       - The number of registers need per thread
       - The quantity of shared memory used by the thread-block
     - Maximizing occupancy doesn't necessary bring maximum
       performances.
    to 48.
    

*** Thinking about the search space
    - Pilipili2 platform :
      with the limit of 1024 threads the maximum number of component
      is 53.
    - Finding the right distribution of the work
      - In how many pieces shall we split the work?
        - How many threads do we need? = What size of the work of a
          thread?
          number of threads = number of pieces = image_size /
          (x_component_number * y_component_number) 
        - How the threads are grouped?
          - Finding the right size of the block \to enough block to
            avoid idle SMX. Big enough to have a more efficient data
            sharing.         
          - Block size are restricted by the maximal node of threads
            per block which is 1024 in the case of the K40 and by the
            quantity memory ressources of an SMX.
            The maximum number of threads per SMX can be reached if
            each threads uses less than 32 32bits-registers.
            Threads using 48 registers with a block size of 1024 we
            would have only one block per SMX at a time. But we 32
            registers per threads we would have 2 block at a time.
      - Few threads using lots of registers or lots of threads using
        few registers?
        Trade of between the number of component processed by a thread
        and the number of threads \to maximizing occupancy or not
      - Size and number of blocks
        Maximizing the number of SMX used or maximizing occupancy of
        an SMX.
      - Shape of the blocks
    - Finding the right amount of work per-threads
      It is determined by the quantity of component the thread has to
      process which is give by x_component_number x y_component_number
    
    - What do we want to describe?
    - What is the best formulation of the search?
      - x_comp * y_comp and lws_x * lws_y
      - nb_comp / x_comp and nb_thread / lws_x
**** Adding rules
     Added constraint mechanism to the OptimzationSpace. Constraint
     can be expressed by the mean of set of rules which simple boolean
     expressions 
** 2016-03-30
*** R explanations
    - What is exactly the t value?
      Does it compare the population means to the mean of the model?
      How do we interpret it?
      Does it have to be the closer that zero as possible?
*** Genetic Algo  
    Let's see how a GA performs:
    - Generation limit 6, population size 10
       #+begin_src sh :results output :exports both
         DATE=`date +%Y_%m_%d`
         HOUR=`date +%H_%M_%S`
         mkdir -p ../data/$DATE
         mkdir -p ../data/$DATE/pilipili2/
         mkdir -p ../data/$DATE/pilipili2/$HOUR
         for i in `seq 1 100`; do
             ruby ../boast/optimizer_benchmarks/bench_optimizer.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_parameters.yaml ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml -r ../data/$DATE/pilipili2/$HOUR/Gen.yaml
         done
       #+end_src

       #+RESULTS:
       #+begin_example
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       2.0395561797940489e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.386640103650782e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2829227608170006e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.6065195978784932e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       59
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.4651616091154568e-10
       77
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       82
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5126163282188272e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5836338267983517e-10
       82
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.7751437060682563e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       2.0642969462798655e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.5012345785385922e-10
       67
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       73
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.578352009085073e-10
       65
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.575261193496042e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5779168866016592e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.49649628722573e-10
       80
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       2.1326553446355615e-10
       65
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.5578905005894488e-10
       60
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.590561740096958e-10
       64
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.575261193496042e-10
       69
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.2792532564187264e-10
       61
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.592122967721286e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       1.5950281221489474e-10
       58
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>2, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       2.0908523222858496e-10
       86
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.6036169613743593e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.5921544538144275e-10
       70
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.547677150425057e-10
       77
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.5578905005894488e-10
       72
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       1.7548989072015348e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.6347924392063966e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.3675932183855746e-10
       71
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.590561740096958e-10
       72
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.5901888227910537e-10
       64
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5836338267983517e-10
       60
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5779168866016592e-10
       67
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 1, 1]}
       1.9101854861440305e-10
       75
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.2778089021568624e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2875093575170066e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.592122967721286e-10
       89
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.3691527116178554e-10
       88
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.3675932183855746e-10
       75
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.3675932183855746e-10
       72
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4985909684911903e-10
       64
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.5974870072656843e-10
       82
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.5935495827052707e-10
       74
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.607395525733797e-10
       67
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.3691527116178554e-10
       63
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>8, :y_component_number=>2, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       2.621397690949779e-10
       68
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       2.0564823945729724e-10
       65
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.4817793636426216e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.4815754215803011e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.6036169613743593e-10
       75
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       2.0294981249101428e-10
       72
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>8, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       2.214744585322556e-10
       71
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.6107789005500414e-10
       58
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       1.5946349843734293e-10
       82
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5271361682808377e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>2, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       2.6234927924119923e-10
       76
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.7511588913561927e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.57919893896012e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.6356704264910098e-10
       80
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2875093575170066e-10
       65
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5877653861513516e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.5827833170411175e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       1.8895472378649059e-10
       63
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>2, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 1, 1]}
       2.356149588346123e-10
       61
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.575261193496042e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.6429236743346444e-10
       78
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       1.5020474850241375e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.3979191045644557e-10
       65
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       2.0632542527372036e-10
       76
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.49649628722573e-10
       70
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.2792532564187264e-10
       75
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.7511588913561927e-10
       56
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.3691527116178554e-10
       57
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 2, 1]}
       1.6693137507068782e-10
       79
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.3926561402808184e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.5012345785385922e-10
       59
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.5966520530934737e-10
       62
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.578352009085073e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5582289103262858e-10
       80
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.7540887976059921e-10
       74
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2962572950269056e-10
       75
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5779168866016592e-10
       61
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>4, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       2.8900097603139324e-10
       83
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>8, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       2.0623395915723989e-10
       58
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.4872307664444858e-10
       75
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.6356704264910098e-10
       82
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.590561740096958e-10
       90
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.737334985611548e-10
       80
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.5177561489363142e-10
       66
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.737334985611548e-10
       73
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>8, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       2.0632542527372036e-10
       64
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2875093575170066e-10
       80
#+end_example
      
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_03_30/pilipili2/18_16_33/Gen.yaml 
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
         attach(df)
         default <- par()
         count <- table(df$time_per_pixel)
         par(mar=c(11.1,5.1,2.1,2.1))
         barplot(count, xlab="time_per_pixel", ylab="frequency", space=1, las=2)
         par(default)
       #+end_src

       #+RESULTS:
       : Warning messages:
       : 1: In par(default) : le paramÃ¨tre graphique "cin" ne peut Ãªtre changÃ©
       : 2: In par(default) : le paramÃ¨tre graphique "cra" ne peut Ãªtre changÃ©
       : 3: In par(default) : le paramÃ¨tre graphique "csi" ne peut Ãªtre changÃ©
       : 4: In par(default) : le paramÃ¨tre graphique "cxy" ne peut Ãªtre changÃ©
       : 5: In par(default) : le paramÃ¨tre graphique "din" ne peut Ãªtre changÃ©
       : 6: In par(default) : le paramÃ¨tre graphique "page" ne peut Ãªtre changÃ©

* April
** 2016-04-01
   - [ ] Have look at the too big residue error when vector recompute
     is false. 
*** OUT_OF_RESSOURCES constraints
   Trying to bound the size of the kernel in order to avoid the out of
   ressource error.
   - Config limit
     #+BEGIN_EXAMPLE
      opt_space = OptimizationSpace::new( :x_component_number => [53],
                                     :vector_length      => [1],
                                     :y_component_number => [1],
                                     :temporary_size     => [2],
                                     :vector_recompute   => [true],
                                     :load_overlap       => [true],
                                     :threads_number => [1024],
                                     :threads_number_divider => [1]
                                     )
     #+END_EXAMPLE

     #+begin_src R :results output :session :exports both
       f <- function(elements_number, y_component_number=1, vector_length=1, temporary_size=2, threads_number=32) {
           vector_number <- ceiling((elements_number / y_component_number) / vector_length)

           tempload <- (vector_number * vector_length) / vector_length * vector_length
           temp <-  3 * vector_number * (y_component_number+2) * vector_length
           res <- vector_number * y_component_number * vector_length
           tempc <- 3 * vector_number * (y_component_number + 2) * temporary_size * vector_length
           resc <- vector_number * y_component_number * temporary_size * vector_length

           tot <- (tempload + temp + res + tempc + resc) * threads_number
       }

       g <- function(x) {
           f(elements_number = 24, y_component_number = 6, vector_length = x, temporary_size = 2, threads_number = 1024)
       }

                                               # curve(g, 1, 6)

       print(f(53,1,1,2,1024)) # OK
       print(f(elements_number = 53, y_component_number = 1, vector_length = 1, temporary_size = 1, threads_number = 1024)) 

       # :elements_number=>6, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false, :threads_number=>1024, :lws_y=>2 NOK
       print(f(elements_number = 6, y_component_number = 3, vector_length = 16, temporary_size = 2, threads_number = 1024)) 

       # :elements_number=>12, :y_component_number=>6, :vector_length=>16, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :threads_number=>1024, :lws_y=>512 NOK
       print(f(elements_number = 12, y_component_number = 6, vector_length = 16, temporary_size = 4, threads_number = 1024)) # This shoud be normally filtered

       # :elements_number=>3, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false, :threads_number=>1024, :lws_y=>2 NOK
       print(f(elements_number = 3, y_component_number = 3, vector_length = 16, temporary_size = 2, threads_number = 1024))
     #+end_src

     #+RESULTS:
     : [1] 1682432
     : [1] 1139712
     : [1] 901120
     : [1] 2473984
     : [1] 901120

     - Load_overlap seems to have a bigger impact than I tought:
     #+BEGIN_EXAMPLE
     {:elements_number=>3, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false, :threads_number=>1024, :lws_y=>512} NOK

     {:elements_number=>3, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :threads_number=>1024, :lws_y=>512} Ok     
     #+END_EXAMPLE

     In fact it either temp either tempload depending if load_overlap
     is true. And we also may have an additionnal cost if load_overlap
     is false: (y_comp + 2) * 3 * vector_number * vector_length

     
     And the casting also have a big impact, we need to take it into account:
        #+begin_src R :results output :session :exports both
          f <- function(elements_number, y_component_number=1, vector_length=1, temporary_size=2, load_overlap=0, threads_number=32) {
              vector_number <- ceiling((elements_number / y_component_number) / vector_length)

              tempload <- (1 - load_overlap) * (vector_number * vector_length) / vector_length * vector_length
              temp <-  load_overlap * 3 * vector_number * (y_component_number+2) * vector_length
              res <- vector_number * y_component_number * vector_length
              tempc <- 3 * vector_number * (y_component_number + 2) * temporary_size * vector_length
              # out_vec = (1 - load_overlap) * 3 * vector_number * (y_component_number + 2) * temporary_size * vector_length
              out_vec = (1 - load_overlap) * tempc
              resc <- vector_number * y_component_number * temporary_size * vector_length

              tot <- (tempload + temp + res + tempc + out_vec + resc) * threads_number
          }

          g <- function(x) {
              f(elements_number = 24, y_component_number = 2, vector_length = x, temporary_size = 2,threads_number = 1024)
          }

          plot(g, 1, 16)


          print(paste("OK:",f(elements_number = 53, y_component_number = 1, vector_length = 1, temporary_size = 2, load_overlap = 1, threads_number = 1024))) #OK

          # :elements_number=>6, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false, :threads_number=>1024, :lws_y=>2 NOK
          print(paste("NOK:",f(elements_number = 6, y_component_number = 3, vector_length = 16, temporary_size = 2, load_overlap = 0, threads_number = 1024)) )

          # :elements_number=>3, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false, :threads_number=>1024, :lws_y=>2 NOK
          print(paste("NOK:",f(elements_number = 3, y_component_number = 3, vector_length = 16, temporary_size = 2, load_overlap = 0, threads_number = 1024)))
          print(paste("OK:",f(elements_number = 3, y_component_number = 3, vector_length = 16, temporary_size = 2, load_overlap = 1, threads_number = 1024)))

          # :elements_number=>12, :y_component_number=>3, :vector_length=>16, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false, :threads_number=>1024, :lws_y=>1
          print(paste("NOK:",f(elements_number = 12, y_component_number = 3, vector_length = 16, temporary_size = 2, load_overlap = 0, threads_number = 1024)))

          print(paste("NOK:",f(elements_number = 6, y_component_number = 6, vector_length = 8, temporary_size = 2, load_overlap = 0, threads_number = 1024)))
     #+end_src

        #+RESULTS:
        : [1] "OK: 1628160"
        : [1] "NOK: 1146880"
        : [1] "NOK: 1146880"
        : [1] "OK: 884736"
        : [1] "NOK: 1146880"
        : [1] "NOK: 942080"

     The first combination works but use more ressources than the
     other that do not works. There is something wrong with my modelization

     #+BEGIN_SRC ruby
       def compute_kernel_size(elements_number=1, y_component_number=1, vector_length=1, temporary_size=2, load_overlap=FALSE, threads_number=32)
         vector_number = ((elements_number / y_component_number).to_f / vector_length).ceil
         l_o = load_overlap ? 1 : 0
         
         tempload = (1 - l_o) * (vector_number * vector_length) / vector_length * vector_length
         temp =  l_o * 3 * vector_number * (y_component_number+2) * vector_length
         res = vector_number * y_component_number * vector_length
         tempc = 3 * vector_number * (y_component_number + 2) * temporary_size * vector_length
         out_vec = (1 - l_o) * tempc
         resc = vector_number * y_component_number * temporary_size * vector_length
         
         return (tempload + temp + res + tempc + out_vec + resc) * threads_number
       end

       compute_kernel_size(53, 1, 1, 2, true, 1024)
       # compute_kernel_size(6, 3, 16, 2, false, 1024)
       # compute_kernel_size(6, 3, 16, 2, false, 1024)
       # compute_kernel_size(12, 6, 16, 4, true, 1024)
       # compute_kernel_size(3, 3, 16, 2, false, 1024)
       compute_kernel_size(3, 3, 16, 2, true, 1024)
       # compute_kernel_size(12, 3, 16, 2, false, 1024)
                   
     #+END_SRC

     #+RESULTS:
     : 884736

** 2016-04-06
*** Detailed format data :script:   
     #+BEGIN_SRC ruby :tangle ../scripts/format_data_detailed.rb
       require 'yaml'
       require 'pp'
       require 'csv'
       input = ARGV[0]

       tab = []
       tab_temp = []
       head = []

       # h = YAML::load(File::open(input).read)
       hash = YAML::load_documents(File::open(input).read){ |doc|

         if head.empty?
           doc.first[0].each {|key, value| head.push key } 
           head.push :image_size
           head.push :run_index
           head.push :time_per_pixel
         end

         doc.each {|combination, sizes| 
           

           sizes.each{|size, runs|
             runs.each_index{|index|
               tab_temp = []    
               combination.each { |option, option_value|
                 tab_temp.push option_value
               }
               tab_temp.push size
               tab_temp.push index
               tab_temp.push runs[index]
               tab.push tab_temp
             }
           }
         }
       }

       CSV.open("/tmp/test.csv", "w"){ |f|
         f << head
         tab.each{ |e|
           f << e
         }
       }

     #+END_SRC
*** Conversion data 2016_03_11
**** Conversion to hierarchic parameters                             :Script:
     #+BEGIN_SRC ruby :tangle ../scripts/convert_to_hierarchic.rb
        require 'yaml'
        
        input = ARGV[0]
        
        hash = YAML::load_documents(File::open(input).read){ |doc|
          doc.each { |combination, time|
            combination[:elements_number] = combination[:x_component_number] * combination[:y_component_number]
            combination.delete(:x_component_number)
        
            combination[:threads_number] = combination[:local_work_size][0] * combination[:local_work_size][1]
            combination[:lws_y] = combination[:local_work_size][1]
            combination.delete(:local_work_size)
          }
        }
        
        converted_file = File.dirname(input) + "/" + File.basename(input,".yaml") + "_hierachic.yaml"
        File.open(converted_file , "w") { |f|
         f.write(hash.first.to_yaml)
       }
     #+END_SRC
**** Conversion to linear_parameters                                  :Script:
     #+BEGIN_SRC ruby :tangle ../scripts/convert_to_linear.rb
        require 'yaml'
        
        input = ARGV[0]
        
        hash = YAML::load_documents(File::open(input).read){ |doc|
          doc.each { |combination, time|
             
            combination[:lws_x] = combination[:local_work_size][0]
            combination[:lws_y] = combination[:local_work_size][1]
            combination.delete(:local_work_size)
          }
        }
        
        converted_file = File.dirname(input) + "/" + File.basename(input,".yaml") + "_linear.yaml"
        File.open(converted_file , "w") { |f|
         f.write(hash.first.to_yaml)
       }
     #+END_SRC
**** Observations
***** Hierarchic
      Testing a new formulation of the search space. In our mind this
      one makes more sense because to allow easier modeling and allow
      fine and coarse grain modeling.
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_hierachic.yaml
     #+end_src

     #+RESULTS:
==      
     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       summary(df)
       summary(lm(data=df,time_per_pixel ~ elements_number + y_component_number + vector_length + temporary_size + threads_number + lws_y))
       summary(lm(data=df,time_per_pixel ~ elements_number + y_component_number + vector_length))
       summary(lm(data=df,time_per_pixel ~ elements_number * y_component_number * vector_length))
       summary(lm(data=df,time_per_pixel ~ I(1/elements_number) * y_component_number * vector_length))
       summary(lm(data=df,time_per_pixel ~ I(1/elements_number):vector_length))
       summary(lm(data=df,time_per_pixel ~ y_component_number + vector_length +  I(1/elements_number):y_component_number + I(1/elements_number):vector_length + y_component_number:vector_length + I(1/elements_number):y_component_number:vector_length ))
       summary(lm(data=df,time_per_pixel ~ y_component_number + I(elements_number):y_component_number + I(1/elements_number):vector_length  + I(1/elements_number):y_component_number:vector_length ))
       summary(lm(data=df,time_per_pixel ~ y_component_number + I(elements_number/y_component_number) + I(elements_number/vector_length) + I(1/elements_number):y_component_number:vector_length ))
     #+end_src

     #+RESULTS:
     #+begin_example
      vector_length  y_component_number temporary_size vector_recompute load_overlap
      Min.   : 1.0   Min.   :1.00       Min.   :2      true:2000        true:2000   
      1st Qu.: 2.0   1st Qu.:1.75       1st Qu.:2                                   
      Median : 4.0   Median :2.50       Median :3                                   
      Mean   : 6.2   Mean   :2.50       Mean   :3                                   
      3rd Qu.: 8.0   3rd Qu.:3.25       3rd Qu.:4                                   
      Max.   :16.0   Max.   :4.00       Max.   :4                                   
      elements_number threads_number      lws_y     time_per_pixel     
      Min.   : 1.0    Min.   : 32.0   Min.   :1.0   Min.   :1.247e-10  
      1st Qu.: 4.0    1st Qu.: 64.0   1st Qu.:1.0   1st Qu.:2.308e-10  
      Median : 8.0    Median :128.0   Median :2.0   Median :3.568e-10  
      Mean   :15.5    Mean   :156.8   Mean   :2.6   Mean   :4.410e-10  
      3rd Qu.:18.0    3rd Qu.:256.0   3rd Qu.:4.0   3rd Qu.:5.040e-10  
      Max.   :64.0    Max.   :256.0   Max.   :8.0   Max.   :2.420e-09

     Call:
     lm(formula = time_per_pixel ~ elements_number + y_component_number + 
         vector_length + temporary_size + threads_number + lws_y, 
         data = df)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -3.886e-10 -1.502e-10 -5.345e-11  1.087e-10  1.500e-09 

     Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
     (Intercept)         4.488e-10  2.447e-11  18.341   <2e-16 ***
     elements_number    -3.059e-12  3.686e-13  -8.299   <2e-16 ***
     y_component_number -6.110e-11  5.429e-12 -11.255   <2e-16 ***
     vector_length       3.376e-11  1.009e-12  33.451   <2e-16 ***
     temporary_size     -8.882e-14  5.506e-12  -0.016    0.987    
     threads_number     -7.995e-14  7.288e-14  -1.097    0.273    
     lws_y              -1.595e-12  2.988e-12  -0.534    0.594    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 2.462e-10 on 1993 degrees of freedom
     Multiple R-squared:  0.422,	Adjusted R-squared:  0.4202 
     F-statistic: 242.5 on 6 and 1993 DF,  p-value: < 2.2e-16

     Call:
     lm(formula = time_per_pixel ~ elements_number + y_component_number + 
         vector_length, data = df)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -3.799e-10 -1.500e-10 -5.618e-11  1.140e-10  1.512e-09 

     Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
     (Intercept)         4.319e-10  1.487e-11   29.05   <2e-16 ***
     elements_number    -3.059e-12  3.685e-13   -8.30   <2e-16 ***
     y_component_number -6.110e-11  5.429e-12  -11.26   <2e-16 ***
     vector_length       3.376e-11  1.009e-12   33.45   <2e-16 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 2.462e-10 on 1996 degrees of freedom
     Multiple R-squared:  0.4212,	Adjusted R-squared:  0.4203 
     F-statistic: 484.1 on 3 and 1996 DF,  p-value: < 2.2e-16

     Call:
     lm(formula = time_per_pixel ~ elements_number * y_component_number * 
         vector_length, data = df)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -4.146e-10 -1.103e-10 -1.981e-11  7.899e-11  1.175e-09 

     Coefficients:
                                                        Estimate Std. Error t value
     (Intercept)                                       3.225e-10  2.262e-11  14.257
     elements_number                                   1.128e-11  1.702e-12   6.626
     y_component_number                               -7.558e-11  8.430e-12  -8.965
     vector_length                                     6.846e-11  2.739e-12  24.993
     elements_number:y_component_number               -1.649e-12  4.919e-13  -3.352
     elements_number:vector_length                    -4.146e-12  2.061e-13 -20.116
     y_component_number:vector_length                 -3.350e-12  1.021e-12  -3.282
     elements_number:y_component_number:vector_length  8.161e-13  5.957e-14  13.700
                                                      Pr(>|t|)    
     (Intercept)                                       < 2e-16 ***
     elements_number                                  4.42e-11 ***
     y_component_number                                < 2e-16 ***
     vector_length                                     < 2e-16 ***
     elements_number:y_component_number               0.000817 ***
     elements_number:vector_length                     < 2e-16 ***
     y_component_number:vector_length                 0.001049 ** 
     elements_number:y_component_number:vector_length  < 2e-16 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 2.015e-10 on 1992 degrees of freedom
     Multiple R-squared:  0.6132,	Adjusted R-squared:  0.6119 
     F-statistic: 451.2 on 7 and 1992 DF,  p-value: < 2.2e-16

     Call:
     lm(formula = time_per_pixel ~ I(1/elements_number) * y_component_number * 
         vector_length, data = df)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -2.352e-10 -7.928e-11 -2.335e-11  8.034e-11  5.345e-10 

     Coefficients:
                                                             Estimate Std. Error
     (Intercept)                                            4.215e-10  1.240e-11
     I(1/elements_number)                                   4.987e-11  3.323e-11
     y_component_number                                    -5.210e-11  4.463e-12
     vector_length                                         -6.876e-12  1.502e-12
     I(1/elements_number):y_component_number               -1.797e-10  2.024e-11
     I(1/elements_number):vector_length                     6.455e-11  4.024e-12
     y_component_number:vector_length                       2.287e-12  5.405e-13
     I(1/elements_number):y_component_number:vector_length  5.650e-11  2.451e-12
                                                           t value Pr(>|t|)    
     (Intercept)                                            33.985  < 2e-16 ***
     I(1/elements_number)                                    1.501    0.134    
     y_component_number                                    -11.673  < 2e-16 ***
     vector_length                                          -4.578 4.98e-06 ***
     I(1/elements_number):y_component_number                -8.880  < 2e-16 ***
     I(1/elements_number):vector_length                     16.041  < 2e-16 ***
     y_component_number:vector_length                        4.232 2.42e-05 ***
     I(1/elements_number):y_component_number:vector_length  23.053  < 2e-16 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 1.057e-10 on 1992 degrees of freedom
     Multiple R-squared:  0.8936,	Adjusted R-squared:  0.8932 
     F-statistic:  2390 on 7 and 1992 DF,  p-value: < 2.2e-16

     Call:
     lm(formula = time_per_pixel ~ I(1/elements_number):vector_length, 
         data = df)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -3.842e-10 -9.372e-11 -3.275e-11  7.100e-11  9.773e-10 

     Coefficients:
                                         Estimate Std. Error t value Pr(>|t|)    
     (Intercept)                        2.768e-10  3.650e-12   75.85   <2e-16 ***
     I(1/elements_number):vector_length 1.312e-10  1.435e-12   91.42   <2e-16 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 1.421e-10 on 1998 degrees of freedom
     Multiple R-squared:  0.8071,	Adjusted R-squared:  0.807 
     F-statistic:  8357 on 1 and 1998 DF,  p-value: < 2.2e-16

     Call:
     lm(formula = time_per_pixel ~ y_component_number + vector_length + 
         I(1/elements_number):y_component_number + I(1/elements_number):vector_length + 
         y_component_number:vector_length + I(1/elements_number):y_component_number:vector_length, 
         data = df)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -2.337e-10 -7.975e-11 -2.302e-11  7.945e-11  5.375e-10 

     Coefficients:
                                                             Estimate Std. Error
     (Intercept)                                            4.332e-10  9.662e-12
     y_component_number                                    -5.677e-11  3.200e-12
     vector_length                                         -7.937e-12  1.325e-12
     y_component_number:I(1/elements_number)               -1.537e-10  1.049e-11
     vector_length:I(1/elements_number)                     6.909e-11  2.659e-12
     y_component_number:vector_length                       2.712e-12  4.606e-13
     y_component_number:vector_length:I(1/elements_number)  5.414e-11  1.880e-12
                                                           t value Pr(>|t|)    
     (Intercept)                                            44.834  < 2e-16 ***
     y_component_number                                    -17.739  < 2e-16 ***
     vector_length                                          -5.989 2.50e-09 ***
     y_component_number:I(1/elements_number)               -14.650  < 2e-16 ***
     vector_length:I(1/elements_number)                     25.981  < 2e-16 ***
     y_component_number:vector_length                        5.887 4.59e-09 ***
     y_component_number:vector_length:I(1/elements_number)  28.803  < 2e-16 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 1.057e-10 on 1993 degrees of freedom
     Multiple R-squared:  0.8935,	Adjusted R-squared:  0.8932 
     F-statistic:  2786 on 6 and 1993 DF,  p-value: < 2.2e-16

     Call:
     lm(formula = time_per_pixel ~ y_component_number + I(elements_number):y_component_number + 
         I(1/elements_number):vector_length + I(1/elements_number):y_component_number:vector_length, 
         data = df)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -2.886e-10 -5.906e-11 -1.170e-11  4.083e-11  5.309e-10 

     Coefficients:
                                                             Estimate Std. Error
     (Intercept)                                            4.073e-10  6.471e-12
     y_component_number                                    -9.381e-11  2.881e-12
     y_component_number:I(elements_number)                  1.282e-12  4.652e-14
     I(1/elements_number):vector_length                     4.480e-11  2.125e-12
     y_component_number:I(1/elements_number):vector_length  6.352e-11  1.345e-12
                                                           t value Pr(>|t|)    
     (Intercept)                                             62.93   <2e-16 ***
     y_component_number                                     -32.56   <2e-16 ***
     y_component_number:I(elements_number)                   27.56   <2e-16 ***
     I(1/elements_number):vector_length                      21.08   <2e-16 ***
     y_component_number:I(1/elements_number):vector_length   47.24   <2e-16 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 9.667e-11 on 1995 degrees of freedom
     Multiple R-squared:  0.9108,	Adjusted R-squared:  0.9106 
     F-statistic:  5094 on 4 and 1995 DF,  p-value: < 2.2e-16

     Call:
     lm(formula = time_per_pixel ~ y_component_number + I(elements_number/y_component_number) + 
         I(elements_number/vector_length) + I(1/elements_number):y_component_number:vector_length, 
         data = df)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -4.098e-10 -5.348e-11 -1.112e-11  5.161e-11  6.836e-10 

     Coefficients:
                                                             Estimate Std. Error
     (Intercept)                                            3.278e-10  6.952e-12
     y_component_number                                    -8.504e-11  2.138e-12
     I(elements_number/y_component_number)                  1.473e-11  5.265e-13
     I(elements_number/vector_length)                       2.070e-12  2.837e-13
     y_component_number:I(1/elements_number):vector_length  9.243e-11  7.289e-13
                                                           t value Pr(>|t|)    
     (Intercept)                                            47.152  < 2e-16 ***
     y_component_number                                    -39.767  < 2e-16 ***
     I(elements_number/y_component_number)                  27.973  < 2e-16 ***
     I(elements_number/vector_length)                        7.295 4.28e-13 ***
     y_component_number:I(1/elements_number):vector_length 126.812  < 2e-16 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 1.013e-10 on 1995 degrees of freedom
     Multiple R-squared:  0.902,	Adjusted R-squared:  0.9018 
     F-statistic:  4590 on 4 and 1995 DF,  p-value: < 2.2e-16
#+end_example

     - Here is the model with the highest RÂ² I was able to get but it
       is not yet satisfying:
       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_model_plot.png :exports both :width 800 :height 600 :session
         model <- lm(data=df,time_per_pixel ~ y_component_number + I(elements_number/y_component_number) + I(elements_number/vector_length) + I(1/elements_number):y_component_number:vector_length )
         default <- par()
         par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
         plot(model)
         par(default)
       #+end_src

       #+RESULTS:
     [[file:img/20160311/pilipili2/pilipili2_model_plot.png]]

     #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_hierarchic_impact.png :exports both :width 800 :height 500 :session
      library(ggplot2)
      library(gridExtra)

      p1 <- qplot(factor(df$elements_number), df$time_per_pixel) + 
          scale_y_log10() + 
          geom_boxplot() + 
          geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
          ggtitle("Impact of elements number") +
          theme(axis.text=element_text(size=12),
                axis.title=element_text(size=14,face="bold"))

      p2 <- qplot(factor(df$y_component_number), df$time_per_pixel) + 
          scale_y_log10() + 
          geom_boxplot() + 
          geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
          ggtitle("Impact of y components number") +
          theme(axis.text=element_text(size=12),
                axis.title=element_text(size=14,face="bold"))

      p3 <- qplot(factor(df$vector_length), df$time_per_pixel) + 
          scale_y_log10() + 
          geom_boxplot() + 
          geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
          ggtitle("Impact of of the vector length") +
          theme(axis.text=element_text(size=12),
                axis.title=element_text(size=14,face="bold"))

      p4 <- qplot(factor(df$threads_number), df$time_per_pixel) + 
          scale_y_log10() + 
          geom_boxplot() + 
          geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
          ggtitle("Impact of of the threads number") +
          theme(axis.text=element_text(size=12),
                axis.title=element_text(size=14,face="bold"))

      p5 <- qplot(factor(df$lws_y), df$time_per_pixel) + 
          scale_y_log10() + 
          geom_boxplot() + 
          geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
          ggtitle("Impact of of the lws_y") +
          theme(axis.text=element_text(size=12),
                axis.title=element_text(size=14,face="bold"))

      grid.arrange(p1, p2, p3, p4, p5, ncol=3, top="") 
     #+end_src

     #+RESULTS:
     [[file:img/20160311/pilipili2/pilipili2_hierarchic_impact.png]]

     #+begin_src R :results output :session :exports both
        library(ggplot2)
        ggplot(df) + 
        aes(x=factor(elements_number), y=time_per_pixel, color=factor(y_component_number)) + 
        scale_y_log10() + 
        geom_boxplot() + 
        geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of the local work size the performances")
     #+end_src

     #+RESULTS:

     #+begin_src R :results output :session :exports both
        library(ggplot2)
        ggplot(df) + 
        aes(x=factor(elements_number), y=time_per_pixel, color=factor(vector_length)) + 
        scale_y_log10() + 
        geom_boxplot() + 
        geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of the local work size the performances")
     #+end_src

     #+RESULTS:


***** Linear
**** About linear regression
     - Used model relationship between *scalars* predictor variables and
       response variables \to wikipedia
*** Bruteforce pilipili2                                         :deprecated:
**** Results
     - [[file:../data/2016_04_02/pilipili2/19_13_54/Info19_38_38.org][Conditions of experiment]]
     - [[file:../data/2016_04_02/pilipili2/19_38_38/Data19_38_38_parameters.yaml][Search space]]
     - [[file:../data/test_space_2016_04_02_2.yaml][Results of experiments]]
**** Observations                                                  :Analysis:
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data_detailed.rb ../data/test_space_2016_04_02_2.yaml
     #+end_src

     #+RESULTS:

     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       library(ggplot2)
       ggplot(df) + 
           aes(x=factor(lws_y), y=time_per_pixel) + 
           geom_boxplot() + 
           scale_y_log10() + 
           geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
           ggtitle("Impact of the local work size the performances")
     #+end_src

     #+RESULTS:
     :  Error in factor(lws_y) : objet 'lws_y' introuvable
     
** 2016-04-07
*** Discution with Arnaud come back on the observation of x_component_number
**** Results
     - [[file:../data/2016_03_11/pilipili2/19_13_54/Info19_13_54.org][Conditions of experiment]]
     - [[file:../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_parameters.yaml][Search space]]
     - [[file:../data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml][Results of experiments]]
**** Observations                                                  :Analysis:
***** Evolution of the mean is different from the one the extreme values
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_linear.yaml
     #+end_src
     
     #+RESULTS:

     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       attach(df)
       summary(df)
     #+end_src

     #+RESULTS:
     #+begin_example
     The following objects are masked from df (pos = 3):

         load_overlap, temporary_size, time_per_pixel, vector_length,
         vector_recompute, x_component_number, y_component_number
      x_component_number vector_length  y_component_number temporary_size
      Min.   : 1.0       Min.   : 1.0   Min.   :1.00       Min.   :2     
      1st Qu.: 2.0       1st Qu.: 2.0   1st Qu.:1.75       1st Qu.:2     
      Median : 4.0       Median : 4.0   Median :2.50       Median :3     
      Mean   : 6.2       Mean   : 6.2   Mean   :2.50       Mean   :3     
      3rd Qu.: 8.0       3rd Qu.: 8.0   3rd Qu.:3.25       3rd Qu.:4     
      Max.   :16.0       Max.   :16.0   Max.   :4.00       Max.   :4     
      vector_recompute load_overlap     lws_x           lws_y    
      true:2000        true:2000    Min.   : 32.0   Min.   :1.0  
                                    1st Qu.: 32.0   1st Qu.:1.0  
                                    Median : 64.0   Median :2.0  
                                    Mean   : 83.2   Mean   :2.6  
                                    3rd Qu.:128.0   3rd Qu.:4.0  
                                    Max.   :256.0   Max.   :8.0  
      time_per_pixel     
      Min.   :1.247e-10  
      1st Qu.:2.308e-10  
      Median :3.568e-10  
      Mean   :4.410e-10  
      3rd Qu.:5.040e-10  
      Max.   :2.420e-09
#+end_example

     - Knowing what should be the value of y_component_number and
       vector_length lets fix them and see how de result evolves
       regarding x_component_number:
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
       library(ggplot2)

       ggplot(df[df$y_component_number==4 & df$vector_length==1,]) + 
           aes(x=factor(x_component_number),color=factor(y_component_number), size = log(vector_length), y=time_per_pixel) +
           geom_jitter() + 
           geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
           ggtitle("Impact of x component number") +
           theme(axis.text=element_text(size=12),
                 axis.title=element_text(size=14,face="bold"))

       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-4137lLN/figure4137yEv.png]]
     - Another view of the impact of x_component_number showing the
       estimate of the mean. We can see where will pass the regression
       line and it will tell us the best is at x_component_number
       = 4. But it not true, what interest us is the not the value but
       the minimum. The shape of the minimum and the mean is completly
       different. And the linear regression would lead us to the wrong
       direction.
       We are not interested about the shape of the esperance.
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
       library(ggplot2)
       library(plyr)
       df2 = ddply(df,c("x_component_number"), summarize,
                    mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))
       ggplot(df) + 
           aes(x=factor(x_component_number), y=time_per_pixel) +
           geom_jitter() + 
           geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
           ggtitle("Impact of x component number") + ylim(0,NA) +
           geom_errorbar(data=df2,aes(x=factor(x_component_number),y=mean, ymin=mean-err, ymax=mean+err)) +
           theme(axis.text=element_text(size=12),
                 axis.title=element_text(size=14,face="bold"))

       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-4137lLN/figure4137_O1.png]]
     - Repartition of combination

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
         library(ggplot2)
                library(plyr)

                df$x_component_number = factor(df$x_component_number)
                df2 = ddply(df,c("x_component_number"), summarize,
                             mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))
                ggplot(df,aes(x=time_per_pixel
                  # ,color=factor(x_component_number)
                 )) + 
         #           geom_density() + 
                    geom_histogram(binwidth=.1e-10) + 
                    # geom_vline(data=df2,aes(xintercept=mean)) +
         #           facet_wrap(.~x_component_number) +
                    theme(axis.text=element_text(size=12),
                          axis.title=element_text(size=14,face="bold"))

       #+end_src
     
       #+RESULTS:
       [[file:/tmp/babel-4137lLN/figure4137xYE.png]]

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
         library(ggplot2)
                library(plyr)

                df$x_component_number = factor(df$x_component_number)
                df2 = ddply(df,c("x_component_number"), summarize,
                             mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))
                ggplot(df,aes(x=time_per_pixel
                  # ,color=factor(x_component_number)
                 )) + 
         #           geom_density() + 
                    stat_ecdf() + 
                    # geom_vline(data=df2,aes(xintercept=mean)) +
         #           facet_wrap(.~x_component_number) +
                    theme(axis.text=element_text(size=12),
                          axis.title=element_text(size=14,face="bold"))

       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-4137lLN/figure4137-iK.png]]
     - Looking for the min, regression quantile
       Estimate of the minimum try \to -exp
       
***** Weighted regression
     - The exp function is not suited for very small number:
         #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
           f <- function(x){ (1/2)^x } curve(f, 2.81e-10, 2.81e-9)
         #+end_src

         #+RESULTS:
         [[file:/tmp/babel-6757t23/figure6757YB1.png]]
     - Maybe the inverse function will do the trick:
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
         g <- function(x){ 1/x^2 }
         curve(g, 2.81e-10, 2.81e-9)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-6757t23/figure6757KLE.png]]
     - With scaling
         #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
           f <- function(x){ exp(-x*1e10) } 
           curve(f, 1.2e-10, 2.81e-9)
         #+end_src

         #+RESULTS:
         [[file:/tmp/babel-3819QKK/figure3819Sty.png]]
     - But I am not doing it right

       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_linear.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
         library(ggplot2)
         library(plyr)
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

         df2 = ddply(df,c("x_component_number"), summarize,
                     mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

         ggplot(df) + 
             aes(x=x_component_number, y=time_per_pixel ) +
             geom_point(alpha=0.2) +
             geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
             geom_errorbar(data=df2,aes(x=(x_component_number),y=mean, ymin=mean-err, ymax=mean+err)) +
             geom_smooth(method="lm", formula = y ~ x + I(1/x) ) +
             geom_smooth(method="lm", formula = y ~ I(1/x) , colour="green")                  
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-3819QKK/figure3819Fjs.png]]
***** Quantiles regression
****** Brute force
******* Linear
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_linear.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_linear_rg.png :exports both :width 600 :height 400 :session
           library(ggplot2)
           library(plyr)
           df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

           df2 = ddply(df,c("x_component_number"), summarize,
                       mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

           ggplot(df) + 
               aes(x=x_component_number, y=time_per_pixel ) +
               geom_point(alpha=0.2) +
               geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
               geom_errorbar(data=df2,aes(x=(x_component_number),y=mean, ymin=mean-err, ymax=mean+err)) +
               geom_smooth(method="lm", formula = y ~ x + I(1/x) )
          #+end_src

       #+RESULTS:
         [[file:img/20160311/pilipili2/pilipili2_linear_rg.png]]
         

       - 5-percentiles ~ minimum \to Jain's book
         #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_linear_qr.png :exports both :width 600 :height 400 :session
           library(ggplot2)
           library(plyr)
           df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

           df2 = ddply(df,c("x_component_number"), summarize,
                       mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

           ggplot(df) + 
               aes(x=x_component_number, y=time_per_pixel ) +
               geom_point(alpha=0.2) +
               geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
               geom_errorbar(data=df2,aes(x=(x_component_number),y=mean, ymin=mean-err, ymax=mean+err)) +
               geom_smooth(method="lm", formula = y ~ x + I(1/x) ) +
               stat_quantile(quantiles=0.05, colour="green")
          #+end_src

         #+RESULTS:
         [[file:img/20160311/pilipili2/pilipili2_linear_qr.png]]

         #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_linear_facet_distrib.png :exports both :width 600 :height 400 :session
           library(ggplot2)
           df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

           ggplot(df) + 
               aes(x=time_per_pixel) +
               geom_histogram() + 
               ggtitle("Distributions of the performance of the combinations against the value of x_component_number") +
               facet_grid( x_component_number ~ .)
         #+end_src

         #+RESULTS:
         [[file:img/20160311/pilipili2/pilipili2_linear_facet_distrib.png]]
         
         - How do we know the regression is correct?
           #+begin_src R :results output :session :exports both
             library("quantreg")
             df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
             regq = rq(data=df, formula = time_per_pixel ~ x_component_number, tau=.05)
             regq;
             summary(regq)
           #+end_src

           #+RESULTS:
           #+begin_example
           Le chargement a nÃ©cessitÃ© le package : SparseM

           Attachement du package : âSparseMâ

           The following object is masked from âpackage:baseâ:

               backsolve
           Call:
           rq(formula = time_per_pixel ~ x_component_number, tau = 0.05, 
               data = df)

           Coefficients:
                  (Intercept) x_component_number 
                 1.138749e-10       1.210435e-11 

           Degrees of freedom: 2000 total; 1998 residual
           Error in base::backsolve(r, x, k = k, upper.tri = upper.tri, transpose = transpose,  : 
             matrice singuliÃ¨re dans 'backsolve'. Premier zÃ©ro sur la diagonale [1]
           De plus : Warning message:
           In summary.rq(regq) : 400 non-positive fis
           #+end_example

          #+begin_src R :results output :session :exports both
             df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
             regmin = lm(data=df, formula = exp(-time_per_pixel*1e10) ~ x_component_number)
             summary(regmin);
           #+end_src
           
           #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
             ggplot(data=df) + aes(x=x_component_number,y=time_per_pixel) +
                 geom_jitter(alpha=.2) + geom_smooth(method="lm",formula = y ~ x+I(1/x))
           #+end_src

           #+RESULTS:
           [[file:/tmp/babel-3660fge/figure3660geQ.png]]

           #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
             ggplot(data=df) + aes(x=x_component_number,y=log(time_per_pixel*1e10)) +
                 geom_jitter(alpha=.2) + geom_smooth(method="lm")
           #+end_src

           #+RESULTS:
           [[file:/tmp/babel-3660fge/figure3660toW.png]]

******* Hierarchic
       - Let's try with a more complex case
          #+begin_src sh :results output :exports both
            ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_hierachic.yaml
          #+end_src

          #+RESULTS:

          #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_Dopt_hierarchic_qr.png :exports both :width 600 :height 400 :session
            library(ggplot2)
            library(plyr)
            df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

            df2 = ddply(df,c("elements_number"), summarize,
                        mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

            ggplot(df) + 
                aes(x=elements_number, y=time_per_pixel ) +
                geom_point(alpha=.2) +
                geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
                geom_errorbar(data=df2,aes(x=(elements_number),y=mean, ymin=mean-err, ymax=mean+err)) +
                geom_smooth(method="lm", formula = y ~ I(1/x) ) + xlim(0,NA) +
#                geom_smooth(method="rq", formula = y ~ I(1/x) )  + 
                geom_quantile(quantiles=0.1, formula = y ~ x + I(1/x), colour="green")
          #+end_src

          #+RESULTS:
          [[file:img/20160311/pilipili2/pilipili2_Dopt_hierarchic_qr.png]]
     
          #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
           library(ggplot2)
           library(plyr)

           df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
           df$elements_number = factor(df$elements_number)
           df2 = ddply(df,c("elements_number"), summarize,
                       mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))
           ggplot(df,aes(x=time_per_pixel
                         )) + 
               stat_ecdf() + 
               theme(axis.text=element_text(size=12),
                     axis.title=element_text(size=14,face="bold"))
         #+end_src

          #+RESULTS:
          [[file:/tmp/babel-6757t23/figure6757AET.png]]

****** D-optimal
******* Testing x_component_number
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml
       #+end_src

       #+RESULTS:

      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
        library(DoE.base)
        library(DoE.wrapper)
        Design.1 <- lhs.design( type= "maximin" , nruns= 500 ,nfactors= 5 ,digits= NULL ,seed=20049 , factor.names=list(log_x_component_number=c(0,4), y_component_number=c(1,4),
                                                                                                                        log_vector_length=c(0,4), local_work_size_index=c(1,10),
                                                                                                                        log_temporary_size=c(1,2) ) )

        Design.1.rounded <- round(Design.1) # Ideally we would like to express factor(local_work_size_index) but the Dopt.design does not know how to handle it
        Design.1.Dopt <- Dopt.design( 60 , data= Design.1.rounded , formula= 
                                                                        "~(log_x_component_number  + y_component_number  + log_vector_length  + local_work_size_index  + log_temporary_size )^2" , nRepeat= 5 ,randomize= TRUE ,seed= 28517 )

        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        set <- data.frame()
        for(i in 1:nrow(Design.1.Dopt)){
            set <- rbind(set, df[ df$x_component_number == 2^Design.1.Dopt$log_x_component_number[i]
                                 & df$y_component_number == Design.1.Dopt$y_component_number[i]
                                 & df$vector_length == 2^Design.1.Dopt$log_vector_length[i]
                                 & df$temporary_size == 2^Design.1.Dopt$log_temporary_size[i] 
                                 & as.numeric(df$local_work_size) == Design.1.Dopt$local_work_size_index[i], ])


        }

        library(ggplot2)
        library(plyr)

        df2 = ddply(set,c("x_component_number"), summarize,
                    mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

        ggplot(set) + 
            aes(x=x_component_number, y=time_per_pixel ) +
            geom_point(alpha=0.2) +
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=df2,aes(x=(x_component_number),y=mean, ymin=mean-err, ymax=mean+err)) +
            geom_smooth(method="lm", formula = y ~ x + I(1/x) ) +
            stat_quantile(quantiles=0.05, colour="green")
      #+end_src

      #+RESULTS:
      [[file:/tmp/babel-6757t23/figure6757VMI.png]]

******* Linear
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_linear.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_Dopt_linear_x_comp.png :exports both :width 600 :height 400 :session
         library(DoE.base)
         library(DoE.wrapper)

         x_component_values <- c(1,2,4,8,16)
         y_component_number_values <- c(1,2,3,4)
         vector_length_values <- c(1,2,4,8,16)
         temporary_sizes_values <- c(2,4)
         lws_values <-list(c(32,1), c(32,2), c(32,4), c(32,8), c(64,1), c(64,2), c(64,4), c(128,1) , c(128,2) ,c(256,1))

         x_component_number <- c()    
         y_component_number <- c()
         vector_length <- c()
         lws_x <- c()
         lws_y <- c()
         temporary_size <- c()

         for(x in x_component_values){
             for(y in y_component_number_values){
                 for(v in vector_length_values){
                     for(l in lws_values) {
                         for(s in temporary_sizes_values){
                             x_component_number[length(x_component_number)+1] <- x
                             y_component_number[length(y_component_number)+1] <- y
                             vector_length[length(vector_length)+1] <- v
                             lws_x[length(lws_x)+1] <- l[1]
                             lws_y[length(lws_y)+1] <- l[2]
                             temporary_size[length(temporary_size)+1] <- s
                         }
                     }
                 }
             }
         }

         complete_set <- data.frame(x_component_number, y_component_number, vector_length, lws_x, lws_y, temporary_size)

         Dopt <- Dopt.design( 100 , data=complete_set, formula= 
                                                          "~(x_component_number + y_component_number  + vector_length  + lws_x + lws_y  + temporary_size )^2" , nRepeat= 5 ,randomize= TRUE ,seed= 28517 )

         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         set <- data.frame()
         for(i in 1:nrow(Dopt)){
             set <- rbind(set, df[ df$x_component_number == Dopt$x_component_number[i]
                                  & df$y_component_number == Dopt$y_component_number[i]
                                  & df$vector_length == Dopt$vector_length[i]
                                  & df$temporary_size == Dopt$temporary_size[i] 
                                  & df$lws_x == Dopt$lws_x[i]
                                  & df$lws_y == Dopt$lws_y[i], ])


         }

         library(ggplot2)
         library(plyr)

         df2 = ddply(set,c("x_component_number"), summarize,
                     mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

         ggplot(set) + 
             aes(x=x_component_number, y=time_per_pixel ) +
             geom_point(alpha=0.2) +
             geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
             geom_errorbar(data=df2,aes(x=(x_component_number),y=mean, ymin=mean-err, ymax=mean+err)) +
             geom_smooth(method="lm", formula = y ~ x + I(1/x)) +
             ggtitle("D-Optimal design using 100 points focusing on the impact of x_component_number") +
             stat_quantile(quantiles=0.05, colour="green", formula = y ~ x)
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_Dopt_linear_x_comp.png]]

       - How does the distribution looks?
         #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_Dopt_linear_x_comp_distrib.png :exports both :width 600 :height 400 :session
           ggplot(set) + 
               aes(x=time_per_pixel) +
               geom_histogram() + 
               ggtitle("Distributions of the performance of the combinations against the value of x_component_number") +
               facet_grid( x_component_number ~ .)
         #+end_src

         #+RESULTS:
         [[file:img/20160311/pilipili2/pilipili2_Dopt_linear_x_comp_distrib.png]]

******* Hierarchic
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_hierachic.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_Dopt_hierarchic_x_comp.png :exports both :width 600 :height 400 :session
         library(DoE.base)
         library(DoE.wrapper)

         y_component_number_values <- c(1,2,3,4)
         vector_length_values <- c(1,2,4,8,16)
         lws_y_values <- c(1,2,4,8)
         temporary_sizes_values <- c(2,4)
         x_component_values <- c(1,2,4,8,16)
         lws_values <-list(c(32,1), c(32,2), c(32,4), c(32,8), c(64,1), c(64,2), c(64,4), c(128,1) , c(128,2) ,c(256,1))

         elements_number <- c()
         y_component_number <- c()
         vector_length <- c()
         threads_number <- c()
         lws_y <- c()
         temporary_size <- c()

         for(x in x_component_values){
             for(y in y_component_number_values){
                 for(v in vector_length_values){
                     for(l in lws_values) {
                         for(s in temporary_sizes_values){
                             elements_number[length(elements_number)+1] <- y * x
                             y_component_number[length(y_component_number)+1] <- y
                             vector_length[length(vector_length)+1] <- v
                             threads_number[length(threads_number)+1] <- l[1] * l[2]
                             lws_y[length(lws_y)+1] <- l[2]
                             temporary_size[length(temporary_size)+1] <- s
                         }
                     }
                 }
             }
         }

         complete_set <- data.frame(elements_number, y_component_number, vector_length, threads_number, lws_y, temporary_size)


         Dopt <- Dopt.design( 60 , data=complete_set, formula= 
                                                          "~(elements_number  + y_component_number  + vector_length  + threads_number + lws_y  + temporary_size )^2" , nRepeat= 5 ,randomize= TRUE ,seed= 28517 )

         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         set <- data.frame()
         for(i in 1:nrow(Dopt)){
             set <- rbind(set, df[ df$elements_number == Dopt$elements_number[i]
                                  & df$y_component_number == Dopt$y_component_number[i]
                                  & df$vector_length == Dopt$vector_length[i]
                                  & df$temporary_size == Dopt$temporary_size[i] 
                                  & df$threads_number == Dopt$threads_number[i]
                                  & df$lws_y == Dopt$lws_y[i], ])


         }

         library(ggplot2)
         library(plyr)

         df2 = ddply(set,c("elements_number"), summarize,
                     mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

         ggplot(set) + 
             aes(x=elements_number, y=time_per_pixel ) +
             geom_point(alpha=0.2) +
             geom_hline(yintercept=min(set$time_per_pixel), color="red", linetype=2) +
             geom_errorbar(data=df2,aes(x=(elements_number),y=mean, ymin=mean-err, ymax=mean+err)) +
             geom_smooth(method="lm", formula = y ~ x + I(1/x) + I(x^2)) +
             stat_quantile(quantiles=0.05, formula = y ~ x + I(1/x), colour="green")
      #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_Dopt_hierarchic_x_comp.png]]
       
** 2016-04-12
*** TODO Backsolve error                                                  :R:
**** Observation of the problem
    - With Angelika we found that the problem came from the fact the
      time_per_pixel data are not linear and heteroscedastics. By scaling the data with a log
      we have no more error:
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_linear.yaml
       #+end_src

       #+RESULTS:

      #+begin_src R :results output :session :exports both
        library("quantreg")
        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        regq = rq(data=df, formula = time_per_pixel ~ x_component_number, tau=.05, method="fn")
        regq;
        summary(regq,se="nid")
      #+end_src

      #+RESULTS:
      #+begin_example
      Call:
      rq(formula = time_per_pixel ~ x_component_number, tau = 0.05, 
          data = df, method = "fn")

      Coefficients:
             (Intercept) x_component_number 
            5.044039e-10      -1.024975e-11 

      Degrees of freedom: 2000 total; 1998 residual
      Error in base::backsolve(r, x, k = k, upper.tri = upper.tri, transpose = transpose,  : 
        matrice singuliÃ¨re dans 'backsolve'. Premier zÃ©ro sur la diagonale [1]
      De plus : Warning message:
      In summary.rq(regq, se = "nid") : 400 non-positive fis
      #+end_example

      #+begin_src R :results output :session :exports both
        df$log_time_per_pixel <- log(df$time_per_pixel)
        regq = rq(data=df, formula = log_time_per_pixel ~ x_component_number, tau=.05, method="fn")
        regq;
        summary(regq,se="nid")      
      #+end_src

      #+RESULTS:
      #+begin_example
      Call:
      rq(formula = log_time_per_pixel ~ x_component_number, tau = 0.05, 
          data = df, method = "fn")

      Coefficients:
             (Intercept) x_component_number 
            -22.77915500         0.05976172 

      Degrees of freedom: 2000 total; 1998 residual

      Call: rq(formula = log_time_per_pixel ~ x_component_number, tau = 0.05, 
          data = df, method = "fn")

      tau: [1] 0.05

      Coefficients:
                         Value       Std. Error  t value     Pr(>|t|)   
      (Intercept)          -22.77916     0.00564 -4035.90819     0.00000
      x_component_number     0.05976     0.00042   141.16702     0.00000
      #+end_example

      #+begin_src R :results output :session :exports both
        plot(df$x_component_number, log(df$time_per_pixel))
        abline(regq, col=2)
      #+end_src

      #+RESULTS:
    - But by trying with another set of data with heteroscedastic and
      quadratic noise I can not reproduce the problem
        #+begin_src R :results output :session :exports both
          x=runif(500,min=-100,max=100)
          a=5
          b=.5
          y=a+(b)*x + (rnorm(500,sd=.2)*20*x)^2
          df = data.frame(x=x,y=y)
          model <- rq(data=df, formula = y ~ x, tau=.05)
          summary(model,se="nid")
          plot(df)
          abline(model, col=2)
        #+end_src

        #+RESULTS:
        : 
        : Call: rq(formula = y ~ x, tau = 0.05, data = df)
        : 
        : tau: [1] 0.05
        : 
        : Coefficients:
        :             Value    Std. Error t value  Pr(>|t|)
        : (Intercept) 33.27156 15.25950    2.18038  0.02970
        : x            0.21854  0.21323    1.02489  0.30591
**** Take a look at rq function of R from the quantreg library
     Here I tried to extract the body of the fonction outside of the
     function by substituating the argument. I am doing that because
     it more convenient to explode the code and execute it step by step.
     The simplest way I saw of extractin the code was to just create a
     fake call in order to let the existing code handle the arguments
     as it was inside the function he belonged to.
***** Engel data
      We first initialize the data by substituating the parameters of
      the function:
      #+begin_src R :results output :session :exports both
        library(quantreg)
        data(engel)
        data = engel
        formula = formula(foodexp ~ income)
        tau = 0.5
        method = "br"
        model = TRUE
      #+end_src

      #+RESULTS:

      We create a fake call context and let the function retrieve the
      what it needs:
      #+begin_src R :results output :session :exports both
        call <- call("whocares", formula = formula, data = quote(data), tau = tau, method = "br", model = TRUE)
        mf <- call("whocares", formula = formula, data = quote(data), tau = tau, method = "br", model = TRUE, expand.dots = FALSE)
        m <- match(c("formula", "data", "subset", "weights", "na.action"), 
                   names(mf), 0)
        mf <- mf[c(1, m)]
        mf$drop.unused.levels <- TRUE
        mf[[1]] <- as.name("model.frame")
        mf <- eval.parent(mf)
        if (method == "model.frame") 
                                                 # return(mf)
             mf
         mt <- attr(mf, "terms")
         weights <- as.vector(model.weights(mf))
         Y <- model.response(mf)
         X <- model.matrix(mt, mf, contrasts)
         eps <- .Machine$double.eps^(2/3)
         Rho <- function(u, tau) u * (tau - (u < 0))
         print("====================== mf ======================")
         print(mf)
         print("====================== weights ======================")
         print(weights)
         print("====================== X ======================")
         print(X)
         print("====================== Y ======================")
         print(Y)
         print("====================== eps ======================")
         print(eps)
         print("====================== Rho ======================")
         print(Rho)      
      #+end_src

      #+RESULTS:
      #+begin_example
      [1] "====================== mf ======================"
            foodexp    income
      1    255.8394  420.1577
      2    310.9587  541.4117
      3    485.6800  901.1575
      4    402.9974  639.0802
      5    495.5608  750.8756
      6    633.7978  945.7989
      7    630.7566  829.3979
      8    700.4409  979.1648
      9    830.9586 1309.8789
      10   815.3602 1492.3987
      11   338.0014  502.8390
      12   412.3613  616.7168
      13   520.0006  790.9225
      14   452.4015  555.8786
      15   512.7201  713.4412
      16   658.8395  838.7561
      17   392.5995  535.0766
      18   443.5586  596.4408
      19   640.1164  924.5619
      20   333.8394  487.7583
      21   466.9583  692.6397
      22   543.3969  997.8770
      23   317.7198  506.9995
      24   424.3209  654.1587
      25   518.9617  933.9193
      26   338.0014  433.6813
      27   419.6412  587.5962
      28   476.3200  896.4746
      29   386.3602  454.4782
      30   423.2783  584.9989
      31   503.3572  800.7990
      32   354.6389  502.4369
      33   497.3182  713.5197
      34   588.5195  906.0006
      35   654.5971  880.5969
      36   550.7274  796.8289
      37   528.3770  854.8791
      38   640.4813 1167.3716
      39   401.3204  523.8000
      40   435.9990  670.7792
      41   276.5606  377.0584
      42   588.3488  851.5430
      43   664.1978 1121.0937
      44   444.8602  625.5179
      45   462.8995  805.5377
      46   377.7792  558.5812
      47   553.1504  884.4005
      48   810.8962 1257.4989
      49  1067.9541 2051.1789
      50  1049.8788 1466.3330
      51   522.7012  730.0989
      52   572.0807  800.7990
      53   907.3969 1245.6964
      54   811.5776 1201.0002
      55   427.7975  634.4002
      56   649.9985  956.2315
      57   860.6002 1148.6010
      58  1143.4211 1768.8236
      59  2032.6792 2822.5330
      60   590.6183  922.3548
      61  1570.3911 2293.1920
      62   483.4800  627.4726
      63   600.4804  889.9809
      64   696.2021 1162.2000
      65   774.7962 1197.0794
      66   390.5984  530.7972
      67   612.5619 1142.1526
      68   708.7622 1088.0039
      69   296.9192  484.6612
      70  1071.4627 1536.0201
      71   496.5976  678.8974
      72   503.3974  671.8802
      73   357.6411  690.4683
      74   430.3376  860.6948
      75   624.6990  873.3095
      76   582.5413  894.4598
      77   580.2215 1148.6470
      78   543.8807  926.8762
      79   588.6372  839.0414
      80   627.9999  829.4974
      81   712.1012 1264.0043
      82   968.3949 1937.9771
      83   482.5816  698.8317
      84   593.1694  920.4199
      85  1033.5658 1897.5711
      86   693.6795  891.6824
      87   693.6795  889.6784
      88   761.2791 1221.4818
      89   361.3981  544.5991
      90   628.4522 1031.4491
      91   771.4486 1462.9497
      92   757.1187  830.4353
      93   821.5970  975.0415
      94  1022.3202 1337.9983
      95   679.4407  867.6427
      96   538.7491  725.7459
      97   679.9981  989.0056
      98   977.0033 1525.0005
      99   561.2015  672.1960
      100  728.3997  923.3977
      101  372.3186  472.3215
      102  361.5210  590.7601
      103  517.9196  940.9218
      104  459.8177  643.3571
      105  863.9199 2551.6615
      106  831.4407 1795.3226
      107  534.7610 1165.7734
      108  392.0502  815.6212
      109  934.9752 1264.2066
      110  813.3081 1095.4056
      111  263.7100  447.4479
      112  769.0838 1178.9742
      113  630.5863  975.8023
      114  645.9874 1017.8522
      115  319.5584  423.8798
      116  348.4518  558.7767
      117  614.5068  943.2487
      118  662.0096 1348.3002
      119 1504.3708 2340.6174
      120  406.2180  587.1792
      121  692.1689 1540.9741
      122  588.1371 1115.8481
      123  511.2609 1044.6843
      124  700.5600 1389.7929
      125 1301.1451 2497.7860
      126  879.0660 1585.3809
      127  912.8851 1862.0438
      128 1509.7812 2008.8546
      129  484.0605  697.3099
      130  399.6703  571.2517
      131  444.1001  598.3465
      132  248.8101  461.0977
      133  527.8014  977.1107
      134  500.6313  883.9849
      135  436.8107  718.3594
      136  374.7990  543.8971
      137  726.3921 1587.3480
      138 1827.2000 4957.8130
      139  523.4911  969.6838
      140  334.9998  419.9980
      141  473.2009  561.9990
      142  581.2029  689.5988
      143  929.7540 1398.5203
      144  591.1974  820.8168
      145  637.5483  875.1716
      146  674.9509 1392.4499
      147  776.7589 1256.3174
      148  959.5170 1362.8590
      149 1250.9643 1999.2552
      150  737.8201 1209.4730
      151  810.6772 1125.0356
      152  983.0009 1827.4010
      153  708.8968 1014.1540
      154  633.1200  880.3944
      155 1424.8047 2432.3910
      156  830.9586 1177.8547
      157  925.5795 1222.5939
      158 1162.0024 1519.5811
      159  383.4580  687.6638
      160  621.1173  953.1192
      161  621.1173  953.1192
      162  621.1173  953.1192
      163  548.6002  939.0418
      164  745.2353 1283.4025
      165  837.8005 1511.5789
      166  795.3402 1342.5821
      167  418.5976  511.7980
      168  508.7974  689.7988
      169  883.2780 1532.3074
      170  742.5276 1056.0808
      171  242.3202  387.3195
      172  242.3202  387.3195
      173  266.0010  410.9987
      174  614.7588  832.7554
      175  385.3184  614.9986
      176  515.6200  887.4658
      177  708.4787 1024.8177
      178  734.2356 1006.4353
      179  433.0010  726.0000
      180  327.4188  494.4174
      181  429.0399  748.6413
      182  619.6408  987.6417
      183  400.7990  788.0961
      184  620.8006  831.7983
      185  819.9964 1139.4945
      186  360.8780  507.5169
      187  395.7608  576.1972
      188  442.0001  696.5991
      189  404.0384  650.8180
      190  670.7993  949.5802
      191  297.5702  497.1193
      192  353.4882  570.1674
      193  383.9376  724.7306
      194  284.8008  408.3399
      195  431.1000  638.6713
      196  801.3518 1225.7890
      197  448.4513  715.3701
      198  577.9111  800.4708
      199  570.5210  975.5974
      200  865.3205 1613.7565
      201  444.5578  608.5019
      202  680.4198  958.6634
      203  576.2779  835.9426
      204  631.7982  873.7375
      205  608.6419  951.4432
      206  300.9999  473.0022
      207  377.9984  601.0030
      208  397.0015  713.9979
      209  588.5195  829.2984
      210  681.7616  959.7953
      211  807.3603 1212.9613
      212  696.8011  958.8743
      213  811.1962 1129.4431
      214 1305.7201 1943.0419
      215  442.0001  539.6388
      216  353.6013  463.5990
      217  468.0008  562.6400
      218  526.7573  736.7584
      219  890.2390 1415.4461
      220 1318.8033 2208.7897
      221  331.0005  636.0009
      222  416.4015  759.4010
      223  596.8406 1078.8382
      224  408.4992  499.7510
      225  775.0209 1020.0225
      226 1138.1620 1595.1611
      227  485.5198  776.5958
      228  772.7611 1230.9235
      229  993.9630 1807.9520
      230  305.4390  415.4407
      231  306.5191  440.5174
      232  299.1993  541.2006
      233  468.0008  581.3599
      234  522.6019  743.0772
      235  750.3202 1057.6767
      [1] "====================== weights ======================"
      NULL
      [1] "====================== X ======================"
          (Intercept)    income
      1             1  420.1577
      2             1  541.4117
      3             1  901.1575
      4             1  639.0802
      5             1  750.8756
      6             1  945.7989
      7             1  829.3979
      8             1  979.1648
      9             1 1309.8789
      10            1 1492.3987
      11            1  502.8390
      12            1  616.7168
      13            1  790.9225
      14            1  555.8786
      15            1  713.4412
      16            1  838.7561
      17            1  535.0766
      18            1  596.4408
      19            1  924.5619
      20            1  487.7583
      21            1  692.6397
      22            1  997.8770
      23            1  506.9995
      24            1  654.1587
      25            1  933.9193
      26            1  433.6813
      27            1  587.5962
      28            1  896.4746
      29            1  454.4782
      30            1  584.9989
      31            1  800.7990
      32            1  502.4369
      33            1  713.5197
      34            1  906.0006
      35            1  880.5969
      36            1  796.8289
      37            1  854.8791
      38            1 1167.3716
      39            1  523.8000
      40            1  670.7792
      41            1  377.0584
      42            1  851.5430
      43            1 1121.0937
      44            1  625.5179
      45            1  805.5377
      46            1  558.5812
      47            1  884.4005
      48            1 1257.4989
      49            1 2051.1789
      50            1 1466.3330
      51            1  730.0989
      52            1  800.7990
      53            1 1245.6964
      54            1 1201.0002
      55            1  634.4002
      56            1  956.2315
      57            1 1148.6010
      58            1 1768.8236
      59            1 2822.5330
      60            1  922.3548
      61            1 2293.1920
      62            1  627.4726
      63            1  889.9809
      64            1 1162.2000
      65            1 1197.0794
      66            1  530.7972
      67            1 1142.1526
      68            1 1088.0039
      69            1  484.6612
      70            1 1536.0201
      71            1  678.8974
      72            1  671.8802
      73            1  690.4683
      74            1  860.6948
      75            1  873.3095
      76            1  894.4598
      77            1 1148.6470
      78            1  926.8762
      79            1  839.0414
      80            1  829.4974
      81            1 1264.0043
      82            1 1937.9771
      83            1  698.8317
      84            1  920.4199
      85            1 1897.5711
      86            1  891.6824
      87            1  889.6784
      88            1 1221.4818
      89            1  544.5991
      90            1 1031.4491
      91            1 1462.9497
      92            1  830.4353
      93            1  975.0415
      94            1 1337.9983
      95            1  867.6427
      96            1  725.7459
      97            1  989.0056
      98            1 1525.0005
      99            1  672.1960
      100           1  923.3977
      101           1  472.3215
      102           1  590.7601
      103           1  940.9218
      104           1  643.3571
      105           1 2551.6615
      106           1 1795.3226
      107           1 1165.7734
      108           1  815.6212
      109           1 1264.2066
      110           1 1095.4056
      111           1  447.4479
      112           1 1178.9742
      113           1  975.8023
      114           1 1017.8522
      115           1  423.8798
      116           1  558.7767
      117           1  943.2487
      118           1 1348.3002
      119           1 2340.6174
      120           1  587.1792
      121           1 1540.9741
      122           1 1115.8481
      123           1 1044.6843
      124           1 1389.7929
      125           1 2497.7860
      126           1 1585.3809
      127           1 1862.0438
      128           1 2008.8546
      129           1  697.3099
      130           1  571.2517
      131           1  598.3465
      132           1  461.0977
      133           1  977.1107
      134           1  883.9849
      135           1  718.3594
      136           1  543.8971
      137           1 1587.3480
      138           1 4957.8130
      139           1  969.6838
      140           1  419.9980
      141           1  561.9990
      142           1  689.5988
      143           1 1398.5203
      144           1  820.8168
      145           1  875.1716
      146           1 1392.4499
      147           1 1256.3174
      148           1 1362.8590
      149           1 1999.2552
      150           1 1209.4730
      151           1 1125.0356
      152           1 1827.4010
      153           1 1014.1540
      154           1  880.3944
      155           1 2432.3910
      156           1 1177.8547
      157           1 1222.5939
      158           1 1519.5811
      159           1  687.6638
      160           1  953.1192
      161           1  953.1192
      162           1  953.1192
      163           1  939.0418
      164           1 1283.4025
      165           1 1511.5789
      166           1 1342.5821
      167           1  511.7980
      168           1  689.7988
      169           1 1532.3074
      170           1 1056.0808
      171           1  387.3195
      172           1  387.3195
      173           1  410.9987
      174           1  832.7554
      175           1  614.9986
      176           1  887.4658
      177           1 1024.8177
      178           1 1006.4353
      179           1  726.0000
      180           1  494.4174
      181           1  748.6413
      182           1  987.6417
      183           1  788.0961
      184           1  831.7983
      185           1 1139.4945
      186           1  507.5169
      187           1  576.1972
      188           1  696.5991
      189           1  650.8180
      190           1  949.5802
      191           1  497.1193
      192           1  570.1674
      193           1  724.7306
      194           1  408.3399
      195           1  638.6713
      196           1 1225.7890
      197           1  715.3701
      198           1  800.4708
      199           1  975.5974
      200           1 1613.7565
      201           1  608.5019
      202           1  958.6634
      203           1  835.9426
      204           1  873.7375
      205           1  951.4432
      206           1  473.0022
      207           1  601.0030
      208           1  713.9979
      209           1  829.2984
      210           1  959.7953
      211           1 1212.9613
      212           1  958.8743
      213           1 1129.4431
      214           1 1943.0419
      215           1  539.6388
      216           1  463.5990
      217           1  562.6400
      218           1  736.7584
      219           1 1415.4461
      220           1 2208.7897
      221           1  636.0009
      222           1  759.4010
      223           1 1078.8382
      224           1  499.7510
      225           1 1020.0225
      226           1 1595.1611
      227           1  776.5958
      228           1 1230.9235
      229           1 1807.9520
      230           1  415.4407
      231           1  440.5174
      232           1  541.2006
      233           1  581.3599
      234           1  743.0772
      235           1 1057.6767
      attr(,"assign")
      [1] 0 1
      [1] "====================== Y ======================"
              1         2         3         4         5         6         7         8 
       255.8394  310.9587  485.6800  402.9974  495.5608  633.7978  630.7566  700.4409 
              9        10        11        12        13        14        15        16 
       830.9586  815.3602  338.0014  412.3613  520.0006  452.4015  512.7201  658.8395 
             17        18        19        20        21        22        23        24 
       392.5995  443.5586  640.1164  333.8394  466.9583  543.3969  317.7198  424.3209 
             25        26        27        28        29        30        31        32 
       518.9617  338.0014  419.6412  476.3200  386.3602  423.2783  503.3572  354.6389 
             33        34        35        36        37        38        39        40 
       497.3182  588.5195  654.5971  550.7274  528.3770  640.4813  401.3204  435.9990 
             41        42        43        44        45        46        47        48 
       276.5606  588.3488  664.1978  444.8602  462.8995  377.7792  553.1504  810.8962 
             49        50        51        52        53        54        55        56 
      1067.9541 1049.8788  522.7012  572.0807  907.3969  811.5776  427.7975  649.9985 
             57        58        59        60        61        62        63        64 
       860.6002 1143.4211 2032.6792  590.6183 1570.3911  483.4800  600.4804  696.2021 
             65        66        67        68        69        70        71        72 
       774.7962  390.5984  612.5619  708.7622  296.9192 1071.4627  496.5976  503.3974 
             73        74        75        76        77        78        79        80 
       357.6411  430.3376  624.6990  582.5413  580.2215  543.8807  588.6372  627.9999 
             81        82        83        84        85        86        87        88 
       712.1012  968.3949  482.5816  593.1694 1033.5658  693.6795  693.6795  761.2791 
             89        90        91        92        93        94        95        96 
       361.3981  628.4522  771.4486  757.1187  821.5970 1022.3202  679.4407  538.7491 
             97        98        99       100       101       102       103       104 
       679.9981  977.0033  561.2015  728.3997  372.3186  361.5210  517.9196  459.8177 
            105       106       107       108       109       110       111       112 
       863.9199  831.4407  534.7610  392.0502  934.9752  813.3081  263.7100  769.0838 
            113       114       115       116       117       118       119       120 
       630.5863  645.9874  319.5584  348.4518  614.5068  662.0096 1504.3708  406.2180 
            121       122       123       124       125       126       127       128 
       692.1689  588.1371  511.2609  700.5600 1301.1451  879.0660  912.8851 1509.7812 
            129       130       131       132       133       134       135       136 
       484.0605  399.6703  444.1001  248.8101  527.8014  500.6313  436.8107  374.7990 
            137       138       139       140       141       142       143       144 
       726.3921 1827.2000  523.4911  334.9998  473.2009  581.2029  929.7540  591.1974 
            145       146       147       148       149       150       151       152 
       637.5483  674.9509  776.7589  959.5170 1250.9643  737.8201  810.6772  983.0009 
            153       154       155       156       157       158       159       160 
       708.8968  633.1200 1424.8047  830.9586  925.5795 1162.0024  383.4580  621.1173 
            161       162       163       164       165       166       167       168 
       621.1173  621.1173  548.6002  745.2353  837.8005  795.3402  418.5976  508.7974 
            169       170       171       172       173       174       175       176 
       883.2780  742.5276  242.3202  242.3202  266.0010  614.7588  385.3184  515.6200 
            177       178       179       180       181       182       183       184 
       708.4787  734.2356  433.0010  327.4188  429.0399  619.6408  400.7990  620.8006 
            185       186       187       188       189       190       191       192 
       819.9964  360.8780  395.7608  442.0001  404.0384  670.7993  297.5702  353.4882 
            193       194       195       196       197       198       199       200 
       383.9376  284.8008  431.1000  801.3518  448.4513  577.9111  570.5210  865.3205 
            201       202       203       204       205       206       207       208 
       444.5578  680.4198  576.2779  631.7982  608.6419  300.9999  377.9984  397.0015 
            209       210       211       212       213       214       215       216 
       588.5195  681.7616  807.3603  696.8011  811.1962 1305.7201  442.0001  353.6013 
            217       218       219       220       221       222       223       224 
       468.0008  526.7573  890.2390 1318.8033  331.0005  416.4015  596.8406  408.4992 
            225       226       227       228       229       230       231       232 
       775.0209 1138.1620  485.5198  772.7611  993.9630  305.4390  306.5191  299.1993 
            233       234       235 
       468.0008  522.6019  750.3202
      [1] "====================== eps ======================"
      [1] 3.666853e-11
      [1] "====================== Rho ======================"
      function(u, tau) u * (tau - (u < 0))
#+end_example

      In our cause we only have  1 tau, so the if is skipped. For more
      precision checkout the comment in the following source code. 
     #+begin_src R :results output :session :exports both
       if (length(tau) > 1) {
           # if (any(tau < 0) || any(tau > 1)) 
              # stop("invalid tau:  taus should be >= 0 and <= 1")
           if (any(tau == 0)) 
               tau[tau == 0] <- eps
           if (any(tau == 1)) 
               tau[tau == 1] <- 1 - eps
           coef <- matrix(0, ncol(X), length(tau))
           rho <- rep(0, length(tau))
           fitted <- resid <- matrix(0, nrow(X), length(tau))
           for (i in 1:length(tau)) {
               z <- {
                   if (length(weights)) 
                       rq.wfit(X, Y, tau = tau[i], weights, method
                               )
                   else rq.fit(X, Y, tau = tau[i], method)
               }
               coef[, i] <- z$coefficients
               resid[, i] <- z$residuals
               rho[i] <- sum(Rho(z$residuals, tau[i]))
               fitted[, i] <- Y - z$residuals
           }
           taulabs <- paste("tau=", format(round(tau, 3)))
           dimnames(coef) <- list(dimnames(X)[[2]], taulabs)
           dimnames(resid) <- list(dimnames(X)[[1]], taulabs)
           fit <- z
           fit$coefficients <- coef
           fit$residuals <- resid
           fit$fitted.values <- fitted
           if (method == "lasso") 
               class(fit) <- c("lassorqs", "rqs")
           else if (method == "scad") 
               class(fit) <- c("scadrqs", "rqs")
           else class(fit) <- "rqs"
       }
       else {
           process <- (tau < 0 || tau > 1)
           if (tau == 0) 
               tau <- eps
           if (tau == 1) 
               tau <- 1 - eps
           fit <- {
               if (length(weights)) 
                   rq.wfit(X, Y, tau = tau, weights, method)
               # Only this, ...
               else rq.fit(X, Y, tau = tau, method)
           }
           if (process) 
               rho <- list(x = fit$sol[1, ], y = fit$sol[3, ])
           else {
               # ..., and this calls interest us. Because we have a tau of 0.5
               # and we use no weight
               dimnames(fit$residuals) <- list(dimnames(X)[[1]], 
                                               NULL)
               rho <- sum(Rho(fit$residuals, tau))
               print("====================== rho ======================")
               print(rho)
           }
           if (method == "lasso") 
               class(fit) <- c("lassorq", "rq")
           else if (method == "scad") 
               class(fit) <- c("scadrq", "rq")
           else class(fit) <- ifelse(process, "rq.process", "rq")
       }
     #+end_src

     #+RESULTS:
     : Erreur : 'else' inattendu(e) in "else"
     : Erreur : 'else' inattendu(e) in "    else"
     : [1] "====================== rho ======================"
     : [1] 8779.966
     : Erreur : '}' inattendu(e) in "    }"
     : Erreur : 'else' inattendu(e) in "    else"
     : Erreur : 'else' inattendu(e) in "    else"
     : Erreur : '}' inattendu(e) in "}"

     #+begin_src R :results output :session :exports both
       fit$na.action <- attr(mf, "na.action")
       fit$formula <- formula
       fit$terms <- mt
       fit$xlevels <- .getXlevels(mt, mf)
       fit$call <- call
       fit$tau <- tau
       fit$weights <- weights
       fit$residuals <- drop(fit$residuals)
       fit$rho <- rho
       fit$method <- method
       fit$fitted.values <- drop(fit$fitted.values)
       attr(fit, "na.message") <- attr(m, "na.message")
       if (model) 
           fit$model <- mf
       # fit
       summary(fit)
       print(fit$na.action)
       print(fit$formula)
       print(fit$terms)
       print(fit$xlevels)
       print(fit$call)
       print(fit$tau)
       print(fit$weights)
       print(fit$residuals)
       print(fit$rho)
       print(fit$method)
       print(fit$fitted.values)

     #+end_src

     #+RESULTS:
     #+begin_example

     Call: whocares(formula = foodexp ~ income, data = data, tau = 0.5, 
         method = "br", model = TRUE)

     tau: [1] 0.5

     Coefficients:
                 coefficients lower bd  upper bd 
     (Intercept)  81.48225     53.25915 114.01156
     income        0.56018      0.48702   0.60199
     NULL
     foodexp ~ income
     foodexp ~ income
     attr(,"variables")
     list(foodexp, income)
     attr(,"factors")
             income
     foodexp      0
     income       1
     attr(,"term.labels")
     [1] "income"
     attr(,"order")
     [1] 1
     attr(,"intercept")
     [1] 1
     attr(,"response")
     [1] 1
     attr(,".Environment")
     <environment: R_GlobalEnv>
     attr(,"predvars")
     list(foodexp, income)
     attr(,"dataClasses")
       foodexp    income 
     "numeric" "numeric"
     named list()
     whocares(formula = foodexp ~ income, data = data, tau = 0.5, 
         method = "br", model = TRUE)
     [1] 0.5
     NULL
                 1             2             3             4             5 
     -6.100697e+01 -7.381189e+01 -1.006131e+02 -3.648521e+01 -6.547383e+00 
                 6             7             8             9            10 
      2.249740e+01  8.466175e+01  7.044956e+01  1.570767e+01 -1.021348e+02 
                11            12            13            14            15 
     -2.516148e+01 -1.459369e+01 -4.541038e+00  5.952682e+01  3.158193e+01 
                16            17            18            19            20 
      1.075024e+02  1.137772e+01  2.796185e+01  4.071254e+01 -2.087557e+01 
                21            22            23            24            25 
     -2.527237e+00 -9.707662e+01 -4.777366e+01 -2.360834e+01 -8.568400e+01 
                26            27            28            29            30 
      1.357929e+01  8.998957e+00 -1.073499e+02  5.028805e+01  1.409109e+01 
                31            32            33            34            35 
     -2.671711e+01 -8.298742e+00  1.613608e+01 -4.867151e-01  7.982163e+01 
                36            37            38            39            40 
      2.287712e+01 -3.199189e+01 -9.493976e+01  2.641552e+01 -2.124068e+01 
                41            42            43            44            45 
     -1.614240e+01  2.984874e+01 -4.529933e+01  1.297494e+01 -6.982928e+01 
                46            47            48            49            50 
     -1.660933e+01 -2.375576e+01  2.498750e+01 -1.625587e+02  1.469853e+02 
                51            52            53            54            55 
      3.223176e+01  4.200638e+01  1.280998e+02  5.731838e+01 -9.063386e+00 
                56            57            58            59            60 
      3.285395e+01  1.356939e+02  7.107823e+01  3.700688e+02 -7.549159e+00 
                61            62            63            64            65 
      2.043073e+02  5.049983e+01  2.044816e+01 -3.632195e+01  2.273336e+01 
                66            67            68            69            70 
      1.177392e+01 -1.087320e+02  1.780129e+01 -5.606082e+01  1.295319e+02 
                71            72            73            74            75 
      3.481022e+01  4.554099e+01 -1.106280e+02 -1.332892e+02  5.400581e+01 
                76            77            78            79            80 
     -1.136868e-13 -1.447104e+02 -5.681952e+01  3.714028e+01  8.184933e+01 
                81            82            83            84            85 
     -7.745172e+01 -1.987044e+02  9.627390e+00 -3.914200e+00 -1.108989e+02 
                86            87            88            89            90 
      1.126941e+02  1.138167e+02 -4.453536e+00 -2.515804e+01 -3.082776e+01 
                91            92            93            94            95 
     -1.295496e+02  2.104427e+02  1.939155e+02  1.913173e+02  1.119219e+02 
                96            97            98            99           100 
      5.071811e+01  4.449414e+01  4.124542e+01  1.031681e+02  1.296481e+02 
               101           102           103           104           105 
      2.625103e+01 -5.089361e+01 -9.064873e+01  1.793925e+01 -6.469535e+02 
               106           107           108           109           110 
     -2.557463e+02 -1.997648e+02 -1.463271e+02  1.453090e+02  1.182009e+02 
               111           112           113           114           115 
     -6.842384e+01  2.716320e+01  2.478571e+00 -5.675853e+00  6.269010e-01 
               116           117           118           119           120 
     -4.604628e+01  4.634969e+00 -1.747643e+02  1.117202e+02 -4.190582e+00 
               121           122           123           124           125 
     -2.525370e+02 -1.184216e+02 -1.554332e+02 -1.594572e+02 -1.795483e+02 
               126           127           128           129           130 
     -9.051580e+01 -2.116779e+02  3.029776e+02  1.195883e+01 -1.816049e+00 
               131           132           133           134           135 
      2.743579e+01 -9.097011e+01 -1.010393e+02 -7.604206e+01 -4.708248e+01 
               136           137           138           139           140 
     -1.136376e+01 -2.442916e+02 -1.031553e+03 -1.011891e+02  1.824285e+01 
               141           142           143           144           145 
      7.689775e+01  1.134209e+02  6.484787e+01  4.990954e+01  6.581191e+01 
               146           147           148           149           150 
     -1.865547e+02 -8.487910e+00  1.145876e+02  4.953820e+01 -2.118542e+01 
               151           152           153           154           155 
      9.897191e+01 -1.221559e+02  5.930526e+01  5.845794e+01 -1.925572e+01 
               156           157           158           159           160 
      8.966509e+01  1.592239e+02  2.292804e+02 -8.324015e+01  5.716229e+00 
               161           162           163           164           165 
      5.716229e+00  5.716229e+00 -5.891497e+01 -5.518405e+01 -9.043884e+01 
               166           167           168           169           170 
     -3.823040e+01  5.041604e+01  4.090332e+01 -5.657305e+01  6.944938e+01 
               171           172           173           174           175 
     -5.613091e+01 -5.613091e+01 -4.571473e+01  6.678316e+01 -4.067411e+01 
               176           177           178           179           180 
     -6.300337e+01  5.291352e+01  8.896788e+01 -5.517234e+01 -3.102646e+01 
               181           182           183           184           185 
     -7.181663e+01 -1.509910e+01 -1.221594e+02  7.336115e+01  1.001916e+02 
               186           187           188           189           190 
     -4.905323e+00 -8.495920e+00 -2.970344e+01 -4.201939e+01  5.738070e+01 
               191           192           193           194           195 
     -6.238865e+01 -4.739077e+01 -1.035246e+02 -2.542553e+01 -8.153551e+00 
               196           197           198           199           200 
      3.320635e+01 -3.376739e+01  4.802067e+01 -5.747192e+01 -1.201567e+02 
               201           202           203           204           205 
      2.220460e+01  6.191300e+01  2.651684e+01  6.086517e+01 -5.820379e+00 
               206           207           208           209           210 
     -4.544895e+01 -4.015405e+01 -8.444850e+01  4.248040e+01  6.262068e+01 
               211           212           213           214           215 
      4.640070e+01  7.817611e+01  9.702191e+01  1.357836e+02  5.822265e+01 
               216           217           218           219           220 
      1.241989e+01  7.133856e+01  3.255738e+01  1.585143e+01  0.000000e+00 
               221           222           223           224           225 
     -1.067571e+02 -9.048241e+01 -8.898587e+01  4.706617e+01  1.221419e+02 
               226           227           228           229           230 
      1.631016e+02 -3.099634e+01  1.739476e+00 -1.002988e+02 -8.765101e+00 
               231           232           233           234           235 
     -2.173246e+01 -8.545297e+01  6.085205e+01  2.486224e+01  7.634799e+01
     [1] 8779.966
     [1] "br"
             1         2         3         4         5         6         7         8 
      316.8464  384.7706  586.2931  439.4826  502.1082  611.3004  546.0948  629.9913 
             9        10        11        12        13        14        15        16 
      815.2510  917.4950  363.1629  426.9550  524.5417  392.8747  481.1381  551.3371 
            17        18        19        20        21        22        23        24 
      381.2218  415.5968  599.4038  354.7150  469.4856  640.4735  365.4935  447.9292 
            25        26        27        28        29        30        31        32 
      604.6457  324.4221  410.6422  583.6699  336.0721  409.1873  530.0743  362.9376 
            33        34        35        36        37        38        39        40 
      481.1821  589.0062  574.7755  527.8503  560.3689  735.4211  374.9048  457.2397 
            41        42        43        44        45        46        47        48 
      292.7030  558.5001  709.4971  431.8852  532.7288  394.3886  576.9062  785.9087 
            49        50        51        52        53        54        55        56 
     1230.5128  902.8935  490.4694  530.0743  779.2971  754.2592  436.8609  617.1445 
            57        58        59        60        61        62        63        64 
      724.9062 1072.3429 1662.6104  598.1675 1366.0838  432.9802  580.0322  732.5241 
            65        66        67        68        69        70        71        72 
      752.0628  378.8245  721.2939  690.9609  352.9800  941.9308  461.7874  457.8564 
            73        74        75        76        77        78        79        80 
      468.2691  563.6267  570.6932  582.5413  724.9320  600.7003  551.4969  546.1506 
            81        82        83        84        85        86        87        88 
      789.5529 1167.0994  472.9542  597.0836 1144.4647  580.9854  579.8628  765.7326 
            89        90        91        92        93        94        95        96 
      386.5561  659.2800  900.9982  546.6759  627.6815  831.0029  567.5188  488.0310 
            97        98        99       100       101       102       103       104 
      635.5040  935.7579  458.0334  598.7517  346.0676  412.4146  608.5683  441.8784 
           105       106       107       108       109       110       111       112 
     1510.8734 1087.1870  734.5258  538.3774  789.6662  695.1072  332.1338  741.9207 
           113       114       115       116       117       118       119       120 
      628.1077  651.6633  318.9315  394.4981  609.8718  836.7738 1392.6506  410.4086 
           121       122       123       124       125       126       127       128 
      944.7059  706.5586  666.6941  860.0172 1480.6934  969.5818 1124.5630 1206.8035 
           129       130       131       132       133       134       135       136 
      472.1017  401.4864  416.6643  339.7802  628.8407  576.6734  483.8932  386.1628 
           137       138       139       140       141       142       143       144 
      970.6837 2858.7527  624.6802  316.7570  396.3031  467.7821  864.9061  541.2879 
           145       146       147       148       149       150       151       152 
      571.7364  861.5056  785.2468  844.9294 1201.4261  759.0055  711.7053 1105.1567 
           153       154       155       156       157       158       159       160 
      649.5916  574.6621 1444.0604  741.2935  766.3556  932.7220  466.6981  615.4011 
           161       162       163       164       165       166       167       168 
      615.4011  615.4011  607.5152  800.4193  928.2393  833.5706  368.1815  467.8941 
           169       170       171       172       173       174       175       176 
      939.8511  673.0782  298.4511  298.4511  311.7157  547.9756  425.9925  578.6233 
           177       178       179       180       181       182       183       184 
      655.5652  645.2678  488.1733  358.4452  500.8566  634.7399  522.9583  547.4395 
           185       186       187       188       189       190       191       192 
      719.8049  365.7833  404.2567  471.7035  446.0578  613.4186  359.9588  400.8789 
           193       194       195       196       197       198       199       200 
      487.4622  310.2263  439.2535  768.1454  482.2187  529.8904  627.9929  985.4773 
           201       202       203       204       205       206       207       208 
      422.3532  618.5068  549.7611  570.9330  614.4622  346.4489  418.1525  481.4500 
           209       210       211       212       213       214       215       216 
      546.0391  619.1409  760.9596  618.6250  714.1743 1169.9365  383.7774  341.1814 
           217       218       219       220       221       222       223       224 
      396.6622  494.2000  874.3876 1318.8033  437.7576  506.8839  685.8264  361.4330 
           225       226       227       228       229       230       231       232 
      652.8790  975.0605  516.5161  771.0217 1094.2618  314.2041  328.2515  384.6523 
           233       234       235 
      407.1488  497.7397  673.9722
#+end_example

***** Brute force data
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_03_11/pilipili2/19_13_54/Data19_13_54_linear.yaml
     #+end_src

     #+begin_src R :results output :session :exports both
       library(quantreg)
       data = read.csv("/tmp/test.csv",strip.white=T,header=T)
       data$log_time_per_pixel <- log(data$time_per_pixel)
       formula = formula(time_per_pixel ~ x_component_number)
       tau = 0.5
       method = "br"
       model = TRUE
     #+end_src

     #+RESULTS:

      We create a fake call context and let the function retrieve the
      what it needs:
      #+begin_src R :results output :session :exports both
        call <- call("whocares", formula = formula, data = quote(data), tau = tau, method = "br", model = TRUE)
        mf <- call("whocares", formula = formula, data = quote(data), tau = tau, method = "br", model = TRUE, expand.dots = FALSE)
        m <- match(c("formula", "data", "subset", "weights", "na.action"), 
                   names(mf), 0)
        mf <- mf[c(1, m)]
        mf$drop.unused.levels <- TRUE
        mf[[1]] <- as.name("model.frame")
        mf <- eval.parent(mf)
        if (method == "model.frame") 
                                                 # return(mf)
             mf
         mt <- attr(mf, "terms")
         weights <- as.vector(model.weights(mf))
         Y <- model.response(mf)
         X <- model.matrix(mt, mf, contrasts)
         eps <- .Machine$double.eps^(2/3)
         Rho <- function(u, tau) u * (tau - (u < 0))
         print("====================== mf ======================")
         print(mf)
         print("====================== weights ======================")
         print(weights)
         print("====================== X ======================")
         print(X)
         print("====================== Y ======================")
         print(Y)
         print("====================== eps ======================")
         print(eps)
         print("====================== Rho ======================")
         print(Rho)      
      #+end_src

      #+RESULTS:
      #+begin_example
      [1] "====================== mf ======================"
           time_per_pixel x_component_number
      1      4.210427e-10                  8
      2      3.940558e-10                  8
      3      1.753562e-10                  4
      4      4.097376e-10                 16
      5      3.911086e-10                  8
      6      4.227546e-10                  2
      7      1.608701e-10                  4
      8      1.774761e-10                  4
      9      4.440009e-10                  4
      10     2.800922e-10                  1
      11     2.346357e-10                  8
      12     7.468139e-10                  4
      13     1.753731e-10                  4
      14     2.230951e-10                  8
      15     2.840986e-10                  1
      16     5.875795e-10                 16
      17     4.180634e-10                 16
      18     2.314729e-10                  4
      19     1.503698e-10                  2
      20     3.908138e-10                 16
      21     1.587765e-10                  4
      22     3.906324e-10                  8
      23     2.630764e-10                  8
      24     1.596652e-10                  2
      25     3.893867e-10                  8
      26     8.423369e-10                  2
      27     3.258722e-10                 16
      28     2.056482e-10                  4
      29     1.585265e-10                  4
      30     2.337238e-10                  8
      31     7.134660e-10                  1
      32     1.314790e-10                  1
      33     3.779901e-10                  2
      34     2.068491e-10                  8
      35     1.766603e-10                  4
      36     3.481895e-10                 16
      37     2.570472e-10                  4
      38     2.087954e-10                  8
      39     4.453031e-10                  4
      40     5.260084e-10                  2
      41     2.103868e-10                  4
      42     5.886111e-10                 16
      43     4.846906e-10                  1
      44     1.146456e-09                  2
      45     2.920874e-10                  1
      46     3.629633e-10                 16
      47     3.161069e-10                  2
      48     3.921639e-10                  8
      49     2.092972e-10                  4
      50     2.843498e-10                  2
      51     7.074632e-10                  2
      52     3.415904e-10                 16
      53     4.283393e-10                  4
      54     4.477139e-10                  4
      55     4.847676e-10                  1
      56     3.467863e-10                 16
      57     1.142555e-09                  2
      58     2.241426e-10                  8
      59     1.608181e-10                  2
      60     3.540623e-10                  8
      61     4.767071e-10                  1
      62     3.651874e-10                  8
      63     4.239355e-10                  4
      64     4.131189e-10                  2
      65     4.083488e-10                 16
      66     3.732752e-10                  2
      67     2.299818e-10                  4
      68     2.347500e-10                  4
      69     1.318569e-09                  2
      70     5.937168e-10                 16
      71     1.334640e-09                  1
      72     4.913603e-10                  4
      73     2.304815e-10                  2
      74     5.937167e-10                 16
      75     2.567062e-10                  4
      76     6.181431e-10                  2
      77     1.355607e-10                  1
      78     3.451563e-10                 16
      79     2.730256e-10                  2
      80     7.230221e-10                  2
      81     2.885728e-10                  2
      82     2.886801e-10                  2
      83     3.452533e-10                 16
      84     1.994580e-09                  1
      85     5.215117e-10                  1
      86     4.001576e-10                 16
      87     1.454573e-10                  2
      88     6.390438e-10                  1
      89     1.505876e-10                  2
      90     1.525453e-09                  1
      91     1.326025e-09                  2
      92     3.428147e-10                 16
      93     4.433655e-10                  4
      94     2.954552e-10                  1
      95     1.663365e-10                  2
      96     2.261640e-10                  8
      97     3.449591e-10                 16
      98     3.438713e-10                 16
      99     2.823171e-10                  2
      100    2.678420e-10                  1
      101    7.199041e-10                  2
      102    2.164415e-10                  8
      103    1.356826e-09                  2
      104    3.447496e-10                 16
      105    2.003520e-10                  1
      106    1.340395e-09                  1
      107    6.176998e-10                  8
      108    2.827277e-10                  1
      109    7.187821e-10                  2
      110    4.802876e-10                  2
      111    3.066959e-10                  4
      112    2.687567e-10                  8
      113    3.336536e-10                  1
      114    2.718771e-10                  8
      115    4.118471e-10                 16
      116    6.797539e-10                  2
      117    3.893113e-10                  8
      118    2.676723e-10                  1
      119    1.170362e-09                  1
      120    1.583080e-10                  4
      121    1.524676e-10                  2
      122    3.726608e-10                  2
      123    1.192852e-09                  1
      124    2.638018e-10                  8
      125    2.388301e-10                  4
      126    7.659985e-10                  2
      127    5.488066e-10                  1
      128    3.392240e-10                  2
      129    4.172776e-10                 16
      130    6.941926e-10                  2
      131    1.157389e-09                  2
      132    3.256724e-10                 16
      133    5.887294e-10                 16
      134    5.853422e-10                 16
      135    1.431177e-10                  1
      136    2.306037e-10                  8
      137    2.045464e-09                  1
      138    7.749670e-10                  2
      139    4.267113e-10                  2
      140    7.258466e-10                  1
      141    2.743044e-10                  8
      142    3.414927e-10                  1
      143    2.269017e-10                  1
      144    2.318767e-10                  4
      145    2.831444e-10                  2
      146    2.137493e-10                  4
      147    3.798108e-10                  8
      148    1.698727e-10                  4
      149    4.152897e-10                 16
      150    4.327192e-10                  4
      151    2.631155e-10                  8
      152    3.608841e-10                 16
      153    3.600398e-10                 16
      154    3.429187e-10                 16
      155    4.092111e-10                  2
      156    2.218426e-10                  8
      157    2.306364e-10                  4
      158    1.386640e-10                  1
      159    5.081421e-10                  4
      160    5.901408e-10                 16
      161    3.598285e-10                  8
      162    2.706742e-10                  1
      163    2.285007e-09                  1
      164    2.253857e-10                  8
      165    3.148812e-10                  4
      166    2.633642e-10                  8
      167    3.571069e-10                 16
      168    4.851583e-10                  1
      169    5.842718e-10                 16
      170    2.888076e-10                  2
      171    1.765903e-10                  4
      172    5.830172e-10                 16
      173    3.889113e-10                  8
      174    3.849985e-10                  8
      175    6.790116e-10                  2
      176    7.287500e-10                  4
      177    3.473051e-10                 16
      178    9.408394e-10                  1
      179    4.867956e-10                  1
      180    3.895397e-10                  8
      181    1.395163e-09                  1
      182    4.947202e-10                  2
      183    3.436732e-10                 16
      184    2.733393e-10                  2
      185    3.195092e-10                  2
      186    4.995451e-10                  2
      187    5.893385e-10                 16
      188    9.539689e-10                  1
      189    3.882522e-10                  8
      190    2.548874e-10                  4
      191    5.860884e-10                 16
      192    4.670684e-10                  8
      193    4.054014e-10                  2
      194    1.769934e-10                  4
      195    2.234858e-10                  8
      196    5.940778e-10                 16
      197    5.179439e-10                  1
      198    3.424729e-10                  4
      199    1.336758e-09                  1
      200    5.938604e-10                  1
      201    1.646137e-10                  4
      202    7.380437e-10                  2
      203    1.547899e-10                  2
      204    3.630206e-10                 16
      205    3.443495e-10                 16
      206    3.084030e-10                  4
      207    5.038608e-10                  1
      208    2.167768e-10                  8
      209    2.690066e-10                  2
      210    1.483437e-10                  1
      211    4.063971e-10                 16
      212    4.172577e-10                  1
      213    4.688924e-10                  1
      214    1.480810e-09                  1
      215    2.654471e-10                  8
      216    5.869208e-10                 16
      217    3.927877e-10                  8
      218    1.181546e-09                  1
      219    1.064565e-09                  1
      220    7.681713e-10                  1
      221    4.491263e-10                  4
      222    4.786172e-10                  2
      223    2.332745e-10                  8
      224    3.094526e-10                  4
      225    2.631647e-10                  8
      226    3.919478e-10                  8
      227    3.027007e-10                  4
      228    6.826578e-10                  2
      229    2.680198e-10                  2
      230    3.500296e-10                 16
      231    2.684167e-10                  2
      232    3.467182e-10                 16
      233    3.876472e-10                 16
      234    6.070898e-10                  1
      235    3.175880e-10                  1
      236    3.605059e-10                 16
      237    1.175036e-09                  1
      238    1.832774e-10                  2
      239    3.101223e-10                  4
      240    4.050205e-10                  2
      241    1.273354e-10                  1
      242    3.647338e-10                 16
      243    2.287588e-10                  8
      244    3.972848e-10                 16
      245    7.222393e-10                  2
      246    1.140750e-09                  2
      247    3.994818e-10                 16
      248    2.031072e-09                  1
      249    2.398663e-09                  1
      250    3.433329e-10                 16
      251    1.285902e-09                  1
      252    2.279659e-10                  1
      253    3.389511e-10                 16
      254    2.273390e-10                  8
      255    3.458586e-10                 16
      256    6.484592e-10                  1
      257    7.293533e-10                  2
      258    3.605099e-10                 16
      259    2.789528e-10                  2
      260    4.068591e-10                 16
      261    2.688823e-10                  8
      262    3.886429e-10                  8
      263    7.244047e-10                  4
      264    2.737369e-10                  8
      265    5.019598e-10                  2
      266    2.679607e-10                  8
      267    2.606280e-10                  2
      268    1.741384e-10                  4
      269    8.433627e-10                  2
      270    2.080193e-10                  4
      271    8.829431e-10                  2
      272    3.740894e-10                  2
      273    2.232484e-10                  8
      274    1.737335e-10                  4
      275    3.405710e-10                 16
      276    1.264051e-10                  1
      277    5.911959e-10                  4
      278    1.668643e-10                  2
      279    8.463841e-10                  1
      280    1.610988e-10                  4
      281    1.799910e-10                  4
      282    2.285287e-10                  8
      283    2.043884e-10                  8
      284    2.255533e-10                  2
      285    3.377147e-10                  1
      286    2.038145e-10                  8
      287    2.628580e-10                  8
      288    3.423551e-10                 16
      289    1.017216e-09                  2
      290    2.261744e-10                  8
      291    3.673676e-10                 16
      292    2.514060e-10                  4
      293    2.324620e-10                  8
      294    3.110012e-10                  1
      295    1.593589e-10                  4
      296    7.568222e-10                  2
      297    2.682059e-10                  8
      298    2.671851e-10                  8
      299    7.273018e-10                  4
      300    7.234904e-10                  4
      301    3.037309e-10                  4
      302    2.022232e-09                  1
      303    7.686078e-10                  2
      304    3.076222e-10                  4
      305    1.737795e-10                  4
      306    4.916983e-10                  4
      307    3.010988e-10                  4
      308    3.584822e-10                 16
      309    3.509283e-10                 16
      310    1.312843e-09                  1
      311    1.768067e-10                  4
      312    8.527991e-10                  1
      313    4.164685e-10                 16
      314    2.281455e-10                  1
      315    2.684301e-10                  8
      316    1.875301e-10                  2
      317    3.736546e-10                  2
      318    1.247076e-09                  1
      319    4.951020e-10                  2
      320    5.841834e-10                 16
      321    2.256339e-10                  8
      322    1.910298e-10                  2
      323    2.669837e-10                  8
      324    3.797656e-10                 16
      325    3.548849e-10                 16
      326    5.159334e-10                  1
      327    2.731572e-10                  8
      328    5.840725e-10                 16
      329    4.999627e-10                  2
      330    4.947687e-10                  4
      331    8.773381e-10                  1
      332    2.743777e-10                  2
      333    4.146605e-10                 16
      334    3.355077e-10                 16
      335    6.601679e-10                  1
      336    3.597722e-10                  8
      337    1.686352e-10                  2
      338    4.496246e-10                  4
      339    1.772515e-09                  1
      340    8.832668e-10                  1
      341    5.836835e-10                 16
      342    4.552609e-10                  4
      343    2.087852e-10                  8
      344    2.109874e-10                  4
      345    3.095085e-10                  2
      346    1.607487e-10                  4
      347    1.675343e-10                  4
      348    3.590914e-10                  8
      349    2.065739e-10                  8
      350    2.072614e-10                  4
      351    7.165202e-10                  1
      352    3.454610e-10                 16
      353    5.788586e-10                 16
      354    5.778246e-10                 16
      355    2.100016e-10                  8
      356    8.678473e-10                  2
      357    3.092971e-10                  4
      358    1.591847e-10                  4
      359    1.191876e-09                  1
      360    4.898533e-10                  4
      361    1.367593e-10                  1
      362    5.200479e-10                  1
      363    2.339319e-10                  8
      364    1.754089e-10                  4
      365    7.838595e-10                  2
      366    5.933999e-10                 16
      367    2.242456e-10                  8
      368    2.952796e-10                  1
      369    8.702754e-10                  1
      370    3.901987e-10                  8
      371    4.616221e-10                  1
      372    2.654615e-10                  2
      373    4.783525e-10                  2
      374    2.613843e-10                  8
      375    2.342509e-10                  8
      376    2.669689e-10                  2
      377    1.830322e-10                  4
      378    3.676181e-10                  2
      379    2.244924e-10                  8
      380    3.031552e-10                  4
      381    4.161595e-10                 16
      382    2.665427e-10                  1
      383    2.566210e-10                  2
      384    4.407025e-10                  4
      385    4.284493e-10                  8
      386    3.616417e-10                  8
      387    7.708653e-10                  1
      388    4.582026e-10                  1
      389    3.595602e-10                  8
      390    2.087105e-10                  4
      391    3.100508e-10                  4
      392    1.610734e-10                  2
      393    1.772459e-10                  4
      394    2.065615e-10                  8
      395    3.432704e-10                  2
      396    1.640141e-10                  4
      397    8.760954e-10                  1
      398    2.335345e-10                  4
      399    3.443814e-10                  2
      400    2.254076e-09                  1
      401    3.907740e-10                  8
      402    4.127126e-10                 16
      403    2.225842e-10                  8
      404    2.636061e-10                  8
      405    5.843800e-10                 16
      406    4.317607e-10                 16
      407    2.879724e-10                  1
      408    2.626780e-10                  8
      409    4.017355e-10                 16
      410    3.471757e-10                 16
      411    4.471417e-10                  4
      412    2.236609e-10                  8
      413    1.423365e-09                  1
      414    2.060718e-10                  8
      415    2.211699e-10                  8
      416    5.815242e-10                 16
      417    4.432689e-10                  4
      418    5.806167e-10                 16
      419    1.284829e-09                  1
      420    4.110192e-10                 16
      421    1.552632e-10                  1
      422    4.076690e-10                  2
      423    3.998870e-10                 16
      424    2.540535e-10                  2
      425    1.166192e-09                  2
      426    3.452985e-10                 16
      427    1.705625e-10                  2
      428    4.167121e-10                 16
      429    5.897745e-10                 16
      430    3.038959e-10                  4
      431    8.420545e-10                  1
      432    8.395526e-10                  1
      433    5.878656e-10                 16
      434    1.617610e-10                  1
      435    4.065676e-10                 16
      436    5.935438e-10                 16
      437    4.554799e-10                  4
      438    2.125180e-10                  8
      439    2.896909e-10                  2
      440    1.770735e-10                  4
      441    4.066102e-10                 16
      442    5.213344e-10                  1
      443    2.644026e-10                  8
      444    7.840260e-10                  1
      445    4.241013e-10                 16
      446    1.745420e-10                  4
      447    4.952784e-10                  4
      448    3.502136e-10                 16
      449    4.890064e-10                  1
      450    4.434977e-10                  4
      451    9.568688e-10                  1
      452    3.096835e-10                  4
      453    2.845476e-10                  1
      454    4.870896e-10                  1
      455    2.841298e-10                  2
      456    1.805259e-10                  2
      457    3.106725e-10                  4
      458    5.905307e-10                 16
      459    1.919417e-10                  2
      460    3.437813e-10                 16
      461    9.173098e-10                  1
      462    3.290399e-10                  1
      463    3.870630e-10                 16
      464    2.287230e-10                  1
      465    1.751159e-10                  4
      466    1.481575e-10                  2
      467    5.274868e-10                  4
      468    3.472641e-10                 16
      469    3.352607e-10                  1
      470    6.022741e-10                  1
      471    6.303863e-10                  1
      472    2.984924e-10                  1
      473    3.563776e-10                 16
      474    2.062720e-10                  8
      475    1.599622e-10                  4
      476    6.522853e-10                  1
      477    4.023297e-10                 16
      478    4.015199e-10                 16
      479    2.076191e-10                  8
      480    7.256375e-10                  2
      481    5.888670e-10                 16
      482    3.334339e-10                  2
      483    4.721122e-10                  1
      484    5.801103e-10                 16
      485    8.458531e-10                  1
      486    2.753668e-10                  8
      487    6.270218e-10                  8
      488    2.124925e-10                  4
      489    1.313897e-09                  1
      490    7.243637e-10                  4
      491    1.610393e-10                  2
      492    4.429151e-10                  4
      493    1.855023e-10                  2
      494    5.871223e-10                 16
      495    2.079293e-10                  4
      496    2.623714e-10                  8
      497    4.064434e-10                 16
      498    3.890345e-10                  8
      499    3.175389e-10                  1
      500    1.595999e-10                  4
      501    2.715666e-10                  8
      502    4.197868e-10                 16
      503    5.920908e-10                  1
      504    2.954729e-10                  1
      505    2.634797e-10                  8
      506    3.992466e-10                  2
      507    1.607396e-10                  2
      508    2.251647e-10                  8
      509    4.049566e-10                  2
      510    1.630859e-10                  2
      511    4.736175e-10                  2
      512    4.825539e-10                  1
      513    4.089481e-10                 16
      514    1.392656e-10                  1
      515    1.742762e-10                  4
      516    4.244784e-10                  8
      517    1.800400e-10                  4
      518    1.613424e-10                  4
      519    9.314786e-10                  2
      520    8.092684e-10                  2
      521    2.024828e-10                  8
      522    2.160315e-10                  8
      523    7.376391e-10                  2
      524    1.757475e-10                  4
      525    8.671142e-10                  1
      526    2.685338e-10                  8
      527    4.358118e-10                  4
      528    1.492363e-09                  1
      529    7.049221e-10                  1
      530    3.630381e-10                 16
      531    3.018633e-10                  4
      532    3.497636e-10                 16
      533    2.648428e-10                  8
      534    5.227387e-10                  2
      535    4.304362e-10                  4
      536    1.276273e-10                  1
      537    2.053840e-10                  8
      538    3.026046e-10                  4
      539    1.552896e-10                  2
      540    7.682660e-10                  2
      541    3.491258e-10                 16
      542    2.253768e-10                  8
      543    5.979417e-10                 16
      544    5.890151e-10                 16
      545    1.299816e-09                  1
      546    3.043225e-10                  4
      547    7.733958e-10                  4
      548    3.305748e-10                  2
      549    7.014187e-10                  1
      550    4.094391e-10                 16
      551    1.562918e-10                  1
      552    8.993492e-10                  2
      553    6.274304e-10                  8
      554    3.670720e-10                 16
      555    3.381613e-10                 16
      556    2.375335e-10                  4
      557    5.795120e-10                 16
      558    5.826640e-10                 16
      559    2.886471e-10                  2
      560    5.914169e-10                 16
      561    9.167589e-10                  2
      562    2.292773e-10                  8
      563    1.610779e-10                  2
      564    2.236198e-10                  8
      565    1.547677e-10                  1
      566    1.927227e-10                  4
      567    1.614108e-10                  2
      568    2.729408e-10                  2
      569    5.819472e-10                 16
      570    8.316678e-10                  2
      571    2.654517e-10                  8
      572    3.897542e-10                  8
      573    3.893234e-10                  8
      574    1.575261e-10                  1
      575    2.038625e-10                  8
      576    5.949982e-10                 16
      577    3.456781e-10                 16
      578    2.196177e-10                  8
      579    1.624071e-10                  4
      580    3.833218e-10                  8
      581    7.773420e-10                  2
      582    7.078238e-10                  2
      583    4.218032e-10                 16
      584    3.939295e-10                  8
      585    3.890708e-10                  8
      586    2.427982e-10                  1
      587    4.330400e-10                  4
      588    2.066529e-10                  4
      589    5.977853e-10                  1
      590    1.604372e-10                  2
      591    5.180427e-10                  4
      592    1.512617e-09                  1
      593    5.394728e-10                  4
      594    3.328907e-10                  2
      595    3.648289e-10                 16
      596    8.824871e-10                  1
      597    1.993670e-10                  2
      598    2.078191e-10                  4
      599    3.928618e-10                  8
      600    1.606504e-10                  2
      601    2.252851e-10                  8
      602    1.290968e-09                  1
      603    2.129036e-10                  4
      604    5.838170e-10                 16
      605    1.575745e-10                  4
      606    4.217323e-10                 16
      607    3.036485e-10                  4
      608    1.433538e-10                  1
      609    2.097566e-10                  8
      610    1.310855e-09                  1
      611    3.922926e-10                  8
      612    1.352054e-09                  1
      613    1.402933e-10                  1
      614    1.804471e-10                  2
      615    3.387492e-10                  1
      616    4.188270e-10                  1
      617    2.669890e-10                  8
      618    2.569192e-10                  4
      619    5.821651e-10                 16
      620    2.725483e-10                  2
      621    3.884968e-10                  8
      622    3.448235e-10                 16
      623    3.604976e-10                 16
      624    5.990707e-10                 16
      625    4.358763e-10                 16
      626    4.514610e-10                  4
      627    5.893693e-10                 16
      628    4.556769e-10                  8
      629    4.378052e-10                  4
      630    3.903426e-10                  8
      631    3.465376e-10                 16
      632    3.373616e-10                 16
      633    4.374566e-10                 16
      634    2.030488e-09                  1
      635    2.336584e-10                  1
      636    1.286397e-09                  1
      637    3.411395e-10                 16
      638    2.890010e-10                  2
      639    3.664468e-10                 16
      640    2.070210e-10                  8
      641    2.680145e-10                  8
      642    3.928750e-10                  8
      643    4.181819e-10                 16
      644    4.802123e-10                  2
      645    6.843118e-10                  2
      646    7.172508e-10                  2
      647    2.074789e-10                  4
      648    2.071970e-10                  4
      649    2.671666e-10                  8
      650    1.621973e-10                  4
      651    1.809033e-10                  2
      652    4.760368e-10                  1
      653    4.294142e-10                 16
      654    8.394173e-10                  1
      655    5.549774e-10                  1
      656    3.627146e-10                  8
      657    5.835635e-10                 16
      658    8.193643e-10                  2
      659    5.831776e-10                 16
      660    5.807283e-10                 16
      661    4.113841e-10                 16
      662    4.833532e-10                  4
      663    4.158335e-10                 16
      664    2.856487e-10                  2
      665    6.234253e-10                  8
      666    3.339582e-10                  1
      667    5.853963e-10                 16
      668    3.129180e-10                  4
      669    3.030279e-10                  4
      670    1.516253e-10                  2
      671    2.081847e-10                  8
      672    3.661926e-10                  8
      673    3.406271e-10                 16
      674    4.414482e-10                  4
      675    2.232118e-10                  8
      676    1.270515e-10                  1
      677    2.074016e-10                  4
      678    7.118197e-10                  2
      679    2.084743e-10                  4
      680    1.288623e-10                  1
      681    5.799292e-10                 16
      682    2.069031e-10                  8
      683    4.113044e-10                 16
      684    1.369153e-10                  1
      685    2.562395e-10                  2
      686    4.229570e-10                  8
      687    2.109875e-10                  4
      688    3.054922e-10                  4
      689    3.861631e-10                  8
      690    3.329704e-10                 16
      691    3.843593e-10                  8
      692    3.389716e-10                  1
      693    3.089082e-10                  4
      694    1.595584e-09                  1
      695    4.004466e-10                 16
      696    5.873264e-10                 16
      697    3.905943e-10                  8
      698    2.718189e-10                  2
      699    4.302613e-10                  2
      700    1.291299e-09                  1
      701    2.750055e-10                  2
      702    3.850658e-10                  8
      703    3.896866e-10                  8
      704    2.038426e-09                  1
      705    1.914566e-10                  2
      706    1.606520e-10                  2
      707    3.625102e-10                 16
      708    1.605654e-10                  4
      709    7.891444e-10                  2
      710    6.033062e-10                  1
      711    2.108338e-10                  8
      712    5.834728e-10                 16
      713    3.493310e-10                 16
      714    3.650463e-10                 16
      715    1.625554e-10                  1
      716    5.156173e-10                  4
      717    3.724568e-10                 16
      718    7.031604e-10                  1
      719    2.230810e-10                  8
      720    6.197513e-10                  1
      721    4.287062e-10                  4
      722    1.775144e-10                  4
      723    2.646616e-10                  8
      724    8.637541e-10                  1
      725    1.601291e-10                  2
      726    3.300491e-10                  2
      727    3.631102e-10                 16
      728    4.525736e-10                  4
      729    2.220975e-10                  8
      730    4.036845e-10                 16
      731    2.533430e-10                  4
      732    4.016436e-10                 16
      733    1.245957e-09                  1
      734    5.830417e-10                 16
      735    3.854296e-10                  8
      736    2.690002e-10                  8
      737    3.877120e-10                  8
      738    3.893313e-10                  8
      739    5.188834e-10                  1
      740    1.993317e-09                  1
      741    1.604462e-10                  2
      742    3.877789e-10                  8
      743    4.948253e-10                  2
      744    2.671183e-10                  8
      745    2.673299e-10                  8
      746    1.188990e-09                  1
      747    6.263404e-10                  8
      748    3.088632e-10                  4
      749    3.587691e-10                 16
      750    2.427437e-10                  4
      751    7.170426e-10                  1
      752    3.467956e-10                 16
      753    3.973852e-10                 16
      754    3.649080e-10                 16
      755    2.552716e-10                  2
      756    8.507448e-10                  1
      757    3.133294e-10                  4
      758    5.923708e-10                 16
      759    5.825559e-10                 16
      760    2.147283e-10                  8
      761    1.743688e-10                  4
      762    1.608255e-10                  4
      763    6.065472e-10                  1
      764    2.648288e-10                  4
      765    5.820115e-10                 16
      766    1.763158e-10                  4
      767    3.900639e-10                  8
      768    1.634792e-10                  4
      769    2.644863e-10                  8
      770    4.943068e-10                  1
      771    4.412816e-10                  4
      772    4.921280e-10                  1
      773    1.953656e-10                  4
      774    2.138044e-10                  8
      775    2.086676e-10                  8
      776    4.140894e-10                 16
      777    8.005618e-10                  2
      778    7.179874e-10                  2
      779    2.709180e-10                  1
      780    1.501235e-10                  2
      781    2.062340e-10                  8
      782    3.756725e-10                  2
      783    1.337159e-09                  1
      784    7.197927e-10                  1
      785    1.753953e-10                  4
      786    3.402497e-10                 16
      787    5.940663e-10                 16
      788    4.436662e-10                  4
      789    6.229245e-10                  2
      790    3.878646e-10                  8
      791    8.017017e-10                  2
      792    1.821017e-10                  2
      793    1.593955e-10                  1
      794    1.583634e-10                  4
      795    2.121892e-10                  4
      796    1.594702e-10                  4
      797    3.099019e-10                  4
      798    5.046526e-10                  4
      799    6.598737e-10                  1
      800    2.714766e-10                  2
      801    1.256847e-09                  1
      802    4.134333e-10                 16
      803    3.049273e-10                  4
      804    2.643589e-10                  8
      805    2.064297e-10                  8
      806    1.246651e-10                  1
      807    4.153074e-10                 16
      808    2.340551e-10                  8
      809    4.006647e-10                 16
      810    3.010227e-10                  4
      811    2.339016e-10                  8
      812    4.639626e-10                  8
      813    8.917160e-10                  1
      814    1.274543e-09                  1
      815    2.742477e-10                  8
      816    3.450609e-10                 16
      817    7.029072e-10                  1
      818    4.089503e-10                 16
      819    5.893648e-10                 16
      820    2.284550e-10                  8
      821    4.291068e-10                  8
      822    2.063561e-09                  1
      823    1.174653e-09                  1
      824    3.447944e-10                 16
      825    1.164428e-09                  2
      826    1.629005e-10                  1
      827    1.599979e-10                  4
      828    5.835329e-10                 16
      829    5.128053e-10                  4
      830    4.061801e-10                 16
      831    2.064263e-10                  4
      832    7.706411e-10                  2
      833    2.071450e-10                  4
      834    2.218600e-10                  8
      835    3.931081e-10                  8
      836    1.597315e-10                  4
      837    7.177721e-10                  2
      838    2.680598e-10                  8
      839    4.088009e-10                  2
      840    3.652170e-10                  8
      841    2.468779e-10                  4
      842    4.007329e-10                  8
      843    5.808781e-10                  1
      844    1.479930e-10                  2
      845    2.688585e-10                  2
      846    3.874990e-10                  8
      847    4.077525e-10                 16
      848    2.677381e-10                  8
      849    3.852527e-10                  8
      850    3.862122e-10                  8
      851    2.225665e-10                  8
      852    2.629377e-10                  8
      853    3.901725e-10                  8
      854    1.649109e-10                  2
      855    4.148868e-10                 16
      856    4.346935e-10                  4
      857    4.597238e-10                  4
      858    2.614519e-10                  2
      859    4.156012e-10                 16
      860    1.590562e-10                  4
      861    3.672247e-10                 16
      862    1.528188e-10                  2
      863    7.098638e-10                  1
      864    4.035823e-10                  8
      865    4.742712e-10                  1
      866    3.925343e-10                  8
      867    5.898944e-10                 16
      868    2.123652e-10                  8
      869    1.643860e-10                  4
      870    4.063473e-10                 16
      871    4.280251e-10                 16
      872    4.376001e-10                  8
      873    4.864897e-10                  4
      874    3.327846e-10                 16
      875    2.238599e-10                  8
      876    4.580432e-10                  1
      877    6.427241e-10                  1
      878    2.136865e-10                  4
      879    1.373655e-09                  1
      880    3.073996e-10                  4
      881    3.355178e-10                  1
      882    4.022344e-10                 16
      883    2.576791e-10                  4
      884    3.790323e-10                 16
      885    2.055849e-10                  8
      886    3.655609e-10                  8
      887    3.293860e-10                  2
      888    3.645465e-10                 16
      889    4.066123e-10                 16
      890    3.854357e-10                  8
      891    8.748309e-10                  1
      892    1.775834e-09                  1
      893    5.905794e-10                  1
      894    4.066713e-10                 16
      895    3.256785e-10                 16
      896    4.242411e-10                 16
      897    5.830508e-10                 16
      898    5.880615e-10                  1
      899    3.681297e-10                  8
      900    1.592123e-10                  2
      901    1.161034e-09                  2
      902    1.745259e-10                  4
      903    4.010352e-10                 16
      904    1.910185e-10                  4
      905    7.232744e-10                  4
      906    2.078695e-10                  8
      907    1.956773e-10                  1
      908    6.266044e-10                  8
      909    4.468302e-10                  8
      910    2.314747e-10                  4
      911    3.389563e-10                 16
      912    3.441347e-10                 16
      913    3.094755e-10                  4
      914    5.168023e-10                  1
      915    3.982806e-10                 16
      916    2.222739e-10                  8
      917    1.397919e-10                  1
      918    3.020870e-10                  4
      919    2.695851e-10                  2
      920    1.805926e-10                  4
      921    5.206073e-10                  4
      922    1.625582e-10                  2
      923    2.127085e-10                  8
      924    2.836150e-10                  2
      925    4.363499e-10                  8
      926    6.459292e-10                  8
      927    1.642924e-10                  4
      928    8.117597e-10                  2
      929    1.819685e-10                  4
      930    1.157317e-09                  1
      931    5.896003e-10                 16
      932    3.884119e-10                  8
      933    2.664711e-10                  2
      934    3.133177e-10                  1
      935    3.975129e-10                 16
      936    6.495274e-10                  1
      937    3.888778e-10                  8
      938    5.141958e-10                  1
      939    4.412956e-10                  4
      940    5.897377e-10                 16
      941    9.075063e-10                  1
      942    2.618471e-10                  8
      943    4.992328e-10                  2
      944    6.226567e-10                  8
      945    2.321381e-10                  4
      946    1.413883e-10                  1
      947    6.509165e-10                  1
      948    3.873760e-10                  8
      949    6.253645e-10                  8
      950    2.235606e-10                  8
      951    3.663081e-10                 16
      952    3.632763e-10                  8
      953    4.805996e-10                  2
      954    2.624603e-10                  8
      955    2.932723e-10                  1
      956    3.620713e-10                  8
      957    4.212355e-10                  8
      958    4.902891e-10                  1
      959    2.037641e-10                  8
      960    2.524228e-10                  4
      961    4.184724e-10                  2
      962    7.773414e-10                  2
      963    2.703387e-10                  2
      964    3.724401e-10                  2
      965    3.751725e-10                  2
      966    1.325757e-09                  1
      967    4.002573e-10                  8
      968    6.486307e-10                  1
      969    2.869268e-10                  2
      970    2.104396e-10                  4
      971    2.625294e-10                  8
      972    4.937471e-10                  2
      973    2.826391e-10                  2
      974    3.654790e-10                  8
      975    3.368931e-10                 16
      976    3.975944e-10                 16
      977    5.845922e-10                  2
      978    4.039071e-10                 16
      979    1.540963e-10                  2
      980    2.229008e-10                  8
      981    9.369023e-10                  2
      982    2.111183e-10                  4
      983    4.714607e-10                  2
      984    3.981084e-10                 16
      985    3.905113e-10                  8
      986    1.933523e-10                  2
      987    2.691295e-10                  2
      988    2.657543e-10                  2
      989    2.334276e-10                  4
      990    2.579550e-10                  2
      991    4.640181e-10                  1
      992    1.310856e-09                  1
      993    3.011573e-10                  4
      994    1.639975e-10                  2
      995    1.641269e-10                  1
      996    1.753263e-10                  4
      997    4.465611e-10                  8
      998    4.219706e-10                 16
      999    3.034091e-10                  4
      1000   6.220236e-10                  8
      1001   2.314549e-10                  8
      1002   3.438558e-10                 16
      1003   1.774684e-10                  4
      1004   3.999724e-10                 16
      1005   4.147962e-10                 16
      1006   1.553164e-09                  1
      1007   5.856658e-10                 16
      1008   4.282145e-10                  8
      1009   2.063254e-10                  8
      1010   3.457107e-10                  4
      1011   3.617578e-10                 16
      1012   3.999204e-10                  8
      1013   3.447822e-10                 16
      1014   1.496003e-10                  2
      1015   5.826227e-10                 16
      1016   4.462908e-10                  4
      1017   7.247117e-10                  4
      1018   1.843909e-10                  2
      1019   7.153529e-10                  1
      1020   5.180609e-10                  1
      1021   4.063136e-10                 16
      1022   2.677504e-10                  1
      1023   1.669366e-10                  1
      1024   1.277809e-10                  1
      1025   3.462112e-10                 16
      1026   3.677277e-10                 16
      1027   2.292918e-10                  4
      1028   1.264519e-10                  1
      1029   1.754899e-10                  4
      1030   6.234741e-10                  8
      1031   2.634860e-10                  8
      1032   3.864944e-10                  8
      1033   8.451074e-10                  1
      1034   2.218146e-10                  8
      1035   2.029498e-10                  8
      1036   2.345615e-10                  8
      1037   2.073555e-09                  1
      1038   1.527136e-10                  2
      1039   1.907927e-10                  2
      1040   3.943627e-10                  8
      1041   3.948232e-10                  8
      1042   1.659591e-10                  2
      1043   8.609533e-10                  1
      1044   4.428781e-10                  8
      1045   5.825303e-10                 16
      1046   1.778931e-09                  1
      1047   2.700597e-10                  2
      1048   2.083354e-09                  1
      1049   5.843509e-10                 16
      1050   2.066610e-10                  8
      1051   2.296959e-10                  1
      1052   5.054957e-10                  4
      1053   4.262528e-10                  4
      1054   2.107661e-10                  4
      1055   3.549881e-10                  8
      1056   6.822531e-10                  2
      1057   7.122965e-10                  2
      1058   4.942463e-10                  1
      1059   1.393014e-10                  1
      1060   3.408868e-10                 16
      1061   3.444787e-10                 16
      1062   3.000016e-10                  4
      1063   2.072035e-09                  1
      1064   3.498760e-10                  4
      1065   2.042859e-10                  2
      1066   1.588067e-10                  4
      1067   5.888799e-10                 16
      1068   6.864201e-10                  2
      1069   7.737477e-10                  2
      1070   2.708112e-10                  8
      1071   1.419881e-09                  1
      1072   8.915794e-10                  2
      1073   2.640126e-10                  8
      1074   4.238798e-10                 16
      1075   3.104964e-10                  4
      1076   1.835787e-10                  2
      1077   1.487231e-10                  2
      1078   3.642170e-10                 16
      1079   1.626775e-10                  2
      1080   8.416591e-10                  1
      1081   2.318661e-10                  1
      1082   2.135435e-10                  8
      1083   3.012910e-10                  4
      1084   4.771863e-10                  2
      1085   4.907620e-10                  4
      1086   4.223533e-10                  8
      1087   3.473791e-10                  2
      1088   3.382318e-10                 16
      1089   5.902221e-10                 16
      1090   1.609004e-10                  2
      1091   3.961861e-10                 16
      1092   2.086518e-10                  4
      1093   1.597088e-10                  4
      1094   1.153304e-09                  2
      1095   2.054983e-10                  8
      1096   3.075311e-10                  4
      1097   3.464674e-10                  2
      1098   3.767528e-10                 16
      1099   1.772410e-10                  4
      1100   2.754219e-10                  2
      1101   4.028889e-10                 16
      1102   3.383107e-10                  2
      1103   2.838875e-10                  2
      1104   3.288681e-10                 16
      1105   3.325700e-10                 16
      1106   4.962396e-10                  2
      1107   4.036912e-10                 16
      1108   4.030016e-10                 16
      1109   3.475347e-10                  2
      1110   5.826328e-10                 16
      1111   3.758451e-10                  2
      1112   3.624748e-10                  8
      1113   2.267713e-10                  8
      1114   3.777732e-10                  2
      1115   4.896938e-10                  4
      1116   6.766364e-10                  2
      1117   5.826300e-10                  1
      1118   4.896873e-10                  1
      1119   3.678976e-10                 16
      1120   1.481779e-10                  2
      1121   1.736813e-10                  4
      1122   2.630772e-10                  2
      1123   3.368059e-10                  1
      1124   1.178021e-09                  1
      1125   1.759690e-10                  4
      1126   1.590781e-09                  1
      1127   4.210639e-10                 16
      1128   1.857268e-10                  2
      1129   3.568669e-10                  1
      1130   4.004419e-10                 16
      1131   2.331923e-10                  8
      1132   6.134804e-10                  1
      1133   2.735651e-10                  2
      1134   3.432808e-10                 16
      1135   2.007119e-10                  2
      1136   3.777832e-10                  2
      1137   2.913122e-10                  1
      1138   1.163718e-09                  2
      1139   6.916106e-10                  2
      1140   4.541923e-10                  8
      1141   1.774699e-09                  1
      1142   3.418150e-10                 16
      1143   5.896107e-10                 16
      1144   5.000451e-10                  2
      1145   7.085972e-10                  1
      1146   4.902383e-10                  4
      1147   3.687247e-10                  8
      1148   1.592622e-10                  2
      1149   7.219803e-10                  4
      1150   2.132655e-10                  4
      1151   3.400475e-10                 16
      1152   4.740757e-10                  2
      1153   3.971080e-10                 16
      1154   2.100348e-10                  8
      1155   6.529589e-10                  1
      1156   2.246451e-10                  2
      1157   3.809912e-10                  1
      1158   3.600840e-10                 16
      1159   1.568211e-10                  1
      1160   3.668220e-10                 16
      1161   1.156825e-09                  1
      1162   3.883777e-10                  8
      1163   6.584979e-10                  1
      1164   3.082718e-10                  4
      1165   7.548288e-10                  2
      1166   1.669314e-10                  2
      1167   1.376082e-10                  1
      1168   1.287509e-10                  1
      1169   3.424122e-10                 16
      1170   2.074013e-10                  4
      1171   1.593550e-10                  4
      1172   3.725617e-10                 16
      1173   3.625447e-10                 16
      1174   2.093290e-10                  4
      1175   5.128707e-10                  1
      1176   4.017264e-10                 16
      1177   3.098029e-10                  4
      1178   4.777256e-10                  1
      1179   1.517756e-10                  2
      1180   2.235359e-10                  8
      1181   3.558184e-10                 16
      1182   5.903621e-10                 16
      1183   4.025961e-10                 16
      1184   3.319251e-10                  2
      1185   2.170576e-10                  8
      1186   4.499306e-10                  4
      1187   1.153624e-09                  1
      1188   2.873797e-10                  1
      1189   5.216526e-10                  4
      1190   3.814407e-10                 16
      1191   4.295582e-10                 16
      1192   4.155324e-10                  2
      1193   1.607297e-10                  1
      1194   2.368179e-10                  4
      1195   1.500818e-10                  2
      1196   1.779609e-10                  4
      1197   4.121383e-10                 16
      1198   2.289383e-10                  1
      1199   1.294360e-09                  1
      1200   4.912551e-10                  2
      1201   4.127841e-10                 16
      1202   3.535675e-10                  1
      1203   4.655955e-10                  1
      1204   4.059728e-10                  2
      1205   1.595320e-10                  2
      1206   3.395508e-10                 16
      1207   2.933227e-10                  1
      1208   3.477480e-10                 16
      1209   5.889151e-10                 16
      1210   1.465162e-10                  2
      1211   5.032748e-10                  2
      1212   1.448003e-09                  1
      1213   1.926654e-10                  1
      1214   3.388215e-10                 16
      1215   1.952907e-10                  4
      1216   9.005890e-10                  2
      1217   3.030892e-10                  4
      1218   1.592324e-10                  1
      1219   3.032659e-10                  1
      1220   4.313208e-10                  4
      1221   4.294764e-10                  8
      1222   3.979445e-10                 16
      1223   2.716073e-10                  8
      1224   2.632057e-10                  8
      1225   1.672873e-10                  4
      1226   4.587784e-10                  4
      1227   3.597971e-10                 16
      1228   2.227716e-10                  8
      1229   3.586044e-10                 16
      1230   2.866728e-10                  1
      1231   2.519065e-10                  4
      1232   2.680645e-10                  8
      1233   2.068887e-10                  4
      1234   2.719937e-10                  2
      1235   1.160012e-09                  2
      1236   6.116925e-10                  1
      1237   1.526650e-10                  2
      1238   3.814030e-10                  2
      1239   4.475165e-10                  4
      1240   2.058097e-10                  8
      1241   4.038029e-10                  8
      1242   1.336622e-09                  1
      1243   2.248907e-10                  8
      1244   1.577917e-10                  4
      1245   2.356150e-10                  8
      1246   1.921863e-10                  2
      1247   4.020690e-10                 16
      1248   3.105696e-10                  4
      1249   3.002722e-10                  4
      1250   7.206753e-10                  4
      1251   5.200270e-10                  1
      1252   6.592340e-10                  1
      1253   2.071844e-10                  4
      1254   1.604518e-10                  4
      1255   2.096232e-10                  4
      1256   3.566264e-10                 16
      1257   8.802014e-10                  1
      1258   2.546413e-10                  4
      1259   6.224911e-10                  8
      1260   3.117607e-10                  4
      1261   5.179328e-10                  2
      1262   1.331255e-09                  1
      1263   2.675257e-10                  8
      1264   3.950122e-10                  8
      1265   4.825659e-10                  1
      1266   5.102849e-10                  1
      1267   2.740120e-10                  8
      1268   8.667064e-10                  1
      1269   2.931753e-10                  1
      1270   1.212445e-09                  1
      1271   1.471981e-10                  2
      1272   2.712439e-10                  2
      1273   4.281720e-10                 16
      1274   3.856803e-10                  8
      1275   5.844184e-10                 16
      1276   3.045044e-10                  4
      1277   5.071742e-10                  4
      1278   2.611187e-10                  8
      1279   1.498591e-10                  2
      1280   3.510319e-10                 16
      1281   3.475917e-10                 16
      1282   1.265176e-09                  1
      1283   3.469664e-10                 16
      1284   1.557891e-10                  1
      1285   2.913554e-10                  2
      1286   4.358588e-10                  8
      1287   1.635830e-10                  4
      1288   1.509310e-09                  1
      1289   2.857243e-10                  2
      1290   4.143533e-10                 16
      1291   2.312142e-10                  4
      1292   1.991919e-09                  1
      1293   6.516200e-10                  1
      1294   2.321255e-10                  8
      1295   1.585181e-09                  1
      1296   2.693626e-10                  8
      1297   2.642659e-10                  8
      1298   3.715280e-10                  2
      1299   1.598702e-10                  4
      1300   1.748180e-10                  4
      1301   2.069985e-10                  4
      1302   2.308275e-10                  1
      1303   2.278470e-10                  8
      1304   5.836485e-10                  2
      1305   4.028664e-10                 16
      1306   3.051679e-10                  4
      1307   1.564306e-10                  2
      1308   1.903528e-10                  2
      1309   3.053917e-10                  4
      1310   7.165695e-10                  2
      1311   3.625706e-10                 16
      1312   5.129360e-10                  4
      1313   5.043024e-10                  2
      1314   2.868478e-10                  1
      1315   2.041234e-10                  8
      1316   2.224082e-10                  8
      1317   4.010206e-10                  2
      1318   1.755352e-10                  4
      1319   2.949409e-10                  2
      1320   2.072174e-10                  8
      1321   1.995456e-10                  2
      1322   2.071585e-10                  8
      1323   6.572691e-10                  1
      1324   2.259583e-10                  8
      1325   4.042963e-10                 16
      1326   3.261976e-10                 16
      1327   4.270266e-10                 16
      1328   3.415525e-10                  4
      1329   1.805520e-10                  4
      1330   3.580315e-10                 16
      1331   1.821696e-10                  2
      1332   1.582783e-10                  2
      1333   5.725038e-10                  1
      1334   1.635745e-10                  4
      1335   3.109951e-10                  4
      1336   2.262480e-10                  8
      1337   1.614161e-10                  2
      1338   1.502427e-09                  1
      1339   7.898276e-10                  1
      1340   1.594057e-10                  4
      1341   2.680291e-10                  8
      1342   3.435880e-10                 16
      1343   2.325783e-10                  4
      1344   2.118718e-10                  4
      1345   2.248281e-10                  8
      1346   2.637339e-10                  8
      1347   2.096930e-10                  4
      1348   3.315611e-10                 16
      1349   1.831677e-10                  2
      1350   8.121165e-10                  1
      1351   3.896220e-10                  8
      1352   3.986085e-10                 16
      1353   2.068991e-10                  8
      1354   2.041947e-10                  8
      1355   2.119242e-10                  8
      1356   3.967534e-10                 16
      1357   5.038943e-10                  4
      1358   3.921486e-10                  8
      1359   3.911688e-10                  8
      1360   2.251554e-10                  8
      1361   5.970977e-10                 16
      1362   5.831459e-10                 16
      1363   5.823460e-10                 16
      1364   2.917403e-10                  2
      1365   2.621028e-10                  8
      1366   2.705263e-10                  8
      1367   4.020975e-10                  2
      1368   4.884386e-10                  1
      1369   1.835243e-10                  4
      1370   2.010837e-09                  1
      1371   2.632753e-10                  2
      1372   3.049049e-10                  4
      1373   4.135618e-10                 16
      1374   2.051735e-10                  8
      1375   2.533760e-10                  4
      1376   1.749537e-10                  4
      1377   3.155644e-10                  1
      1378   1.886832e-10                  2
      1379   3.869303e-10                  8
      1380   3.027930e-10                  4
      1381   8.726846e-10                  1
      1382   2.659223e-10                  4
      1383   3.073161e-10                  4
      1384   3.431072e-10                  1
      1385   3.373125e-10                  1
      1386   4.622783e-10                  1
      1387   2.886812e-10                  4
      1388   1.545837e-10                  2
      1389   1.294181e-09                  1
      1390   2.238531e-10                  8
      1391   3.908062e-10                  8
      1392   4.426585e-10                  4
      1393   3.518692e-10                 16
      1394   3.911285e-10                  8
      1395   3.108271e-10                  4
      1396   7.345229e-10                  4
      1397   1.496496e-10                  2
      1398   5.945150e-10                 16
      1399   2.896211e-10                  2
      1400   2.038775e-10                  8
      1401   5.129359e-10                  1
      1402   1.605577e-10                  2
      1403   5.799508e-10                 16
      1404   3.653000e-10                  8
      1405   3.939215e-10                  8
      1406   2.327458e-10                  8
      1407   3.567086e-10                 16
      1408   2.030929e-09                  1
      1409   3.106433e-10                  4
      1410   1.172886e-09                  1
      1411   3.556192e-10                  1
      1412   4.094520e-10                  2
      1413   4.248182e-10                 16
      1414   8.599467e-10                  2
      1415   5.866094e-10                 16
      1416   3.414067e-10                 16
      1417   6.241065e-10                  8
      1418   1.745909e-10                  4
      1419   6.451030e-10                  8
      1420   3.425895e-10                  2
      1421   5.626842e-10                  2
      1422   1.595028e-10                  4
      1423   4.888580e-10                  2
      1424   1.825423e-10                  2
      1425   1.622923e-10                  4
      1426   3.777044e-10                 16
      1427   2.107097e-10                  8
      1428   1.555365e-09                  1
      1429   4.048296e-10                 16
      1430   3.993468e-10                 16
      1431   3.375147e-10                 16
      1432   7.719948e-10                  2
      1433   2.317082e-10                  8
      1434   3.647078e-10                 16
      1435   1.349825e-09                  1
      1436   1.590189e-10                  4
      1437   4.147241e-10                 16
      1438   1.544007e-10                  2
      1439   5.913838e-10                 16
      1440   3.398049e-10                 16
      1441   3.440869e-10                 16
      1442   2.305688e-10                  1
      1443   3.984155e-10                 16
      1444   7.256168e-10                  4
      1445   1.758414e-10                  4
      1446   8.122600e-10                  2
      1447   3.464163e-10                 16
      1448   2.140255e-10                  8
      1449   2.659647e-10                  8
      1450   8.390738e-10                  1
      1451   3.015827e-10                  4
      1452   2.478377e-10                  4
      1453   3.317620e-10                  1
      1454   1.762715e-10                  4
      1455   4.037064e-10                  2
      1456   3.699956e-10                 16
      1457   3.000390e-10                  4
      1458   2.419388e-10                  4
      1459   2.050747e-10                  8
      1460   2.633408e-10                  8
      1461   4.087192e-10                 16
      1462   1.157105e-09                  2
      1463   3.356494e-10                 16
      1464   6.579861e-10                  1
      1465   3.401577e-10                 16
      1466   5.877867e-10                 16
      1467   1.768773e-10                  4
      1468   2.279864e-10                  1
      1469   2.233825e-10                  2
      1470   3.336181e-10                  4
      1471   6.807677e-10                  2
      1472   3.897257e-10                  8
      1473   4.261819e-10                  4
      1474   1.826791e-10                  2
      1475   2.130733e-10                  8
      1476   3.661369e-10                 16
      1477   6.525815e-10                  1
      1478   2.300520e-10                  8
      1479   5.034837e-10                  2
      1480   1.393152e-09                  1
      1481   7.752160e-10                  2
      1482   4.982175e-10                  4
      1483   2.703856e-10                  2
      1484   2.146578e-10                  4
      1485   3.904516e-10                  8
      1486   1.293405e-09                  1
      1487   3.899220e-10                  8
      1488   4.259741e-10                  4
      1489   3.640570e-10                  8
      1490   3.632179e-10                 16
      1491   1.826044e-09                  1
      1492   1.257774e-10                  1
      1493   3.937926e-10                  8
      1494   6.793377e-10                  2
      1495   3.407049e-10                 16
      1496   2.636077e-10                  2
      1497   1.617760e-10                  1
      1498   3.921068e-10                  8
      1499   4.091100e-10                 16
      1500   2.041625e-09                  1
      1501   4.868849e-10                  4
      1502   7.275601e-10                  4
      1503   3.329823e-10                  4
      1504   1.178123e-09                  1
      1505   3.377104e-10                 16
      1506   5.975273e-10                  1
      1507   2.870824e-10                  1
      1508   3.265516e-10                 16
      1509   2.377746e-10                  8
      1510   3.951129e-10                  8
      1511   1.869192e-10                  4
      1512   4.269328e-10                 16
      1513   4.141954e-10                 16
      1514   1.247772e-09                  1
      1515   3.033071e-10                  4
      1516   3.460190e-10                 16
      1517   1.928001e-10                  2
      1518   2.033763e-10                  8
      1519   1.498038e-09                  1
      1520   3.076597e-10                  4
      1521   7.328305e-10                  4
      1522   1.742937e-10                  4
      1523   1.600890e-09                  1
      1524   7.767322e-10                  4
      1525   3.423500e-10                 16
      1526   3.276266e-10                 16
      1527   2.039556e-10                  8
      1528   1.609688e-10                  4
      1529   2.947810e-10                  1
      1530   3.609472e-10                  1
      1531   9.192399e-10                  2
      1532   3.643347e-10                 16
      1533   1.318662e-09                  1
      1534   1.283217e-09                  1
      1535   1.777477e-10                  4
      1536   4.455822e-10                  4
      1537   4.461934e-10                  8
      1538   5.797081e-10                 16
      1539   5.818072e-10                 16
      1540   4.902190e-10                  1
      1541   2.037729e-10                  8
      1542   2.627593e-10                  8
      1543   3.389237e-10                 16
      1544   3.849267e-10                  8
      1545   4.001789e-10                  2
      1546   4.417038e-10                  4
      1547   3.468767e-10                 16
      1548   1.213345e-09                  1
      1549   2.802184e-10                  2
      1550   2.290438e-10                  1
      1551   4.757331e-10                  2
      1552   4.640950e-10                  1
      1553   9.195112e-10                  2
      1554   1.611602e-10                  4
      1555   4.320629e-10                 16
      1556   2.252418e-10                  8
      1557   3.838819e-10                 16
      1558   8.425921e-10                  1
      1559   3.440210e-10                 16
      1560   5.783502e-10                 16
      1561   3.382784e-10                  2
      1562   3.713655e-10                 16
      1563   2.330846e-10                  8
      1564   2.643505e-10                  8
      1565   1.763952e-10                  4
      1566   1.826072e-10                  4
      1567   2.322546e-10                  8
      1568   3.062801e-10                  4
      1569   1.316175e-09                  1
      1570   5.828576e-10                 16
      1571   7.056020e-10                  1
      1572   1.757576e-10                  4
      1573   1.282923e-10                  1
      1574   3.598209e-10                  1
      1575   4.035882e-10                 16
      1576   2.421914e-10                  4
      1577   2.608410e-10                  1
      1578   8.426395e-10                  1
      1579   6.179109e-10                  8
      1580   1.639760e-10                  2
      1581   3.681852e-10                  1
      1582   4.160350e-10                 16
      1583   5.341634e-10                  4
      1584   2.537752e-10                  4
      1585   3.129809e-10                  4
      1586   9.175717e-10                  1
      1587   3.985210e-10                 16
      1588   1.296257e-10                  1
      1589   4.008988e-10                  8
      1590   1.876603e-10                  2
      1591   3.071825e-10                  4
      1592   2.708943e-10                  2
      1593   6.194756e-10                  8
      1594   1.325557e-09                  1
      1595   4.073265e-10                 16
      1596   8.634010e-10                  1
      1597   7.534419e-10                  4
      1598   4.407603e-10                  4
      1599   2.389344e-10                  8
      1600   3.363075e-10                  1
      1601   2.179133e-10                  8
      1602   3.761012e-10                  2
      1603   2.623493e-10                  8
      1604   2.237580e-10                  8
      1605   3.639706e-10                 16
      1606   4.006250e-10                  8
      1607   3.089618e-10                  4
      1608   8.654300e-10                  1
      1609   3.089598e-10                  4
      1610   1.266457e-09                  1
      1611   2.856096e-10                  4
      1612   2.624977e-10                  8
      1613   1.595765e-10                  1
      1614   3.579629e-10                 16
      1615   6.809539e-10                  2
      1616   3.051452e-10                  4
      1617   4.618506e-10                  2
      1618   2.967574e-10                  1
      1619   2.242821e-10                  8
      1620   5.231952e-10                  1
      1621   4.139013e-10                 16
      1622   4.858731e-10                  1
      1623   2.263027e-10                  8
      1624   2.312853e-10                  1
      1625   3.536784e-10                 16
      1626   4.888332e-10                  4
      1627   4.778095e-10                  2
      1628   3.865148e-10                  8
      1629   7.202831e-10                  2
      1630   4.196276e-10                 16
      1631   2.079484e-10                  1
      1632   2.301038e-10                  4
      1633   2.134665e-10                  4
      1634   4.228831e-10                  2
      1635   5.972754e-10                 16
      1636   5.114874e-10                  1
      1637   1.612052e-10                  4
      1638   4.425476e-10                  8
      1639   2.660620e-10                  8
      1640   5.905360e-10                 16
      1641   1.512616e-10                  2
      1642   2.559308e-10                  2
      1643   1.610295e-10                  1
      1644   2.698559e-10                  2
      1645   1.799911e-10                  4
      1646   2.090738e-10                  8
      1647   2.900969e-10                  2
      1648   4.040594e-10                 16
      1649   2.682957e-10                  1
      1650   4.736101e-10                  2
      1651   5.875563e-10                  4
      1652   1.605449e-10                  2
      1653   2.050855e-10                  8
      1654   5.017299e-10                  4
      1655   2.684976e-10                  2
      1656   1.899468e-10                  2
      1657   4.225700e-10                 16
      1658   1.268413e-09                  1
      1659   4.225905e-10                  8
      1660   1.652133e-10                  2
      1661   3.901746e-10                  8
      1662   1.744585e-10                  4
      1663   3.389311e-10                 16
      1664   1.954102e-10                  4
      1665   8.643835e-10                  1
      1666   1.597487e-10                  4
      1667   5.011846e-10                  2
      1668   2.285913e-10                  8
      1669   4.465155e-10                  4
      1670   3.847231e-10                  8
      1671   5.196375e-10                  1
      1672   9.139748e-10                  2
      1673   1.600948e-10                  4
      1674   3.422040e-10                  2
      1675   7.236225e-10                  2
      1676   5.999339e-10                 16
      1677   7.260595e-10                  4
      1678   2.639583e-10                  8
      1679   2.229063e-10                  8
      1680   2.088735e-10                  8
      1681   3.046116e-10                  4
      1682   1.255144e-09                  1
      1683   5.813844e-10                 16
      1684   2.678596e-10                  8
      1685   5.176756e-10                  2
      1686   2.292828e-10                  8
      1687   2.071395e-10                  4
      1688   3.538517e-10                  2
      1689   7.794112e-10                  2
      1690   3.792495e-10                  2
      1691   1.908924e-10                  2
      1692   1.516536e-10                  2
      1693   2.664717e-10                  8
      1694   7.046596e-10                  2
      1695   3.404028e-10                 16
      1696   2.997954e-10                  4
      1697   6.292310e-10                  8
      1698   3.112589e-10                  1
      1699   5.911592e-10                 16
      1700   3.503798e-10                 16
      1701   2.573489e-10                  4
      1702   3.890283e-10                  8
      1703   3.424492e-10                 16
      1704   1.612218e-10                  4
      1705   7.076058e-10                  1
      1706   2.079767e-10                  4
      1707   1.267428e-09                  1
      1708   2.070985e-10                  8
      1709   4.221521e-10                 16
      1710   1.691230e-10                  2
      1711   1.717710e-10                  2
      1712   4.934985e-10                  2
      1713   8.141726e-10                  2
      1714   1.786439e-10                  4
      1715   7.284293e-10                  2
      1716   2.095903e-10                  4
      1717   3.802316e-10                  2
      1718   2.056631e-10                  4
      1719   3.878207e-10                  8
      1720   2.085731e-10                  8
      1721   3.190069e-10                  4
      1722   2.926849e-10                  1
      1723   3.471683e-10                 16
      1724   4.449953e-10                  4
      1725   5.140423e-10                  1
      1726   2.405589e-10                  4
      1727   3.947839e-10                 16
      1728   2.201176e-10                  8
      1729   2.935764e-10                  1
      1730   1.889889e-10                  2
      1731   5.016590e-10                  2
      1732   4.089757e-10                 16
      1733   2.263313e-10                  8
      1734   1.333063e-09                  1
      1735   3.021978e-10                  4
      1736   1.169688e-09                  2
      1737   2.727842e-10                  8
      1738   3.878580e-10                  8
      1739   1.626963e-10                  2
      1740   1.279253e-10                  1
      1741   1.654490e-10                  4
      1742   4.276948e-10                  8
      1743   8.864798e-10                  1
      1744   1.749140e-10                  4
      1745   3.016662e-10                  4
      1746   5.824779e-10                 16
      1747   1.870736e-10                  2
      1748   1.963680e-10                  2
      1749   1.460609e-10                  2
      1750   1.351389e-09                  2
      1751   4.079086e-10                 16
      1752   4.709166e-10                  2
      1753   1.367997e-10                  1
      1754   3.483967e-10                 16
      1755   3.116202e-10                  2
      1756   3.395967e-10                 16
      1757   3.965821e-10                  8
      1758   4.087704e-10                  2
      1759   7.007156e-10                  1
      1760   2.118465e-10                  8
      1761   2.852522e-10                  2
      1762   1.889547e-10                  2
      1763   2.251316e-10                  8
      1764   1.502096e-10                  2
      1765   4.116730e-10                 16
      1766   1.594814e-10                  4
      1767   2.234320e-10                  8
      1768   2.235287e-10                  8
      1769   4.055810e-10                 16
      1770   3.898513e-10                  8
      1771   5.878805e-10                 16
      1772   2.251848e-10                  8
      1773   3.967712e-10                 16
      1774   1.502047e-10                  1
      1775   4.690193e-10                  1
      1776   2.048445e-10                  8
      1777   3.845366e-10                  8
      1778   3.457872e-10                 16
      1779   2.076933e-10                  8
      1780   5.791734e-10                 16
      1781   9.637779e-10                  1
      1782   7.269059e-10                  1
      1783   5.076843e-10                  1
      1784   4.243975e-10                  4
      1785   2.773168e-10                  2
      1786   4.276324e-10                  4
      1787   5.929602e-10                 16
      1788   4.029081e-10                 16
      1789   3.986080e-10                 16
      1790   4.219929e-10                  8
      1791   1.776800e-10                  4
      1792   5.813133e-10                 16
      1793   1.576885e-09                  1
      1794   2.137997e-10                  4
      1795   2.686556e-10                  2
      1796   2.083225e-10                  8
      1797   2.751170e-10                  8
      1798   3.872212e-10                  8
      1799   1.195657e-09                  1
      1800   5.149301e-10                  1
      1801   2.085715e-10                  4
      1802   5.225332e-10                  1
      1803   3.401274e-10                 16
      1804   3.013392e-10                  4
      1805   3.972859e-10                  8
      1806   2.747495e-10                  8
      1807   1.836847e-10                  2
      1808   2.121477e-10                  4
      1809   2.420099e-09                  1
      1810   3.987582e-10                 16
      1811   2.888039e-10                  2
      1812   2.056714e-10                  8
      1813   4.988286e-10                  2
      1814   2.311150e-10                  4
      1815   5.214114e-10                  1
      1816   1.367711e-10                  1
      1817   2.953198e-10                  1
      1818   4.251194e-10                  8
      1819   2.659064e-10                  8
      1820   6.798639e-10                  2
      1821   3.193217e-10                  1
      1822   2.089294e-10                  4
      1823   7.776327e-10                  2
      1824   5.895869e-10                 16
      1825   2.274445e-10                  8
      1826   2.086142e-10                  8
      1827   2.807881e-10                  1
      1828   6.243933e-10                  8
      1829   6.509094e-10                  1
      1830   2.274850e-10                  1
      1831   2.214745e-10                  8
      1832   2.704602e-10                  2
      1833   4.021299e-10                 16
      1834   1.603617e-10                  4
      1835   2.621398e-10                  8
      1836   4.214110e-10                 16
      1837   3.889604e-10                  8
      1838   3.479704e-10                 16
      1839   3.766295e-10                 16
      1840   3.511072e-10                 16
      1841   3.302907e-10                 16
      1842   4.088075e-10                 16
      1843   4.744690e-10                  2
      1844   1.592154e-10                  4
      1845   3.491392e-10                 16
      1846   1.141372e-09                  2
      1847   6.512700e-10                  1
      1848   3.098527e-10                  4
      1849   2.233259e-10                  8
      1850   6.001143e-10                  1
      1851   2.613502e-10                  8
      1852   6.808925e-10                  2
      1853   3.345901e-10                  2
      1854   2.304465e-10                  1
      1855   5.011725e-10                  4
      1856   4.454939e-10                  8
      1857   2.088520e-10                  4
      1858   2.216507e-10                  8
      1859   4.007015e-10                 16
      1860   1.626780e-10                  2
      1861   7.757731e-10                  2
      1862   2.582709e-10                  2
      1863   3.360206e-10                 16
      1864   1.911428e-10                  2
      1865   2.715183e-10                  2
      1866   3.767155e-10                 16
      1867   1.146766e-09                  1
      1868   4.902703e-10                  4
      1869   3.421672e-10                  4
      1870   3.713909e-10                 16
      1871   3.996936e-10                  2
      1872   2.648467e-10                  8
      1873   4.301465e-10                  4
      1874   3.432015e-10                 16
      1875   2.079504e-10                  4
      1876   4.077413e-10                 16
      1877   4.961752e-10                  2
      1878   1.578352e-10                  4
      1879   2.086847e-10                  4
      1880   6.014629e-10                  1
      1881   5.808180e-10                 16
      1882   3.375008e-10                 16
      1883   3.056941e-10                  4
      1884   7.600956e-10                  1
      1885   1.377295e-10                  1
      1886   2.092989e-10                  4
      1887   2.580649e-10                  4
      1888   1.761326e-10                  4
      1889   1.833802e-10                  4
      1890   2.055652e-10                  8
      1891   7.009729e-10                  1
      1892   2.068465e-10                  4
      1893   1.741764e-10                  4
      1894   1.612856e-10                  2
      1895   1.558229e-10                  2
      1896   1.143158e-09                  2
      1897   2.685637e-10                  2
      1898   5.908887e-10                 16
      1899   1.616775e-10                  4
      1900   5.104369e-10                  4
      1901   3.985342e-10                 16
      1902   4.175332e-10                 16
      1903   2.649732e-10                  2
      1904   3.472307e-10                 16
      1905   4.087324e-10                 16
      1906   8.544020e-10                  1
      1907   9.217056e-10                  1
      1908   6.503794e-10                  1
      1909   2.258021e-10                  8
      1910   7.756327e-10                  2
      1911   2.003019e-10                  2
      1912   4.098064e-10                  2
      1913   1.974492e-10                  2
      1914   3.362386e-10                  1
      1915   2.642859e-10                  8
      1916   4.160661e-10                 16
      1917   3.934234e-10                  8
      1918   2.933282e-10                  1
      1919   7.045214e-10                  2
      1920   4.691753e-10                  2
      1921   3.502374e-10                  4
      1922   2.065300e-10                  8
      1923   5.749937e-10                  1
      1924   2.925904e-10                  1
      1925   6.269823e-10                  8
      1926   3.908510e-10                  8
      1927   2.810316e-10                  2
      1928   7.233758e-10                  4
      1929   4.100013e-10                  2
      1930   2.259725e-10                  8
      1931   1.749818e-10                  4
      1932   1.832228e-09                  1
      1933   2.646060e-10                  2
      1934   2.232238e-10                  8
      1935   5.070162e-10                  4
      1936   2.114675e-10                  8
      1937   1.192456e-09                  1
      1938   4.628691e-10                  1
      1939   7.025052e-10                  1
      1940   2.645299e-10                  2
      1941   8.799943e-10                  1
      1942   1.635670e-10                  2
      1943   6.303531e-10                  8
      1944   3.396542e-10                  2
      1945   2.088268e-10                  4
      1946   4.232009e-10                  8
      1947   2.367998e-10                  4
      1948   1.069164e-09                  1
      1949   1.579199e-10                  1
      1950   2.536708e-10                  4
      1951   3.888388e-10                  8
      1952   5.934167e-10                 16
      1953   3.072259e-10                  4
      1954   5.075792e-10                  1
      1955   2.029219e-09                  1
      1956   5.863269e-10                 16
      1957   2.074637e-10                  4
      1958   5.892984e-10                 16
      1959   7.855108e-10                  2
      1960   1.448510e-09                  1
      1961   2.623551e-10                  8
      1962   3.114733e-10                  4
      1963   3.019742e-10                  4
      1964   4.084025e-10                 16
      1965   5.795303e-10                 16
      1966   2.524517e-10                  4
      1967   3.318251e-10                 16
      1968   3.116185e-10                  4
      1969   2.082149e-10                  4
      1970   4.017946e-10                  8
      1971   3.445563e-10                 16
      1972   1.609178e-10                  2
      1973   2.662691e-10                  8
      1974   5.955624e-10                 16
      1975   2.035646e-10                  8
      1976   2.046341e-10                  8
      1977   2.090852e-10                  4
      1978   3.493216e-10                 16
      1979   6.121081e-10                  1
      1980   1.776368e-10                  4
      1981   5.620248e-10                  2
      1982   3.476703e-10                 16
      1983   1.145356e-09                  2
      1984   1.594635e-10                  4
      1985   1.788630e-10                  4
      1986   2.037037e-10                  2
      1987   5.839221e-10                 16
      1988   1.970055e-10                  2
      1989   8.497732e-10                  1
      1990   7.259240e-10                  2
      1991   1.371417e-10                  1
      1992   1.161062e-09                  2
      1993   1.910477e-10                  4
      1994   2.049570e-10                  8
      1995   3.498024e-10                 16
      1996   1.672781e-10                  2
      1997   1.003248e-09                  2
      1998   4.347583e-10                  8
      1999   7.660990e-10                  2
      2000   7.232008e-10                  4
      [1] "====================== weights ======================"
      NULL
      [1] "====================== X ======================"
           (Intercept) x_component_number
      1              1                  8
      2              1                  8
      3              1                  4
      4              1                 16
      5              1                  8
      6              1                  2
      7              1                  4
      8              1                  4
      9              1                  4
      10             1                  1
      11             1                  8
      12             1                  4
      13             1                  4
      14             1                  8
      15             1                  1
      16             1                 16
      17             1                 16
      18             1                  4
      19             1                  2
      20             1                 16
      21             1                  4
      22             1                  8
      23             1                  8
      24             1                  2
      25             1                  8
      26             1                  2
      27             1                 16
      28             1                  4
      29             1                  4
      30             1                  8
      31             1                  1
      32             1                  1
      33             1                  2
      34             1                  8
      35             1                  4
      36             1                 16
      37             1                  4
      38             1                  8
      39             1                  4
      40             1                  2
      41             1                  4
      42             1                 16
      43             1                  1
      44             1                  2
      45             1                  1
      46             1                 16
      47             1                  2
      48             1                  8
      49             1                  4
      50             1                  2
      51             1                  2
      52             1                 16
      53             1                  4
      54             1                  4
      55             1                  1
      56             1                 16
      57             1                  2
      58             1                  8
      59             1                  2
      60             1                  8
      61             1                  1
      62             1                  8
      63             1                  4
      64             1                  2
      65             1                 16
      66             1                  2
      67             1                  4
      68             1                  4
      69             1                  2
      70             1                 16
      71             1                  1
      72             1                  4
      73             1                  2
      74             1                 16
      75             1                  4
      76             1                  2
      77             1                  1
      78             1                 16
      79             1                  2
      80             1                  2
      81             1                  2
      82             1                  2
      83             1                 16
      84             1                  1
      85             1                  1
      86             1                 16
      87             1                  2
      88             1                  1
      89             1                  2
      90             1                  1
      91             1                  2
      92             1                 16
      93             1                  4
      94             1                  1
      95             1                  2
      96             1                  8
      97             1                 16
      98             1                 16
      99             1                  2
      100            1                  1
      101            1                  2
      102            1                  8
      103            1                  2
      104            1                 16
      105            1                  1
      106            1                  1
      107            1                  8
      108            1                  1
      109            1                  2
      110            1                  2
      111            1                  4
      112            1                  8
      113            1                  1
      114            1                  8
      115            1                 16
      116            1                  2
      117            1                  8
      118            1                  1
      119            1                  1
      120            1                  4
      121            1                  2
      122            1                  2
      123            1                  1
      124            1                  8
      125            1                  4
      126            1                  2
      127            1                  1
      128            1                  2
      129            1                 16
      130            1                  2
      131            1                  2
      132            1                 16
      133            1                 16
      134            1                 16
      135            1                  1
      136            1                  8
      137            1                  1
      138            1                  2
      139            1                  2
      140            1                  1
      141            1                  8
      142            1                  1
      143            1                  1
      144            1                  4
      145            1                  2
      146            1                  4
      147            1                  8
      148            1                  4
      149            1                 16
      150            1                  4
      151            1                  8
      152            1                 16
      153            1                 16
      154            1                 16
      155            1                  2
      156            1                  8
      157            1                  4
      158            1                  1
      159            1                  4
      160            1                 16
      161            1                  8
      162            1                  1
      163            1                  1
      164            1                  8
      165            1                  4
      166            1                  8
      167            1                 16
      168            1                  1
      169            1                 16
      170            1                  2
      171            1                  4
      172            1                 16
      173            1                  8
      174            1                  8
      175            1                  2
      176            1                  4
      177            1                 16
      178            1                  1
      179            1                  1
      180            1                  8
      181            1                  1
      182            1                  2
      183            1                 16
      184            1                  2
      185            1                  2
      186            1                  2
      187            1                 16
      188            1                  1
      189            1                  8
      190            1                  4
      191            1                 16
      192            1                  8
      193            1                  2
      194            1                  4
      195            1                  8
      196            1                 16
      197            1                  1
      198            1                  4
      199            1                  1
      200            1                  1
      201            1                  4
      202            1                  2
      203            1                  2
      204            1                 16
      205            1                 16
      206            1                  4
      207            1                  1
      208            1                  8
      209            1                  2
      210            1                  1
      211            1                 16
      212            1                  1
      213            1                  1
      214            1                  1
      215            1                  8
      216            1                 16
      217            1                  8
      218            1                  1
      219            1                  1
      220            1                  1
      221            1                  4
      222            1                  2
      223            1                  8
      224            1                  4
      225            1                  8
      226            1                  8
      227            1                  4
      228            1                  2
      229            1                  2
      230            1                 16
      231            1                  2
      232            1                 16
      233            1                 16
      234            1                  1
      235            1                  1
      236            1                 16
      237            1                  1
      238            1                  2
      239            1                  4
      240            1                  2
      241            1                  1
      242            1                 16
      243            1                  8
      244            1                 16
      245            1                  2
      246            1                  2
      247            1                 16
      248            1                  1
      249            1                  1
      250            1                 16
      251            1                  1
      252            1                  1
      253            1                 16
      254            1                  8
      255            1                 16
      256            1                  1
      257            1                  2
      258            1                 16
      259            1                  2
      260            1                 16
      261            1                  8
      262            1                  8
      263            1                  4
      264            1                  8
      265            1                  2
      266            1                  8
      267            1                  2
      268            1                  4
      269            1                  2
      270            1                  4
      271            1                  2
      272            1                  2
      273            1                  8
      274            1                  4
      275            1                 16
      276            1                  1
      277            1                  4
      278            1                  2
      279            1                  1
      280            1                  4
      281            1                  4
      282            1                  8
      283            1                  8
      284            1                  2
      285            1                  1
      286            1                  8
      287            1                  8
      288            1                 16
      289            1                  2
      290            1                  8
      291            1                 16
      292            1                  4
      293            1                  8
      294            1                  1
      295            1                  4
      296            1                  2
      297            1                  8
      298            1                  8
      299            1                  4
      300            1                  4
      301            1                  4
      302            1                  1
      303            1                  2
      304            1                  4
      305            1                  4
      306            1                  4
      307            1                  4
      308            1                 16
      309            1                 16
      310            1                  1
      311            1                  4
      312            1                  1
      313            1                 16
      314            1                  1
      315            1                  8
      316            1                  2
      317            1                  2
      318            1                  1
      319            1                  2
      320            1                 16
      321            1                  8
      322            1                  2
      323            1                  8
      324            1                 16
      325            1                 16
      326            1                  1
      327            1                  8
      328            1                 16
      329            1                  2
      330            1                  4
      331            1                  1
      332            1                  2
      333            1                 16
      334            1                 16
      335            1                  1
      336            1                  8
      337            1                  2
      338            1                  4
      339            1                  1
      340            1                  1
      341            1                 16
      342            1                  4
      343            1                  8
      344            1                  4
      345            1                  2
      346            1                  4
      347            1                  4
      348            1                  8
      349            1                  8
      350            1                  4
      351            1                  1
      352            1                 16
      353            1                 16
      354            1                 16
      355            1                  8
      356            1                  2
      357            1                  4
      358            1                  4
      359            1                  1
      360            1                  4
      361            1                  1
      362            1                  1
      363            1                  8
      364            1                  4
      365            1                  2
      366            1                 16
      367            1                  8
      368            1                  1
      369            1                  1
      370            1                  8
      371            1                  1
      372            1                  2
      373            1                  2
      374            1                  8
      375            1                  8
      376            1                  2
      377            1                  4
      378            1                  2
      379            1                  8
      380            1                  4
      381            1                 16
      382            1                  1
      383            1                  2
      384            1                  4
      385            1                  8
      386            1                  8
      387            1                  1
      388            1                  1
      389            1                  8
      390            1                  4
      391            1                  4
      392            1                  2
      393            1                  4
      394            1                  8
      395            1                  2
      396            1                  4
      397            1                  1
      398            1                  4
      399            1                  2
      400            1                  1
      401            1                  8
      402            1                 16
      403            1                  8
      404            1                  8
      405            1                 16
      406            1                 16
      407            1                  1
      408            1                  8
      409            1                 16
      410            1                 16
      411            1                  4
      412            1                  8
      413            1                  1
      414            1                  8
      415            1                  8
      416            1                 16
      417            1                  4
      418            1                 16
      419            1                  1
      420            1                 16
      421            1                  1
      422            1                  2
      423            1                 16
      424            1                  2
      425            1                  2
      426            1                 16
      427            1                  2
      428            1                 16
      429            1                 16
      430            1                  4
      431            1                  1
      432            1                  1
      433            1                 16
      434            1                  1
      435            1                 16
      436            1                 16
      437            1                  4
      438            1                  8
      439            1                  2
      440            1                  4
      441            1                 16
      442            1                  1
      443            1                  8
      444            1                  1
      445            1                 16
      446            1                  4
      447            1                  4
      448            1                 16
      449            1                  1
      450            1                  4
      451            1                  1
      452            1                  4
      453            1                  1
      454            1                  1
      455            1                  2
      456            1                  2
      457            1                  4
      458            1                 16
      459            1                  2
      460            1                 16
      461            1                  1
      462            1                  1
      463            1                 16
      464            1                  1
      465            1                  4
      466            1                  2
      467            1                  4
      468            1                 16
      469            1                  1
      470            1                  1
      471            1                  1
      472            1                  1
      473            1                 16
      474            1                  8
      475            1                  4
      476            1                  1
      477            1                 16
      478            1                 16
      479            1                  8
      480            1                  2
      481            1                 16
      482            1                  2
      483            1                  1
      484            1                 16
      485            1                  1
      486            1                  8
      487            1                  8
      488            1                  4
      489            1                  1
      490            1                  4
      491            1                  2
      492            1                  4
      493            1                  2
      494            1                 16
      495            1                  4
      496            1                  8
      497            1                 16
      498            1                  8
      499            1                  1
      500            1                  4
      501            1                  8
      502            1                 16
      503            1                  1
      504            1                  1
      505            1                  8
      506            1                  2
      507            1                  2
      508            1                  8
      509            1                  2
      510            1                  2
      511            1                  2
      512            1                  1
      513            1                 16
      514            1                  1
      515            1                  4
      516            1                  8
      517            1                  4
      518            1                  4
      519            1                  2
      520            1                  2
      521            1                  8
      522            1                  8
      523            1                  2
      524            1                  4
      525            1                  1
      526            1                  8
      527            1                  4
      528            1                  1
      529            1                  1
      530            1                 16
      531            1                  4
      532            1                 16
      533            1                  8
      534            1                  2
      535            1                  4
      536            1                  1
      537            1                  8
      538            1                  4
      539            1                  2
      540            1                  2
      541            1                 16
      542            1                  8
      543            1                 16
      544            1                 16
      545            1                  1
      546            1                  4
      547            1                  4
      548            1                  2
      549            1                  1
      550            1                 16
      551            1                  1
      552            1                  2
      553            1                  8
      554            1                 16
      555            1                 16
      556            1                  4
      557            1                 16
      558            1                 16
      559            1                  2
      560            1                 16
      561            1                  2
      562            1                  8
      563            1                  2
      564            1                  8
      565            1                  1
      566            1                  4
      567            1                  2
      568            1                  2
      569            1                 16
      570            1                  2
      571            1                  8
      572            1                  8
      573            1                  8
      574            1                  1
      575            1                  8
      576            1                 16
      577            1                 16
      578            1                  8
      579            1                  4
      580            1                  8
      581            1                  2
      582            1                  2
      583            1                 16
      584            1                  8
      585            1                  8
      586            1                  1
      587            1                  4
      588            1                  4
      589            1                  1
      590            1                  2
      591            1                  4
      592            1                  1
      593            1                  4
      594            1                  2
      595            1                 16
      596            1                  1
      597            1                  2
      598            1                  4
      599            1                  8
      600            1                  2
      601            1                  8
      602            1                  1
      603            1                  4
      604            1                 16
      605            1                  4
      606            1                 16
      607            1                  4
      608            1                  1
      609            1                  8
      610            1                  1
      611            1                  8
      612            1                  1
      613            1                  1
      614            1                  2
      615            1                  1
      616            1                  1
      617            1                  8
      618            1                  4
      619            1                 16
      620            1                  2
      621            1                  8
      622            1                 16
      623            1                 16
      624            1                 16
      625            1                 16
      626            1                  4
      627            1                 16
      628            1                  8
      629            1                  4
      630            1                  8
      631            1                 16
      632            1                 16
      633            1                 16
      634            1                  1
      635            1                  1
      636            1                  1
      637            1                 16
      638            1                  2
      639            1                 16
      640            1                  8
      641            1                  8
      642            1                  8
      643            1                 16
      644            1                  2
      645            1                  2
      646            1                  2
      647            1                  4
      648            1                  4
      649            1                  8
      650            1                  4
      651            1                  2
      652            1                  1
      653            1                 16
      654            1                  1
      655            1                  1
      656            1                  8
      657            1                 16
      658            1                  2
      659            1                 16
      660            1                 16
      661            1                 16
      662            1                  4
      663            1                 16
      664            1                  2
      665            1                  8
      666            1                  1
      667            1                 16
      668            1                  4
      669            1                  4
      670            1                  2
      671            1                  8
      672            1                  8
      673            1                 16
      674            1                  4
      675            1                  8
      676            1                  1
      677            1                  4
      678            1                  2
      679            1                  4
      680            1                  1
      681            1                 16
      682            1                  8
      683            1                 16
      684            1                  1
      685            1                  2
      686            1                  8
      687            1                  4
      688            1                  4
      689            1                  8
      690            1                 16
      691            1                  8
      692            1                  1
      693            1                  4
      694            1                  1
      695            1                 16
      696            1                 16
      697            1                  8
      698            1                  2
      699            1                  2
      700            1                  1
      701            1                  2
      702            1                  8
      703            1                  8
      704            1                  1
      705            1                  2
      706            1                  2
      707            1                 16
      708            1                  4
      709            1                  2
      710            1                  1
      711            1                  8
      712            1                 16
      713            1                 16
      714            1                 16
      715            1                  1
      716            1                  4
      717            1                 16
      718            1                  1
      719            1                  8
      720            1                  1
      721            1                  4
      722            1                  4
      723            1                  8
      724            1                  1
      725            1                  2
      726            1                  2
      727            1                 16
      728            1                  4
      729            1                  8
      730            1                 16
      731            1                  4
      732            1                 16
      733            1                  1
      734            1                 16
      735            1                  8
      736            1                  8
      737            1                  8
      738            1                  8
      739            1                  1
      740            1                  1
      741            1                  2
      742            1                  8
      743            1                  2
      744            1                  8
      745            1                  8
      746            1                  1
      747            1                  8
      748            1                  4
      749            1                 16
      750            1                  4
      751            1                  1
      752            1                 16
      753            1                 16
      754            1                 16
      755            1                  2
      756            1                  1
      757            1                  4
      758            1                 16
      759            1                 16
      760            1                  8
      761            1                  4
      762            1                  4
      763            1                  1
      764            1                  4
      765            1                 16
      766            1                  4
      767            1                  8
      768            1                  4
      769            1                  8
      770            1                  1
      771            1                  4
      772            1                  1
      773            1                  4
      774            1                  8
      775            1                  8
      776            1                 16
      777            1                  2
      778            1                  2
      779            1                  1
      780            1                  2
      781            1                  8
      782            1                  2
      783            1                  1
      784            1                  1
      785            1                  4
      786            1                 16
      787            1                 16
      788            1                  4
      789            1                  2
      790            1                  8
      791            1                  2
      792            1                  2
      793            1                  1
      794            1                  4
      795            1                  4
      796            1                  4
      797            1                  4
      798            1                  4
      799            1                  1
      800            1                  2
      801            1                  1
      802            1                 16
      803            1                  4
      804            1                  8
      805            1                  8
      806            1                  1
      807            1                 16
      808            1                  8
      809            1                 16
      810            1                  4
      811            1                  8
      812            1                  8
      813            1                  1
      814            1                  1
      815            1                  8
      816            1                 16
      817            1                  1
      818            1                 16
      819            1                 16
      820            1                  8
      821            1                  8
      822            1                  1
      823            1                  1
      824            1                 16
      825            1                  2
      826            1                  1
      827            1                  4
      828            1                 16
      829            1                  4
      830            1                 16
      831            1                  4
      832            1                  2
      833            1                  4
      834            1                  8
      835            1                  8
      836            1                  4
      837            1                  2
      838            1                  8
      839            1                  2
      840            1                  8
      841            1                  4
      842            1                  8
      843            1                  1
      844            1                  2
      845            1                  2
      846            1                  8
      847            1                 16
      848            1                  8
      849            1                  8
      850            1                  8
      851            1                  8
      852            1                  8
      853            1                  8
      854            1                  2
      855            1                 16
      856            1                  4
      857            1                  4
      858            1                  2
      859            1                 16
      860            1                  4
      861            1                 16
      862            1                  2
      863            1                  1
      864            1                  8
      865            1                  1
      866            1                  8
      867            1                 16
      868            1                  8
      869            1                  4
      870            1                 16
      871            1                 16
      872            1                  8
      873            1                  4
      874            1                 16
      875            1                  8
      876            1                  1
      877            1                  1
      878            1                  4
      879            1                  1
      880            1                  4
      881            1                  1
      882            1                 16
      883            1                  4
      884            1                 16
      885            1                  8
      886            1                  8
      887            1                  2
      888            1                 16
      889            1                 16
      890            1                  8
      891            1                  1
      892            1                  1
      893            1                  1
      894            1                 16
      895            1                 16
      896            1                 16
      897            1                 16
      898            1                  1
      899            1                  8
      900            1                  2
      901            1                  2
      902            1                  4
      903            1                 16
      904            1                  4
      905            1                  4
      906            1                  8
      907            1                  1
      908            1                  8
      909            1                  8
      910            1                  4
      911            1                 16
      912            1                 16
      913            1                  4
      914            1                  1
      915            1                 16
      916            1                  8
      917            1                  1
      918            1                  4
      919            1                  2
      920            1                  4
      921            1                  4
      922            1                  2
      923            1                  8
      924            1                  2
      925            1                  8
      926            1                  8
      927            1                  4
      928            1                  2
      929            1                  4
      930            1                  1
      931            1                 16
      932            1                  8
      933            1                  2
      934            1                  1
      935            1                 16
      936            1                  1
      937            1                  8
      938            1                  1
      939            1                  4
      940            1                 16
      941            1                  1
      942            1                  8
      943            1                  2
      944            1                  8
      945            1                  4
      946            1                  1
      947            1                  1
      948            1                  8
      949            1                  8
      950            1                  8
      951            1                 16
      952            1                  8
      953            1                  2
      954            1                  8
      955            1                  1
      956            1                  8
      957            1                  8
      958            1                  1
      959            1                  8
      960            1                  4
      961            1                  2
      962            1                  2
      963            1                  2
      964            1                  2
      965            1                  2
      966            1                  1
      967            1                  8
      968            1                  1
      969            1                  2
      970            1                  4
      971            1                  8
      972            1                  2
      973            1                  2
      974            1                  8
      975            1                 16
      976            1                 16
      977            1                  2
      978            1                 16
      979            1                  2
      980            1                  8
      981            1                  2
      982            1                  4
      983            1                  2
      984            1                 16
      985            1                  8
      986            1                  2
      987            1                  2
      988            1                  2
      989            1                  4
      990            1                  2
      991            1                  1
      992            1                  1
      993            1                  4
      994            1                  2
      995            1                  1
      996            1                  4
      997            1                  8
      998            1                 16
      999            1                  4
      1000           1                  8
      1001           1                  8
      1002           1                 16
      1003           1                  4
      1004           1                 16
      1005           1                 16
      1006           1                  1
      1007           1                 16
      1008           1                  8
      1009           1                  8
      1010           1                  4
      1011           1                 16
      1012           1                  8
      1013           1                 16
      1014           1                  2
      1015           1                 16
      1016           1                  4
      1017           1                  4
      1018           1                  2
      1019           1                  1
      1020           1                  1
      1021           1                 16
      1022           1                  1
      1023           1                  1
      1024           1                  1
      1025           1                 16
      1026           1                 16
      1027           1                  4
      1028           1                  1
      1029           1                  4
      1030           1                  8
      1031           1                  8
      1032           1                  8
      1033           1                  1
      1034           1                  8
      1035           1                  8
      1036           1                  8
      1037           1                  1
      1038           1                  2
      1039           1                  2
      1040           1                  8
      1041           1                  8
      1042           1                  2
      1043           1                  1
      1044           1                  8
      1045           1                 16
      1046           1                  1
      1047           1                  2
      1048           1                  1
      1049           1                 16
      1050           1                  8
      1051           1                  1
      1052           1                  4
      1053           1                  4
      1054           1                  4
      1055           1                  8
      1056           1                  2
      1057           1                  2
      1058           1                  1
      1059           1                  1
      1060           1                 16
      1061           1                 16
      1062           1                  4
      1063           1                  1
      1064           1                  4
      1065           1                  2
      1066           1                  4
      1067           1                 16
      1068           1                  2
      1069           1                  2
      1070           1                  8
      1071           1                  1
      1072           1                  2
      1073           1                  8
      1074           1                 16
      1075           1                  4
      1076           1                  2
      1077           1                  2
      1078           1                 16
      1079           1                  2
      1080           1                  1
      1081           1                  1
      1082           1                  8
      1083           1                  4
      1084           1                  2
      1085           1                  4
      1086           1                  8
      1087           1                  2
      1088           1                 16
      1089           1                 16
      1090           1                  2
      1091           1                 16
      1092           1                  4
      1093           1                  4
      1094           1                  2
      1095           1                  8
      1096           1                  4
      1097           1                  2
      1098           1                 16
      1099           1                  4
      1100           1                  2
      1101           1                 16
      1102           1                  2
      1103           1                  2
      1104           1                 16
      1105           1                 16
      1106           1                  2
      1107           1                 16
      1108           1                 16
      1109           1                  2
      1110           1                 16
      1111           1                  2
      1112           1                  8
      1113           1                  8
      1114           1                  2
      1115           1                  4
      1116           1                  2
      1117           1                  1
      1118           1                  1
      1119           1                 16
      1120           1                  2
      1121           1                  4
      1122           1                  2
      1123           1                  1
      1124           1                  1
      1125           1                  4
      1126           1                  1
      1127           1                 16
      1128           1                  2
      1129           1                  1
      1130           1                 16
      1131           1                  8
      1132           1                  1
      1133           1                  2
      1134           1                 16
      1135           1                  2
      1136           1                  2
      1137           1                  1
      1138           1                  2
      1139           1                  2
      1140           1                  8
      1141           1                  1
      1142           1                 16
      1143           1                 16
      1144           1                  2
      1145           1                  1
      1146           1                  4
      1147           1                  8
      1148           1                  2
      1149           1                  4
      1150           1                  4
      1151           1                 16
      1152           1                  2
      1153           1                 16
      1154           1                  8
      1155           1                  1
      1156           1                  2
      1157           1                  1
      1158           1                 16
      1159           1                  1
      1160           1                 16
      1161           1                  1
      1162           1                  8
      1163           1                  1
      1164           1                  4
      1165           1                  2
      1166           1                  2
      1167           1                  1
      1168           1                  1
      1169           1                 16
      1170           1                  4
      1171           1                  4
      1172           1                 16
      1173           1                 16
      1174           1                  4
      1175           1                  1
      1176           1                 16
      1177           1                  4
      1178           1                  1
      1179           1                  2
      1180           1                  8
      1181           1                 16
      1182           1                 16
      1183           1                 16
      1184           1                  2
      1185           1                  8
      1186           1                  4
      1187           1                  1
      1188           1                  1
      1189           1                  4
      1190           1                 16
      1191           1                 16
      1192           1                  2
      1193           1                  1
      1194           1                  4
      1195           1                  2
      1196           1                  4
      1197           1                 16
      1198           1                  1
      1199           1                  1
      1200           1                  2
      1201           1                 16
      1202           1                  1
      1203           1                  1
      1204           1                  2
      1205           1                  2
      1206           1                 16
      1207           1                  1
      1208           1                 16
      1209           1                 16
      1210           1                  2
      1211           1                  2
      1212           1                  1
      1213           1                  1
      1214           1                 16
      1215           1                  4
      1216           1                  2
      1217           1                  4
      1218           1                  1
      1219           1                  1
      1220           1                  4
      1221           1                  8
      1222           1                 16
      1223           1                  8
      1224           1                  8
      1225           1                  4
      1226           1                  4
      1227           1                 16
      1228           1                  8
      1229           1                 16
      1230           1                  1
      1231           1                  4
      1232           1                  8
      1233           1                  4
      1234           1                  2
      1235           1                  2
      1236           1                  1
      1237           1                  2
      1238           1                  2
      1239           1                  4
      1240           1                  8
      1241           1                  8
      1242           1                  1
      1243           1                  8
      1244           1                  4
      1245           1                  8
      1246           1                  2
      1247           1                 16
      1248           1                  4
      1249           1                  4
      1250           1                  4
      1251           1                  1
      1252           1                  1
      1253           1                  4
      1254           1                  4
      1255           1                  4
      1256           1                 16
      1257           1                  1
      1258           1                  4
      1259           1                  8
      1260           1                  4
      1261           1                  2
      1262           1                  1
      1263           1                  8
      1264           1                  8
      1265           1                  1
      1266           1                  1
      1267           1                  8
      1268           1                  1
      1269           1                  1
      1270           1                  1
      1271           1                  2
      1272           1                  2
      1273           1                 16
      1274           1                  8
      1275           1                 16
      1276           1                  4
      1277           1                  4
      1278           1                  8
      1279           1                  2
      1280           1                 16
      1281           1                 16
      1282           1                  1
      1283           1                 16
      1284           1                  1
      1285           1                  2
      1286           1                  8
      1287           1                  4
      1288           1                  1
      1289           1                  2
      1290           1                 16
      1291           1                  4
      1292           1                  1
      1293           1                  1
      1294           1                  8
      1295           1                  1
      1296           1                  8
      1297           1                  8
      1298           1                  2
      1299           1                  4
      1300           1                  4
      1301           1                  4
      1302           1                  1
      1303           1                  8
      1304           1                  2
      1305           1                 16
      1306           1                  4
      1307           1                  2
      1308           1                  2
      1309           1                  4
      1310           1                  2
      1311           1                 16
      1312           1                  4
      1313           1                  2
      1314           1                  1
      1315           1                  8
      1316           1                  8
      1317           1                  2
      1318           1                  4
      1319           1                  2
      1320           1                  8
      1321           1                  2
      1322           1                  8
      1323           1                  1
      1324           1                  8
      1325           1                 16
      1326           1                 16
      1327           1                 16
      1328           1                  4
      1329           1                  4
      1330           1                 16
      1331           1                  2
      1332           1                  2
      1333           1                  1
      1334           1                  4
      1335           1                  4
      1336           1                  8
      1337           1                  2
      1338           1                  1
      1339           1                  1
      1340           1                  4
      1341           1                  8
      1342           1                 16
      1343           1                  4
      1344           1                  4
      1345           1                  8
      1346           1                  8
      1347           1                  4
      1348           1                 16
      1349           1                  2
      1350           1                  1
      1351           1                  8
      1352           1                 16
      1353           1                  8
      1354           1                  8
      1355           1                  8
      1356           1                 16
      1357           1                  4
      1358           1                  8
      1359           1                  8
      1360           1                  8
      1361           1                 16
      1362           1                 16
      1363           1                 16
      1364           1                  2
      1365           1                  8
      1366           1                  8
      1367           1                  2
      1368           1                  1
      1369           1                  4
      1370           1                  1
      1371           1                  2
      1372           1                  4
      1373           1                 16
      1374           1                  8
      1375           1                  4
      1376           1                  4
      1377           1                  1
      1378           1                  2
      1379           1                  8
      1380           1                  4
      1381           1                  1
      1382           1                  4
      1383           1                  4
      1384           1                  1
      1385           1                  1
      1386           1                  1
      1387           1                  4
      1388           1                  2
      1389           1                  1
      1390           1                  8
      1391           1                  8
      1392           1                  4
      1393           1                 16
      1394           1                  8
      1395           1                  4
      1396           1                  4
      1397           1                  2
      1398           1                 16
      1399           1                  2
      1400           1                  8
      1401           1                  1
      1402           1                  2
      1403           1                 16
      1404           1                  8
      1405           1                  8
      1406           1                  8
      1407           1                 16
      1408           1                  1
      1409           1                  4
      1410           1                  1
      1411           1                  1
      1412           1                  2
      1413           1                 16
      1414           1                  2
      1415           1                 16
      1416           1                 16
      1417           1                  8
      1418           1                  4
      1419           1                  8
      1420           1                  2
      1421           1                  2
      1422           1                  4
      1423           1                  2
      1424           1                  2
      1425           1                  4
      1426           1                 16
      1427           1                  8
      1428           1                  1
      1429           1                 16
      1430           1                 16
      1431           1                 16
      1432           1                  2
      1433           1                  8
      1434           1                 16
      1435           1                  1
      1436           1                  4
      1437           1                 16
      1438           1                  2
      1439           1                 16
      1440           1                 16
      1441           1                 16
      1442           1                  1
      1443           1                 16
      1444           1                  4
      1445           1                  4
      1446           1                  2
      1447           1                 16
      1448           1                  8
      1449           1                  8
      1450           1                  1
      1451           1                  4
      1452           1                  4
      1453           1                  1
      1454           1                  4
      1455           1                  2
      1456           1                 16
      1457           1                  4
      1458           1                  4
      1459           1                  8
      1460           1                  8
      1461           1                 16
      1462           1                  2
      1463           1                 16
      1464           1                  1
      1465           1                 16
      1466           1                 16
      1467           1                  4
      1468           1                  1
      1469           1                  2
      1470           1                  4
      1471           1                  2
      1472           1                  8
      1473           1                  4
      1474           1                  2
      1475           1                  8
      1476           1                 16
      1477           1                  1
      1478           1                  8
      1479           1                  2
      1480           1                  1
      1481           1                  2
      1482           1                  4
      1483           1                  2
      1484           1                  4
      1485           1                  8
      1486           1                  1
      1487           1                  8
      1488           1                  4
      1489           1                  8
      1490           1                 16
      1491           1                  1
      1492           1                  1
      1493           1                  8
      1494           1                  2
      1495           1                 16
      1496           1                  2
      1497           1                  1
      1498           1                  8
      1499           1                 16
      1500           1                  1
      1501           1                  4
      1502           1                  4
      1503           1                  4
      1504           1                  1
      1505           1                 16
      1506           1                  1
      1507           1                  1
      1508           1                 16
      1509           1                  8
      1510           1                  8
      1511           1                  4
      1512           1                 16
      1513           1                 16
      1514           1                  1
      1515           1                  4
      1516           1                 16
      1517           1                  2
      1518           1                  8
      1519           1                  1
      1520           1                  4
      1521           1                  4
      1522           1                  4
      1523           1                  1
      1524           1                  4
      1525           1                 16
      1526           1                 16
      1527           1                  8
      1528           1                  4
      1529           1                  1
      1530           1                  1
      1531           1                  2
      1532           1                 16
      1533           1                  1
      1534           1                  1
      1535           1                  4
      1536           1                  4
      1537           1                  8
      1538           1                 16
      1539           1                 16
      1540           1                  1
      1541           1                  8
      1542           1                  8
      1543           1                 16
      1544           1                  8
      1545           1                  2
      1546           1                  4
      1547           1                 16
      1548           1                  1
      1549           1                  2
      1550           1                  1
      1551           1                  2
      1552           1                  1
      1553           1                  2
      1554           1                  4
      1555           1                 16
      1556           1                  8
      1557           1                 16
      1558           1                  1
      1559           1                 16
      1560           1                 16
      1561           1                  2
      1562           1                 16
      1563           1                  8
      1564           1                  8
      1565           1                  4
      1566           1                  4
      1567           1                  8
      1568           1                  4
      1569           1                  1
      1570           1                 16
      1571           1                  1
      1572           1                  4
      1573           1                  1
      1574           1                  1
      1575           1                 16
      1576           1                  4
      1577           1                  1
      1578           1                  1
      1579           1                  8
      1580           1                  2
      1581           1                  1
      1582           1                 16
      1583           1                  4
      1584           1                  4
      1585           1                  4
      1586           1                  1
      1587           1                 16
      1588           1                  1
      1589           1                  8
      1590           1                  2
      1591           1                  4
      1592           1                  2
      1593           1                  8
      1594           1                  1
      1595           1                 16
      1596           1                  1
      1597           1                  4
      1598           1                  4
      1599           1                  8
      1600           1                  1
      1601           1                  8
      1602           1                  2
      1603           1                  8
      1604           1                  8
      1605           1                 16
      1606           1                  8
      1607           1                  4
      1608           1                  1
      1609           1                  4
      1610           1                  1
      1611           1                  4
      1612           1                  8
      1613           1                  1
      1614           1                 16
      1615           1                  2
      1616           1                  4
      1617           1                  2
      1618           1                  1
      1619           1                  8
      1620           1                  1
      1621           1                 16
      1622           1                  1
      1623           1                  8
      1624           1                  1
      1625           1                 16
      1626           1                  4
      1627           1                  2
      1628           1                  8
      1629           1                  2
      1630           1                 16
      1631           1                  1
      1632           1                  4
      1633           1                  4
      1634           1                  2
      1635           1                 16
      1636           1                  1
      1637           1                  4
      1638           1                  8
      1639           1                  8
      1640           1                 16
      1641           1                  2
      1642           1                  2
      1643           1                  1
      1644           1                  2
      1645           1                  4
      1646           1                  8
      1647           1                  2
      1648           1                 16
      1649           1                  1
      1650           1                  2
      1651           1                  4
      1652           1                  2
      1653           1                  8
      1654           1                  4
      1655           1                  2
      1656           1                  2
      1657           1                 16
      1658           1                  1
      1659           1                  8
      1660           1                  2
      1661           1                  8
      1662           1                  4
      1663           1                 16
      1664           1                  4
      1665           1                  1
      1666           1                  4
      1667           1                  2
      1668           1                  8
      1669           1                  4
      1670           1                  8
      1671           1                  1
      1672           1                  2
      1673           1                  4
      1674           1                  2
      1675           1                  2
      1676           1                 16
      1677           1                  4
      1678           1                  8
      1679           1                  8
      1680           1                  8
      1681           1                  4
      1682           1                  1
      1683           1                 16
      1684           1                  8
      1685           1                  2
      1686           1                  8
      1687           1                  4
      1688           1                  2
      1689           1                  2
      1690           1                  2
      1691           1                  2
      1692           1                  2
      1693           1                  8
      1694           1                  2
      1695           1                 16
      1696           1                  4
      1697           1                  8
      1698           1                  1
      1699           1                 16
      1700           1                 16
      1701           1                  4
      1702           1                  8
      1703           1                 16
      1704           1                  4
      1705           1                  1
      1706           1                  4
      1707           1                  1
      1708           1                  8
      1709           1                 16
      1710           1                  2
      1711           1                  2
      1712           1                  2
      1713           1                  2
      1714           1                  4
      1715           1                  2
      1716           1                  4
      1717           1                  2
      1718           1                  4
      1719           1                  8
      1720           1                  8
      1721           1                  4
      1722           1                  1
      1723           1                 16
      1724           1                  4
      1725           1                  1
      1726           1                  4
      1727           1                 16
      1728           1                  8
      1729           1                  1
      1730           1                  2
      1731           1                  2
      1732           1                 16
      1733           1                  8
      1734           1                  1
      1735           1                  4
      1736           1                  2
      1737           1                  8
      1738           1                  8
      1739           1                  2
      1740           1                  1
      1741           1                  4
      1742           1                  8
      1743           1                  1
      1744           1                  4
      1745           1                  4
      1746           1                 16
      1747           1                  2
      1748           1                  2
      1749           1                  2
      1750           1                  2
      1751           1                 16
      1752           1                  2
      1753           1                  1
      1754           1                 16
      1755           1                  2
      1756           1                 16
      1757           1                  8
      1758           1                  2
      1759           1                  1
      1760           1                  8
      1761           1                  2
      1762           1                  2
      1763           1                  8
      1764           1                  2
      1765           1                 16
      1766           1                  4
      1767           1                  8
      1768           1                  8
      1769           1                 16
      1770           1                  8
      1771           1                 16
      1772           1                  8
      1773           1                 16
      1774           1                  1
      1775           1                  1
      1776           1                  8
      1777           1                  8
      1778           1                 16
      1779           1                  8
      1780           1                 16
      1781           1                  1
      1782           1                  1
      1783           1                  1
      1784           1                  4
      1785           1                  2
      1786           1                  4
      1787           1                 16
      1788           1                 16
      1789           1                 16
      1790           1                  8
      1791           1                  4
      1792           1                 16
      1793           1                  1
      1794           1                  4
      1795           1                  2
      1796           1                  8
      1797           1                  8
      1798           1                  8
      1799           1                  1
      1800           1                  1
      1801           1                  4
      1802           1                  1
      1803           1                 16
      1804           1                  4
      1805           1                  8
      1806           1                  8
      1807           1                  2
      1808           1                  4
      1809           1                  1
      1810           1                 16
      1811           1                  2
      1812           1                  8
      1813           1                  2
      1814           1                  4
      1815           1                  1
      1816           1                  1
      1817           1                  1
      1818           1                  8
      1819           1                  8
      1820           1                  2
      1821           1                  1
      1822           1                  4
      1823           1                  2
      1824           1                 16
      1825           1                  8
      1826           1                  8
      1827           1                  1
      1828           1                  8
      1829           1                  1
      1830           1                  1
      1831           1                  8
      1832           1                  2
      1833           1                 16
      1834           1                  4
      1835           1                  8
      1836           1                 16
      1837           1                  8
      1838           1                 16
      1839           1                 16
      1840           1                 16
      1841           1                 16
      1842           1                 16
      1843           1                  2
      1844           1                  4
      1845           1                 16
      1846           1                  2
      1847           1                  1
      1848           1                  4
      1849           1                  8
      1850           1                  1
      1851           1                  8
      1852           1                  2
      1853           1                  2
      1854           1                  1
      1855           1                  4
      1856           1                  8
      1857           1                  4
      1858           1                  8
      1859           1                 16
      1860           1                  2
      1861           1                  2
      1862           1                  2
      1863           1                 16
      1864           1                  2
      1865           1                  2
      1866           1                 16
      1867           1                  1
      1868           1                  4
      1869           1                  4
      1870           1                 16
      1871           1                  2
      1872           1                  8
      1873           1                  4
      1874           1                 16
      1875           1                  4
      1876           1                 16
      1877           1                  2
      1878           1                  4
      1879           1                  4
      1880           1                  1
      1881           1                 16
      1882           1                 16
      1883           1                  4
      1884           1                  1
      1885           1                  1
      1886           1                  4
      1887           1                  4
      1888           1                  4
      1889           1                  4
      1890           1                  8
      1891           1                  1
      1892           1                  4
      1893           1                  4
      1894           1                  2
      1895           1                  2
      1896           1                  2
      1897           1                  2
      1898           1                 16
      1899           1                  4
      1900           1                  4
      1901           1                 16
      1902           1                 16
      1903           1                  2
      1904           1                 16
      1905           1                 16
      1906           1                  1
      1907           1                  1
      1908           1                  1
      1909           1                  8
      1910           1                  2
      1911           1                  2
      1912           1                  2
      1913           1                  2
      1914           1                  1
      1915           1                  8
      1916           1                 16
      1917           1                  8
      1918           1                  1
      1919           1                  2
      1920           1                  2
      1921           1                  4
      1922           1                  8
      1923           1                  1
      1924           1                  1
      1925           1                  8
      1926           1                  8
      1927           1                  2
      1928           1                  4
      1929           1                  2
      1930           1                  8
      1931           1                  4
      1932           1                  1
      1933           1                  2
      1934           1                  8
      1935           1                  4
      1936           1                  8
      1937           1                  1
      1938           1                  1
      1939           1                  1
      1940           1                  2
      1941           1                  1
      1942           1                  2
      1943           1                  8
      1944           1                  2
      1945           1                  4
      1946           1                  8
      1947           1                  4
      1948           1                  1
      1949           1                  1
      1950           1                  4
      1951           1                  8
      1952           1                 16
      1953           1                  4
      1954           1                  1
      1955           1                  1
      1956           1                 16
      1957           1                  4
      1958           1                 16
      1959           1                  2
      1960           1                  1
      1961           1                  8
      1962           1                  4
      1963           1                  4
      1964           1                 16
      1965           1                 16
      1966           1                  4
      1967           1                 16
      1968           1                  4
      1969           1                  4
      1970           1                  8
      1971           1                 16
      1972           1                  2
      1973           1                  8
      1974           1                 16
      1975           1                  8
      1976           1                  8
      1977           1                  4
      1978           1                 16
      1979           1                  1
      1980           1                  4
      1981           1                  2
      1982           1                 16
      1983           1                  2
      1984           1                  4
      1985           1                  4
      1986           1                  2
      1987           1                 16
      1988           1                  2
      1989           1                  1
      1990           1                  2
      1991           1                  1
      1992           1                  2
      1993           1                  4
      1994           1                  8
      1995           1                 16
      1996           1                  2
      1997           1                  2
      1998           1                  8
      1999           1                  2
      2000           1                  4
      attr(,"assign")
      [1] 0 1
      [1] "====================== Y ======================"
                 1            2            3            4            5            6 
      4.210427e-10 3.940558e-10 1.753562e-10 4.097376e-10 3.911086e-10 4.227546e-10 
                 7            8            9           10           11           12 
      1.608701e-10 1.774761e-10 4.440009e-10 2.800922e-10 2.346357e-10 7.468139e-10 
                13           14           15           16           17           18 
      1.753731e-10 2.230951e-10 2.840986e-10 5.875795e-10 4.180634e-10 2.314729e-10 
                19           20           21           22           23           24 
      1.503698e-10 3.908138e-10 1.587765e-10 3.906324e-10 2.630764e-10 1.596652e-10 
                25           26           27           28           29           30 
      3.893867e-10 8.423369e-10 3.258722e-10 2.056482e-10 1.585265e-10 2.337238e-10 
                31           32           33           34           35           36 
      7.134660e-10 1.314790e-10 3.779901e-10 2.068491e-10 1.766603e-10 3.481895e-10 
                37           38           39           40           41           42 
      2.570472e-10 2.087954e-10 4.453031e-10 5.260084e-10 2.103868e-10 5.886111e-10 
                43           44           45           46           47           48 
      4.846906e-10 1.146456e-09 2.920874e-10 3.629633e-10 3.161069e-10 3.921639e-10 
                49           50           51           52           53           54 
      2.092972e-10 2.843498e-10 7.074632e-10 3.415904e-10 4.283393e-10 4.477139e-10 
                55           56           57           58           59           60 
      4.847676e-10 3.467863e-10 1.142555e-09 2.241426e-10 1.608181e-10 3.540623e-10 
                61           62           63           64           65           66 
      4.767071e-10 3.651874e-10 4.239355e-10 4.131189e-10 4.083488e-10 3.732752e-10 
                67           68           69           70           71           72 
      2.299818e-10 2.347500e-10 1.318569e-09 5.937168e-10 1.334640e-09 4.913603e-10 
                73           74           75           76           77           78 
      2.304815e-10 5.937167e-10 2.567062e-10 6.181431e-10 1.355607e-10 3.451563e-10 
                79           80           81           82           83           84 
      2.730256e-10 7.230221e-10 2.885728e-10 2.886801e-10 3.452533e-10 1.994580e-09 
                85           86           87           88           89           90 
      5.215117e-10 4.001576e-10 1.454573e-10 6.390438e-10 1.505876e-10 1.525453e-09 
                91           92           93           94           95           96 
      1.326025e-09 3.428147e-10 4.433655e-10 2.954552e-10 1.663365e-10 2.261640e-10 
                97           98           99          100          101          102 
      3.449591e-10 3.438713e-10 2.823171e-10 2.678420e-10 7.199041e-10 2.164415e-10 
               103          104          105          106          107          108 
      1.356826e-09 3.447496e-10 2.003520e-10 1.340395e-09 6.176998e-10 2.827277e-10 
               109          110          111          112          113          114 
      7.187821e-10 4.802876e-10 3.066959e-10 2.687567e-10 3.336536e-10 2.718771e-10 
               115          116          117          118          119          120 
      4.118471e-10 6.797539e-10 3.893113e-10 2.676723e-10 1.170362e-09 1.583080e-10 
               121          122          123          124          125          126 
      1.524676e-10 3.726608e-10 1.192852e-09 2.638018e-10 2.388301e-10 7.659985e-10 
               127          128          129          130          131          132 
      5.488066e-10 3.392240e-10 4.172776e-10 6.941926e-10 1.157389e-09 3.256724e-10 
               133          134          135          136          137          138 
      5.887294e-10 5.853422e-10 1.431177e-10 2.306037e-10 2.045464e-09 7.749670e-10 
               139          140          141          142          143          144 
      4.267113e-10 7.258466e-10 2.743044e-10 3.414927e-10 2.269017e-10 2.318767e-10 
               145          146          147          148          149          150 
      2.831444e-10 2.137493e-10 3.798108e-10 1.698727e-10 4.152897e-10 4.327192e-10 
               151          152          153          154          155          156 
      2.631155e-10 3.608841e-10 3.600398e-10 3.429187e-10 4.092111e-10 2.218426e-10 
               157          158          159          160          161          162 
      2.306364e-10 1.386640e-10 5.081421e-10 5.901408e-10 3.598285e-10 2.706742e-10 
               163          164          165          166          167          168 
      2.285007e-09 2.253857e-10 3.148812e-10 2.633642e-10 3.571069e-10 4.851583e-10 
               169          170          171          172          173          174 
      5.842718e-10 2.888076e-10 1.765903e-10 5.830172e-10 3.889113e-10 3.849985e-10 
               175          176          177          178          179          180 
      6.790116e-10 7.287500e-10 3.473051e-10 9.408394e-10 4.867956e-10 3.895397e-10 
               181          182          183          184          185          186 
      1.395163e-09 4.947202e-10 3.436732e-10 2.733393e-10 3.195092e-10 4.995451e-10 
               187          188          189          190          191          192 
      5.893385e-10 9.539689e-10 3.882522e-10 2.548874e-10 5.860884e-10 4.670684e-10 
               193          194          195          196          197          198 
      4.054014e-10 1.769934e-10 2.234858e-10 5.940778e-10 5.179439e-10 3.424729e-10 
               199          200          201          202          203          204 
      1.336758e-09 5.938604e-10 1.646137e-10 7.380437e-10 1.547899e-10 3.630206e-10 
               205          206          207          208          209          210 
      3.443495e-10 3.084030e-10 5.038608e-10 2.167768e-10 2.690066e-10 1.483437e-10 
               211          212          213          214          215          216 
      4.063971e-10 4.172577e-10 4.688924e-10 1.480810e-09 2.654471e-10 5.869208e-10 
               217          218          219          220          221          222 
      3.927877e-10 1.181546e-09 1.064565e-09 7.681713e-10 4.491263e-10 4.786172e-10 
               223          224          225          226          227          228 
      2.332745e-10 3.094526e-10 2.631647e-10 3.919478e-10 3.027007e-10 6.826578e-10 
               229          230          231          232          233          234 
      2.680198e-10 3.500296e-10 2.684167e-10 3.467182e-10 3.876472e-10 6.070898e-10 
               235          236          237          238          239          240 
      3.175880e-10 3.605059e-10 1.175036e-09 1.832774e-10 3.101223e-10 4.050205e-10 
               241          242          243          244          245          246 
      1.273354e-10 3.647338e-10 2.287588e-10 3.972848e-10 7.222393e-10 1.140750e-09 
               247          248          249          250          251          252 
      3.994818e-10 2.031072e-09 2.398663e-09 3.433329e-10 1.285902e-09 2.279659e-10 
               253          254          255          256          257          258 
      3.389511e-10 2.273390e-10 3.458586e-10 6.484592e-10 7.293533e-10 3.605099e-10 
               259          260          261          262          263          264 
      2.789528e-10 4.068591e-10 2.688823e-10 3.886429e-10 7.244047e-10 2.737369e-10 
               265          266          267          268          269          270 
      5.019598e-10 2.679607e-10 2.606280e-10 1.741384e-10 8.433627e-10 2.080193e-10 
               271          272          273          274          275          276 
      8.829431e-10 3.740894e-10 2.232484e-10 1.737335e-10 3.405710e-10 1.264051e-10 
               277          278          279          280          281          282 
      5.911959e-10 1.668643e-10 8.463841e-10 1.610988e-10 1.799910e-10 2.285287e-10 
               283          284          285          286          287          288 
      2.043884e-10 2.255533e-10 3.377147e-10 2.038145e-10 2.628580e-10 3.423551e-10 
               289          290          291          292          293          294 
      1.017216e-09 2.261744e-10 3.673676e-10 2.514060e-10 2.324620e-10 3.110012e-10 
               295          296          297          298          299          300 
      1.593589e-10 7.568222e-10 2.682059e-10 2.671851e-10 7.273018e-10 7.234904e-10 
               301          302          303          304          305          306 
      3.037309e-10 2.022232e-09 7.686078e-10 3.076222e-10 1.737795e-10 4.916983e-10 
               307          308          309          310          311          312 
      3.010988e-10 3.584822e-10 3.509283e-10 1.312843e-09 1.768067e-10 8.527991e-10 
               313          314          315          316          317          318 
      4.164685e-10 2.281455e-10 2.684301e-10 1.875301e-10 3.736546e-10 1.247076e-09 
               319          320          321          322          323          324 
      4.951020e-10 5.841834e-10 2.256339e-10 1.910298e-10 2.669837e-10 3.797656e-10 
               325          326          327          328          329          330 
      3.548849e-10 5.159334e-10 2.731572e-10 5.840725e-10 4.999627e-10 4.947687e-10 
               331          332          333          334          335          336 
      8.773381e-10 2.743777e-10 4.146605e-10 3.355077e-10 6.601679e-10 3.597722e-10 
               337          338          339          340          341          342 
      1.686352e-10 4.496246e-10 1.772515e-09 8.832668e-10 5.836835e-10 4.552609e-10 
               343          344          345          346          347          348 
      2.087852e-10 2.109874e-10 3.095085e-10 1.607487e-10 1.675343e-10 3.590914e-10 
               349          350          351          352          353          354 
      2.065739e-10 2.072614e-10 7.165202e-10 3.454610e-10 5.788586e-10 5.778246e-10 
               355          356          357          358          359          360 
      2.100016e-10 8.678473e-10 3.092971e-10 1.591847e-10 1.191876e-09 4.898533e-10 
               361          362          363          364          365          366 
      1.367593e-10 5.200479e-10 2.339319e-10 1.754089e-10 7.838595e-10 5.933999e-10 
               367          368          369          370          371          372 
      2.242456e-10 2.952796e-10 8.702754e-10 3.901987e-10 4.616221e-10 2.654615e-10 
               373          374          375          376          377          378 
      4.783525e-10 2.613843e-10 2.342509e-10 2.669689e-10 1.830322e-10 3.676181e-10 
               379          380          381          382          383          384 
      2.244924e-10 3.031552e-10 4.161595e-10 2.665427e-10 2.566210e-10 4.407025e-10 
               385          386          387          388          389          390 
      4.284493e-10 3.616417e-10 7.708653e-10 4.582026e-10 3.595602e-10 2.087105e-10 
               391          392          393          394          395          396 
      3.100508e-10 1.610734e-10 1.772459e-10 2.065615e-10 3.432704e-10 1.640141e-10 
               397          398          399          400          401          402 
      8.760954e-10 2.335345e-10 3.443814e-10 2.254076e-09 3.907740e-10 4.127126e-10 
               403          404          405          406          407          408 
      2.225842e-10 2.636061e-10 5.843800e-10 4.317607e-10 2.879724e-10 2.626780e-10 
               409          410          411          412          413          414 
      4.017355e-10 3.471757e-10 4.471417e-10 2.236609e-10 1.423365e-09 2.060718e-10 
               415          416          417          418          419          420 
      2.211699e-10 5.815242e-10 4.432689e-10 5.806167e-10 1.284829e-09 4.110192e-10 
               421          422          423          424          425          426 
      1.552632e-10 4.076690e-10 3.998870e-10 2.540535e-10 1.166192e-09 3.452985e-10 
               427          428          429          430          431          432 
      1.705625e-10 4.167121e-10 5.897745e-10 3.038959e-10 8.420545e-10 8.395526e-10 
               433          434          435          436          437          438 
      5.878656e-10 1.617610e-10 4.065676e-10 5.935438e-10 4.554799e-10 2.125180e-10 
               439          440          441          442          443          444 
      2.896909e-10 1.770735e-10 4.066102e-10 5.213344e-10 2.644026e-10 7.840260e-10 
               445          446          447          448          449          450 
      4.241013e-10 1.745420e-10 4.952784e-10 3.502136e-10 4.890064e-10 4.434977e-10 
               451          452          453          454          455          456 
      9.568688e-10 3.096835e-10 2.845476e-10 4.870896e-10 2.841298e-10 1.805259e-10 
               457          458          459          460          461          462 
      3.106725e-10 5.905307e-10 1.919417e-10 3.437813e-10 9.173098e-10 3.290399e-10 
               463          464          465          466          467          468 
      3.870630e-10 2.287230e-10 1.751159e-10 1.481575e-10 5.274868e-10 3.472641e-10 
               469          470          471          472          473          474 
      3.352607e-10 6.022741e-10 6.303863e-10 2.984924e-10 3.563776e-10 2.062720e-10 
               475          476          477          478          479          480 
      1.599622e-10 6.522853e-10 4.023297e-10 4.015199e-10 2.076191e-10 7.256375e-10 
               481          482          483          484          485          486 
      5.888670e-10 3.334339e-10 4.721122e-10 5.801103e-10 8.458531e-10 2.753668e-10 
               487          488          489          490          491          492 
      6.270218e-10 2.124925e-10 1.313897e-09 7.243637e-10 1.610393e-10 4.429151e-10 
               493          494          495          496          497          498 
      1.855023e-10 5.871223e-10 2.079293e-10 2.623714e-10 4.064434e-10 3.890345e-10 
               499          500          501          502          503          504 
      3.175389e-10 1.595999e-10 2.715666e-10 4.197868e-10 5.920908e-10 2.954729e-10 
               505          506          507          508          509          510 
      2.634797e-10 3.992466e-10 1.607396e-10 2.251647e-10 4.049566e-10 1.630859e-10 
               511          512          513          514          515          516 
      4.736175e-10 4.825539e-10 4.089481e-10 1.392656e-10 1.742762e-10 4.244784e-10 
               517          518          519          520          521          522 
      1.800400e-10 1.613424e-10 9.314786e-10 8.092684e-10 2.024828e-10 2.160315e-10 
               523          524          525          526          527          528 
      7.376391e-10 1.757475e-10 8.671142e-10 2.685338e-10 4.358118e-10 1.492363e-09 
               529          530          531          532          533          534 
      7.049221e-10 3.630381e-10 3.018633e-10 3.497636e-10 2.648428e-10 5.227387e-10 
               535          536          537          538          539          540 
      4.304362e-10 1.276273e-10 2.053840e-10 3.026046e-10 1.552896e-10 7.682660e-10 
               541          542          543          544          545          546 
      3.491258e-10 2.253768e-10 5.979417e-10 5.890151e-10 1.299816e-09 3.043225e-10 
               547          548          549          550          551          552 
      7.733958e-10 3.305748e-10 7.014187e-10 4.094391e-10 1.562918e-10 8.993492e-10 
               553          554          555          556          557          558 
      6.274304e-10 3.670720e-10 3.381613e-10 2.375335e-10 5.795120e-10 5.826640e-10 
               559          560          561          562          563          564 
      2.886471e-10 5.914169e-10 9.167589e-10 2.292773e-10 1.610779e-10 2.236198e-10 
               565          566          567          568          569          570 
      1.547677e-10 1.927227e-10 1.614108e-10 2.729408e-10 5.819472e-10 8.316678e-10 
               571          572          573          574          575          576 
      2.654517e-10 3.897542e-10 3.893234e-10 1.575261e-10 2.038625e-10 5.949982e-10 
               577          578          579          580          581          582 
      3.456781e-10 2.196177e-10 1.624071e-10 3.833218e-10 7.773420e-10 7.078238e-10 
               583          584          585          586          587          588 
      4.218032e-10 3.939295e-10 3.890708e-10 2.427982e-10 4.330400e-10 2.066529e-10 
               589          590          591          592          593          594 
      5.977853e-10 1.604372e-10 5.180427e-10 1.512617e-09 5.394728e-10 3.328907e-10 
               595          596          597          598          599          600 
      3.648289e-10 8.824871e-10 1.993670e-10 2.078191e-10 3.928618e-10 1.606504e-10 
               601          602          603          604          605          606 
      2.252851e-10 1.290968e-09 2.129036e-10 5.838170e-10 1.575745e-10 4.217323e-10 
               607          608          609          610          611          612 
      3.036485e-10 1.433538e-10 2.097566e-10 1.310855e-09 3.922926e-10 1.352054e-09 
               613          614          615          616          617          618 
      1.402933e-10 1.804471e-10 3.387492e-10 4.188270e-10 2.669890e-10 2.569192e-10 
               619          620          621          622          623          624 
      5.821651e-10 2.725483e-10 3.884968e-10 3.448235e-10 3.604976e-10 5.990707e-10 
               625          626          627          628          629          630 
      4.358763e-10 4.514610e-10 5.893693e-10 4.556769e-10 4.378052e-10 3.903426e-10 
               631          632          633          634          635          636 
      3.465376e-10 3.373616e-10 4.374566e-10 2.030488e-09 2.336584e-10 1.286397e-09 
               637          638          639          640          641          642 
      3.411395e-10 2.890010e-10 3.664468e-10 2.070210e-10 2.680145e-10 3.928750e-10 
               643          644          645          646          647          648 
      4.181819e-10 4.802123e-10 6.843118e-10 7.172508e-10 2.074789e-10 2.071970e-10 
               649          650          651          652          653          654 
      2.671666e-10 1.621973e-10 1.809033e-10 4.760368e-10 4.294142e-10 8.394173e-10 
               655          656          657          658          659          660 
      5.549774e-10 3.627146e-10 5.835635e-10 8.193643e-10 5.831776e-10 5.807283e-10 
               661          662          663          664          665          666 
      4.113841e-10 4.833532e-10 4.158335e-10 2.856487e-10 6.234253e-10 3.339582e-10 
               667          668          669          670          671          672 
      5.853963e-10 3.129180e-10 3.030279e-10 1.516253e-10 2.081847e-10 3.661926e-10 
               673          674          675          676          677          678 
      3.406271e-10 4.414482e-10 2.232118e-10 1.270515e-10 2.074016e-10 7.118197e-10 
               679          680          681          682          683          684 
      2.084743e-10 1.288623e-10 5.799292e-10 2.069031e-10 4.113044e-10 1.369153e-10 
               685          686          687          688          689          690 
      2.562395e-10 4.229570e-10 2.109875e-10 3.054922e-10 3.861631e-10 3.329704e-10 
               691          692          693          694          695          696 
      3.843593e-10 3.389716e-10 3.089082e-10 1.595584e-09 4.004466e-10 5.873264e-10 
               697          698          699          700          701          702 
      3.905943e-10 2.718189e-10 4.302613e-10 1.291299e-09 2.750055e-10 3.850658e-10 
               703          704          705          706          707          708 
      3.896866e-10 2.038426e-09 1.914566e-10 1.606520e-10 3.625102e-10 1.605654e-10 
               709          710          711          712          713          714 
      7.891444e-10 6.033062e-10 2.108338e-10 5.834728e-10 3.493310e-10 3.650463e-10 
               715          716          717          718          719          720 
      1.625554e-10 5.156173e-10 3.724568e-10 7.031604e-10 2.230810e-10 6.197513e-10 
               721          722          723          724          725          726 
      4.287062e-10 1.775144e-10 2.646616e-10 8.637541e-10 1.601291e-10 3.300491e-10 
               727          728          729          730          731          732 
      3.631102e-10 4.525736e-10 2.220975e-10 4.036845e-10 2.533430e-10 4.016436e-10 
               733          734          735          736          737          738 
      1.245957e-09 5.830417e-10 3.854296e-10 2.690002e-10 3.877120e-10 3.893313e-10 
               739          740          741          742          743          744 
      5.188834e-10 1.993317e-09 1.604462e-10 3.877789e-10 4.948253e-10 2.671183e-10 
               745          746          747          748          749          750 
      2.673299e-10 1.188990e-09 6.263404e-10 3.088632e-10 3.587691e-10 2.427437e-10 
               751          752          753          754          755          756 
      7.170426e-10 3.467956e-10 3.973852e-10 3.649080e-10 2.552716e-10 8.507448e-10 
               757          758          759          760          761          762 
      3.133294e-10 5.923708e-10 5.825559e-10 2.147283e-10 1.743688e-10 1.608255e-10 
               763          764          765          766          767          768 
      6.065472e-10 2.648288e-10 5.820115e-10 1.763158e-10 3.900639e-10 1.634792e-10 
               769          770          771          772          773          774 
      2.644863e-10 4.943068e-10 4.412816e-10 4.921280e-10 1.953656e-10 2.138044e-10 
               775          776          777          778          779          780 
      2.086676e-10 4.140894e-10 8.005618e-10 7.179874e-10 2.709180e-10 1.501235e-10 
               781          782          783          784          785          786 
      2.062340e-10 3.756725e-10 1.337159e-09 7.197927e-10 1.753953e-10 3.402497e-10 
               787          788          789          790          791          792 
      5.940663e-10 4.436662e-10 6.229245e-10 3.878646e-10 8.017017e-10 1.821017e-10 
               793          794          795          796          797          798 
      1.593955e-10 1.583634e-10 2.121892e-10 1.594702e-10 3.099019e-10 5.046526e-10 
               799          800          801          802          803          804 
      6.598737e-10 2.714766e-10 1.256847e-09 4.134333e-10 3.049273e-10 2.643589e-10 
               805          806          807          808          809          810 
      2.064297e-10 1.246651e-10 4.153074e-10 2.340551e-10 4.006647e-10 3.010227e-10 
               811          812          813          814          815          816 
      2.339016e-10 4.639626e-10 8.917160e-10 1.274543e-09 2.742477e-10 3.450609e-10 
               817          818          819          820          821          822 
      7.029072e-10 4.089503e-10 5.893648e-10 2.284550e-10 4.291068e-10 2.063561e-09 
               823          824          825          826          827          828 
      1.174653e-09 3.447944e-10 1.164428e-09 1.629005e-10 1.599979e-10 5.835329e-10 
               829          830          831          832          833          834 
      5.128053e-10 4.061801e-10 2.064263e-10 7.706411e-10 2.071450e-10 2.218600e-10 
               835          836          837          838          839          840 
      3.931081e-10 1.597315e-10 7.177721e-10 2.680598e-10 4.088009e-10 3.652170e-10 
               841          842          843          844          845          846 
      2.468779e-10 4.007329e-10 5.808781e-10 1.479930e-10 2.688585e-10 3.874990e-10 
               847          848          849          850          851          852 
      4.077525e-10 2.677381e-10 3.852527e-10 3.862122e-10 2.225665e-10 2.629377e-10 
               853          854          855          856          857          858 
      3.901725e-10 1.649109e-10 4.148868e-10 4.346935e-10 4.597238e-10 2.614519e-10 
               859          860          861          862          863          864 
      4.156012e-10 1.590562e-10 3.672247e-10 1.528188e-10 7.098638e-10 4.035823e-10 
               865          866          867          868          869          870 
      4.742712e-10 3.925343e-10 5.898944e-10 2.123652e-10 1.643860e-10 4.063473e-10 
               871          872          873          874          875          876 
      4.280251e-10 4.376001e-10 4.864897e-10 3.327846e-10 2.238599e-10 4.580432e-10 
               877          878          879          880          881          882 
      6.427241e-10 2.136865e-10 1.373655e-09 3.073996e-10 3.355178e-10 4.022344e-10 
               883          884          885          886          887          888 
      2.576791e-10 3.790323e-10 2.055849e-10 3.655609e-10 3.293860e-10 3.645465e-10 
               889          890          891          892          893          894 
      4.066123e-10 3.854357e-10 8.748309e-10 1.775834e-09 5.905794e-10 4.066713e-10 
               895          896          897          898          899          900 
      3.256785e-10 4.242411e-10 5.830508e-10 5.880615e-10 3.681297e-10 1.592123e-10 
               901          902          903          904          905          906 
      1.161034e-09 1.745259e-10 4.010352e-10 1.910185e-10 7.232744e-10 2.078695e-10 
               907          908          909          910          911          912 
      1.956773e-10 6.266044e-10 4.468302e-10 2.314747e-10 3.389563e-10 3.441347e-10 
               913          914          915          916          917          918 
      3.094755e-10 5.168023e-10 3.982806e-10 2.222739e-10 1.397919e-10 3.020870e-10 
               919          920          921          922          923          924 
      2.695851e-10 1.805926e-10 5.206073e-10 1.625582e-10 2.127085e-10 2.836150e-10 
               925          926          927          928          929          930 
      4.363499e-10 6.459292e-10 1.642924e-10 8.117597e-10 1.819685e-10 1.157317e-09 
               931          932          933          934          935          936 
      5.896003e-10 3.884119e-10 2.664711e-10 3.133177e-10 3.975129e-10 6.495274e-10 
               937          938          939          940          941          942 
      3.888778e-10 5.141958e-10 4.412956e-10 5.897377e-10 9.075063e-10 2.618471e-10 
               943          944          945          946          947          948 
      4.992328e-10 6.226567e-10 2.321381e-10 1.413883e-10 6.509165e-10 3.873760e-10 
               949          950          951          952          953          954 
      6.253645e-10 2.235606e-10 3.663081e-10 3.632763e-10 4.805996e-10 2.624603e-10 
               955          956          957          958          959          960 
      2.932723e-10 3.620713e-10 4.212355e-10 4.902891e-10 2.037641e-10 2.524228e-10 
               961          962          963          964          965          966 
      4.184724e-10 7.773414e-10 2.703387e-10 3.724401e-10 3.751725e-10 1.325757e-09 
               967          968          969          970          971          972 
      4.002573e-10 6.486307e-10 2.869268e-10 2.104396e-10 2.625294e-10 4.937471e-10 
               973          974          975          976          977          978 
      2.826391e-10 3.654790e-10 3.368931e-10 3.975944e-10 5.845922e-10 4.039071e-10 
               979          980          981          982          983          984 
      1.540963e-10 2.229008e-10 9.369023e-10 2.111183e-10 4.714607e-10 3.981084e-10 
               985          986          987          988          989          990 
      3.905113e-10 1.933523e-10 2.691295e-10 2.657543e-10 2.334276e-10 2.579550e-10 
               991          992          993          994          995          996 
      4.640181e-10 1.310856e-09 3.011573e-10 1.639975e-10 1.641269e-10 1.753263e-10 
               997          998          999         1000         1001         1002 
      4.465611e-10 4.219706e-10 3.034091e-10 6.220236e-10 2.314549e-10 3.438558e-10 
              1003         1004         1005         1006         1007         1008 
      1.774684e-10 3.999724e-10 4.147962e-10 1.553164e-09 5.856658e-10 4.282145e-10 
              1009         1010         1011         1012         1013         1014 
      2.063254e-10 3.457107e-10 3.617578e-10 3.999204e-10 3.447822e-10 1.496003e-10 
              1015         1016         1017         1018         1019         1020 
      5.826227e-10 4.462908e-10 7.247117e-10 1.843909e-10 7.153529e-10 5.180609e-10 
              1021         1022         1023         1024         1025         1026 
      4.063136e-10 2.677504e-10 1.669366e-10 1.277809e-10 3.462112e-10 3.677277e-10 
              1027         1028         1029         1030         1031         1032 
      2.292918e-10 1.264519e-10 1.754899e-10 6.234741e-10 2.634860e-10 3.864944e-10 
              1033         1034         1035         1036         1037         1038 
      8.451074e-10 2.218146e-10 2.029498e-10 2.345615e-10 2.073555e-09 1.527136e-10 
              1039         1040         1041         1042         1043         1044 
      1.907927e-10 3.943627e-10 3.948232e-10 1.659591e-10 8.609533e-10 4.428781e-10 
              1045         1046         1047         1048         1049         1050 
      5.825303e-10 1.778931e-09 2.700597e-10 2.083354e-09 5.843509e-10 2.066610e-10 
              1051         1052         1053         1054         1055         1056 
      2.296959e-10 5.054957e-10 4.262528e-10 2.107661e-10 3.549881e-10 6.822531e-10 
              1057         1058         1059         1060         1061         1062 
      7.122965e-10 4.942463e-10 1.393014e-10 3.408868e-10 3.444787e-10 3.000016e-10 
              1063         1064         1065         1066         1067         1068 
      2.072035e-09 3.498760e-10 2.042859e-10 1.588067e-10 5.888799e-10 6.864201e-10 
              1069         1070         1071         1072         1073         1074 
      7.737477e-10 2.708112e-10 1.419881e-09 8.915794e-10 2.640126e-10 4.238798e-10 
              1075         1076         1077         1078         1079         1080 
      3.104964e-10 1.835787e-10 1.487231e-10 3.642170e-10 1.626775e-10 8.416591e-10 
              1081         1082         1083         1084         1085         1086 
      2.318661e-10 2.135435e-10 3.012910e-10 4.771863e-10 4.907620e-10 4.223533e-10 
              1087         1088         1089         1090         1091         1092 
      3.473791e-10 3.382318e-10 5.902221e-10 1.609004e-10 3.961861e-10 2.086518e-10 
              1093         1094         1095         1096         1097         1098 
      1.597088e-10 1.153304e-09 2.054983e-10 3.075311e-10 3.464674e-10 3.767528e-10 
              1099         1100         1101         1102         1103         1104 
      1.772410e-10 2.754219e-10 4.028889e-10 3.383107e-10 2.838875e-10 3.288681e-10 
              1105         1106         1107         1108         1109         1110 
      3.325700e-10 4.962396e-10 4.036912e-10 4.030016e-10 3.475347e-10 5.826328e-10 
              1111         1112         1113         1114         1115         1116 
      3.758451e-10 3.624748e-10 2.267713e-10 3.777732e-10 4.896938e-10 6.766364e-10 
              1117         1118         1119         1120         1121         1122 
      5.826300e-10 4.896873e-10 3.678976e-10 1.481779e-10 1.736813e-10 2.630772e-10 
              1123         1124         1125         1126         1127         1128 
      3.368059e-10 1.178021e-09 1.759690e-10 1.590781e-09 4.210639e-10 1.857268e-10 
              1129         1130         1131         1132         1133         1134 
      3.568669e-10 4.004419e-10 2.331923e-10 6.134804e-10 2.735651e-10 3.432808e-10 
              1135         1136         1137         1138         1139         1140 
      2.007119e-10 3.777832e-10 2.913122e-10 1.163718e-09 6.916106e-10 4.541923e-10 
              1141         1142         1143         1144         1145         1146 
      1.774699e-09 3.418150e-10 5.896107e-10 5.000451e-10 7.085972e-10 4.902383e-10 
              1147         1148         1149         1150         1151         1152 
      3.687247e-10 1.592622e-10 7.219803e-10 2.132655e-10 3.400475e-10 4.740757e-10 
              1153         1154         1155         1156         1157         1158 
      3.971080e-10 2.100348e-10 6.529589e-10 2.246451e-10 3.809912e-10 3.600840e-10 
              1159         1160         1161         1162         1163         1164 
      1.568211e-10 3.668220e-10 1.156825e-09 3.883777e-10 6.584979e-10 3.082718e-10 
              1165         1166         1167         1168         1169         1170 
      7.548288e-10 1.669314e-10 1.376082e-10 1.287509e-10 3.424122e-10 2.074013e-10 
              1171         1172         1173         1174         1175         1176 
      1.593550e-10 3.725617e-10 3.625447e-10 2.093290e-10 5.128707e-10 4.017264e-10 
              1177         1178         1179         1180         1181         1182 
      3.098029e-10 4.777256e-10 1.517756e-10 2.235359e-10 3.558184e-10 5.903621e-10 
              1183         1184         1185         1186         1187         1188 
      4.025961e-10 3.319251e-10 2.170576e-10 4.499306e-10 1.153624e-09 2.873797e-10 
              1189         1190         1191         1192         1193         1194 
      5.216526e-10 3.814407e-10 4.295582e-10 4.155324e-10 1.607297e-10 2.368179e-10 
              1195         1196         1197         1198         1199         1200 
      1.500818e-10 1.779609e-10 4.121383e-10 2.289383e-10 1.294360e-09 4.912551e-10 
              1201         1202         1203         1204         1205         1206 
      4.127841e-10 3.535675e-10 4.655955e-10 4.059728e-10 1.595320e-10 3.395508e-10 
              1207         1208         1209         1210         1211         1212 
      2.933227e-10 3.477480e-10 5.889151e-10 1.465162e-10 5.032748e-10 1.448003e-09 
              1213         1214         1215         1216         1217         1218 
      1.926654e-10 3.388215e-10 1.952907e-10 9.005890e-10 3.030892e-10 1.592324e-10 
              1219         1220         1221         1222         1223         1224 
      3.032659e-10 4.313208e-10 4.294764e-10 3.979445e-10 2.716073e-10 2.632057e-10 
              1225         1226         1227         1228         1229         1230 
      1.672873e-10 4.587784e-10 3.597971e-10 2.227716e-10 3.586044e-10 2.866728e-10 
              1231         1232         1233         1234         1235         1236 
      2.519065e-10 2.680645e-10 2.068887e-10 2.719937e-10 1.160012e-09 6.116925e-10 
              1237         1238         1239         1240         1241         1242 
      1.526650e-10 3.814030e-10 4.475165e-10 2.058097e-10 4.038029e-10 1.336622e-09 
              1243         1244         1245         1246         1247         1248 
      2.248907e-10 1.577917e-10 2.356150e-10 1.921863e-10 4.020690e-10 3.105696e-10 
              1249         1250         1251         1252         1253         1254 
      3.002722e-10 7.206753e-10 5.200270e-10 6.592340e-10 2.071844e-10 1.604518e-10 
              1255         1256         1257         1258         1259         1260 
      2.096232e-10 3.566264e-10 8.802014e-10 2.546413e-10 6.224911e-10 3.117607e-10 
              1261         1262         1263         1264         1265         1266 
      5.179328e-10 1.331255e-09 2.675257e-10 3.950122e-10 4.825659e-10 5.102849e-10 
              1267         1268         1269         1270         1271         1272 
      2.740120e-10 8.667064e-10 2.931753e-10 1.212445e-09 1.471981e-10 2.712439e-10 
              1273         1274         1275         1276         1277         1278 
      4.281720e-10 3.856803e-10 5.844184e-10 3.045044e-10 5.071742e-10 2.611187e-10 
              1279         1280         1281         1282         1283         1284 
      1.498591e-10 3.510319e-10 3.475917e-10 1.265176e-09 3.469664e-10 1.557891e-10 
              1285         1286         1287         1288         1289         1290 
      2.913554e-10 4.358588e-10 1.635830e-10 1.509310e-09 2.857243e-10 4.143533e-10 
              1291         1292         1293         1294         1295         1296 
      2.312142e-10 1.991919e-09 6.516200e-10 2.321255e-10 1.585181e-09 2.693626e-10 
              1297         1298         1299         1300         1301         1302 
      2.642659e-10 3.715280e-10 1.598702e-10 1.748180e-10 2.069985e-10 2.308275e-10 
              1303         1304         1305         1306         1307         1308 
      2.278470e-10 5.836485e-10 4.028664e-10 3.051679e-10 1.564306e-10 1.903528e-10 
              1309         1310         1311         1312         1313         1314 
      3.053917e-10 7.165695e-10 3.625706e-10 5.129360e-10 5.043024e-10 2.868478e-10 
              1315         1316         1317         1318         1319         1320 
      2.041234e-10 2.224082e-10 4.010206e-10 1.755352e-10 2.949409e-10 2.072174e-10 
              1321         1322         1323         1324         1325         1326 
      1.995456e-10 2.071585e-10 6.572691e-10 2.259583e-10 4.042963e-10 3.261976e-10 
              1327         1328         1329         1330         1331         1332 
      4.270266e-10 3.415525e-10 1.805520e-10 3.580315e-10 1.821696e-10 1.582783e-10 
              1333         1334         1335         1336         1337         1338 
      5.725038e-10 1.635745e-10 3.109951e-10 2.262480e-10 1.614161e-10 1.502427e-09 
              1339         1340         1341         1342         1343         1344 
      7.898276e-10 1.594057e-10 2.680291e-10 3.435880e-10 2.325783e-10 2.118718e-10 
              1345         1346         1347         1348         1349         1350 
      2.248281e-10 2.637339e-10 2.096930e-10 3.315611e-10 1.831677e-10 8.121165e-10 
              1351         1352         1353         1354         1355         1356 
      3.896220e-10 3.986085e-10 2.068991e-10 2.041947e-10 2.119242e-10 3.967534e-10 
              1357         1358         1359         1360         1361         1362 
      5.038943e-10 3.921486e-10 3.911688e-10 2.251554e-10 5.970977e-10 5.831459e-10 
              1363         1364         1365         1366         1367         1368 
      5.823460e-10 2.917403e-10 2.621028e-10 2.705263e-10 4.020975e-10 4.884386e-10 
              1369         1370         1371         1372         1373         1374 
      1.835243e-10 2.010837e-09 2.632753e-10 3.049049e-10 4.135618e-10 2.051735e-10 
              1375         1376         1377         1378         1379         1380 
      2.533760e-10 1.749537e-10 3.155644e-10 1.886832e-10 3.869303e-10 3.027930e-10 
              1381         1382         1383         1384         1385         1386 
      8.726846e-10 2.659223e-10 3.073161e-10 3.431072e-10 3.373125e-10 4.622783e-10 
              1387         1388         1389         1390         1391         1392 
      2.886812e-10 1.545837e-10 1.294181e-09 2.238531e-10 3.908062e-10 4.426585e-10 
              1393         1394         1395         1396         1397         1398 
      3.518692e-10 3.911285e-10 3.108271e-10 7.345229e-10 1.496496e-10 5.945150e-10 
              1399         1400         1401         1402         1403         1404 
      2.896211e-10 2.038775e-10 5.129359e-10 1.605577e-10 5.799508e-10 3.653000e-10 
              1405         1406         1407         1408         1409         1410 
      3.939215e-10 2.327458e-10 3.567086e-10 2.030929e-09 3.106433e-10 1.172886e-09 
              1411         1412         1413         1414         1415         1416 
      3.556192e-10 4.094520e-10 4.248182e-10 8.599467e-10 5.866094e-10 3.414067e-10 
              1417         1418         1419         1420         1421         1422 
      6.241065e-10 1.745909e-10 6.451030e-10 3.425895e-10 5.626842e-10 1.595028e-10 
              1423         1424         1425         1426         1427         1428 
      4.888580e-10 1.825423e-10 1.622923e-10 3.777044e-10 2.107097e-10 1.555365e-09 
              1429         1430         1431         1432         1433         1434 
      4.048296e-10 3.993468e-10 3.375147e-10 7.719948e-10 2.317082e-10 3.647078e-10 
              1435         1436         1437         1438         1439         1440 
      1.349825e-09 1.590189e-10 4.147241e-10 1.544007e-10 5.913838e-10 3.398049e-10 
              1441         1442         1443         1444         1445         1446 
      3.440869e-10 2.305688e-10 3.984155e-10 7.256168e-10 1.758414e-10 8.122600e-10 
              1447         1448         1449         1450         1451         1452 
      3.464163e-10 2.140255e-10 2.659647e-10 8.390738e-10 3.015827e-10 2.478377e-10 
              1453         1454         1455         1456         1457         1458 
      3.317620e-10 1.762715e-10 4.037064e-10 3.699956e-10 3.000390e-10 2.419388e-10 
              1459         1460         1461         1462         1463         1464 
      2.050747e-10 2.633408e-10 4.087192e-10 1.157105e-09 3.356494e-10 6.579861e-10 
              1465         1466         1467         1468         1469         1470 
      3.401577e-10 5.877867e-10 1.768773e-10 2.279864e-10 2.233825e-10 3.336181e-10 
              1471         1472         1473         1474         1475         1476 
      6.807677e-10 3.897257e-10 4.261819e-10 1.826791e-10 2.130733e-10 3.661369e-10 
              1477         1478         1479         1480         1481         1482 
      6.525815e-10 2.300520e-10 5.034837e-10 1.393152e-09 7.752160e-10 4.982175e-10 
              1483         1484         1485         1486         1487         1488 
      2.703856e-10 2.146578e-10 3.904516e-10 1.293405e-09 3.899220e-10 4.259741e-10 
              1489         1490         1491         1492         1493         1494 
      3.640570e-10 3.632179e-10 1.826044e-09 1.257774e-10 3.937926e-10 6.793377e-10 
              1495         1496         1497         1498         1499         1500 
      3.407049e-10 2.636077e-10 1.617760e-10 3.921068e-10 4.091100e-10 2.041625e-09 
              1501         1502         1503         1504         1505         1506 
      4.868849e-10 7.275601e-10 3.329823e-10 1.178123e-09 3.377104e-10 5.975273e-10 
              1507         1508         1509         1510         1511         1512 
      2.870824e-10 3.265516e-10 2.377746e-10 3.951129e-10 1.869192e-10 4.269328e-10 
              1513         1514         1515         1516         1517         1518 
      4.141954e-10 1.247772e-09 3.033071e-10 3.460190e-10 1.928001e-10 2.033763e-10 
              1519         1520         1521         1522         1523         1524 
      1.498038e-09 3.076597e-10 7.328305e-10 1.742937e-10 1.600890e-09 7.767322e-10 
              1525         1526         1527         1528         1529         1530 
      3.423500e-10 3.276266e-10 2.039556e-10 1.609688e-10 2.947810e-10 3.609472e-10 
              1531         1532         1533         1534         1535         1536 
      9.192399e-10 3.643347e-10 1.318662e-09 1.283217e-09 1.777477e-10 4.455822e-10 
              1537         1538         1539         1540         1541         1542 
      4.461934e-10 5.797081e-10 5.818072e-10 4.902190e-10 2.037729e-10 2.627593e-10 
              1543         1544         1545         1546         1547         1548 
      3.389237e-10 3.849267e-10 4.001789e-10 4.417038e-10 3.468767e-10 1.213345e-09 
              1549         1550         1551         1552         1553         1554 
      2.802184e-10 2.290438e-10 4.757331e-10 4.640950e-10 9.195112e-10 1.611602e-10 
              1555         1556         1557         1558         1559         1560 
      4.320629e-10 2.252418e-10 3.838819e-10 8.425921e-10 3.440210e-10 5.783502e-10 
              1561         1562         1563         1564         1565         1566 
      3.382784e-10 3.713655e-10 2.330846e-10 2.643505e-10 1.763952e-10 1.826072e-10 
              1567         1568         1569         1570         1571         1572 
      2.322546e-10 3.062801e-10 1.316175e-09 5.828576e-10 7.056020e-10 1.757576e-10 
              1573         1574         1575         1576         1577         1578 
      1.282923e-10 3.598209e-10 4.035882e-10 2.421914e-10 2.608410e-10 8.426395e-10 
              1579         1580         1581         1582         1583         1584 
      6.179109e-10 1.639760e-10 3.681852e-10 4.160350e-10 5.341634e-10 2.537752e-10 
              1585         1586         1587         1588         1589         1590 
      3.129809e-10 9.175717e-10 3.985210e-10 1.296257e-10 4.008988e-10 1.876603e-10 
              1591         1592         1593         1594         1595         1596 
      3.071825e-10 2.708943e-10 6.194756e-10 1.325557e-09 4.073265e-10 8.634010e-10 
              1597         1598         1599         1600         1601         1602 
      7.534419e-10 4.407603e-10 2.389344e-10 3.363075e-10 2.179133e-10 3.761012e-10 
              1603         1604         1605         1606         1607         1608 
      2.623493e-10 2.237580e-10 3.639706e-10 4.006250e-10 3.089618e-10 8.654300e-10 
              1609         1610         1611         1612         1613         1614 
      3.089598e-10 1.266457e-09 2.856096e-10 2.624977e-10 1.595765e-10 3.579629e-10 
              1615         1616         1617         1618         1619         1620 
      6.809539e-10 3.051452e-10 4.618506e-10 2.967574e-10 2.242821e-10 5.231952e-10 
              1621         1622         1623         1624         1625         1626 
      4.139013e-10 4.858731e-10 2.263027e-10 2.312853e-10 3.536784e-10 4.888332e-10 
              1627         1628         1629         1630         1631         1632 
      4.778095e-10 3.865148e-10 7.202831e-10 4.196276e-10 2.079484e-10 2.301038e-10 
              1633         1634         1635         1636         1637         1638 
      2.134665e-10 4.228831e-10 5.972754e-10 5.114874e-10 1.612052e-10 4.425476e-10 
              1639         1640         1641         1642         1643         1644 
      2.660620e-10 5.905360e-10 1.512616e-10 2.559308e-10 1.610295e-10 2.698559e-10 
              1645         1646         1647         1648         1649         1650 
      1.799911e-10 2.090738e-10 2.900969e-10 4.040594e-10 2.682957e-10 4.736101e-10 
              1651         1652         1653         1654         1655         1656 
      5.875563e-10 1.605449e-10 2.050855e-10 5.017299e-10 2.684976e-10 1.899468e-10 
              1657         1658         1659         1660         1661         1662 
      4.225700e-10 1.268413e-09 4.225905e-10 1.652133e-10 3.901746e-10 1.744585e-10 
              1663         1664         1665         1666         1667         1668 
      3.389311e-10 1.954102e-10 8.643835e-10 1.597487e-10 5.011846e-10 2.285913e-10 
              1669         1670         1671         1672         1673         1674 
      4.465155e-10 3.847231e-10 5.196375e-10 9.139748e-10 1.600948e-10 3.422040e-10 
              1675         1676         1677         1678         1679         1680 
      7.236225e-10 5.999339e-10 7.260595e-10 2.639583e-10 2.229063e-10 2.088735e-10 
              1681         1682         1683         1684         1685         1686 
      3.046116e-10 1.255144e-09 5.813844e-10 2.678596e-10 5.176756e-10 2.292828e-10 
              1687         1688         1689         1690         1691         1692 
      2.071395e-10 3.538517e-10 7.794112e-10 3.792495e-10 1.908924e-10 1.516536e-10 
              1693         1694         1695         1696         1697         1698 
      2.664717e-10 7.046596e-10 3.404028e-10 2.997954e-10 6.292310e-10 3.112589e-10 
              1699         1700         1701         1702         1703         1704 
      5.911592e-10 3.503798e-10 2.573489e-10 3.890283e-10 3.424492e-10 1.612218e-10 
              1705         1706         1707         1708         1709         1710 
      7.076058e-10 2.079767e-10 1.267428e-09 2.070985e-10 4.221521e-10 1.691230e-10 
              1711         1712         1713         1714         1715         1716 
      1.717710e-10 4.934985e-10 8.141726e-10 1.786439e-10 7.284293e-10 2.095903e-10 
              1717         1718         1719         1720         1721         1722 
      3.802316e-10 2.056631e-10 3.878207e-10 2.085731e-10 3.190069e-10 2.926849e-10 
              1723         1724         1725         1726         1727         1728 
      3.471683e-10 4.449953e-10 5.140423e-10 2.405589e-10 3.947839e-10 2.201176e-10 
              1729         1730         1731         1732         1733         1734 
      2.935764e-10 1.889889e-10 5.016590e-10 4.089757e-10 2.263313e-10 1.333063e-09 
              1735         1736         1737         1738         1739         1740 
      3.021978e-10 1.169688e-09 2.727842e-10 3.878580e-10 1.626963e-10 1.279253e-10 
              1741         1742         1743         1744         1745         1746 
      1.654490e-10 4.276948e-10 8.864798e-10 1.749140e-10 3.016662e-10 5.824779e-10 
              1747         1748         1749         1750         1751         1752 
      1.870736e-10 1.963680e-10 1.460609e-10 1.351389e-09 4.079086e-10 4.709166e-10 
              1753         1754         1755         1756         1757         1758 
      1.367997e-10 3.483967e-10 3.116202e-10 3.395967e-10 3.965821e-10 4.087704e-10 
              1759         1760         1761         1762         1763         1764 
      7.007156e-10 2.118465e-10 2.852522e-10 1.889547e-10 2.251316e-10 1.502096e-10 
              1765         1766         1767         1768         1769         1770 
      4.116730e-10 1.594814e-10 2.234320e-10 2.235287e-10 4.055810e-10 3.898513e-10 
              1771         1772         1773         1774         1775         1776 
      5.878805e-10 2.251848e-10 3.967712e-10 1.502047e-10 4.690193e-10 2.048445e-10 
              1777         1778         1779         1780         1781         1782 
      3.845366e-10 3.457872e-10 2.076933e-10 5.791734e-10 9.637779e-10 7.269059e-10 
              1783         1784         1785         1786         1787         1788 
      5.076843e-10 4.243975e-10 2.773168e-10 4.276324e-10 5.929602e-10 4.029081e-10 
              1789         1790         1791         1792         1793         1794 
      3.986080e-10 4.219929e-10 1.776800e-10 5.813133e-10 1.576885e-09 2.137997e-10 
              1795         1796         1797         1798         1799         1800 
      2.686556e-10 2.083225e-10 2.751170e-10 3.872212e-10 1.195657e-09 5.149301e-10 
              1801         1802         1803         1804         1805         1806 
      2.085715e-10 5.225332e-10 3.401274e-10 3.013392e-10 3.972859e-10 2.747495e-10 
              1807         1808         1809         1810         1811         1812 
      1.836847e-10 2.121477e-10 2.420099e-09 3.987582e-10 2.888039e-10 2.056714e-10 
              1813         1814         1815         1816         1817         1818 
      4.988286e-10 2.311150e-10 5.214114e-10 1.367711e-10 2.953198e-10 4.251194e-10 
              1819         1820         1821         1822         1823         1824 
      2.659064e-10 6.798639e-10 3.193217e-10 2.089294e-10 7.776327e-10 5.895869e-10 
              1825         1826         1827         1828         1829         1830 
      2.274445e-10 2.086142e-10 2.807881e-10 6.243933e-10 6.509094e-10 2.274850e-10 
              1831         1832         1833         1834         1835         1836 
      2.214745e-10 2.704602e-10 4.021299e-10 1.603617e-10 2.621398e-10 4.214110e-10 
              1837         1838         1839         1840         1841         1842 
      3.889604e-10 3.479704e-10 3.766295e-10 3.511072e-10 3.302907e-10 4.088075e-10 
              1843         1844         1845         1846         1847         1848 
      4.744690e-10 1.592154e-10 3.491392e-10 1.141372e-09 6.512700e-10 3.098527e-10 
              1849         1850         1851         1852         1853         1854 
      2.233259e-10 6.001143e-10 2.613502e-10 6.808925e-10 3.345901e-10 2.304465e-10 
              1855         1856         1857         1858         1859         1860 
      5.011725e-10 4.454939e-10 2.088520e-10 2.216507e-10 4.007015e-10 1.626780e-10 
              1861         1862         1863         1864         1865         1866 
      7.757731e-10 2.582709e-10 3.360206e-10 1.911428e-10 2.715183e-10 3.767155e-10 
              1867         1868         1869         1870         1871         1872 
      1.146766e-09 4.902703e-10 3.421672e-10 3.713909e-10 3.996936e-10 2.648467e-10 
              1873         1874         1875         1876         1877         1878 
      4.301465e-10 3.432015e-10 2.079504e-10 4.077413e-10 4.961752e-10 1.578352e-10 
              1879         1880         1881         1882         1883         1884 
      2.086847e-10 6.014629e-10 5.808180e-10 3.375008e-10 3.056941e-10 7.600956e-10 
              1885         1886         1887         1888         1889         1890 
      1.377295e-10 2.092989e-10 2.580649e-10 1.761326e-10 1.833802e-10 2.055652e-10 
              1891         1892         1893         1894         1895         1896 
      7.009729e-10 2.068465e-10 1.741764e-10 1.612856e-10 1.558229e-10 1.143158e-09 
              1897         1898         1899         1900         1901         1902 
      2.685637e-10 5.908887e-10 1.616775e-10 5.104369e-10 3.985342e-10 4.175332e-10 
              1903         1904         1905         1906         1907         1908 
      2.649732e-10 3.472307e-10 4.087324e-10 8.544020e-10 9.217056e-10 6.503794e-10 
              1909         1910         1911         1912         1913         1914 
      2.258021e-10 7.756327e-10 2.003019e-10 4.098064e-10 1.974492e-10 3.362386e-10 
              1915         1916         1917         1918         1919         1920 
      2.642859e-10 4.160661e-10 3.934234e-10 2.933282e-10 7.045214e-10 4.691753e-10 
              1921         1922         1923         1924         1925         1926 
      3.502374e-10 2.065300e-10 5.749937e-10 2.925904e-10 6.269823e-10 3.908510e-10 
              1927         1928         1929         1930         1931         1932 
      2.810316e-10 7.233758e-10 4.100013e-10 2.259725e-10 1.749818e-10 1.832228e-09 
              1933         1934         1935         1936         1937         1938 
      2.646060e-10 2.232238e-10 5.070162e-10 2.114675e-10 1.192456e-09 4.628691e-10 
              1939         1940         1941         1942         1943         1944 
      7.025052e-10 2.645299e-10 8.799943e-10 1.635670e-10 6.303531e-10 3.396542e-10 
              1945         1946         1947         1948         1949         1950 
      2.088268e-10 4.232009e-10 2.367998e-10 1.069164e-09 1.579199e-10 2.536708e-10 
              1951         1952         1953         1954         1955         1956 
      3.888388e-10 5.934167e-10 3.072259e-10 5.075792e-10 2.029219e-09 5.863269e-10 
              1957         1958         1959         1960         1961         1962 
      2.074637e-10 5.892984e-10 7.855108e-10 1.448510e-09 2.623551e-10 3.114733e-10 
              1963         1964         1965         1966         1967         1968 
      3.019742e-10 4.084025e-10 5.795303e-10 2.524517e-10 3.318251e-10 3.116185e-10 
              1969         1970         1971         1972         1973         1974 
      2.082149e-10 4.017946e-10 3.445563e-10 1.609178e-10 2.662691e-10 5.955624e-10 
              1975         1976         1977         1978         1979         1980 
      2.035646e-10 2.046341e-10 2.090852e-10 3.493216e-10 6.121081e-10 1.776368e-10 
              1981         1982         1983         1984         1985         1986 
      5.620248e-10 3.476703e-10 1.145356e-09 1.594635e-10 1.788630e-10 2.037037e-10 
              1987         1988         1989         1990         1991         1992 
      5.839221e-10 1.970055e-10 8.497732e-10 7.259240e-10 1.371417e-10 1.161062e-09 
              1993         1994         1995         1996         1997         1998 
      1.910477e-10 2.049570e-10 3.498024e-10 1.672781e-10 1.003248e-09 4.347583e-10 
              1999         2000 
      7.660990e-10 7.232008e-10
      [1] "====================== eps ======================"
      [1] 3.666853e-11
      [1] "====================== Rho ======================"
      function(u, tau) u * (tau - (u < 0))
#+end_example

      In our cause we only have  1 tau, so the if is skipped. For more
      precision checkout the comment in the following source code. 
     #+begin_src R :results output :session :exports both
       if (length(tau) > 1) {
           # if (any(tau < 0) || any(tau > 1)) 
              # stop("invalid tau:  taus should be >= 0 and <= 1")
           if (any(tau == 0)) 
               tau[tau == 0] <- eps
           if (any(tau == 1)) 
               tau[tau == 1] <- 1 - eps
           coef <- matrix(0, ncol(X), length(tau))
           rho <- rep(0, length(tau))
           fitted <- resid <- matrix(0, nrow(X), length(tau))
           for (i in 1:length(tau)) {
               z <- {
                   if (length(weights)) 
                       rq.wfit(X, Y, tau = tau[i], weights, method
                               )
                   else rq.fit(X, Y, tau = tau[i], method)
               }
               coef[, i] <- z$coefficients
               resid[, i] <- z$residuals
               rho[i] <- sum(Rho(z$residuals, tau[i]))
               fitted[, i] <- Y - z$residuals
           }
           taulabs <- paste("tau=", format(round(tau, 3)))
           dimnames(coef) <- list(dimnames(X)[[2]], taulabs)
           dimnames(resid) <- list(dimnames(X)[[1]], taulabs)
           fit <- z
           fit$coefficients <- coef
           fit$residuals <- resid
           fit$fitted.values <- fitted
           if (method == "lasso") 
               class(fit) <- c("lassorqs", "rqs")
           else if (method == "scad") 
               class(fit) <- c("scadrqs", "rqs")
           else class(fit) <- "rqs"
       }
       else {
           process <- (tau < 0 || tau > 1)
           if (tau == 0) 
               tau <- eps
           if (tau == 1) 
               tau <- 1 - eps
           fit <- {
               if (length(weights)) 
                   rq.wfit(X, Y, tau = tau, weights, method)
               # Only this, ...
               else rq.fit(X, Y, tau = tau, method)
           }
           if (process) 
               rho <- list(x = fit$sol[1, ], y = fit$sol[3, ])
           else {
               # ..., and this calls interest us. Because we have a tau of 0.5
               # and we use no weight
               dimnames(fit$residuals) <- list(dimnames(X)[[1]], 
                                               NULL)
               rho <- sum(Rho(fit$residuals, tau))
               print("====================== rho ======================")
               print(rho)
           }
           if (method == "lasso") 
               class(fit) <- c("lassorq", "rq")
           else if (method == "scad") 
               class(fit) <- c("scadrq", "rq")
           else class(fit) <- ifelse(process, "rq.process", "rq")
       }
     #+end_src

     #+RESULTS:
     : Erreur : 'else' inattendu(e) in "else"
     : Erreur : 'else' inattendu(e) in "    else"
     : [1] "====================== rho ======================"
     : [1] 1.97641e-07
     : Erreur : '}' inattendu(e) in "    }"
     : Erreur : 'else' inattendu(e) in "    else"
     : Erreur : 'else' inattendu(e) in "    else"
     : Erreur : '}' inattendu(e) in "}"

     #+begin_src R :results output :session :exports both
       fit$na.action <- attr(mf, "na.action")
       fit$formula <- formula
       fit$terms <- mt
       fit$xlevels <- .getXlevels(mt, mf)
       fit$call <- call
       fit$tau <- tau
       fit$weights <- weights
       fit$residuals <- drop(fit$residuals)
       fit$rho <- rho
       fit$method <- method
       fit$fitted.values <- drop(fit$fitted.values)
       attr(fit, "na.message") <- attr(m, "na.message")
       if (model) 
           fit$model <- mf
       # fit
       summary(fit)
       print(fit$na.action)
       print(fit$formula)
       print(fit$terms)
       print(fit$xlevels)
       print(fit$call)
       print(fit$tau)
       print(fit$weights)
       print(fit$residuals)
       print(fit$rho)
       print(fit$method)
       print(fit$fitted.values)

     #+end_src

     #+RESULTS:
     #+begin_example
     Error in base::backsolve(r, x, k = k, upper.tri = upper.tri, transpose = transpose,  : 
       matrice singuliÃ¨re dans 'backsolve'. Premier zÃ©ro sur la diagonale [1]
     NULL
     time_per_pixel ~ x_component_number
     time_per_pixel ~ x_component_number
     attr(,"variables")
     list(time_per_pixel, x_component_number)
     attr(,"factors")
                        x_component_number
     time_per_pixel                      0
     x_component_number                  1
     attr(,"term.labels")
     [1] "x_component_number"
     attr(,"order")
     [1] 1
     attr(,"intercept")
     [1] 1
     attr(,"response")
     [1] 1
     attr(,".Environment")
     <environment: R_GlobalEnv>
     attr(,"predvars")
     list(time_per_pixel, x_component_number)
     attr(,"dataClasses")
         time_per_pixel x_component_number 
              "numeric"          "numeric"
     named list()
     whocares(formula = time_per_pixel ~ x_component_number, data = data, 
         tau = 0.5, method = "br", model = TRUE)
     [1] 0.5
     NULL
                 1             2             3             4             5 
      7.584441e-11  4.885751e-11 -1.540648e-10  3.298474e-11  4.591034e-11 
                 6             7             8             9            10 
      1.012222e-10 -1.685509e-10 -1.519449e-10  1.145799e-10 -3.749580e-11 
                11            12            13            14            15 
     -1.105626e-10  4.173929e-10 -1.540478e-10 -1.221031e-10 -3.348944e-11 
                16            17            18            19            20 
      2.108267e-10  4.131058e-11 -9.794805e-11 -1.711626e-10  1.406100e-11 
                21            22            23            24            25 
     -1.706444e-10  4.543408e-11 -8.212192e-11 -1.618671e-10  4.418845e-11 
                26            27            28            29            30 
      5.208045e-10 -5.088061e-11 -1.237727e-10 -1.708945e-10 -1.114745e-10 
                31            32            33            34            35 
      3.958779e-10 -1.861090e-10  5.645780e-11 -1.383492e-10 -1.527607e-10 
                36            37            38            39            40 
     -2.856337e-11 -7.237381e-11 -1.364029e-10  1.158821e-10  2.044761e-10 
                41            42            43            44            45 
     -1.190342e-10  2.118583e-10  1.671026e-10  8.249235e-10 -2.550059e-11 
                46            47            48            49            50 
     -1.378955e-11 -5.425496e-12  4.696566e-11 -1.201238e-10 -3.718252e-11 
                51            52            53            54            55 
      3.859309e-10 -3.516247e-11  9.891832e-11  1.182929e-10  1.671795e-10 
                56            57            58            59            60 
     -2.996659e-11  8.210231e-10 -1.210557e-10 -1.607142e-10  8.864024e-12 
                61            62            63            64            65 
      1.591191e-10  1.998915e-11  9.451446e-11  9.158659e-11  3.159600e-11 
                66            67            68            69            70 
      5.174284e-11 -9.943914e-11 -9.467098e-11  9.970369e-10  2.169640e-10 
                71            72            73            74            75 
      1.017052e-09  1.619393e-10 -9.105083e-11  2.169639e-10 -7.271479e-11 
                76            77            78            79            80 
      2.966108e-10 -1.820273e-10 -3.159654e-11 -4.850678e-11  4.014897e-10 
                81            82            83            84            85 
     -3.295957e-11 -3.285224e-11 -3.149953e-11  1.676992e-09  2.039237e-10 
                86            87            88            89            90 
      2.340473e-11 -1.760751e-10  3.214558e-10 -1.709448e-10  1.207865e-09 
                91            92            93            94            95 
      1.004493e-09 -3.393811e-11  1.139445e-10 -2.213278e-11 -1.551958e-10 
                96            97            98            99           100 
     -1.190343e-10 -3.179370e-11 -3.288151e-11 -3.921522e-11 -4.974603e-11 
               101           102           103           104           105 
      3.983717e-10 -1.287568e-10  1.035294e-09 -3.200325e-11 -1.172360e-10 
               106           107           108           109           110 
      1.022807e-09  2.725015e-10 -3.486031e-11  3.972498e-10  1.587552e-10 
               111           112           113           114           115 
     -2.272508e-11 -7.644156e-11  1.606553e-11 -7.332112e-11  3.509427e-11 
               116           117           118           119           120 
      3.582216e-10  4.411301e-11 -4.991576e-11  8.527737e-10 -1.711130e-10 
               121           122           123           124           125 
     -1.690647e-10  5.112850e-11  8.752638e-10 -8.139645e-11 -9.059093e-11 
               126           127           128           129           130 
      4.444662e-10  2.312186e-10  1.769170e-11  4.052473e-11  3.726602e-10 
               131           132           133           134           135 
      8.358567e-10 -5.108042e-11  2.119766e-10  2.085894e-10 -1.744703e-10 
               136           137           138           139           140 
     -1.145946e-10  1.727876e-09  4.534346e-10  1.051790e-10  4.082585e-10 
               141           142           143           144           145 
     -7.089387e-11  2.390469e-11 -9.068629e-11 -9.754424e-11 -3.838792e-11 
               146           147           148           149           150 
     -1.156717e-10  3.461252e-11 -1.595482e-10  3.853690e-11  1.032982e-10 
               151           152           153           154           155 
     -8.208275e-11 -1.586871e-11 -1.671303e-11 -3.383412e-11  8.767871e-11 
               156           157           158           159           160 
     -1.233557e-10 -9.878463e-11 -1.789240e-10  1.787211e-10  2.133879e-10 
               161           162           163           164           165 
      1.463024e-11 -4.691384e-11  1.967419e-09 -1.198126e-10 -1.453982e-11 
               166           167           168           169           170 
     -8.183408e-11 -1.964589e-11  1.675703e-10  2.075190e-10 -3.272478e-11 
               171           172           173           174           175 
     -1.528307e-10  2.062643e-10  4.371307e-11  3.980019e-11  3.574793e-10 
               176           177           178           179           180 
      3.993291e-10 -2.944779e-11  6.232514e-10  1.692075e-10  4.434142e-11 
               181           182           183           184           185 
      1.077575e-09  1.731878e-10 -3.307966e-11 -4.819308e-11 -2.023119e-12 
               186           187           188           189           190 
      1.780128e-10  2.125856e-10  6.363808e-10  4.305388e-11 -7.453358e-11 
               191           192           193           194           195 
      2.093356e-10  1.218701e-10  8.386909e-11 -1.524276e-10 -1.217125e-10 
               196           197           198           199           200 
      2.173250e-10  2.003559e-10  1.305189e-11  1.019170e-09  2.762723e-10 
               201           202           203           204           205 
     -1.648073e-10  4.165113e-10 -1.667425e-10 -1.373220e-11 -3.240338e-11 
               206           207           208           209           210 
     -2.101802e-11  1.862728e-10 -1.284215e-10 -5.252572e-11 -1.692443e-10 
               211           212           213           214           215 
      2.964428e-11  9.966970e-11  1.513044e-10  1.163222e-09 -7.975122e-11 
               216           217           218           219           220 
      2.101679e-10  4.758939e-11  8.639584e-10  7.469769e-10  4.505833e-10 
               221           222           223           224           225 
      1.197053e-10  1.570849e-10 -1.119238e-10 -1.996839e-11 -8.203353e-11 
               226           227           228           229           230 
      4.674948e-11 -2.672030e-11  3.611255e-10 -5.351256e-11 -2.672328e-11 
               231           232           233           234           235 
     -5.311562e-11 -3.003466e-11  1.089433e-11  2.895018e-10  0.000000e+00 
               236           237           238           239           240 
     -1.624694e-11  8.574481e-10 -1.382549e-10 -1.929871e-11  8.348820e-11 
               241           242           243           244           245 
     -1.902526e-10 -1.201900e-11 -1.164394e-10  2.053200e-11  4.007070e-10 
               246           247           248           249           250 
      8.192172e-10  2.272894e-11  1.713484e-09  2.081075e-09 -3.341990e-11 
               251           252           253           254           255 
      9.683135e-10 -8.962210e-11 -3.780177e-11 -1.178593e-10 -3.089419e-11 
               256           257           258           259           260 
      3.308712e-10  4.078209e-10 -1.624292e-11 -4.257954e-11  3.010631e-11 
               261           262           263           264           265 
     -7.631602e-11  4.344458e-11  3.949837e-10 -7.146136e-11  1.804274e-10 
               266           267           268           269           270 
     -7.723756e-11 -6.090434e-11 -1.552826e-10  5.218303e-10 -1.214017e-10 
               271           272           273           274           275 
      5.614108e-10  5.255706e-11 -1.219498e-10 -1.556875e-10 -3.618186e-11 
               276           277           278           279           280 
     -1.911830e-10  2.617749e-10 -1.546681e-10  5.287961e-10 -1.683222e-10 
               281           282           283           284           285 
     -1.494300e-10 -1.166696e-10 -1.408099e-10 -9.597906e-11  2.012665e-11 
               286           287           288           289           290 
     -1.413838e-10 -8.234029e-11 -3.439775e-11  6.956832e-10 -1.190238e-10 
               291           292           293           294           295 
     -9.385254e-12 -7.801503e-11 -1.127363e-10 -6.586874e-12 -1.700621e-10 
               296           297           298           299           300 
      4.352898e-10 -7.699237e-11 -7.801313e-11  3.978808e-10  3.940695e-10 
               301           302           303           304           305 
     -2.569010e-11  1.704644e-09  4.470755e-10 -2.179882e-11 -1.556415e-10 
               306           307           308           309           310 
      1.622773e-10 -2.832224e-11 -1.827062e-11 -2.582449e-11  9.952553e-10 
               311           312           313           314           315 
     -1.526143e-10  5.352111e-10  3.971568e-11 -8.944254e-11 -7.676812e-11 
               316           317           318           319           320 
     -1.340023e-10  5.212222e-11  9.294884e-10  1.735696e-10  2.074306e-10 
               321           322           323           324           325 
     -1.195643e-10 -1.305025e-10 -7.821453e-11  3.012726e-12 -2.186797e-11 
               326           327           328           329           330 
      1.983454e-10 -7.204105e-11  2.073197e-10  1.784303e-10  1.653477e-10 
               331           332           333           334           335 
      5.597501e-10 -4.715468e-11  3.790764e-11 -4.124514e-11  3.425799e-10 
               336           337           338           339           340 
      1.457391e-11 -1.528972e-10  1.202036e-10  1.454927e-09  5.656788e-10 
               341           342           343           344           345 
      2.069307e-10  1.258399e-10 -1.364131e-10 -1.184335e-10 -1.202388e-11 
               346           347           348           349           350 
     -1.686723e-10 -1.618867e-10  1.389314e-11 -1.386244e-10 -1.221596e-10 
               351           352           353           354           355 
      3.989322e-10 -3.129184e-11  2.021058e-10  2.010717e-10 -1.351967e-10 
               356           357           358           359           360 
      5.463150e-10 -2.012392e-11 -1.702363e-10  8.742879e-10  1.604323e-10 
               361           362           363           364           365 
     -1.808287e-10  2.024598e-10 -1.112663e-10 -1.540121e-10  4.623271e-10 
               366           367           368           369           370 
      2.166471e-10 -1.209527e-10 -2.230844e-11  5.526874e-10  4.500041e-11 
               371           372           373           374           375 
      1.440341e-10 -5.607080e-11  1.568202e-10 -8.381401e-11 -1.109474e-10 
               376           377           378           379           380 
     -5.456343e-11 -1.463888e-10  4.608575e-11 -1.207059e-10 -2.626580e-11 
               381           382           383           384           385 
      3.940668e-11 -5.104531e-11 -6.491135e-11  1.112815e-10  8.325102e-11 
               386           387           388           389           390 
      1.644340e-11  4.532772e-10  1.406146e-10  1.436196e-11 -1.207105e-10 
               391           392           393           394           395 
     -1.937018e-11 -1.604589e-10 -1.521751e-10 -1.386368e-10  2.173802e-11 
               396           397           398           399           400 
     -1.654068e-10  5.585074e-10 -9.588650e-11  2.284901e-11  1.936488e-09 
               401           402           403           404           405 
      4.557576e-11  3.595981e-11 -1.226141e-10 -8.159218e-11  2.076272e-10 
               406           407           408           409           410 
      5.500790e-11 -2.961565e-11 -8.252029e-11  2.498270e-11 -2.957718e-11 
               411           412           413           414           415 
      1.177207e-10 -1.215374e-10  1.105777e-09 -1.391264e-10 -1.240284e-10 
               416           417           418           419           420 
      2.047713e-10  1.138479e-10  2.038639e-10  9.672413e-10  3.426636e-11 
               421           422           423           424           425 
     -1.623248e-10  8.613666e-11  2.313413e-11 -6.747885e-11  8.446592e-10 
               426           427           428           429           430 
     -3.145435e-11 -1.509698e-10  3.995922e-11  2.130217e-10 -2.552511e-11 
               431           432           433           434           435 
      5.244665e-10  5.219645e-10  2.111128e-10 -1.558270e-10  2.981475e-11 
               436           437           438           439           440 
      2.167910e-10  1.260589e-10 -1.326802e-10 -3.184141e-11 -1.523475e-10 
               441           442           443           444           445 
      2.985734e-11  2.037464e-10 -8.079571e-11  4.664380e-10  4.734847e-11 
               446           447           448           449           450 
     -1.548790e-10  1.658575e-10 -2.653924e-11  1.714184e-10  1.140767e-10 
               451           452           453           454           455 
      6.392808e-10 -1.973750e-11 -3.304044e-11  1.695015e-10 -3.740255e-11 
               456           457           458           459           460 
     -1.410065e-10 -1.874844e-11  2.137778e-10 -1.295906e-10 -3.297152e-11 
               461           462           463           464           465 
      5.997218e-10  1.145192e-11  1.031015e-11 -8.886507e-11 -1.543051e-10 
               466           467           468           469           470 
     -1.733748e-10  1.980659e-10 -2.948873e-11  1.767265e-11  2.846860e-10 
               471           472           473           474           475 
      3.127983e-10 -1.909564e-11 -2.037525e-11 -1.389263e-10 -1.694588e-10 
               476           477           478           479           480 
      3.346973e-10  2.557690e-11  2.476704e-11 -1.375792e-10  4.041051e-10 
               481           482           483           484           485 
      2.121142e-10  1.190158e-11  1.545242e-10  2.033574e-10  5.282651e-10 
               486           487           488           489           490 
     -6.983150e-11  2.818235e-10 -1.169284e-10  9.963086e-10  3.949427e-10 
               491           492           493           494           495 
     -1.604930e-10  1.134941e-10 -1.360300e-10  2.103695e-10 -1.214917e-10 
               496           497           498           499           500 
     -8.282683e-11  2.969056e-11  4.383621e-11 -4.908766e-14 -1.698211e-10 
               501           502           503           504           505 
     -7.363168e-11  4.303393e-11  2.745028e-10 -2.211508e-11 -8.171857e-11 
               506           507           508           509           510 
      7.771425e-11 -1.607928e-10 -1.200336e-10  8.342422e-11 -1.584464e-10 
               511           512           513           514           515 
      1.520851e-10  1.649659e-10  3.219531e-11 -1.783224e-10 -1.551448e-10 
               516           517           518           519           520 
      7.928011e-11 -1.493810e-10 -1.680786e-10  6.099463e-10  4.877361e-10 
               521           522           523           524           525 
     -1.427154e-10 -1.291668e-10  4.161068e-10 -1.536734e-10  5.495262e-10 
               526           527           528           529           530 
     -7.666444e-11  1.063908e-10  1.174775e-09  3.873341e-10 -1.371476e-11 
               531           532           533           534           535 
     -2.755765e-11 -2.698928e-11 -8.035549e-11  2.012064e-10  1.010152e-10 
               536           537           538           539           540 
     -1.899608e-10 -1.398143e-10 -2.681638e-11 -1.662428e-10  4.467336e-10 
               541           542           543           544           545 
     -2.762701e-11 -1.198215e-10  2.211889e-10  2.122622e-10  9.822279e-10 
               546           547           548           549           550 
     -2.509853e-11  4.439748e-10  9.042404e-12  3.838307e-10  3.268625e-11 
               551           552           553           554           555 
     -1.612963e-10  5.778168e-10  2.822321e-10 -9.680849e-12 -3.859151e-11 
               556           557           558           559           560 
     -9.188753e-11  2.027592e-10  2.059112e-10 -3.288522e-11  2.146641e-10 
               561           562           563           564           565 
      5.952265e-10 -1.159209e-10 -1.604545e-10 -1.215785e-10 -1.628203e-10 
               566           567           568           569           570 
     -1.366983e-10 -1.601215e-10 -4.859155e-11  2.051944e-10  5.101355e-10 
               571           572           573           574           575 
     -7.974656e-11  4.455593e-11  4.412515e-11 -1.600619e-10 -1.413358e-10 
               576           577           578           579           580 
      2.182454e-10 -3.107479e-11 -1.255805e-10 -1.670139e-10  3.812355e-11 
               581           582           583           584           585 
      4.558097e-10  3.862914e-10  4.505041e-11  4.873120e-11  4.387255e-11 
               586           587           588           589           590 
     -7.478986e-11  1.036190e-10 -1.227681e-10  2.801973e-10 -1.610951e-10 
               591           592           593           594           595 
      1.886217e-10  1.195029e-09  2.100518e-10  1.135838e-11 -1.192396e-11 
               596           597           598           599           600 
      5.648991e-10 -1.221654e-10 -1.216019e-10  4.766357e-11 -1.608820e-10 
               601           602           603           604           605 
     -1.199131e-10  9.733803e-10 -1.165174e-10  2.070642e-10 -1.718465e-10 
               606           607           608           609           610 
      4.497945e-11 -2.577253e-11 -1.742343e-10 -1.354417e-10  9.932674e-10 
               611           612           613           614           615 
      4.709437e-11  1.034466e-09 -1.772948e-10 -1.410852e-10  2.116112e-11 
               616           617           618           619           620 
      1.012390e-10 -7.820923e-11 -7.250177e-11  2.054123e-10 -4.898404e-11 
               621           622           623           624           625 
      4.329856e-11 -3.192937e-11 -1.625521e-11  2.223179e-10  5.912343e-11 
               626           627           628           629           630 
      1.220400e-10  2.126165e-10  1.104786e-10  1.083843e-10  4.514435e-11 
               631           632           633           634           635 
     -3.021521e-11 -3.939125e-11  6.070378e-11  1.712900e-09 -8.392960e-11 
               636           637           638           639           640 
      9.688085e-10 -3.561332e-11 -3.253137e-11 -1.030606e-11 -1.381773e-10 
               641           642           643           644           645 
     -7.718380e-11  4.767676e-11  4.142910e-11  1.586799e-10  3.627795e-10 
               646           647           648           649           650 
      3.957185e-10 -1.219421e-10 -1.222240e-10 -7.803165e-11 -1.672237e-10 
               651           652           653           654           655 
     -1.406291e-10  1.584488e-10  5.266132e-11  5.218292e-10  2.373893e-10 
               656           657           658           659           660 
      1.751637e-11  2.068107e-10  4.978320e-10  2.064248e-10  2.039755e-10 
               661           662           663           664           665 
      3.463123e-11  1.539322e-10  3.908070e-11 -3.588364e-11  2.782270e-10 
               666           667           668           669           670 
      1.637018e-11  2.086434e-10 -1.650300e-11 -2.639306e-11 -1.699070e-10 
               671           672           673           674           675 
     -1.370136e-10  2.099438e-11 -3.612569e-11  1.120272e-10 -1.219864e-10 
               676           677           678           679           680 
     -1.905365e-10 -1.220194e-10  3.902873e-10 -1.209467e-10 -1.887257e-10 
               681           682           683           684           685 
      2.031763e-10 -1.382952e-10  3.455161e-11 -1.806728e-10 -6.529284e-11 
               686           687           688           689           690 
      7.775871e-11 -1.184335e-10 -2.392879e-11  4.096488e-11 -4.378241e-11 
               691           692           693           694           695 
      3.916103e-11  2.138361e-11 -2.051282e-11  1.277996e-09  2.369378e-11 
               696           697           698           699           700 
      2.105736e-10  4.539606e-11 -4.971344e-11  1.087289e-10  9.737105e-10 
               701           702           703           704           705 
     -4.652683e-11  3.986748e-11  4.448831e-11  1.720838e-09 -1.300757e-10 
               706           707           708           709           710 
     -1.608804e-10 -1.424263e-11 -1.688556e-10  4.676121e-10  2.857182e-10 
               711           712           713           714           715 
     -1.343644e-10  2.067200e-10 -2.742186e-11 -1.170653e-11 -1.550327e-10 
               716           717           718           719           720 
      1.861963e-10 -4.296033e-12  3.855723e-10 -1.221172e-10  3.021633e-10 
               721           722           723           724           725 
      9.928517e-11 -1.519066e-10 -8.053668e-11  5.461661e-10 -1.614033e-10 
               726           727           728           729           730 
      8.516774e-12 -1.364265e-11  1.231526e-10 -1.231008e-10  2.693165e-11 
               731           732           733           734           735 
     -7.607801e-11  2.489072e-11  9.283688e-10  2.062889e-10  4.023137e-11 
               736           737           738           739           740 
     -7.619804e-11  4.251371e-11  4.413299e-11  2.012954e-10  1.675729e-09 
               741           742           743           744           745 
     -1.610862e-10  4.258060e-11  1.732930e-10 -7.808002e-11 -7.786835e-11 
               746           747           748           749           750 
      8.714019e-10  2.811421e-10 -2.055776e-11 -1.798375e-11 -8.667733e-11 
               751           752           753           754           755 
      3.994545e-10 -2.995722e-11  2.063236e-11 -1.184488e-11 -6.626074e-11 
               756           757           758           759           760 
      5.331568e-10 -1.609155e-11  2.156180e-10  2.058031e-10 -1.304699e-10 
               761           762           763           764           765 
     -1.550521e-10 -1.685955e-10  2.889592e-10 -6.459221e-11  2.052587e-10 
               766           767           768           769           770 
     -1.531052e-10  4.486559e-11 -1.659417e-10 -8.071202e-11  1.767187e-10 
               771           772           773           774           775 
      1.118606e-10  1.745400e-10 -1.340553e-10 -1.313939e-10 -1.365307e-10 
               776           777           778           779           780 
      3.733660e-11  4.790294e-10  3.964550e-10 -4.667000e-11 -1.714089e-10 
               781           782           783           784           785 
     -1.389643e-10  5.414012e-11  1.019571e-09  4.022047e-10 -1.540257e-10 
               786           787           788           789           790 
     -3.650312e-11  2.173134e-10  1.142452e-10  3.013921e-10  4.266631e-11 
               791           792           793           794           795 
      4.801694e-10 -1.394306e-10 -1.581926e-10 -1.710576e-10 -1.172318e-10 
               796           797           798           799           800 
     -1.699508e-10 -1.951905e-11  1.752316e-10  3.422857e-10 -5.005572e-11 
               801           802           803           804           805 
      9.392585e-10  3.668043e-11 -2.449371e-11 -8.083936e-11 -1.387686e-10 
               806           807           808           809           810 
     -1.929229e-10  3.855458e-11 -1.111432e-10  2.391183e-11 -2.839825e-11 
               811           812           813           814           815 
     -1.112966e-10  1.187643e-10  5.741280e-10  9.569548e-10 -7.095061e-11 
               816           817           818           819           820 
     -3.169190e-11  3.853191e-10  3.219742e-11  2.126119e-10 -1.167432e-10 
               821           822           823           824           825 
      8.390854e-11  1.745973e-09  8.570649e-10 -3.195844e-11  8.428958e-10 
               826           827           828           829           830 
     -1.546876e-10 -1.694231e-10  2.067800e-10  1.833843e-10  2.942726e-11 
               831           832           833           834           835 
     -1.229947e-10  4.491087e-10 -1.222760e-10 -1.233383e-10  4.790985e-11 
               836           837           838           839           840 
     -1.696895e-10  3.962397e-10 -7.713850e-11  8.726858e-11  2.001877e-11 
               841           842           843           844           845 
     -8.254306e-11  5.553462e-11  2.632901e-10 -1.735393e-10 -5.267383e-11 
               846           847           848           849           850 
      4.230072e-11  3.099970e-11 -7.746019e-11  4.005440e-11  4.101388e-11 
               851           852           853           854           855 
     -1.226318e-10 -8.226057e-11  4.497426e-11 -1.566215e-10  3.813396e-11 
               856           857           858           859           860 
      1.052725e-10  1.303028e-10 -6.008043e-11  3.884838e-11 -1.703648e-10 
               861           862           863           864           865 
     -9.528114e-12 -1.687136e-10  3.922758e-10  5.838402e-11  1.566831e-10 
               866           867           868           869           870 
      4.733608e-11  2.131416e-10 -1.328331e-10 -1.650350e-10  2.959449e-11 
               871           872           873           874           875 
      5.127231e-11  9.240185e-11  1.570688e-10 -4.396827e-11 -1.213384e-10 
               876           877           878           879           880 
      1.404552e-10  3.251361e-10 -1.157345e-10  1.056067e-09 -2.202135e-11 
               881           882           883           884           885 
      1.792980e-11  2.548158e-11 -7.174191e-11  2.279506e-12 -1.396134e-10 
               886           887           888           889           890 
      2.036261e-11  7.853626e-12 -1.220638e-11  2.985950e-11  4.023742e-11 
               891           892           893           894           895 
      5.572429e-10  1.458246e-09  2.729914e-10  2.991842e-11 -5.107433e-11 
               896           897           898           899           900 
      4.748822e-11  2.062980e-10  2.704735e-10  2.293141e-11 -1.623201e-10 
               901           902           903           904           905 
      8.395019e-10 -1.548951e-10  2.428241e-11 -1.384024e-10  3.938534e-10 
               906           907           908           909           910 
     -1.373288e-10 -1.219107e-10  2.814061e-10  1.016320e-10 -9.794632e-11 
               911           912           913           914           915 
     -3.779654e-11 -3.261810e-11 -1.994549e-11  1.992143e-10  2.152774e-11 
               916           917           918           919           920 
     -1.229244e-10 -1.777961e-10 -2.733394e-11 -5.194722e-11 -1.488284e-10 
               921           922           923           924           925 
      1.911863e-10 -1.589742e-10 -1.324898e-10 -3.791733e-11  9.115159e-11 
               926           927           928           929           930 
      3.007309e-10 -1.651286e-10  4.902273e-10 -1.474524e-10  8.397292e-10 
               931           932           933           934           935 
      2.128475e-10  4.321362e-11 -5.506129e-11 -4.270303e-12  2.076002e-11 
               936           937           938           939           940 
      3.319394e-10  4.367949e-11  1.966078e-10  1.118746e-10  2.129849e-10 
               941           942           943           944           945 
      5.899183e-10 -8.335113e-11  1.777004e-10  2.774585e-10 -9.728289e-11 
               946           947           948           949           950 
     -1.761997e-10  3.333285e-10  4.217768e-11  2.801662e-10 -1.216376e-10 
               951           952           953           954           955 
     -1.044476e-11  1.807804e-11  1.590673e-10 -8.273793e-11 -2.431573e-11 
               956           957           958           959           960 
      1.687305e-11  7.603718e-11  1.727010e-10 -1.414341e-10 -7.699815e-11 
               961           962           963           964           965 
      9.694002e-11  4.558090e-10 -5.119363e-11  5.090773e-11  5.364011e-11 
               966           967           968           969           970 
      1.008169e-09  5.505904e-11  3.310427e-10 -3.460554e-11 -1.189814e-10 
               971           972           973           974           975 
     -8.266883e-11  1.722148e-10 -3.889323e-11  2.028075e-11 -3.985975e-11 
               976           977           978           979           980 
      2.084161e-11  2.630599e-10  2.715429e-11 -1.674360e-10 -1.222975e-10 
               981           982           983           984           985 
      6.153699e-10 -1.183027e-10  1.499283e-10  2.135560e-11  4.531308e-11 
               986           987           988           989           990 
     -1.281801e-10 -5.240281e-11 -5.577808e-11 -9.599343e-11 -6.357731e-11 
               991           992           993           994           995 
      1.464301e-10  9.932680e-10 -2.826365e-11 -1.575348e-10 -1.534611e-10 
               996           997           998           999          1000 
     -1.540947e-10  1.013628e-10  4.521773e-11 -2.601188e-11  2.768253e-10 
              1001          1002          1003          1004          1005 
     -1.137433e-10 -3.289705e-11 -1.519526e-10  2.321952e-11  3.804332e-11 
              1006          1007          1008          1009          1010 
      1.235576e-09  2.089129e-10  8.301626e-11 -1.388728e-10  1.628974e-11 
              1011          1012          1013          1014          1015 
     -1.499501e-11  5.472212e-11 -3.197060e-11 -1.719321e-10  2.058698e-10 
              1016          1017          1018          1019          1020 
      1.168698e-10  3.952907e-10 -1.371415e-10  3.977649e-10  2.004728e-10 
              1021          1022          1023          1024          1025 
      2.956079e-11 -4.983766e-11 -1.506514e-10 -1.898071e-10 -3.054167e-11 
              1026          1027          1028          1029          1030 
     -9.025156e-12 -1.001292e-10 -1.911362e-10 -1.539311e-10  2.782758e-10 
              1031          1032          1033          1034          1035 
     -8.171231e-11  4.129612e-11  5.275193e-10 -1.233836e-10 -1.422485e-10 
              1036          1037          1038          1039          1040 
     -1.106368e-10  1.755967e-09 -1.688187e-10 -1.307396e-10  4.916444e-11 
              1041          1042          1043          1044          1045 
      4.962489e-11 -1.555733e-10  5.433653e-10  9.767979e-11  2.057775e-10 
              1046          1047          1048          1049          1050 
      1.461343e-09 -5.147268e-11  1.765766e-09  2.075981e-10 -1.385373e-10 
              1051          1052          1053          1054          1055 
     -8.789215e-11  1.760748e-10  9.683178e-11 -1.186549e-10  9.789849e-12 
              1056          1057          1058          1059          1060 
      3.607207e-10  3.907641e-10  1.766583e-10 -1.782866e-10 -3.586604e-11 
              1061          1062          1063          1064          1065 
     -3.227414e-11 -2.941935e-11  1.754447e-09  2.045496e-11 -1.172465e-10 
              1066          1067          1068          1069          1070 
     -1.706143e-10  2.121270e-10  3.648877e-10  4.522154e-10 -7.438703e-11 
              1071          1072          1073          1074          1075 
      1.102293e-09  5.700471e-10 -8.118567e-11  4.712699e-11 -1.892462e-11 
              1076          1077          1078          1079          1080 
     -1.379536e-10 -1.728093e-10 -1.253580e-11 -1.588548e-10  5.240710e-10 
              1081          1082          1083          1084          1085 
     -8.572192e-11 -1.316548e-10 -2.812998e-11  1.556539e-10  1.613410e-10 
              1086          1087          1088          1089          1090 
      7.715505e-11  2.584680e-11 -3.852109e-11  2.134693e-10 -1.606320e-10 
              1091          1092          1093          1094          1095 
      1.943323e-11 -1.207692e-10 -1.697122e-10  8.317718e-10 -1.397000e-10 
              1096          1097          1098          1099          1100 
     -2.188988e-11  2.493505e-11  0.000000e+00 -1.521800e-10 -4.611050e-11 
              1101          1102          1103          1104          1105 
      2.613605e-11  1.677838e-11 -3.764482e-11 -4.788471e-11 -4.418288e-11 
              1106          1107          1108          1109          1110 
      1.747073e-10  2.693834e-11  2.624875e-11  2.600235e-11  2.058800e-10 
              1111          1112          1113          1114          1115 
      5.431279e-11  1.727658e-11 -1.184270e-10  5.624081e-11  1.602728e-10 
              1116          1117          1118          1119          1120 
      3.551041e-10  2.650420e-10  1.720993e-10 -8.855207e-12 -1.733544e-10 
              1121          1122          1123          1124          1125 
     -1.557397e-10 -5.845519e-11  1.921789e-11  8.604331e-10 -1.534520e-10 
              1126          1127          1128          1129          1130 
      1.273193e-09  4.431102e-11 -1.358056e-10  3.927890e-11  2.368908e-11 
              1131          1132          1133          1134          1135 
     -1.120060e-10  2.958924e-10 -4.796722e-11 -3.347204e-11 -1.208205e-10 
              1136          1137          1138          1139          1140 
      5.625084e-11 -2.627586e-11  8.421852e-10  3.700782e-10  1.089940e-10 
              1141          1142          1143          1144          1145 
      1.457111e-09 -3.493785e-11  2.128579e-10  1.785127e-10  3.910092e-10 
              1146          1147          1148          1149          1150 
      1.608173e-10  2.352641e-11 -1.622702e-10  3.925593e-10 -1.161555e-10 
              1151          1152          1153          1154          1155 
     -3.670530e-11  1.525433e-10  2.035518e-11 -1.351635e-10  3.353709e-10 
              1156          1157          1158          1159          1160 
     -9.688720e-11  6.340317e-11 -1.666880e-11 -1.607669e-10 -9.930845e-12 
              1161          1162          1163          1164          1165 
      8.392366e-10  4.317939e-11  3.409098e-10 -2.114917e-11  4.332964e-10 
              1166          1167          1168          1169          1170 
     -1.546010e-10 -1.799798e-10 -1.888371e-10 -3.434062e-11 -1.220197e-10 
              1171          1172          1173          1174          1175 
     -1.700660e-10 -4.191108e-12 -1.420818e-11 -1.200920e-10  1.952826e-10 
              1176          1177          1178          1179          1180 
      2.497358e-11 -1.961805e-11  1.601376e-10 -1.697567e-10 -1.216623e-10 
              1181          1182          1183          1184          1185 
     -2.093441e-11  2.136092e-10  2.584325e-11  1.039273e-11 -1.281407e-10 
              1186          1187          1188          1189          1190 
      1.205097e-10  8.360361e-10 -3.020829e-11  1.922316e-10  4.687844e-12 
              1191          1192          1193          1194          1195 
      5.280541e-11  9.400002e-11 -1.568583e-10 -9.260306e-11 -1.714505e-10 
              1196          1197          1198          1199          1200 
     -1.514601e-10  3.538549e-11 -8.864968e-11  9.767717e-10  1.697227e-10 
              1201          1202          1203          1204          1205 
      3.603123e-11  3.597948e-11  1.480075e-10  8.444047e-11 -1.620004e-10 
              1206          1207          1208          1209          1210 
     -3.720207e-11 -2.426537e-11 -2.900479e-11  2.121622e-10 -1.750162e-10 
              1211          1212          1213          1214          1215 
      1.817424e-10  1.130415e-09 -1.249226e-10 -3.793129e-11 -1.341303e-10 
              1216          1217          1218          1219          1220 
      5.790566e-10 -2.633179e-11 -1.583556e-10 -1.432213e-11  1.018998e-10 
              1221          1222          1223          1224          1225 
      8.427816e-11  2.119163e-11 -7.359099e-11 -8.199255e-11 -1.621337e-10 
              1226          1227          1228          1229          1230 
      1.293574e-10 -1.695578e-11 -1.224266e-10 -1.814843e-11 -3.091521e-11 
              1231          1232          1233          1234          1235 
     -7.751445e-11 -7.713381e-11 -1.225322e-10 -4.953868e-11  8.384799e-10 
              1236          1237          1238          1239          1240 
      2.941044e-10 -1.688673e-10  5.987070e-11  1.180955e-10 -1.393885e-10 
              1241          1242          1243          1244          1245 
      5.860464e-11  1.019034e-09 -1.203076e-10 -1.716293e-10 -1.095833e-10 
              1246          1247          1248          1249          1250 
     -1.293460e-10  2.531616e-11 -1.885144e-11 -2.914881e-11  3.912543e-10 
              1251          1252          1253          1254          1255 
      2.024389e-10  3.416460e-10 -1.222366e-10 -1.689692e-10 -1.197978e-10 
              1256          1257          1258          1259          1260 
     -2.012644e-11  5.626134e-10 -7.477966e-11  2.772928e-10 -1.766028e-11 
              1261          1262          1263          1264          1265 
      1.964005e-10  1.013666e-09 -7.767261e-11  4.981398e-11  1.649779e-10 
              1266          1267          1268          1269          1270 
      1.926969e-10 -7.118629e-11  5.491184e-10 -2.441270e-11  8.948571e-10 
              1271          1272          1273          1274          1275 
     -1.743342e-10 -5.028842e-11  5.141920e-11  4.048202e-11  2.076656e-10 
              1276          1277          1278          1279          1280 
     -2.491659e-11  1.777533e-10 -8.407957e-11 -1.716733e-10 -2.572098e-11 
              1281          1282          1283          1284          1285 
     -2.916112e-11  9.475880e-10 -2.978646e-11 -1.617990e-10 -3.017695e-11 
              1286          1287          1288          1289          1290 
      9.066051e-11 -1.658380e-10  1.191722e-09 -3.580807e-11  3.760051e-11 
              1291          1292          1293          1294          1295 
     -9.820678e-11  1.674331e-09  3.340320e-10 -1.130728e-10  1.267593e-09 
              1296          1297          1298          1299          1300 
     -7.583569e-11 -8.093241e-11  4.999564e-11 -1.695508e-10 -1.546030e-10 
              1301          1302          1303          1304          1305 
     -1.224224e-10 -8.676055e-11 -1.173513e-10  2.621161e-10  2.611361e-11 
              1306          1307          1308          1309          1310 
     -2.425306e-11 -1.651018e-10 -1.311796e-10 -2.402927e-11  3.950371e-10 
              1311          1312          1313          1314          1315 
     -1.418221e-11  1.835150e-10  1.827700e-10 -3.074022e-11 -1.410749e-10 
              1316          1317          1318          1319          1320 
     -1.227900e-10  7.948823e-11 -1.538858e-10 -2.659148e-11 -1.379809e-10 
              1321          1322          1323          1324          1325 
     -1.219868e-10 -1.380398e-10  3.396810e-10 -1.192400e-10  2.754347e-11 
              1326          1327          1328          1329          1330 
     -5.055525e-11  5.027379e-11  1.213149e-11 -1.488690e-10 -1.872134e-11 
              1331          1332          1333          1334          1335 
     -1.393628e-10 -1.632540e-10  2.549157e-10 -1.658465e-10 -1.842588e-11 
              1336          1337          1338          1339          1340 
     -1.189503e-10 -1.601163e-10  1.184839e-09  4.722395e-10 -1.700153e-10 
              1341          1342          1343          1344          1345 
     -7.716922e-11 -3.316482e-11 -9.684271e-11 -1.175492e-10 -1.203702e-10 
              1346          1347          1348          1349          1350 
     -8.146435e-11 -1.197280e-10 -4.519172e-11 -1.383647e-10  4.945285e-10 
              1351          1352          1353          1354          1355 
      4.442376e-11  2.185564e-11 -1.382992e-10 -1.410036e-10 -1.332741e-10 
              1356          1357          1358          1359          1360 
      2.000059e-11  1.744733e-10  4.695037e-11  4.597055e-11 -1.200429e-10 
              1361          1362          1363          1364          1365 
      2.203449e-10  2.063931e-10  2.055931e-10 -2.979202e-11 -8.309550e-11 
              1366          1367          1368          1369          1370 
     -7.467197e-11  8.056511e-11  1.708506e-10 -1.458966e-10  1.693249e-09 
              1371          1372          1373          1374          1375 
     -5.825704e-11 -2.451605e-11  3.680896e-11 -1.400248e-10 -7.604502e-11 
              1376          1377          1378          1379          1380 
     -1.544673e-10 -2.023641e-12 -1.328491e-10  4.173206e-11 -2.662796e-11 
              1381          1382          1383          1384          1385 
      5.550966e-10 -6.349870e-11 -2.210486e-11  2.551917e-11  1.972443e-11 
              1386          1387          1388          1389          1390 
      1.446903e-10 -4.073983e-11 -1.669486e-10  9.765931e-10 -1.213451e-10 
              1391          1392          1393          1394          1395 
      4.560795e-11  1.132375e-10 -2.488367e-11  4.593019e-11 -1.859385e-11 
              1396          1397          1398          1399          1400 
      4.051019e-10 -1.718827e-10  2.177622e-10 -3.191123e-11 -1.413208e-10 
              1401          1402          1403          1404          1405 
      1.953479e-10 -1.609747e-10  2.031979e-10  2.010170e-11  4.872318e-11 
              1406          1407          1408          1409          1410 
     -1.124525e-10 -2.004421e-11  1.713341e-09 -1.877766e-11  8.552978e-10 
              1411          1412          1413          1414          1415 
      3.803116e-11  8.791967e-11  4.806541e-11  5.384143e-10  2.098565e-10 
              1416          1417          1418          1419          1420 
     -3.534612e-11  2.789082e-10 -1.548301e-10  2.999047e-10  2.105718e-11 
              1421          1422          1423          1424          1425 
      2.411519e-10 -1.699182e-10  1.673257e-10 -1.389901e-10 -1.671287e-10 
              1426          1427          1428          1429          1430 
      9.516060e-13 -1.344886e-10  1.237777e-09  2.807680e-11  2.259397e-11 
              1431          1432          1433          1434          1435 
     -3.923811e-11  4.504625e-10 -1.134901e-10 -1.204508e-11  1.032237e-09 
              1436          1437          1438          1439          1440 
     -1.704021e-10  3.797122e-11 -1.671316e-10  2.146310e-10 -3.694790e-11 
              1441          1442          1443          1444          1445 
     -3.266592e-11 -8.701921e-11  2.166268e-11  3.961958e-10 -1.535796e-10 
              1446          1447          1448          1449          1450 
      4.907276e-10 -3.033657e-11 -1.311727e-10 -7.923360e-11  5.214858e-10 
              1451          1452          1453          1454          1455 
     -2.783829e-11 -8.158327e-11  1.417393e-11 -1.531495e-10  8.217403e-11 
              1456          1457          1458          1459          1460 
     -6.757216e-12 -2.938195e-11 -8.748219e-11 -1.401236e-10 -8.185742e-11 
              1461          1462          1463          1464          1465 
      3.196633e-11  8.355727e-10 -4.110345e-11  3.403981e-10 -3.659518e-11 
              1466          1467          1468          1469          1470 
      2.110339e-10 -1.525437e-10 -8.960158e-11 -9.814985e-11  4.197124e-12 
              1471          1472          1473          1474          1475 
      3.592353e-10  4.452741e-11  9.676087e-11 -1.388533e-10 -1.321250e-10 
              1476          1477          1478          1479          1480 
     -1.061590e-11  3.349935e-10 -1.151462e-10  1.819513e-10  1.075564e-09 
              1481          1482          1483          1484          1485 
      4.536836e-10  1.687965e-10 -5.114671e-11 -1.147632e-10  4.525336e-11 
              1486          1487          1488          1489          1490 
      9.758171e-10  4.472369e-11  9.655313e-11  1.885870e-11 -1.353495e-11 
              1491          1492          1493          1494          1495 
      1.508456e-09 -1.918106e-10  4.859432e-11  3.578054e-10 -3.604795e-11 
              1496          1497          1498          1499          1500 
     -5.792463e-11 -1.558120e-10  4.690851e-11  3.235717e-11  1.724037e-09 
              1501          1502          1503          1504          1505 
      1.574640e-10  3.981391e-10  3.561317e-12  8.605349e-10 -3.904245e-11 
              1506          1507          1508          1509          1510 
      2.799392e-10 -3.050563e-11 -5.020123e-11 -1.074236e-10  4.991463e-11 
              1511          1512          1513          1514          1515 
     -1.425018e-10  5.017996e-11  3.744253e-11  9.301843e-10 -2.611389e-11 
              1516          1517          1518          1519          1520 
     -3.073379e-11 -1.287322e-10 -1.418220e-10  1.180450e-09 -2.176131e-11 
              1521          1522          1523          1524          1525 
      4.034095e-10 -1.551273e-10  1.283302e-09  4.473112e-10 -3.440280e-11 
              1526          1527          1528          1529          1530 
     -4.912628e-11 -1.412427e-10 -1.684522e-10 -2.280699e-11  4.335915e-11 
              1531          1532          1533          1534          1535 
      5.977076e-10 -1.241810e-11  1.001074e-09  9.656288e-10 -1.516733e-10 
              1536          1537          1538          1539          1540 
      1.161613e-10  1.009951e-10  2.029552e-10  2.050543e-10  1.726309e-10 
              1541          1542          1543          1544          1545 
     -1.414254e-10 -8.243897e-11 -3.782913e-11  3.972845e-11  7.864654e-11 
              1546          1547          1548          1549          1550 
      1.122828e-10 -2.987609e-11  8.957573e-10 -4.131398e-11 -8.854427e-11 
              1551          1552          1553          1554          1555 
      1.542007e-10  1.465070e-10  5.979788e-10 -1.682608e-10  5.531010e-11 
              1556          1557          1558          1559          1560 
     -1.199565e-10  7.129064e-12  5.250041e-10 -3.273186e-11  2.015974e-10 
              1561          1562          1563          1564          1565 
      1.674610e-11 -5.387340e-12 -1.121137e-10 -8.084774e-11 -1.530258e-10 
              1566          1567          1568          1569          1570 
     -1.468138e-10 -1.129437e-10 -2.314090e-11  9.985866e-10  2.061048e-10 
              1571          1572          1573          1574          1575 
      3.880140e-10 -1.536633e-10 -1.892958e-10  4.223289e-11  2.683538e-11 
              1576          1577          1578          1579          1580 
     -8.722959e-11 -5.674702e-11  5.250515e-10  2.727126e-10 -1.575563e-10 
              1581          1582          1583          1584          1585 
      5.059715e-11  3.928215e-11  2.047424e-10 -7.564577e-11 -1.644013e-11 
              1586          1587          1588          1589          1590 
      5.999837e-10  2.176812e-11 -1.879623e-10  5.570053e-11 -1.338720e-10 
              1591          1592          1593          1594          1595 
     -2.223849e-11 -5.063804e-11  2.742774e-10  1.007969e-09  3.057366e-11 
              1596          1597          1598          1599          1600 
      5.458129e-10  4.240209e-10  1.113393e-10 -1.062638e-10  1.871951e-11 
              1601          1602          1603          1604          1605 
     -1.272850e-10  5.456884e-11 -8.284899e-11 -1.214402e-10 -1.278227e-11 
              1606          1607          1608          1609          1610 
      5.542676e-11 -2.045920e-11  5.478420e-10 -2.046114e-11  9.488687e-10 
              1611          1612          1613          1614          1615 
     -4.381137e-11 -8.270053e-11 -1.580115e-10 -1.878997e-11  3.594215e-10 
              1616          1617          1618          1619          1620 
     -2.427578e-11  1.403182e-10 -2.083065e-11 -1.209162e-10  2.056072e-10 
              1621          1622          1623          1624          1625 
      3.714848e-11  1.682851e-10 -1.188956e-10 -8.630274e-11 -2.307448e-11 
              1626          1627          1628          1629          1630 
      1.594122e-10  1.562772e-10  4.131649e-11  3.987507e-10  4.287474e-11 
              1631          1632          1633          1634          1635 
     -1.096396e-10 -9.931721e-11 -1.159545e-10  1.013508e-10  2.205225e-10 
              1636          1637          1638          1639          1640 
      1.938994e-10 -1.682158e-10  9.734932e-11 -7.913622e-11  2.137831e-10 
              1641          1642          1643          1644          1645 
     -1.702707e-10 -6.560156e-11 -1.565585e-10 -5.167643e-11 -1.494299e-10 
              1646          1647          1648          1649          1650 
     -1.361245e-10 -3.143548e-11  2.730658e-11 -4.929229e-11  1.520777e-10 
              1651          1652          1653          1654          1655 
      2.581353e-10 -1.609875e-10 -1.401128e-10  1.723089e-10 -5.303476e-11 
              1656          1657          1658          1659          1660 
     -1.315855e-10  4.581712e-11  9.508251e-10  7.739218e-11 -1.563190e-10 
              1661          1662          1663          1664          1665 
      4.497631e-11 -1.549625e-10 -3.782171e-11 -1.340108e-10  5.467955e-10 
              1666          1667          1668          1669          1670 
     -1.696723e-10  1.796523e-10 -1.166070e-10  1.170945e-10  3.952480e-11 
              1671          1672          1673          1674          1675 
      2.020494e-10  5.924425e-10 -1.693262e-10  2.067163e-11  4.020901e-10 
              1676          1677          1678          1679          1680 
      2.231811e-10  3.966385e-10 -8.123994e-11 -1.222920e-10 -1.363247e-10 
              1681          1682          1683          1684          1685 
     -2.480938e-11  9.375556e-10  2.046315e-10 -7.733863e-11  1.961433e-10 
              1686          1687          1688          1689          1690 
     -1.159155e-10 -1.222815e-10  3.231939e-11  4.578788e-10  5.771711e-11 
              1691          1692          1693          1694          1695 
     -1.306399e-10 -1.698788e-10 -7.872655e-11  3.831273e-10 -3.635005e-11 
              1696          1697          1698          1699          1700 
     -2.962559e-11  2.840328e-10 -6.329150e-12  2.144063e-10 -2.637306e-11 
              1701          1702          1703          1704          1705 
     -7.207209e-11  4.382998e-11 -3.430362e-11 -1.681992e-10  3.900178e-10 
              1706          1707          1708          1709          1710 
     -1.214443e-10  9.498403e-10 -1.380998e-10  4.539922e-11 -1.524093e-10 
              1711          1712          1713          1714          1715 
     -1.497614e-10  1.719662e-10  4.926403e-10 -1.507771e-10  4.068969e-10 
              1716          1717          1718          1719          1720 
     -1.198307e-10  5.869924e-11 -1.237579e-10  4.262246e-11 -1.366252e-10 
              1721          1722          1723          1724          1725 
     -1.041413e-11 -2.490308e-11 -2.958451e-11  1.155743e-10  1.964543e-10 
              1726          1727          1728          1729          1730 
     -8.886207e-11  1.803107e-11 -1.250806e-10 -2.401163e-11 -1.325435e-10 
              1731          1732          1733          1734          1735 
      1.801267e-10  3.222282e-11 -1.188670e-10  1.015475e-09 -2.722321e-11 
              1736          1737          1738          1739          1740 
      8.481554e-10 -7.241405e-11  4.265968e-11 -1.588360e-10 -1.896627e-10 
              1741          1742          1743          1744          1745 
     -1.639719e-10  8.249650e-11  5.688918e-10 -1.545070e-10 -2.775476e-11 
              1746          1747          1748          1749          1750 
      2.057251e-10 -1.344588e-10 -1.251644e-10 -1.754714e-10  1.029857e-09 
              1751          1752          1753          1754          1755 
      3.115578e-11  1.493842e-10 -1.807883e-10 -2.835617e-11 -9.912135e-12 
              1756          1757          1758          1759          1760 
     -3.715611e-11  5.138378e-11  8.723809e-11  3.831276e-10 -1.333518e-10 
              1761          1762          1763          1764          1765 
     -3.628010e-11 -1.325776e-10 -1.200667e-10 -1.713228e-10  3.492012e-11 
              1766          1767          1768          1769          1770 
     -1.699396e-10 -1.217663e-10 -1.216695e-10  2.882820e-11  4.465307e-11 
              1771          1772          1773          1774          1775 
      2.111276e-10 -1.200135e-10  2.001834e-11 -1.673833e-10  1.514313e-10 
              1776          1777          1778          1779          1780 
     -1.403538e-10  3.933830e-11 -3.096560e-11 -1.375050e-10  2.024206e-10 
              1781          1782          1783          1784          1785 
      6.461899e-10  4.093179e-10  1.900962e-10  9.497654e-11 -4.421552e-11 
              1786          1787          1788          1789          1790 
      9.821143e-11  2.162073e-10  2.615527e-11  2.185518e-11  7.679465e-11 
              1791          1792          1793          1794          1795 
     -1.517410e-10  2.045604e-10  1.259297e-09 -1.156213e-10 -5.287678e-11 
              1796          1797          1798          1799          1800 
     -1.368758e-10 -7.008129e-11  4.202296e-11  8.780685e-10  1.973420e-10 
              1801          1802          1803          1804          1805 
     -1.208494e-10  2.049452e-10 -3.662540e-11 -2.808178e-11  5.208759e-11 
              1806          1807          1808          1809          1810 
     -7.044876e-11 -1.378477e-10 -1.172733e-10  2.102511e-09  2.200540e-11 
              1811          1812          1813          1814          1815 
     -3.272844e-11 -1.395269e-10  1.772963e-10 -9.830600e-11  2.038234e-10 
              1816          1817          1818          1819          1820 
     -1.808169e-10 -2.226820e-11  7.992109e-11 -7.929188e-11  3.583316e-10 
              1821          1822          1823          1824          1825 
      1.733648e-12 -1.204916e-10  4.561004e-10  2.128341e-10 -1.177538e-10 
              1826          1827          1828          1829          1830 
     -1.365840e-10 -3.679988e-11  2.791950e-10  3.333213e-10 -9.010304e-11 
              1831          1832          1833          1834          1835 
     -1.237238e-10 -5.107215e-11  2.537707e-11 -1.690593e-10 -8.305850e-11 
              1836          1837          1838          1839          1840 
      4.465820e-11  4.376214e-11 -2.878242e-11 -1.233025e-13 -2.564560e-11 
              1841          1842          1843          1844          1845 
     -4.646213e-11  3.205470e-11  1.529367e-10 -1.702055e-10 -2.761368e-11 
              1846          1847          1848          1849          1850 
      8.198399e-10  3.336820e-10 -1.956826e-11 -1.218724e-10  2.825262e-10 
              1851          1852          1853          1854          1855 
     -8.384803e-11  3.593602e-10  1.305771e-11 -8.714151e-11  1.717515e-10 
              1856          1857          1858          1859          1860 
      1.002956e-10 -1.205690e-10 -1.235476e-10  2.394868e-11 -1.588543e-10 
              1861          1862          1863          1864          1865 
      4.542408e-10 -6.326148e-11 -4.073223e-11 -1.303896e-10 -5.001406e-11 
              1866          1867          1868          1869          1870 
     -3.729891e-14  8.291776e-10  1.608493e-10  1.274620e-11 -5.361958e-12 
              1871          1872          1873          1874          1875 
      7.816125e-11 -8.035157e-11  1.007255e-10 -3.355132e-11 -1.214706e-10 
              1876          1877          1878          1879          1880 
      3.098842e-11  1.746428e-10 -1.715858e-10 -1.207363e-10  2.838749e-10 
              1881          1882          1883          1884          1885 
      2.040652e-10 -3.925206e-11 -2.372689e-11  4.425076e-10 -1.798585e-10 
              1886          1887          1888          1889          1890 
     -1.201220e-10 -7.135607e-11 -1.532884e-10 -1.460408e-10 -1.396331e-10 
              1891          1892          1893          1894          1895 
      3.833848e-10 -1.225745e-10 -1.552446e-10 -1.602467e-10 -1.657095e-10 
              1896          1897          1898          1899          1900 
      8.216259e-10 -5.296869e-11  2.141358e-10 -1.677435e-10  1.810160e-10 
              1901          1902          1903          1904          1905 
      2.178135e-11  4.078036e-11 -5.655913e-11 -2.952216e-11  3.197954e-11 
              1906          1907          1908          1909          1910 
      5.368139e-10  6.041176e-10  3.327914e-10 -1.193962e-10  4.541004e-10 
              1911          1912          1913          1914          1915 
     -1.212304e-10  8.827401e-11 -1.240831e-10  1.865054e-11 -8.091237e-11 
              1916          1917          1918          1919          1920 
      3.931328e-11  4.822511e-11 -2.425978e-11  3.829890e-10  1.476430e-10 
              1921          1922          1923          1924          1925 
      2.081643e-11 -1.386682e-10  2.574057e-10 -2.499767e-11  2.817840e-10 
              1926          1927          1928          1929          1930 
      4.565270e-11 -4.050078e-11  3.939548e-10  8.846892e-11 -1.192258e-10 
              1931          1932          1933          1934          1935 
     -1.544392e-10  1.514640e-09 -5.692635e-11 -1.219745e-10  1.775952e-10 
              1936          1937          1938          1939          1940 
     -1.337308e-10  8.748684e-10  1.452811e-10  3.849172e-10 -5.700243e-11 
              1941          1942          1943          1944          1945 
      5.624063e-10 -1.579653e-10  2.851549e-10  1.812190e-11 -1.205942e-10 
              1946          1947          1948          1949          1950 
      7.800259e-11 -9.262122e-11  7.515764e-10 -1.596681e-10 -7.575020e-11 
              1951          1952          1953          1954          1955 
      4.364057e-11  2.166638e-10 -2.219507e-11  1.899911e-10  1.711631e-09 
              1956          1957          1958          1959          1960 
      2.095741e-10 -1.219573e-10  2.125456e-10  4.639785e-10  1.130922e-09 
              1961          1962          1963          1964          1965 
     -8.284319e-11 -1.794769e-11 -2.744677e-11  3.164964e-11  2.027775e-10 
              1966          1967          1968          1969          1970 
     -7.696926e-11 -4.492773e-11 -1.780250e-11 -1.212061e-10  5.659634e-11 
              1971          1972          1973          1974          1975 
     -3.219650e-11 -1.606145e-10 -7.892915e-11  2.188096e-10 -1.416337e-10 
              1976          1977          1978          1979          1980 
     -1.405641e-10 -1.203358e-10 -2.743123e-11  2.945201e-10 -1.517842e-10 
              1981          1982          1983          1984          1985 
      2.404925e-10 -2.908251e-11  8.238233e-10 -1.699575e-10 -1.505580e-10 
              1986          1987          1988          1989          1990 
     -1.178286e-10  2.071693e-10 -1.245268e-10  5.321852e-10  4.043916e-10 
              1991          1992          1993          1994          1995 
     -1.804463e-10  8.395296e-10 -1.383733e-10 -1.402413e-10 -2.695045e-11 
              1996          1997          1998          1999          2000 
     -1.542543e-10  6.817154e-10  8.956007e-11  4.445666e-10  3.937798e-10
     [1] 1.97641e-07
     [1] "br"
                1            2            3            4            5            6 
     3.451983e-10 3.451983e-10 3.294210e-10 3.767528e-10 3.451983e-10 3.215323e-10 
                7            8            9           10           11           12 
     3.294210e-10 3.294210e-10 3.294210e-10 3.175880e-10 3.451983e-10 3.294210e-10 
               13           14           15           16           17           18 
     3.294210e-10 3.451983e-10 3.175880e-10 3.767528e-10 3.767528e-10 3.294210e-10 
               19           20           21           22           23           24 
     3.215323e-10 3.767528e-10 3.294210e-10 3.451983e-10 3.451983e-10 3.215323e-10 
               25           26           27           28           29           30 
     3.451983e-10 3.215323e-10 3.767528e-10 3.294210e-10 3.294210e-10 3.451983e-10 
               31           32           33           34           35           36 
     3.175880e-10 3.175880e-10 3.215323e-10 3.451983e-10 3.294210e-10 3.767528e-10 
               37           38           39           40           41           42 
     3.294210e-10 3.451983e-10 3.294210e-10 3.215323e-10 3.294210e-10 3.767528e-10 
               43           44           45           46           47           48 
     3.175880e-10 3.215323e-10 3.175880e-10 3.767528e-10 3.215323e-10 3.451983e-10 
               49           50           51           52           53           54 
     3.294210e-10 3.215323e-10 3.215323e-10 3.767528e-10 3.294210e-10 3.294210e-10 
               55           56           57           58           59           60 
     3.175880e-10 3.767528e-10 3.215323e-10 3.451983e-10 3.215323e-10 3.451983e-10 
               61           62           63           64           65           66 
     3.175880e-10 3.451983e-10 3.294210e-10 3.215323e-10 3.767528e-10 3.215323e-10 
               67           68           69           70           71           72 
     3.294210e-10 3.294210e-10 3.215323e-10 3.767528e-10 3.175880e-10 3.294210e-10 
               73           74           75           76           77           78 
     3.215323e-10 3.767528e-10 3.294210e-10 3.215323e-10 3.175880e-10 3.767528e-10 
               79           80           81           82           83           84 
     3.215323e-10 3.215323e-10 3.215323e-10 3.215323e-10 3.767528e-10 3.175880e-10 
               85           86           87           88           89           90 
     3.175880e-10 3.767528e-10 3.215323e-10 3.175880e-10 3.215323e-10 3.175880e-10 
               91           92           93           94           95           96 
     3.215323e-10 3.767528e-10 3.294210e-10 3.175880e-10 3.215323e-10 3.451983e-10 
               97           98           99          100          101          102 
     3.767528e-10 3.767528e-10 3.215323e-10 3.175880e-10 3.215323e-10 3.451983e-10 
              103          104          105          106          107          108 
     3.215323e-10 3.767528e-10 3.175880e-10 3.175880e-10 3.451983e-10 3.175880e-10 
              109          110          111          112          113          114 
     3.215323e-10 3.215323e-10 3.294210e-10 3.451983e-10 3.175880e-10 3.451983e-10 
              115          116          117          118          119          120 
     3.767528e-10 3.215323e-10 3.451983e-10 3.175880e-10 3.175880e-10 3.294210e-10 
              121          122          123          124          125          126 
     3.215323e-10 3.215323e-10 3.175880e-10 3.451983e-10 3.294210e-10 3.215323e-10 
              127          128          129          130          131          132 
     3.175880e-10 3.215323e-10 3.767528e-10 3.215323e-10 3.215323e-10 3.767528e-10 
              133          134          135          136          137          138 
     3.767528e-10 3.767528e-10 3.175880e-10 3.451983e-10 3.175880e-10 3.215323e-10 
              139          140          141          142          143          144 
     3.215323e-10 3.175880e-10 3.451983e-10 3.175880e-10 3.175880e-10 3.294210e-10 
              145          146          147          148          149          150 
     3.215323e-10 3.294210e-10 3.451983e-10 3.294210e-10 3.767528e-10 3.294210e-10 
              151          152          153          154          155          156 
     3.451983e-10 3.767528e-10 3.767528e-10 3.767528e-10 3.215323e-10 3.451983e-10 
              157          158          159          160          161          162 
     3.294210e-10 3.175880e-10 3.294210e-10 3.767528e-10 3.451983e-10 3.175880e-10 
              163          164          165          166          167          168 
     3.175880e-10 3.451983e-10 3.294210e-10 3.451983e-10 3.767528e-10 3.175880e-10 
              169          170          171          172          173          174 
     3.767528e-10 3.215323e-10 3.294210e-10 3.767528e-10 3.451983e-10 3.451983e-10 
              175          176          177          178          179          180 
     3.215323e-10 3.294210e-10 3.767528e-10 3.175880e-10 3.175880e-10 3.451983e-10 
              181          182          183          184          185          186 
     3.175880e-10 3.215323e-10 3.767528e-10 3.215323e-10 3.215323e-10 3.215323e-10 
              187          188          189          190          191          192 
     3.767528e-10 3.175880e-10 3.451983e-10 3.294210e-10 3.767528e-10 3.451983e-10 
              193          194          195          196          197          198 
     3.215323e-10 3.294210e-10 3.451983e-10 3.767528e-10 3.175880e-10 3.294210e-10 
              199          200          201          202          203          204 
     3.175880e-10 3.175880e-10 3.294210e-10 3.215323e-10 3.215323e-10 3.767528e-10 
              205          206          207          208          209          210 
     3.767528e-10 3.294210e-10 3.175880e-10 3.451983e-10 3.215323e-10 3.175880e-10 
              211          212          213          214          215          216 
     3.767528e-10 3.175880e-10 3.175880e-10 3.175880e-10 3.451983e-10 3.767528e-10 
              217          218          219          220          221          222 
     3.451983e-10 3.175880e-10 3.175880e-10 3.175880e-10 3.294210e-10 3.215323e-10 
              223          224          225          226          227          228 
     3.451983e-10 3.294210e-10 3.451983e-10 3.451983e-10 3.294210e-10 3.215323e-10 
              229          230          231          232          233          234 
     3.215323e-10 3.767528e-10 3.215323e-10 3.767528e-10 3.767528e-10 3.175880e-10 
              235          236          237          238          239          240 
     3.175880e-10 3.767528e-10 3.175880e-10 3.215323e-10 3.294210e-10 3.215323e-10 
              241          242          243          244          245          246 
     3.175880e-10 3.767528e-10 3.451983e-10 3.767528e-10 3.215323e-10 3.215323e-10 
              247          248          249          250          251          252 
     3.767528e-10 3.175880e-10 3.175880e-10 3.767528e-10 3.175880e-10 3.175880e-10 
              253          254          255          256          257          258 
     3.767528e-10 3.451983e-10 3.767528e-10 3.175880e-10 3.215323e-10 3.767528e-10 
              259          260          261          262          263          264 
     3.215323e-10 3.767528e-10 3.451983e-10 3.451983e-10 3.294210e-10 3.451983e-10 
              265          266          267          268          269          270 
     3.215323e-10 3.451983e-10 3.215323e-10 3.294210e-10 3.215323e-10 3.294210e-10 
              271          272          273          274          275          276 
     3.215323e-10 3.215323e-10 3.451983e-10 3.294210e-10 3.767528e-10 3.175880e-10 
              277          278          279          280          281          282 
     3.294210e-10 3.215323e-10 3.175880e-10 3.294210e-10 3.294210e-10 3.451983e-10 
              283          284          285          286          287          288 
     3.451983e-10 3.215323e-10 3.175880e-10 3.451983e-10 3.451983e-10 3.767528e-10 
              289          290          291          292          293          294 
     3.215323e-10 3.451983e-10 3.767528e-10 3.294210e-10 3.451983e-10 3.175880e-10 
              295          296          297          298          299          300 
     3.294210e-10 3.215323e-10 3.451983e-10 3.451983e-10 3.294210e-10 3.294210e-10 
              301          302          303          304          305          306 
     3.294210e-10 3.175880e-10 3.215323e-10 3.294210e-10 3.294210e-10 3.294210e-10 
              307          308          309          310          311          312 
     3.294210e-10 3.767528e-10 3.767528e-10 3.175880e-10 3.294210e-10 3.175880e-10 
              313          314          315          316          317          318 
     3.767528e-10 3.175880e-10 3.451983e-10 3.215323e-10 3.215323e-10 3.175880e-10 
              319          320          321          322          323          324 
     3.215323e-10 3.767528e-10 3.451983e-10 3.215323e-10 3.451983e-10 3.767528e-10 
              325          326          327          328          329          330 
     3.767528e-10 3.175880e-10 3.451983e-10 3.767528e-10 3.215323e-10 3.294210e-10 
              331          332          333          334          335          336 
     3.175880e-10 3.215323e-10 3.767528e-10 3.767528e-10 3.175880e-10 3.451983e-10 
              337          338          339          340          341          342 
     3.215323e-10 3.294210e-10 3.175880e-10 3.175880e-10 3.767528e-10 3.294210e-10 
              343          344          345          346          347          348 
     3.451983e-10 3.294210e-10 3.215323e-10 3.294210e-10 3.294210e-10 3.451983e-10 
              349          350          351          352          353          354 
     3.451983e-10 3.294210e-10 3.175880e-10 3.767528e-10 3.767528e-10 3.767528e-10 
              355          356          357          358          359          360 
     3.451983e-10 3.215323e-10 3.294210e-10 3.294210e-10 3.175880e-10 3.294210e-10 
              361          362          363          364          365          366 
     3.175880e-10 3.175880e-10 3.451983e-10 3.294210e-10 3.215323e-10 3.767528e-10 
              367          368          369          370          371          372 
     3.451983e-10 3.175880e-10 3.175880e-10 3.451983e-10 3.175880e-10 3.215323e-10 
              373          374          375          376          377          378 
     3.215323e-10 3.451983e-10 3.451983e-10 3.215323e-10 3.294210e-10 3.215323e-10 
              379          380          381          382          383          384 
     3.451983e-10 3.294210e-10 3.767528e-10 3.175880e-10 3.215323e-10 3.294210e-10 
              385          386          387          388          389          390 
     3.451983e-10 3.451983e-10 3.175880e-10 3.175880e-10 3.451983e-10 3.294210e-10 
              391          392          393          394          395          396 
     3.294210e-10 3.215323e-10 3.294210e-10 3.451983e-10 3.215323e-10 3.294210e-10 
              397          398          399          400          401          402 
     3.175880e-10 3.294210e-10 3.215323e-10 3.175880e-10 3.451983e-10 3.767528e-10 
              403          404          405          406          407          408 
     3.451983e-10 3.451983e-10 3.767528e-10 3.767528e-10 3.175880e-10 3.451983e-10 
              409          410          411          412          413          414 
     3.767528e-10 3.767528e-10 3.294210e-10 3.451983e-10 3.175880e-10 3.451983e-10 
              415          416          417          418          419          420 
     3.451983e-10 3.767528e-10 3.294210e-10 3.767528e-10 3.175880e-10 3.767528e-10 
              421          422          423          424          425          426 
     3.175880e-10 3.215323e-10 3.767528e-10 3.215323e-10 3.215323e-10 3.767528e-10 
              427          428          429          430          431          432 
     3.215323e-10 3.767528e-10 3.767528e-10 3.294210e-10 3.175880e-10 3.175880e-10 
              433          434          435          436          437          438 
     3.767528e-10 3.175880e-10 3.767528e-10 3.767528e-10 3.294210e-10 3.451983e-10 
              439          440          441          442          443          444 
     3.215323e-10 3.294210e-10 3.767528e-10 3.175880e-10 3.451983e-10 3.175880e-10 
              445          446          447          448          449          450 
     3.767528e-10 3.294210e-10 3.294210e-10 3.767528e-10 3.175880e-10 3.294210e-10 
              451          452          453          454          455          456 
     3.175880e-10 3.294210e-10 3.175880e-10 3.175880e-10 3.215323e-10 3.215323e-10 
              457          458          459          460          461          462 
     3.294210e-10 3.767528e-10 3.215323e-10 3.767528e-10 3.175880e-10 3.175880e-10 
              463          464          465          466          467          468 
     3.767528e-10 3.175880e-10 3.294210e-10 3.215323e-10 3.294210e-10 3.767528e-10 
              469          470          471          472          473          474 
     3.175880e-10 3.175880e-10 3.175880e-10 3.175880e-10 3.767528e-10 3.451983e-10 
              475          476          477          478          479          480 
     3.294210e-10 3.175880e-10 3.767528e-10 3.767528e-10 3.451983e-10 3.215323e-10 
              481          482          483          484          485          486 
     3.767528e-10 3.215323e-10 3.175880e-10 3.767528e-10 3.175880e-10 3.451983e-10 
              487          488          489          490          491          492 
     3.451983e-10 3.294210e-10 3.175880e-10 3.294210e-10 3.215323e-10 3.294210e-10 
              493          494          495          496          497          498 
     3.215323e-10 3.767528e-10 3.294210e-10 3.451983e-10 3.767528e-10 3.451983e-10 
              499          500          501          502          503          504 
     3.175880e-10 3.294210e-10 3.451983e-10 3.767528e-10 3.175880e-10 3.175880e-10 
              505          506          507          508          509          510 
     3.451983e-10 3.215323e-10 3.215323e-10 3.451983e-10 3.215323e-10 3.215323e-10 
              511          512          513          514          515          516 
     3.215323e-10 3.175880e-10 3.767528e-10 3.175880e-10 3.294210e-10 3.451983e-10 
              517          518          519          520          521          522 
     3.294210e-10 3.294210e-10 3.215323e-10 3.215323e-10 3.451983e-10 3.451983e-10 
              523          524          525          526          527          528 
     3.215323e-10 3.294210e-10 3.175880e-10 3.451983e-10 3.294210e-10 3.175880e-10 
              529          530          531          532          533          534 
     3.175880e-10 3.767528e-10 3.294210e-10 3.767528e-10 3.451983e-10 3.215323e-10 
              535          536          537          538          539          540 
     3.294210e-10 3.175880e-10 3.451983e-10 3.294210e-10 3.215323e-10 3.215323e-10 
              541          542          543          544          545          546 
     3.767528e-10 3.451983e-10 3.767528e-10 3.767528e-10 3.175880e-10 3.294210e-10 
              547          548          549          550          551          552 
     3.294210e-10 3.215323e-10 3.175880e-10 3.767528e-10 3.175880e-10 3.215323e-10 
              553          554          555          556          557          558 
     3.451983e-10 3.767528e-10 3.767528e-10 3.294210e-10 3.767528e-10 3.767528e-10 
              559          560          561          562          563          564 
     3.215323e-10 3.767528e-10 3.215323e-10 3.451983e-10 3.215323e-10 3.451983e-10 
              565          566          567          568          569          570 
     3.175880e-10 3.294210e-10 3.215323e-10 3.215323e-10 3.767528e-10 3.215323e-10 
              571          572          573          574          575          576 
     3.451983e-10 3.451983e-10 3.451983e-10 3.175880e-10 3.451983e-10 3.767528e-10 
              577          578          579          580          581          582 
     3.767528e-10 3.451983e-10 3.294210e-10 3.451983e-10 3.215323e-10 3.215323e-10 
              583          584          585          586          587          588 
     3.767528e-10 3.451983e-10 3.451983e-10 3.175880e-10 3.294210e-10 3.294210e-10 
              589          590          591          592          593          594 
     3.175880e-10 3.215323e-10 3.294210e-10 3.175880e-10 3.294210e-10 3.215323e-10 
              595          596          597          598          599          600 
     3.767528e-10 3.175880e-10 3.215323e-10 3.294210e-10 3.451983e-10 3.215323e-10 
              601          602          603          604          605          606 
     3.451983e-10 3.175880e-10 3.294210e-10 3.767528e-10 3.294210e-10 3.767528e-10 
              607          608          609          610          611          612 
     3.294210e-10 3.175880e-10 3.451983e-10 3.175880e-10 3.451983e-10 3.175880e-10 
              613          614          615          616          617          618 
     3.175880e-10 3.215323e-10 3.175880e-10 3.175880e-10 3.451983e-10 3.294210e-10 
              619          620          621          622          623          624 
     3.767528e-10 3.215323e-10 3.451983e-10 3.767528e-10 3.767528e-10 3.767528e-10 
              625          626          627          628          629          630 
     3.767528e-10 3.294210e-10 3.767528e-10 3.451983e-10 3.294210e-10 3.451983e-10 
              631          632          633          634          635          636 
     3.767528e-10 3.767528e-10 3.767528e-10 3.175880e-10 3.175880e-10 3.175880e-10 
              637          638          639          640          641          642 
     3.767528e-10 3.215323e-10 3.767528e-10 3.451983e-10 3.451983e-10 3.451983e-10 
              643          644          645          646          647          648 
     3.767528e-10 3.215323e-10 3.215323e-10 3.215323e-10 3.294210e-10 3.294210e-10 
              649          650          651          652          653          654 
     3.451983e-10 3.294210e-10 3.215323e-10 3.175880e-10 3.767528e-10 3.175880e-10 
              655          656          657          658          659          660 
     3.175880e-10 3.451983e-10 3.767528e-10 3.215323e-10 3.767528e-10 3.767528e-10 
              661          662          663          664          665          666 
     3.767528e-10 3.294210e-10 3.767528e-10 3.215323e-10 3.451983e-10 3.175880e-10 
              667          668          669          670          671          672 
     3.767528e-10 3.294210e-10 3.294210e-10 3.215323e-10 3.451983e-10 3.451983e-10 
              673          674          675          676          677          678 
     3.767528e-10 3.294210e-10 3.451983e-10 3.175880e-10 3.294210e-10 3.215323e-10 
              679          680          681          682          683          684 
     3.294210e-10 3.175880e-10 3.767528e-10 3.451983e-10 3.767528e-10 3.175880e-10 
              685          686          687          688          689          690 
     3.215323e-10 3.451983e-10 3.294210e-10 3.294210e-10 3.451983e-10 3.767528e-10 
              691          692          693          694          695          696 
     3.451983e-10 3.175880e-10 3.294210e-10 3.175880e-10 3.767528e-10 3.767528e-10 
              697          698          699          700          701          702 
     3.451983e-10 3.215323e-10 3.215323e-10 3.175880e-10 3.215323e-10 3.451983e-10 
              703          704          705          706          707          708 
     3.451983e-10 3.175880e-10 3.215323e-10 3.215323e-10 3.767528e-10 3.294210e-10 
              709          710          711          712          713          714 
     3.215323e-10 3.175880e-10 3.451983e-10 3.767528e-10 3.767528e-10 3.767528e-10 
              715          716          717          718          719          720 
     3.175880e-10 3.294210e-10 3.767528e-10 3.175880e-10 3.451983e-10 3.175880e-10 
              721          722          723          724          725          726 
     3.294210e-10 3.294210e-10 3.451983e-10 3.175880e-10 3.215323e-10 3.215323e-10 
              727          728          729          730          731          732 
     3.767528e-10 3.294210e-10 3.451983e-10 3.767528e-10 3.294210e-10 3.767528e-10 
              733          734          735          736          737          738 
     3.175880e-10 3.767528e-10 3.451983e-10 3.451983e-10 3.451983e-10 3.451983e-10 
              739          740          741          742          743          744 
     3.175880e-10 3.175880e-10 3.215323e-10 3.451983e-10 3.215323e-10 3.451983e-10 
              745          746          747          748          749          750 
     3.451983e-10 3.175880e-10 3.451983e-10 3.294210e-10 3.767528e-10 3.294210e-10 
              751          752          753          754          755          756 
     3.175880e-10 3.767528e-10 3.767528e-10 3.767528e-10 3.215323e-10 3.175880e-10 
              757          758          759          760          761          762 
     3.294210e-10 3.767528e-10 3.767528e-10 3.451983e-10 3.294210e-10 3.294210e-10 
              763          764          765          766          767          768 
     3.175880e-10 3.294210e-10 3.767528e-10 3.294210e-10 3.451983e-10 3.294210e-10 
              769          770          771          772          773          774 
     3.451983e-10 3.175880e-10 3.294210e-10 3.175880e-10 3.294210e-10 3.451983e-10 
              775          776          777          778          779          780 
     3.451983e-10 3.767528e-10 3.215323e-10 3.215323e-10 3.175880e-10 3.215323e-10 
              781          782          783          784          785          786 
     3.451983e-10 3.215323e-10 3.175880e-10 3.175880e-10 3.294210e-10 3.767528e-10 
              787          788          789          790          791          792 
     3.767528e-10 3.294210e-10 3.215323e-10 3.451983e-10 3.215323e-10 3.215323e-10 
              793          794          795          796          797          798 
     3.175880e-10 3.294210e-10 3.294210e-10 3.294210e-10 3.294210e-10 3.294210e-10 
              799          800          801          802          803          804 
     3.175880e-10 3.215323e-10 3.175880e-10 3.767528e-10 3.294210e-10 3.451983e-10 
              805          806          807          808          809          810 
     3.451983e-10 3.175880e-10 3.767528e-10 3.451983e-10 3.767528e-10 3.294210e-10 
              811          812          813          814          815          816 
     3.451983e-10 3.451983e-10 3.175880e-10 3.175880e-10 3.451983e-10 3.767528e-10 
              817          818          819          820          821          822 
     3.175880e-10 3.767528e-10 3.767528e-10 3.451983e-10 3.451983e-10 3.175880e-10 
              823          824          825          826          827          828 
     3.175880e-10 3.767528e-10 3.215323e-10 3.175880e-10 3.294210e-10 3.767528e-10 
              829          830          831          832          833          834 
     3.294210e-10 3.767528e-10 3.294210e-10 3.215323e-10 3.294210e-10 3.451983e-10 
              835          836          837          838          839          840 
     3.451983e-10 3.294210e-10 3.215323e-10 3.451983e-10 3.215323e-10 3.451983e-10 
              841          842          843          844          845          846 
     3.294210e-10 3.451983e-10 3.175880e-10 3.215323e-10 3.215323e-10 3.451983e-10 
              847          848          849          850          851          852 
     3.767528e-10 3.451983e-10 3.451983e-10 3.451983e-10 3.451983e-10 3.451983e-10 
              853          854          855          856          857          858 
     3.451983e-10 3.215323e-10 3.767528e-10 3.294210e-10 3.294210e-10 3.215323e-10 
              859          860          861          862          863          864 
     3.767528e-10 3.294210e-10 3.767528e-10 3.215323e-10 3.175880e-10 3.451983e-10 
              865          866          867          868          869          870 
     3.175880e-10 3.451983e-10 3.767528e-10 3.451983e-10 3.294210e-10 3.767528e-10 
              871          872          873          874          875          876 
     3.767528e-10 3.451983e-10 3.294210e-10 3.767528e-10 3.451983e-10 3.175880e-10 
              877          878          879          880          881          882 
     3.175880e-10 3.294210e-10 3.175880e-10 3.294210e-10 3.175880e-10 3.767528e-10 
              883          884          885          886          887          888 
     3.294210e-10 3.767528e-10 3.451983e-10 3.451983e-10 3.215323e-10 3.767528e-10 
              889          890          891          892          893          894 
     3.767528e-10 3.451983e-10 3.175880e-10 3.175880e-10 3.175880e-10 3.767528e-10 
              895          896          897          898          899          900 
     3.767528e-10 3.767528e-10 3.767528e-10 3.175880e-10 3.451983e-10 3.215323e-10 
              901          902          903          904          905          906 
     3.215323e-10 3.294210e-10 3.767528e-10 3.294210e-10 3.294210e-10 3.451983e-10 
              907          908          909          910          911          912 
     3.175880e-10 3.451983e-10 3.451983e-10 3.294210e-10 3.767528e-10 3.767528e-10 
              913          914          915          916          917          918 
     3.294210e-10 3.175880e-10 3.767528e-10 3.451983e-10 3.175880e-10 3.294210e-10 
              919          920          921          922          923          924 
     3.215323e-10 3.294210e-10 3.294210e-10 3.215323e-10 3.451983e-10 3.215323e-10 
              925          926          927          928          929          930 
     3.451983e-10 3.451983e-10 3.294210e-10 3.215323e-10 3.294210e-10 3.175880e-10 
              931          932          933          934          935          936 
     3.767528e-10 3.451983e-10 3.215323e-10 3.175880e-10 3.767528e-10 3.175880e-10 
              937          938          939          940          941          942 
     3.451983e-10 3.175880e-10 3.294210e-10 3.767528e-10 3.175880e-10 3.451983e-10 
              943          944          945          946          947          948 
     3.215323e-10 3.451983e-10 3.294210e-10 3.175880e-10 3.175880e-10 3.451983e-10 
              949          950          951          952          953          954 
     3.451983e-10 3.451983e-10 3.767528e-10 3.451983e-10 3.215323e-10 3.451983e-10 
              955          956          957          958          959          960 
     3.175880e-10 3.451983e-10 3.451983e-10 3.175880e-10 3.451983e-10 3.294210e-10 
              961          962          963          964          965          966 
     3.215323e-10 3.215323e-10 3.215323e-10 3.215323e-10 3.215323e-10 3.175880e-10 
              967          968          969          970          971          972 
     3.451983e-10 3.175880e-10 3.215323e-10 3.294210e-10 3.451983e-10 3.215323e-10 
              973          974          975          976          977          978 
     3.215323e-10 3.451983e-10 3.767528e-10 3.767528e-10 3.215323e-10 3.767528e-10 
              979          980          981          982          983          984 
     3.215323e-10 3.451983e-10 3.215323e-10 3.294210e-10 3.215323e-10 3.767528e-10 
              985          986          987          988          989          990 
     3.451983e-10 3.215323e-10 3.215323e-10 3.215323e-10 3.294210e-10 3.215323e-10 
              991          992          993          994          995          996 
     3.175880e-10 3.175880e-10 3.294210e-10 3.215323e-10 3.175880e-10 3.294210e-10 
              997          998          999         1000         1001         1002 
     3.451983e-10 3.767528e-10 3.294210e-10 3.451983e-10 3.451983e-10 3.767528e-10 
             1003         1004         1005         1006         1007         1008 
     3.294210e-10 3.767528e-10 3.767528e-10 3.175880e-10 3.767528e-10 3.451983e-10 
             1009         1010         1011         1012         1013         1014 
     3.451983e-10 3.294210e-10 3.767528e-10 3.451983e-10 3.767528e-10 3.215323e-10 
             1015         1016         1017         1018         1019         1020 
     3.767528e-10 3.294210e-10 3.294210e-10 3.215323e-10 3.175880e-10 3.175880e-10 
             1021         1022         1023         1024         1025         1026 
     3.767528e-10 3.175880e-10 3.175880e-10 3.175880e-10 3.767528e-10 3.767528e-10 
             1027         1028         1029         1030         1031         1032 
     3.294210e-10 3.175880e-10 3.294210e-10 3.451983e-10 3.451983e-10 3.451983e-10 
             1033         1034         1035         1036         1037         1038 
     3.175880e-10 3.451983e-10 3.451983e-10 3.451983e-10 3.175880e-10 3.215323e-10 
             1039         1040         1041         1042         1043         1044 
     3.215323e-10 3.451983e-10 3.451983e-10 3.215323e-10 3.175880e-10 3.451983e-10 
             1045         1046         1047         1048         1049         1050 
     3.767528e-10 3.175880e-10 3.215323e-10 3.175880e-10 3.767528e-10 3.451983e-10 
             1051         1052         1053         1054         1055         1056 
     3.175880e-10 3.294210e-10 3.294210e-10 3.294210e-10 3.451983e-10 3.215323e-10 
             1057         1058         1059         1060         1061         1062 
     3.215323e-10 3.175880e-10 3.175880e-10 3.767528e-10 3.767528e-10 3.294210e-10 
             1063         1064         1065         1066         1067         1068 
     3.175880e-10 3.294210e-10 3.215323e-10 3.294210e-10 3.767528e-10 3.215323e-10 
             1069         1070         1071         1072         1073         1074 
     3.215323e-10 3.451983e-10 3.175880e-10 3.215323e-10 3.451983e-10 3.767528e-10 
             1075         1076         1077         1078         1079         1080 
     3.294210e-10 3.215323e-10 3.215323e-10 3.767528e-10 3.215323e-10 3.175880e-10 
             1081         1082         1083         1084         1085         1086 
     3.175880e-10 3.451983e-10 3.294210e-10 3.215323e-10 3.294210e-10 3.451983e-10 
             1087         1088         1089         1090         1091         1092 
     3.215323e-10 3.767528e-10 3.767528e-10 3.215323e-10 3.767528e-10 3.294210e-10 
             1093         1094         1095         1096         1097         1098 
     3.294210e-10 3.215323e-10 3.451983e-10 3.294210e-10 3.215323e-10 3.767528e-10 
             1099         1100         1101         1102         1103         1104 
     3.294210e-10 3.215323e-10 3.767528e-10 3.215323e-10 3.215323e-10 3.767528e-10 
             1105         1106         1107         1108         1109         1110 
     3.767528e-10 3.215323e-10 3.767528e-10 3.767528e-10 3.215323e-10 3.767528e-10 
             1111         1112         1113         1114         1115         1116 
     3.215323e-10 3.451983e-10 3.451983e-10 3.215323e-10 3.294210e-10 3.215323e-10 
             1117         1118         1119         1120         1121         1122 
     3.175880e-10 3.175880e-10 3.767528e-10 3.215323e-10 3.294210e-10 3.215323e-10 
             1123         1124         1125         1126         1127         1128 
     3.175880e-10 3.175880e-10 3.294210e-10 3.175880e-10 3.767528e-10 3.215323e-10 
             1129         1130         1131         1132         1133         1134 
     3.175880e-10 3.767528e-10 3.451983e-10 3.175880e-10 3.215323e-10 3.767528e-10 
             1135         1136         1137         1138         1139         1140 
     3.215323e-10 3.215323e-10 3.175880e-10 3.215323e-10 3.215323e-10 3.451983e-10 
             1141         1142         1143         1144         1145         1146 
     3.175880e-10 3.767528e-10 3.767528e-10 3.215323e-10 3.175880e-10 3.294210e-10 
             1147         1148         1149         1150         1151         1152 
     3.451983e-10 3.215323e-10 3.294210e-10 3.294210e-10 3.767528e-10 3.215323e-10 
             1153         1154         1155         1156         1157         1158 
     3.767528e-10 3.451983e-10 3.175880e-10 3.215323e-10 3.175880e-10 3.767528e-10 
             1159         1160         1161         1162         1163         1164 
     3.175880e-10 3.767528e-10 3.175880e-10 3.451983e-10 3.175880e-10 3.294210e-10 
             1165         1166         1167         1168         1169         1170 
     3.215323e-10 3.215323e-10 3.175880e-10 3.175880e-10 3.767528e-10 3.294210e-10 
             1171         1172         1173         1174         1175         1176 
     3.294210e-10 3.767528e-10 3.767528e-10 3.294210e-10 3.175880e-10 3.767528e-10 
             1177         1178         1179         1180         1181         1182 
     3.294210e-10 3.175880e-10 3.215323e-10 3.451983e-10 3.767528e-10 3.767528e-10 
             1183         1184         1185         1186         1187         1188 
     3.767528e-10 3.215323e-10 3.451983e-10 3.294210e-10 3.175880e-10 3.175880e-10 
             1189         1190         1191         1192         1193         1194 
     3.294210e-10 3.767528e-10 3.767528e-10 3.215323e-10 3.175880e-10 3.294210e-10 
             1195         1196         1197         1198         1199         1200 
     3.215323e-10 3.294210e-10 3.767528e-10 3.175880e-10 3.175880e-10 3.215323e-10 
             1201         1202         1203         1204         1205         1206 
     3.767528e-10 3.175880e-10 3.175880e-10 3.215323e-10 3.215323e-10 3.767528e-10 
             1207         1208         1209         1210         1211         1212 
     3.175880e-10 3.767528e-10 3.767528e-10 3.215323e-10 3.215323e-10 3.175880e-10 
             1213         1214         1215         1216         1217         1218 
     3.175880e-10 3.767528e-10 3.294210e-10 3.215323e-10 3.294210e-10 3.175880e-10 
             1219         1220         1221         1222         1223         1224 
     3.175880e-10 3.294210e-10 3.451983e-10 3.767528e-10 3.451983e-10 3.451983e-10 
             1225         1226         1227         1228         1229         1230 
     3.294210e-10 3.294210e-10 3.767528e-10 3.451983e-10 3.767528e-10 3.175880e-10 
             1231         1232         1233         1234         1235         1236 
     3.294210e-10 3.451983e-10 3.294210e-10 3.215323e-10 3.215323e-10 3.175880e-10 
             1237         1238         1239         1240         1241         1242 
     3.215323e-10 3.215323e-10 3.294210e-10 3.451983e-10 3.451983e-10 3.175880e-10 
             1243         1244         1245         1246         1247         1248 
     3.451983e-10 3.294210e-10 3.451983e-10 3.215323e-10 3.767528e-10 3.294210e-10 
             1249         1250         1251         1252         1253         1254 
     3.294210e-10 3.294210e-10 3.175880e-10 3.175880e-10 3.294210e-10 3.294210e-10 
             1255         1256         1257         1258         1259         1260 
     3.294210e-10 3.767528e-10 3.175880e-10 3.294210e-10 3.451983e-10 3.294210e-10 
             1261         1262         1263         1264         1265         1266 
     3.215323e-10 3.175880e-10 3.451983e-10 3.451983e-10 3.175880e-10 3.175880e-10 
             1267         1268         1269         1270         1271         1272 
     3.451983e-10 3.175880e-10 3.175880e-10 3.175880e-10 3.215323e-10 3.215323e-10 
             1273         1274         1275         1276         1277         1278 
     3.767528e-10 3.451983e-10 3.767528e-10 3.294210e-10 3.294210e-10 3.451983e-10 
             1279         1280         1281         1282         1283         1284 
     3.215323e-10 3.767528e-10 3.767528e-10 3.175880e-10 3.767528e-10 3.175880e-10 
             1285         1286         1287         1288         1289         1290 
     3.215323e-10 3.451983e-10 3.294210e-10 3.175880e-10 3.215323e-10 3.767528e-10 
             1291         1292         1293         1294         1295         1296 
     3.294210e-10 3.175880e-10 3.175880e-10 3.451983e-10 3.175880e-10 3.451983e-10 
             1297         1298         1299         1300         1301         1302 
     3.451983e-10 3.215323e-10 3.294210e-10 3.294210e-10 3.294210e-10 3.175880e-10 
             1303         1304         1305         1306         1307         1308 
     3.451983e-10 3.215323e-10 3.767528e-10 3.294210e-10 3.215323e-10 3.215323e-10 
             1309         1310         1311         1312         1313         1314 
     3.294210e-10 3.215323e-10 3.767528e-10 3.294210e-10 3.215323e-10 3.175880e-10 
             1315         1316         1317         1318         1319         1320 
     3.451983e-10 3.451983e-10 3.215323e-10 3.294210e-10 3.215323e-10 3.451983e-10 
             1321         1322         1323         1324         1325         1326 
     3.215323e-10 3.451983e-10 3.175880e-10 3.451983e-10 3.767528e-10 3.767528e-10 
             1327         1328         1329         1330         1331         1332 
     3.767528e-10 3.294210e-10 3.294210e-10 3.767528e-10 3.215323e-10 3.215323e-10 
             1333         1334         1335         1336         1337         1338 
     3.175880e-10 3.294210e-10 3.294210e-10 3.451983e-10 3.215323e-10 3.175880e-10 
             1339         1340         1341         1342         1343         1344 
     3.175880e-10 3.294210e-10 3.451983e-10 3.767528e-10 3.294210e-10 3.294210e-10 
             1345         1346         1347         1348         1349         1350 
     3.451983e-10 3.451983e-10 3.294210e-10 3.767528e-10 3.215323e-10 3.175880e-10 
             1351         1352         1353         1354         1355         1356 
     3.451983e-10 3.767528e-10 3.451983e-10 3.451983e-10 3.451983e-10 3.767528e-10 
             1357         1358         1359         1360         1361         1362 
     3.294210e-10 3.451983e-10 3.451983e-10 3.451983e-10 3.767528e-10 3.767528e-10 
             1363         1364         1365         1366         1367         1368 
     3.767528e-10 3.215323e-10 3.451983e-10 3.451983e-10 3.215323e-10 3.175880e-10 
             1369         1370         1371         1372         1373         1374 
     3.294210e-10 3.175880e-10 3.215323e-10 3.294210e-10 3.767528e-10 3.451983e-10 
             1375         1376         1377         1378         1379         1380 
     3.294210e-10 3.294210e-10 3.175880e-10 3.215323e-10 3.451983e-10 3.294210e-10 
             1381         1382         1383         1384         1385         1386 
     3.175880e-10 3.294210e-10 3.294210e-10 3.175880e-10 3.175880e-10 3.175880e-10 
             1387         1388         1389         1390         1391         1392 
     3.294210e-10 3.215323e-10 3.175880e-10 3.451983e-10 3.451983e-10 3.294210e-10 
             1393         1394         1395         1396         1397         1398 
     3.767528e-10 3.451983e-10 3.294210e-10 3.294210e-10 3.215323e-10 3.767528e-10 
             1399         1400         1401         1402         1403         1404 
     3.215323e-10 3.451983e-10 3.175880e-10 3.215323e-10 3.767528e-10 3.451983e-10 
             1405         1406         1407         1408         1409         1410 
     3.451983e-10 3.451983e-10 3.767528e-10 3.175880e-10 3.294210e-10 3.175880e-10 
             1411         1412         1413         1414         1415         1416 
     3.175880e-10 3.215323e-10 3.767528e-10 3.215323e-10 3.767528e-10 3.767528e-10 
             1417         1418         1419         1420         1421         1422 
     3.451983e-10 3.294210e-10 3.451983e-10 3.215323e-10 3.215323e-10 3.294210e-10 
             1423         1424         1425         1426         1427         1428 
     3.215323e-10 3.215323e-10 3.294210e-10 3.767528e-10 3.451983e-10 3.175880e-10 
             1429         1430         1431         1432         1433         1434 
     3.767528e-10 3.767528e-10 3.767528e-10 3.215323e-10 3.451983e-10 3.767528e-10 
             1435         1436         1437         1438         1439         1440 
     3.175880e-10 3.294210e-10 3.767528e-10 3.215323e-10 3.767528e-10 3.767528e-10 
             1441         1442         1443         1444         1445         1446 
     3.767528e-10 3.175880e-10 3.767528e-10 3.294210e-10 3.294210e-10 3.215323e-10 
             1447         1448         1449         1450         1451         1452 
     3.767528e-10 3.451983e-10 3.451983e-10 3.175880e-10 3.294210e-10 3.294210e-10 
             1453         1454         1455         1456         1457         1458 
     3.175880e-10 3.294210e-10 3.215323e-10 3.767528e-10 3.294210e-10 3.294210e-10 
             1459         1460         1461         1462         1463         1464 
     3.451983e-10 3.451983e-10 3.767528e-10 3.215323e-10 3.767528e-10 3.175880e-10 
             1465         1466         1467         1468         1469         1470 
     3.767528e-10 3.767528e-10 3.294210e-10 3.175880e-10 3.215323e-10 3.294210e-10 
             1471         1472         1473         1474         1475         1476 
     3.215323e-10 3.451983e-10 3.294210e-10 3.215323e-10 3.451983e-10 3.767528e-10 
             1477         1478         1479         1480         1481         1482 
     3.175880e-10 3.451983e-10 3.215323e-10 3.175880e-10 3.215323e-10 3.294210e-10 
             1483         1484         1485         1486         1487         1488 
     3.215323e-10 3.294210e-10 3.451983e-10 3.175880e-10 3.451983e-10 3.294210e-10 
             1489         1490         1491         1492         1493         1494 
     3.451983e-10 3.767528e-10 3.175880e-10 3.175880e-10 3.451983e-10 3.215323e-10 
             1495         1496         1497         1498         1499         1500 
     3.767528e-10 3.215323e-10 3.175880e-10 3.451983e-10 3.767528e-10 3.175880e-10 
             1501         1502         1503         1504         1505         1506 
     3.294210e-10 3.294210e-10 3.294210e-10 3.175880e-10 3.767528e-10 3.175880e-10 
             1507         1508         1509         1510         1511         1512 
     3.175880e-10 3.767528e-10 3.451983e-10 3.451983e-10 3.294210e-10 3.767528e-10 
             1513         1514         1515         1516         1517         1518 
     3.767528e-10 3.175880e-10 3.294210e-10 3.767528e-10 3.215323e-10 3.451983e-10 
             1519         1520         1521         1522         1523         1524 
     3.175880e-10 3.294210e-10 3.294210e-10 3.294210e-10 3.175880e-10 3.294210e-10 
             1525         1526         1527         1528         1529         1530 
     3.767528e-10 3.767528e-10 3.451983e-10 3.294210e-10 3.175880e-10 3.175880e-10 
             1531         1532         1533         1534         1535         1536 
     3.215323e-10 3.767528e-10 3.175880e-10 3.175880e-10 3.294210e-10 3.294210e-10 
             1537         1538         1539         1540         1541         1542 
     3.451983e-10 3.767528e-10 3.767528e-10 3.175880e-10 3.451983e-10 3.451983e-10 
             1543         1544         1545         1546         1547         1548 
     3.767528e-10 3.451983e-10 3.215323e-10 3.294210e-10 3.767528e-10 3.175880e-10 
             1549         1550         1551         1552         1553         1554 
     3.215323e-10 3.175880e-10 3.215323e-10 3.175880e-10 3.215323e-10 3.294210e-10 
             1555         1556         1557         1558         1559         1560 
     3.767528e-10 3.451983e-10 3.767528e-10 3.175880e-10 3.767528e-10 3.767528e-10 
             1561         1562         1563         1564         1565         1566 
     3.215323e-10 3.767528e-10 3.451983e-10 3.451983e-10 3.294210e-10 3.294210e-10 
             1567         1568         1569         1570         1571         1572 
     3.451983e-10 3.294210e-10 3.175880e-10 3.767528e-10 3.175880e-10 3.294210e-10 
             1573         1574         1575         1576         1577         1578 
     3.175880e-10 3.175880e-10 3.767528e-10 3.294210e-10 3.175880e-10 3.175880e-10 
             1579         1580         1581         1582         1583         1584 
     3.451983e-10 3.215323e-10 3.175880e-10 3.767528e-10 3.294210e-10 3.294210e-10 
             1585         1586         1587         1588         1589         1590 
     3.294210e-10 3.175880e-10 3.767528e-10 3.175880e-10 3.451983e-10 3.215323e-10 
             1591         1592         1593         1594         1595         1596 
     3.294210e-10 3.215323e-10 3.451983e-10 3.175880e-10 3.767528e-10 3.175880e-10 
             1597         1598         1599         1600         1601         1602 
     3.294210e-10 3.294210e-10 3.451983e-10 3.175880e-10 3.451983e-10 3.215323e-10 
             1603         1604         1605         1606         1607         1608 
     3.451983e-10 3.451983e-10 3.767528e-10 3.451983e-10 3.294210e-10 3.175880e-10 
             1609         1610         1611         1612         1613         1614 
     3.294210e-10 3.175880e-10 3.294210e-10 3.451983e-10 3.175880e-10 3.767528e-10 
             1615         1616         1617         1618         1619         1620 
     3.215323e-10 3.294210e-10 3.215323e-10 3.175880e-10 3.451983e-10 3.175880e-10 
             1621         1622         1623         1624         1625         1626 
     3.767528e-10 3.175880e-10 3.451983e-10 3.175880e-10 3.767528e-10 3.294210e-10 
             1627         1628         1629         1630         1631         1632 
     3.215323e-10 3.451983e-10 3.215323e-10 3.767528e-10 3.175880e-10 3.294210e-10 
             1633         1634         1635         1636         1637         1638 
     3.294210e-10 3.215323e-10 3.767528e-10 3.175880e-10 3.294210e-10 3.451983e-10 
             1639         1640         1641         1642         1643         1644 
     3.451983e-10 3.767528e-10 3.215323e-10 3.215323e-10 3.175880e-10 3.215323e-10 
             1645         1646         1647         1648         1649         1650 
     3.294210e-10 3.451983e-10 3.215323e-10 3.767528e-10 3.175880e-10 3.215323e-10 
             1651         1652         1653         1654         1655         1656 
     3.294210e-10 3.215323e-10 3.451983e-10 3.294210e-10 3.215323e-10 3.215323e-10 
             1657         1658         1659         1660         1661         1662 
     3.767528e-10 3.175880e-10 3.451983e-10 3.215323e-10 3.451983e-10 3.294210e-10 
             1663         1664         1665         1666         1667         1668 
     3.767528e-10 3.294210e-10 3.175880e-10 3.294210e-10 3.215323e-10 3.451983e-10 
             1669         1670         1671         1672         1673         1674 
     3.294210e-10 3.451983e-10 3.175880e-10 3.215323e-10 3.294210e-10 3.215323e-10 
             1675         1676         1677         1678         1679         1680 
     3.215323e-10 3.767528e-10 3.294210e-10 3.451983e-10 3.451983e-10 3.451983e-10 
             1681         1682         1683         1684         1685         1686 
     3.294210e-10 3.175880e-10 3.767528e-10 3.451983e-10 3.215323e-10 3.451983e-10 
             1687         1688         1689         1690         1691         1692 
     3.294210e-10 3.215323e-10 3.215323e-10 3.215323e-10 3.215323e-10 3.215323e-10 
             1693         1694         1695         1696         1697         1698 
     3.451983e-10 3.215323e-10 3.767528e-10 3.294210e-10 3.451983e-10 3.175880e-10 
             1699         1700         1701         1702         1703         1704 
     3.767528e-10 3.767528e-10 3.294210e-10 3.451983e-10 3.767528e-10 3.294210e-10 
             1705         1706         1707         1708         1709         1710 
     3.175880e-10 3.294210e-10 3.175880e-10 3.451983e-10 3.767528e-10 3.215323e-10 
             1711         1712         1713         1714         1715         1716 
     3.215323e-10 3.215323e-10 3.215323e-10 3.294210e-10 3.215323e-10 3.294210e-10 
             1717         1718         1719         1720         1721         1722 
     3.215323e-10 3.294210e-10 3.451983e-10 3.451983e-10 3.294210e-10 3.175880e-10 
             1723         1724         1725         1726         1727         1728 
     3.767528e-10 3.294210e-10 3.175880e-10 3.294210e-10 3.767528e-10 3.451983e-10 
             1729         1730         1731         1732         1733         1734 
     3.175880e-10 3.215323e-10 3.215323e-10 3.767528e-10 3.451983e-10 3.175880e-10 
             1735         1736         1737         1738         1739         1740 
     3.294210e-10 3.215323e-10 3.451983e-10 3.451983e-10 3.215323e-10 3.175880e-10 
             1741         1742         1743         1744         1745         1746 
     3.294210e-10 3.451983e-10 3.175880e-10 3.294210e-10 3.294210e-10 3.767528e-10 
             1747         1748         1749         1750         1751         1752 
     3.215323e-10 3.215323e-10 3.215323e-10 3.215323e-10 3.767528e-10 3.215323e-10 
             1753         1754         1755         1756         1757         1758 
     3.175880e-10 3.767528e-10 3.215323e-10 3.767528e-10 3.451983e-10 3.215323e-10 
             1759         1760         1761         1762         1763         1764 
     3.175880e-10 3.451983e-10 3.215323e-10 3.215323e-10 3.451983e-10 3.215323e-10 
             1765         1766         1767         1768         1769         1770 
     3.767528e-10 3.294210e-10 3.451983e-10 3.451983e-10 3.767528e-10 3.451983e-10 
             1771         1772         1773         1774         1775         1776 
     3.767528e-10 3.451983e-10 3.767528e-10 3.175880e-10 3.175880e-10 3.451983e-10 
             1777         1778         1779         1780         1781         1782 
     3.451983e-10 3.767528e-10 3.451983e-10 3.767528e-10 3.175880e-10 3.175880e-10 
             1783         1784         1785         1786         1787         1788 
     3.175880e-10 3.294210e-10 3.215323e-10 3.294210e-10 3.767528e-10 3.767528e-10 
             1789         1790         1791         1792         1793         1794 
     3.767528e-10 3.451983e-10 3.294210e-10 3.767528e-10 3.175880e-10 3.294210e-10 
             1795         1796         1797         1798         1799         1800 
     3.215323e-10 3.451983e-10 3.451983e-10 3.451983e-10 3.175880e-10 3.175880e-10 
             1801         1802         1803         1804         1805         1806 
     3.294210e-10 3.175880e-10 3.767528e-10 3.294210e-10 3.451983e-10 3.451983e-10 
             1807         1808         1809         1810         1811         1812 
     3.215323e-10 3.294210e-10 3.175880e-10 3.767528e-10 3.215323e-10 3.451983e-10 
             1813         1814         1815         1816         1817         1818 
     3.215323e-10 3.294210e-10 3.175880e-10 3.175880e-10 3.175880e-10 3.451983e-10 
             1819         1820         1821         1822         1823         1824 
     3.451983e-10 3.215323e-10 3.175880e-10 3.294210e-10 3.215323e-10 3.767528e-10 
             1825         1826         1827         1828         1829         1830 
     3.451983e-10 3.451983e-10 3.175880e-10 3.451983e-10 3.175880e-10 3.175880e-10 
             1831         1832         1833         1834         1835         1836 
     3.451983e-10 3.215323e-10 3.767528e-10 3.294210e-10 3.451983e-10 3.767528e-10 
             1837         1838         1839         1840         1841         1842 
     3.451983e-10 3.767528e-10 3.767528e-10 3.767528e-10 3.767528e-10 3.767528e-10 
             1843         1844         1845         1846         1847         1848 
     3.215323e-10 3.294210e-10 3.767528e-10 3.215323e-10 3.175880e-10 3.294210e-10 
             1849         1850         1851         1852         1853         1854 
     3.451983e-10 3.175880e-10 3.451983e-10 3.215323e-10 3.215323e-10 3.175880e-10 
             1855         1856         1857         1858         1859         1860 
     3.294210e-10 3.451983e-10 3.294210e-10 3.451983e-10 3.767528e-10 3.215323e-10 
             1861         1862         1863         1864         1865         1866 
     3.215323e-10 3.215323e-10 3.767528e-10 3.215323e-10 3.215323e-10 3.767528e-10 
             1867         1868         1869         1870         1871         1872 
     3.175880e-10 3.294210e-10 3.294210e-10 3.767528e-10 3.215323e-10 3.451983e-10 
             1873         1874         1875         1876         1877         1878 
     3.294210e-10 3.767528e-10 3.294210e-10 3.767528e-10 3.215323e-10 3.294210e-10 
             1879         1880         1881         1882         1883         1884 
     3.294210e-10 3.175880e-10 3.767528e-10 3.767528e-10 3.294210e-10 3.175880e-10 
             1885         1886         1887         1888         1889         1890 
     3.175880e-10 3.294210e-10 3.294210e-10 3.294210e-10 3.294210e-10 3.451983e-10 
             1891         1892         1893         1894         1895         1896 
     3.175880e-10 3.294210e-10 3.294210e-10 3.215323e-10 3.215323e-10 3.215323e-10 
             1897         1898         1899         1900         1901         1902 
     3.215323e-10 3.767528e-10 3.294210e-10 3.294210e-10 3.767528e-10 3.767528e-10 
             1903         1904         1905         1906         1907         1908 
     3.215323e-10 3.767528e-10 3.767528e-10 3.175880e-10 3.175880e-10 3.175880e-10 
             1909         1910         1911         1912         1913         1914 
     3.451983e-10 3.215323e-10 3.215323e-10 3.215323e-10 3.215323e-10 3.175880e-10 
             1915         1916         1917         1918         1919         1920 
     3.451983e-10 3.767528e-10 3.451983e-10 3.175880e-10 3.215323e-10 3.215323e-10 
             1921         1922         1923         1924         1925         1926 
     3.294210e-10 3.451983e-10 3.175880e-10 3.175880e-10 3.451983e-10 3.451983e-10 
             1927         1928         1929         1930         1931         1932 
     3.215323e-10 3.294210e-10 3.215323e-10 3.451983e-10 3.294210e-10 3.175880e-10 
             1933         1934         1935         1936         1937         1938 
     3.215323e-10 3.451983e-10 3.294210e-10 3.451983e-10 3.175880e-10 3.175880e-10 
             1939         1940         1941         1942         1943         1944 
     3.175880e-10 3.215323e-10 3.175880e-10 3.215323e-10 3.451983e-10 3.215323e-10 
             1945         1946         1947         1948         1949         1950 
     3.294210e-10 3.451983e-10 3.294210e-10 3.175880e-10 3.175880e-10 3.294210e-10 
             1951         1952         1953         1954         1955         1956 
     3.451983e-10 3.767528e-10 3.294210e-10 3.175880e-10 3.175880e-10 3.767528e-10 
             1957         1958         1959         1960         1961         1962 
     3.294210e-10 3.767528e-10 3.215323e-10 3.175880e-10 3.451983e-10 3.294210e-10 
             1963         1964         1965         1966         1967         1968 
     3.294210e-10 3.767528e-10 3.767528e-10 3.294210e-10 3.767528e-10 3.294210e-10 
             1969         1970         1971         1972         1973         1974 
     3.294210e-10 3.451983e-10 3.767528e-10 3.215323e-10 3.451983e-10 3.767528e-10 
             1975         1976         1977         1978         1979         1980 
     3.451983e-10 3.451983e-10 3.294210e-10 3.767528e-10 3.175880e-10 3.294210e-10 
             1981         1982         1983         1984         1985         1986 
     3.215323e-10 3.767528e-10 3.215323e-10 3.294210e-10 3.294210e-10 3.215323e-10 
             1987         1988         1989         1990         1991         1992 
     3.767528e-10 3.215323e-10 3.175880e-10 3.215323e-10 3.175880e-10 3.215323e-10 
             1993         1994         1995         1996         1997         1998 
     3.294210e-10 3.451983e-10 3.767528e-10 3.215323e-10 3.215323e-10 3.451983e-10 
             1999         2000 
     3.215323e-10 3.294210e-10
    #+end_example

***** Original function
     #+begin_src R :results output :session :exports both
       data(engel)
       rq_bis <- function (formula, tau = 0.5, data, subset, weights, na.action, 
                 method = "br", model = TRUE, contrasts = NULL, ...) 
       {
           call <- match.call()
           mf <- match.call(expand.dots = FALSE)
           m <- match(c("formula", "data", "subset", "weights", "na.action"), 
                      names(mf), 0)
           mf <- mf[c(1, m)]
           mf$drop.unused.levels <- TRUE
           mf[[1]] <- as.name("model.frame")
           mf <- eval.parent(mf)
           if (method == "model.frame") 
               return(mf)
           mt <- attr(mf, "terms")
           weights <- as.vector(model.weights(mf))
           Y <- model.response(mf)
           X <- model.matrix(mt, mf, contrasts)
            eps <- .Machine$double.eps^(2/3)
            Rho <- function(u, tau) u * (tau - (u < 0))
            if (length(tau) > 1) {
                if (any(tau < 0) || any(tau > 1)) 
                    stop("invalid tau:  taus should be >= 0 and <= 1")
                if (any(tau == 0)) 
                    tau[tau == 0] <- eps
                if (any(tau == 1)) 
                    tau[tau == 1] <- 1 - eps
                coef <- matrix(0, ncol(X), length(tau))
                rho <- rep(0, length(tau))
                fitted <- resid <- matrix(0, nrow(X), length(tau))
                for (i in 1:length(tau)) {
                    z <- {
                        if (length(weights)) 
                            rq.wfit(X, Y, tau = tau[i], weights, method, 
                                    ...)
                        else rq.fit(X, Y, tau = tau[i], method, ...)
                    }
                    coef[, i] <- z$coefficients
                    resid[, i] <- z$residuals
                    rho[i] <- sum(Rho(z$residuals, tau[i]))
                    fitted[, i] <- Y - z$residuals
                }
                taulabs <- paste("tau=", format(round(tau, 3)))
                dimnames(coef) <- list(dimnames(X)[[2]], taulabs)
                dimnames(resid) <- list(dimnames(X)[[1]], taulabs)
                fit <- z
                fit$coefficients <- coef
                fit$residuals <- resid
                fit$fitted.values <- fitted
                if (method == "lasso") 
                    class(fit) <- c("lassorqs", "rqs")
                else if (method == "scad") 
                    class(fit) <- c("scadrqs", "rqs")
                else class(fit) <- "rqs"
            }
            else {
                process <- (tau < 0 || tau > 1)
                if (tau == 0) 
                    tau <- eps
                if (tau == 1) 
                    tau <- 1 - eps
                fit <- {
                    if (length(weights)) 
                        rq.wfit(X, Y, tau = tau, weights, method, ...)
                    else rq.fit(X, Y, tau = tau, method, ...)
                }
                if (process) 
                    rho <- list(x = fit$sol[1, ], y = fit$sol[3, ])
                else {
                    dimnames(fit$residuals) <- list(dimnames(X)[[1]], 
                                                    NULL)
                    rho <- sum(Rho(fit$residuals, tau))
                }
                if (method == "lasso") 
                    class(fit) <- c("lassorq", "rq")
                else if (method == "scad") 
                    class(fit) <- c("scadrq", "rq")
                else class(fit) <- ifelse(process, "rq.process", "rq")
            }
            fit$na.action <- attr(mf, "na.action")
            fit$formula <- formula
            fit$terms <- mt
            fit$xlevels <- .getXlevels(mt, mf)
            fit$call <- call
            fit$tau <- tau
            fit$weights <- weights
            fit$residuals <- drop(fit$residuals)
            fit$rho <- rho
            fit$method <- method
            fit$fitted.values <- drop(fit$fitted.values)
            attr(fit, "na.message") <- attr(m, "na.message")
            if (model) 
                fit$model <- mf
            fit
       }
       rq_bis(data=engel, formula=foodexp ~ income)
     #+end_src

     #+RESULTS:
     : Call:
     : rq_bis(formula = foodexp ~ income, data = engel)
     : 
     : Coefficients:
     : (Intercept)      income 
     :  81.4822474   0.5601806 
     : 
     : Degrees of freedom: 235 total; 233 residual

**** Summary.rq
     #+begin_src R :results output :session :exports both
       summary_bis <-function (object, se = NULL, covariance = FALSE, hs = TRUE, ...) 
       {
           if (object$method == "lasso") 
               stop("no inference for lasso'd rq fitting: try rqss (if brave)")
           mt <- terms(object)
           m <- model.frame(object)
           y <- model.response(m)
           x <- model.matrix(mt, m, contrasts = object$contrasts)
           wt <- as.vector(model.weights(object$model))
           tau <- object$tau
           eps <- .Machine$double.eps^(1/2)
           coef <- coefficients(object)
           if (is.matrix(coef)) 
               coef <- coef[, 1]
           vnames <- dimnames(x)[[2]]
           resid <- object$residuals
           n <- length(resid)
           p <- length(coef)
           rdf <- n - p
           if (!is.null(wt)) {
               resid <- resid * wt
               x <- x * wt
               y <- y * wt
           }
           if (is.null(se)) {
               if (n < 1001 & covariance == FALSE) 
                   se <- "rank"
               else se <- "nid"
           }
           if (se == "rank") {
               f <- rq.fit.br(x, y, tau = tau, ci = TRUE, ...)
           }
           if (se == "iid") {
               xxinv <- diag(p)
               xxinv <- backsolve(qr(x)$qr[1:p, 1:p, drop = FALSE], 
                   xxinv)
               xxinv <- xxinv %*% t(xxinv)
               pz <- sum(abs(resid) < eps)
               h <- max(p + 1, ceiling(n * bandwidth.rq(tau, n, hs = hs)))
               ir <- (pz + 1):(h + pz + 1)
               ord.resid <- sort(resid[order(abs(resid))][ir])
               xt <- ir/(n - p)
               sparsity <- rq(ord.resid ~ xt)$coef[2]
               cov <- sparsity^2 * xxinv * tau * (1 - tau)
               scale <- 1/sparsity
               serr <- sqrt(diag(cov))
           }
           else if (se == "nid") {
               h <- bandwidth.rq(tau, n, hs = hs)
               if (tau + h > 1) 
                   stop("tau + h > 1:  error in summary.rq")
               if (tau - h < 0) 
                   stop("tau - h < 0:  error in summary.rq")
               bhi <- rq.fit.fnb(x, y, tau = tau + h)$coef
               blo <- rq.fit.fnb(x, y, tau = tau - h)$coef
               dyhat <- x %*% (bhi - blo)
               if (any(dyhat <= 0)) 
                   warning(paste(sum(dyhat <= 0), "non-positive fis"))
               f <- pmax(0, (2 * h)/(dyhat - eps))
               fxxinv <- diag(p)
               fxxinv <- backsolve(qr(sqrt(f) * x)$qr[1:p, 1:p, drop = FALSE], 
                   fxxinv)
               fxxinv <- fxxinv %*% t(fxxinv)
               cov <- tau * (1 - tau) * fxxinv %*% crossprod(x) %*% 
                   fxxinv
               scale <- mean(f)
               serr <- sqrt(diag(cov))
           }
           else if (se == "ker") {
               h <- bandwidth.rq(tau, n, hs = hs)
               if (tau + h > 1) 
                   stop("tau + h > 1:  error in summary.rq")
               if (tau - h < 0) 
                   stop("tau - h < 0:  error in summary.rq")
               uhat <- c(y - x %*% coef)
               h <- (qnorm(tau + h) - qnorm(tau - h)) * min(sqrt(var(uhat)), 
                   (quantile(uhat, 0.75) - quantile(uhat, 0.25))/1.34)
               f <- dnorm(uhat/h)/h
               fxxinv <- diag(p)
               fxxinv <- backsolve(qr(sqrt(f) * x)$qr[1:p, 1:p, drop = FALSE], 
                   fxxinv)
               fxxinv <- fxxinv %*% t(fxxinv)
               cov <- tau * (1 - tau) * fxxinv %*% crossprod(x) %*% 
                   fxxinv
               scale <- mean(f)
               serr <- sqrt(diag(cov))
           }
           else if (se == "boot") {
               B <- boot.rq(x, y, tau, ...)
               cov <- cov(B)
               serr <- sqrt(diag(cov))
           }
           if (se == "rank") {
               coef <- f$coef
           }
           else {
               coef <- array(coef, c(p, 4))
               dimnames(coef) <- list(vnames, c("Value", "Std. Error", 
                   "t value", "Pr(>|t|)"))
               coef[, 2] <- serr
               coef[, 3] <- coef[, 1]/coef[, 2]
               coef[, 4] <- if (rdf > 0) 
                   2 * (1 - pt(abs(coef[, 3]), rdf))
               else NA
           }
           object <- object[c("call", "terms")]
           if (covariance == TRUE) {
               object$cov <- cov
               if (se == "iid") 
                   object$scale <- scale
               if (se %in% c("nid", "ker")) {
                   object$Hinv <- fxxinv
                   object$J <- crossprod(x)
                   object$scale <- scale
               }
               else if (se == "boot") {
                   object$B <- B
               }
           }
           object$coefficients <- coef
           object$residuals <- resid
           object$rdf <- rdf
           object$tau <- tau
           class(object) <- "summary.rq"
           object
       }

     summary_bis(fit)
     #+end_src

     #+RESULTS:
     : Error in base::backsolve(r, x, k = k, upper.tri = upper.tri, transpose = transpose,  (from #61) : 
     :   matrice singuliÃ¨re dans 'backsolve'. Premier zÃ©ro sur la diagonale [1]

** 2016-04-13
*** Org-mode
**** TODO Take a look at task scheduling
**** DONE Take a look at Luka's paper
*** format_data_detailed.rb V2                                         :Script:
    New version of this script because we don't care about exactly
    what is the size of the image what we just need is an order:
     #+BEGIN_SRC ruby :tangle ../scripts/format_data_detailed_v2.rb
       require 'yaml'
       require 'pp'
       require 'csv'
       input = ARGV[0]

       tab = []
       tab_temp = []
       head = []

       # h = YAML::load(File::open(input).read)
       hash = YAML::load_documents(File::open(input).read){ |doc|

         if head.empty?
           doc.first[0].each {|key, value| head.push key } 
           head.push :image_size_index
           head.push :run_index
           head.push :time_per_pixel
         end

         doc.each {|combination, sizes| 
           size_index = 0
           sizes.each{|size, runs|
             runs.each_index{|index|
               tab_temp = []    
               combination.each { |option, option_value|
                 tab_temp.push option_value
               }
               tab_temp.push size_index
               tab_temp.push index
               tab_temp.push runs[index]
               tab.push tab_temp
             }
             size_index += 1
           }
         }
       }

       CSV.open("/tmp/test.csv", "w"){ |f|
         f << head
         tab.each{ |e|
           f << e
         }
       }

     #+END_SRC
*** TODO Study if there is any warmup effect
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data_detailed_v2.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end.yaml
     #+end_src

     #+RESULTS:

    By fixing some parameters we can see that we have a warm up
    effect. More precisely we clearly see it with images of size 768 x
    432 which is the first image_size being tested after the kernel is
    compiled.
    #+begin_src R :results output graphics :file img/20160402/pilipili2/bp_run_index.png :exports both :width 800 :height 600 :session
       library(ggplot2)

       df = read.csv("/tmp/test.csv",strip.white=T,header=T)
       d <- df[df$vector_length == 1 & df$threads_number == 32 & df$lws_y == 2 & df$elements_number == 1,]
       ggplot(d) +
           aes(x=factor(run_index), y=time_per_pixel) +
           facet_grid(. ~ image_size_index) +
           geom_hline(yintercept=min(d$time_per_pixel), color="red", linetype=2) +
           geom_boxplot()
    #+end_src

    #+RESULTS:
    [[file:img/20160402/pilipili2/bp_run_index.png]]
    
    From a more global view we still see the impact of the warm
    up:
    #+begin_src R :results output graphics :file img/20160402/pilipili2/points_run_index.png :exports both :width 800 :height 600 :session
      library(plyr)
      d2 <- df[df$lws_y == 2 & df$elements_number == 1 & df$threads_number == 32,]

      df2 = ddply(d2,.(run_index,vector_length,image_size_index), summarize, 
                  mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))


      ggplot(d2) +
          geom_jitter(aes(x=factor(run_index), y=time_per_pixel, color=factor(load_overlap), shape=factor(temporary_size))) + 
          geom_errorbar(data=df2,aes(x=factor(run_index),y=mean, ymin=mean-err, ymax=mean+err)) +
          facet_grid(vector_length ~ image_size_index, scales="free_y", labeller=label_both) 
    #+end_src

    #+RESULTS:
    [[file:img/20160402/pilipili2/points_run_index.png]]

    Lets look at the variability:
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      library(ggplot2)
      library(plyr)
      df = read.csv("/tmp/test.csv",strip.white=T,header=T)
      d2 <- df[df$lws_y == 1 & df$elements_number == 8 & df$y_component_number == 4 & df$threads_number == 128,]

      df2 = ddply(d2,.(run_index,vector_length,image_size_index), summarize, 
                  mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))


      ggplot(d2) +
          # geom_jitter(aes(x=factor(run_index), y=time_per_pixel, color=factor(load_overlap), shape=factor(temporary_size))) + 
          geom_line(aes(x=run_index, y=time_per_pixel, color=factor(load_overlap),linetype=factor(temporary_size))) + 
          geom_errorbar(data=df2,aes(x=run_index,y=mean, ymin=mean-err, ymax=mean+err)) +
          facet_grid(vector_length ~ image_size_index, scales="free_y", labeller=label_both) 
    #+end_src    

    #+RESULTS:
    [[file:/tmp/babel-6458re_/figure64585fp.png]]

    Let's focus on the first image size and try to quantify this effect:
    #+begin_src R :results output :session :exports both
      library(plyr)
      d2 <- df[df$lws_y == 2 & df$elements_number == 1 & df$image_size_index == 0,]

      df2 = ddply(d2,.(run_index, vector_length, threads_number), summarize, 
                  mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

      ggplot(d2) +
          geom_jitter(aes(x=factor(run_index), y=time_per_pixel, color=factor(load_overlap), shape=factor(temporary_size))) + 
          geom_errorbar(data=df2,aes(x=factor(run_index),y=mean, ymin=mean-err, ymax=mean+err)) +
          facet_grid(vector_length ~ threads_number, scales="free_y", labeller=label_both) 
    #+end_src

    #+RESULTS:

    We can see that the majority speedup due to the warmup effect is
    almost insignificant:
    #+begin_src R :results output graphics :file img/20160402/pilipili2/run_index_speedup.png :exports both :width 600 :height 400 :session
      # d2 <- df[df$lws_y == 2 & df$elements_number == 1 & df$image_size_index == 0,]
      d2 <- df[df$image_size_index == 0,]
      warmup <- c()
      for(row in 1:nrow(d2)){
            warmup[row] <- d2[row - (row-1) %% 4,]$time_per_pixel / d2[row,]$time_per_pixel
      }

      d2$warmup <- warmup

      ggplot(d2[d2$run_index > 0 ,]) +
          aes(x=factor(run_index), y=warmup) +
          ggtitle("Speed up brought by the warmup effect on the first tested size of images") +
          geom_boxplot()
    #+end_src

    #+RESULTS:
    [[file:img/20160402/pilipili2/run_index_speedup.png]]

*** Discussion with Arnaud                                           :Arnaud:
    We can not expent that the minimum follow the progression of the
    mean because we don't anything about the noise. Which would work
    if the noise was gaussian. That's why tyhe mean is not a correct
    indicator. 
** 2016-04-18
*** Working on full space pilipili2 GPU 
**** Results
     - [[file:../data/2016_04_08/pilipili2/18_08_24/Info18_08_24.org][Conditions of experiment]]
     - [[file:../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_parameters.yaml][Search space]]
     - [[file:../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end.yaml][Results of experiments]]
**** Data cleaning                                                   :Script:
    This script remove informations such the image size and the
    differents runs
    #+BEGIN_SRC ruby :tangle ../scripts/clean_data.rb
      require 'yaml'
      input = ARGV[0]
      
      cleaned_file = File.dirname(input) + "/" + File.basename(input,".yaml") + "_cleaned.yaml"
      if File.exist?(cleaned_file) then
        puts("#{input} already cleaned, nothing to be done") 
        exit
      end
      
      hash = YAML::load_documents(File::open(input).read){ |doc|
        doc.each {|combination, sizes| 
          results = []
          sizes.each{|size, runs|
            results.push(runs.min)
            doc[combination].delete size
          }
          doc[combination] = results.reduce(:+) / results.length
        }
      }
      
      File.open(cleaned_file , "w") { |f|
        f.write(hash.first.to_yaml)
      }
    #+END_SRC

    #+RESULTS:
**** Hierarchic to linear                                            :Script:
     #+BEGIN_SRC ruby :tangle ../scripts/convert_hierarchic_to_linear.rb
       require 'yaml'
               
       input = ARGV[0]

       hash = YAML::load_documents(File::open(input).read){ |doc|
         doc.each { |combination, time|
           
           combination[:lws_x] = combination[:threads_number]/combination[:lws_y]
           combination.delete(:threads_number)
           combination[:x_component_number] = combination[:elements_number]/combination[:y_component_number]
           combination.delete(:elements_number)
         }
       }

       converted_file = File.dirname(input) + "/" + File.basename(input,".yaml") + "_linear.yaml"
       File.open(converted_file , "w") { |f|
         f.write(hash.first.to_yaml)
       }
     #+END_SRC

**** DONE Search space characteristics                             :Analysis:
     _WARNING_ : The visualization using the speedup can lead to
     incorrect interpretation because we loose the notion of distance
     between the different bins.

     Generate clean data if note already done:
     #+begin_src sh :results output :exports both
       ruby ../scripts/clean_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end.yaml
     #+end_src

     #+RESULTS:
     : ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end.yaml already cleaned, nothing to be done

     Generate csv:
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
     #+end_src

     #+RESULTS:

     Size of the search space:
     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       nrow(df)
       summary(df)
     #+end_src

     #+RESULTS:
     #+begin_example
     [1] 23120
      elements_number  y_component_number vector_length   temporary_size 
      Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
      1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
      Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
      Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
      3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
      Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
      vector_recompute load_overlap  threads_number       lws_y        
      true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                       true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                     Median : 256.0   Median :  16.00  
                                     Mean   : 368.1   Mean   :  73.58  
                                     3rd Qu.: 512.0   3rd Qu.:  64.00  
                                     Max.   :1024.0   Max.   :1024.00  
      time_per_pixel     
      Min.   :1.165e-10  
      1st Qu.:3.028e-10  
      Median :7.125e-10  
      Mean   :2.013e-09  
      3rd Qu.:2.001e-09  
      Max.   :4.452e-08
#+end_example

     When looking at repartions of the combinations with an histogram
     we see there are a lot of good combinations and very few bad
     ones. The dotted red line represents the median and the blue one
     the 1st and third quartile. 50% of the combinations are below
     7.125e-10. More over there also high probability to fall on
     combinations under 2e-10. So with a such search space it seems
     easy to find good combinations because they are alomst
     everywhere. 
     #+begin_src R :results output graphics :file img/20160402/pilipili2/combinations_repartion.png :exports both :width 800 :height 600 :session
       library(ggplot2)
       ggplot(df) +
           aes(time_per_pixel) +
           theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
           geom_vline(xintercept = median(df$time_per_pixel), color="red", linetype=2) +
           geom_vline(xintercept = quantile(df$time_per_pixel, prob=c(0.25,0.75)), color="blue", linetype=2) +
           geom_histogram(binwidth=1e-10, aes(y=..density.. * 1e-10))
     #+end_src

     #+RESULTS:
     [[file:img/20160402/pilipili2/combinations_repartion.png]]

     Now lets see the search space in a more qualitative way by
     examinating how far are the different combinations from the global
     minimum. This will tell us how much a combination is good. To do
     so, we make the ratio of the time per pixel over the global minium
     this gives us the amount of speedup achieved compared to the best
     combination. By looking the previous histogram it seems that we
     had a lot of interesting combinations but in fact we figure out
     that most of them are not good because as we can see below the
     majority only achieves less than 25% of the maximal
     performances. And 75% does not even reach 50% of the maximal
     performances: 
     #+begin_src R :results output graphics :file img/20160402/pilipili2/combinations_speedup.png :exports both :width 600 :height 400 :session
       speedup <- c()
       for(i in 1:nrow(df)){
           speedup[i] <- min(df$time_per_pixel) / df[i,]$time_per_pixel      
       }
       
       df$speedup <- speedup
       
       ggplot(df) +
           aes(speedup) +
           theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
           geom_vline(xintercept = median(df$speedup), color="darkgreen", linetype=2) +
           geom_vline(xintercept = quantile(df$speedup, prob=c(0.25,0.75)), color="blue", linetype=2) +
           geom_histogram(binwidth=.05, aes(y=..density.. * 0.05), color="white", fill="gray0")
     #+end_src

     #+RESULTS:
     [[file:img/20160402/pilipili2/combinations_speedup.png]]
    
     The search more complicated than at first sight because in fact we
     have only few combinations that are really good and the others are
     pretty far from the global optimum.

     In fact we should think in term of slowdown. In fact this search
     space is simple, there is a lot of good combinations that is why
     the random and GA perform well:
     #+begin_src R :results output graphics :file img/20160402/pilipili2/combinations_slowdown.png :exports results :width 800 :height 600 :session
       library(ggplot2)
       library(grid)
       library(gridExtra)

       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

       slowdown <-  df$time_per_pixel / min(df$time_per_pixel)
       df$slowdown <- slowdown

       p2 <- qplot(data=df) +
           geom_histogram(aes(x=slowdown,y=..density.. * 0.05), binwidth=.05) +
           theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
           geom_vline(xintercept = median(slowdown), color="darkgreen", linetype=2) +
           geom_vline(xintercept = quantile(slowdown, prob=c(0.25,0.75)), color="blue", linetype=2) +
           geom_vline(xintercept = mean(slowdown), color="red", linetype=2) +
           ggtitle("Density of the combinations slowdown compared to the best") +
           labs(y="Density", x="Slowdown")

       p3 <- qplot(data=df) +
           geom_histogram(aes(x=slowdown,y=..density.. * 0.05), binwidth=.05) +
           theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
           geom_vline(xintercept = median(slowdown), color="darkgreen", linetype=2) +
           geom_vline(xintercept = quantile(slowdown, prob=c(0.25,0.75)), color="blue", linetype=2) +
           geom_vline(xintercept = mean(slowdown), color="red", linetype=2) +
           ggtitle("Density of the combinations slowdown compared to the best") +
           coord_cartesian(xlim=c(.9,17)) +
           labs(y="Density", x="Slowdown")

       grid.arrange(p2, p3,  ncol=2, top=textGrob("Repartition of the performance combination")) 
     #+end_src

     #+RESULTS:
     [[file:img/20160402/pilipili2/combinations_slowdown.png]]

     Only few very bad points. 75% of the time the slowdown is below 17.177%
     #+begin_src R :results output :session :exports both
     summary(df)
     #+end_src

     #+RESULTS:
     #+begin_example
      elements_number  y_component_number vector_length   temporary_size 
      Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
      1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
      Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
      Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
      3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
      Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
      vector_recompute load_overlap  threads_number       lws_y        
      true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                       true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                     Median : 256.0   Median :  16.00  
                                     Mean   : 368.1   Mean   :  73.58  
                                     3rd Qu.: 512.0   3rd Qu.:  64.00  
                                     Max.   :1024.0   Max.   :1024.00  
      time_per_pixel         slowdown      
      Min.   :1.165e-10   Min.   :  1.000  
      1st Qu.:3.028e-10   1st Qu.:  2.599  
      Median :7.125e-10   Median :  6.116  
      Mean   :2.013e-09   Mean   : 17.276  
      3rd Qu.:2.001e-09   3rd Qu.: 17.177  
      Max.   :4.452e-08   Max.   :382.168
#+end_example

     #+begin_src R :results output :session :exports both
       df$slowdown <- df$time_per_pixel / min(df$time_per_pixel)
       summary(df)
     #+end_src

     #+RESULTS:
     #+begin_example
      elements_number  y_component_number vector_length   temporary_size 
      Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
      1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
      Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
      Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
      3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
      Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
      vector_recompute load_overlap  threads_number       lws_y        
      true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                       true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                     Median : 256.0   Median :  16.00  
                                     Mean   : 368.1   Mean   :  73.58  
                                     3rd Qu.: 512.0   3rd Qu.:  64.00  
                                     Max.   :1024.0   Max.   :1024.00  
      time_per_pixel         slowdown      
      Min.   :1.165e-10   Min.   :  1.000  
      1st Qu.:3.028e-10   1st Qu.:  2.599  
      Median :7.125e-10   Median :  6.116  
      Mean   :2.013e-09   Mean   : 17.276  
      3rd Qu.:2.001e-09   3rd Qu.: 17.177  
      Max.   :4.452e-08   Max.   :382.168
#+end_example

      Number of random points to hope finding the best solution with
      90% of chance:
     #+begin_src R :results output :session :exports both
       nrow(df[df$slowdown <= 1.1,])
       p <- nrow(df[df$slowdown <= 1.1,]) / nrow(df) 
       p
       log(0.1)/log(1-p)
       x <- 1:1000
       plot(1-(1-p)**x)
     #+end_src

     #+RESULTS:
     : [1] 170
     : [1] 0.007352941
     : [1] 311.9989

      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
        library(ggplot2)
        ggplot() +
             geom_line(aes(x=x,y=1-(1-p)**x))
      #+end_src

      #+RESULTS:
      [[file:/tmp/babel-4627fyl/figure4627CsG.png]]
      
      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       library(ggplot2)
       ggplot(df) +
           aes(x=elements_number,y=time_per_pixel) +
           geom_point()

      #+end_src

      #+RESULTS:
      [[file:/tmp/babel-5694w-6/figure5694oGa.png]]

**** DONE A random exploration                                     :Analysis:
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
     #+end_src

     #+RESULTS:
     
     It is interesting to look how a random search performs by
     comparison. Lets implement a stupid and simple random search that
     pick a sample of the search space with equiprobability of
     selecting any combination and run it 1000 times to see how it
     performs: 
     #+begin_src R :results output graphics :file img/20160402/pilipili2/random_1000.png :exports both :width 700 :height 400 :session
       library(ggplot2)
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       time_per_pixel <- c()
       for (i in 1:1000){
           s <- df[sample(1:nrow(df), size = 100, replace = FALSE),]
           time_per_pixel[i] <- min(s$time_per_pixel)
       }
       data <- data.frame(time_per_pixel)
       ggplot(data) +
           aes(time_per_pixel) +
           theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
           geom_vline(xintercept = min(df$time_per_pixel), color="red", linetype=2) +
           geom_vline(xintercept = median(data$time_per_pixel), color="darkgreen", linetype=2) +
           geom_histogram(binwidth=1e-12, color="white", fill="gray0", aes(y=..density.. * 1e-12))
     #+end_src

     #+RESULTS:
     [[file:img/20160402/pilipili2/random_1000.png]]

    Values returned by a random search are generally below 1.8e-10 and
    half of the value are below 1.28e-10. In this case the random
    search is not that bad and 50% of the time it seems we are not
    very far from the global optimum.  

    #+begin_src R :results output :session :exports both
      summary(data)
      min(df$time_per_pixel)
      max(df$time_per_pixel)
    #+end_src

    #+RESULTS:
    :  time_per_pixel     
    :  Min.   :1.165e-10  
    :  1st Qu.:1.205e-10  
    :  Median :1.278e-10  
    :  Mean   :1.307e-10  
    :  3rd Qu.:1.392e-10  
    :  Max.   :1.954e-10
    : [1] 1.165013e-10
    : [1] 4.452312e-08

    From a speedup point of view for more than 50% of the time, 90% of the
    maximal performances are reached we never get less than 70%.
    #+begin_src R :results output graphics :file img/20160402/pilipili2/random_100_speedup.png :exports both :width 600 :height 400 :session
      library(ggplot2)
      df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
      speedup <- c()
      for (i in 1:1000){
          s <- df[sample(1:nrow(df), size = 100, replace = FALSE),]
          speedup[i] <-  min(df$time_per_pixel) / min(s$time_per_pixel)
      }
      data <- data.frame(speedup)
      ggplot(data) +
          aes(speedup) +
          theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
          geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
          geom_histogram(binwidth=0.02,color="white", fill="gray1", aes(y=..density.. * 0.02) )
    #+end_src

    #+RESULTS:
    [[file:img/20160402/pilipili2/random_100_speedup.png]]

    And for example using a random sample of size 10 (0.04% of the
    search space), the majority falls under 2e-10:
    #+begin_src R :results output graphics :file img/20160402/pilipili2/random_10_repartition.png :exports both :width 800 :height 600 :session
      library(ggplot2)
      library(plyr)
      
      df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
      time_per_pixel <- c()
      for (i in 1:1000){
          s <- df[sample(1:nrow(df), size = 10, replace = FALSE),]
          time_per_pixel[i] <- min(s$time_per_pixel)
      }
      data <- data.frame(time_per_pixel)
      
      ggplot(data) +
          aes(time_per_pixel) +
          theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
          geom_vline(xintercept = min(df$time_per_pixel), color="red", linetype=2) +
          geom_vline(xintercept = median(data$time_per_pixel), color="darkgreen", linetype=2) +
          geom_histogram(binwidth=5e-12, color="white", fill="gray0")
    #+end_src

    #+RESULTS:
    [[file:img/20160402/pilipili2/random_10_repartition.png]]

    Trying plot CI:
    #+begin_src R :results output :session :exports both
      data.hist <- hist(data$time_per_pixel, breaks= seq(min(data$time_per_pixel), max(time_per_pixel) + 5e-12, 5e-12), plot=FALSE)
      histogram <- data.frame(density = data.hist$density*5e-12, 
                              time_per_pixel = data.hist$breaks,
                              mean = tapply(data.hist$density*5e-12, data.hist$breaks, mean))
      summary(histogram$mean)
      
      2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))
    #+end_src

    #+RESULTS:
    :  Error in tapply(data.hist$density * 5e-12, data.hist$breaks, mean) : 
    :   arguments must have same length
    : Length  Class   Mode 
    :      0   NULL   NULL


    With a sample of size 10 50% of the time we achieve a little less
    than 75% of the maximum performances.
    #+begin_src R :results output graphics :file img/20160402/pilipili2/random_10_speedup.png :exports both :width 600 :height 400 :session
      library(ggplot2)
      df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
      speedup <- c()
      for (i in 1:1000){
          s <- df[sample(1:nrow(df), size = 10, replace = FALSE),]
          speedup[i] <-  min(df$time_per_pixel) / min(s$time_per_pixel)
      }
      data <- data.frame(speedup)
      ggplot(data) +
          aes(speedup) +
          theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
          geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
          geom_histogram(color="white", fill="gray0", binwidth=.05, aes(y=..density.. * 0.05))
    #+end_src

    #+RESULTS:
    [[file:img/20160402/pilipili2/random_10_speedup.png]]

    So with only 10 combinations tested it maybe is not enough but
    with 100 conbinations it starts being interesting and it can
    achieve good performances half of the time. 

***** TODO try LHS
**** DONE Local search algorithm
     Still as comparison lets implement local search. We cannot
     implement a real gradient descent because our function is not
     differentiable and discrete. But I can use method which looks
     like gradient descent.
***** DONE Algorithm
      Starting at a point p randomly chosen, knowing the value of the
      objective function f(p):
        - explore from the point p an area around p defined by set of
          directions respecting constraints. 
        - keep the best one
        - repeat until no improvment
***** DONE Implementation                                            :Script:
      Generate clean data if note already done:
      #+begin_src sh :results output :exports both
        ruby ../scripts/clean_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end.yaml
      #+end_src

      #+RESULTS:

      Generate csv:
      #+begin_src sh :results output :exports both
        ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
      #+end_src

      #+RESULTS:

      Size of the search space:
      #+begin_src R :results output :session :exports both
        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        summary(df)
      #+end_src

      #+RESULTS:
      #+begin_example
       elements_number  y_component_number vector_length   temporary_size 
       Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
       1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
       Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
       Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
       3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
       Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
       vector_recompute load_overlap  threads_number       lws_y        
       true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                        true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                      Median : 256.0   Median :  16.00  
                                      Mean   : 368.1   Mean   :  73.58  
                                      3rd Qu.: 512.0   3rd Qu.:  64.00  
                                      Max.   :1024.0   Max.   :1024.00  
       time_per_pixel     
       Min.   :1.165e-10  
       1st Qu.:3.028e-10  
       Median :7.125e-10  
       Mean   :2.013e-09  
       3rd Qu.:2.001e-09  
       Max.   :4.452e-08
#+end_example

      #+begin_src R :results output :session :exports both
        kernel_size <- function(point) {
            # point$load_overlap <- if (point$load_overlap == "true") 1 else 0
            vector_number <- ceiling((point$elements_number / point$y_component_number) / point$vector_length)
            
            tempload <- (1 - point$load_overlap) * (vector_number * point$vector_length) / point$vector_length * point$vector_length
            temp <-  point$load_overlap * 3 * vector_number * (point$y_component_number+2) * point$vector_length
            res <- vector_number * point$y_component_number * point$vector_length
            tempc <- 3 * vector_number * (point$y_component_number + 2) * point$temporary_size * point$vector_length
            out_vec = (1 - point$load_overlap) * tempc
            resc <- vector_number * point$y_component_number * point$temporary_size * point$vector_length

            tot <- (tempload + temp + res + tempc + out_vec + resc) * point$threads_number
        }

        check_constraint <- function(point){
            res <- if(point$load_overlap %in% 0:1 &
                      point$lws_y <= point$threads_number &
                      point$elements_number %% point$y_component_number == 0 &
                      point$elements_number %/% point$y_component_number <= 4 &
                      kernel_size(point) < kernel_size(data.frame(elements_number=6, y_component_number=6, vector_length=8, temporary_size=2, load_overlap=0, threads_number=1024))
                      ) T else F
        }

        point_equal <- function(p1,p2){
            res <- if(p1$elements_number == p2$elements_number &
                      p1$y_component_number == p2$y_component_number &
                      p1$vector_length == p2$vector_length &
                      p1$temporary_size == p2$temporary_size &
                      p1$load_overlap == p2$load_overlap &
                      p1$threads_number == p2$threads_number) T else F
        }

        gradient_descent <- function(point, limit=100){
            elements_number    <- c(1,0,0,0,0,0,0,-1,0,0,0,0,0,0)
            y_component_number <- c(0,1,0,0,0,0,0,0,-1,0,0,0,0,0)
            vector_length      <- c(0,0,1,0,0,0,0,0,0,-1,0,0,0,0)
            temporary_size     <- c(0,0,0,1,0,0,0,0,0,0,-1,0,0,0)
            load_overlap       <- c(0,0,0,0,1,0,0,0,0,0,0,-1,0,0)
            threads_number     <- c(0,0,0,0,0,1,0,0,0,0,0,0,-1,0)
            lws_y              <- c(0,0,0,0,0,0,1,0,0,0,0,0,0,-1)

            factors <- list(elements_number = as.numeric(levels(as.factor(df$elements_number))), 
                                  y_component_number = as.numeric(levels(as.factor(df$y_component_number))), 
                                  vector_length = as.numeric(levels(as.factor(df$vector_length))), 
                                  temporary_size = as.numeric(levels(as.factor(df$temporary_size))), 
                                  threads_number= as.numeric(levels(as.factor(df$threads_number))), 
                                  lws_y= as.numeric(levels(as.factor(df$lws_y)))) 

            directions <- data.frame(elements_number, y_component_number, vector_length, temporary_size, load_overlap, threads_number, lws_y)
            count <- 0

            repeat{
                old_point <- point
                candidates <- data.frame()

                for(i in 1:nrow(directions)){
                    idx_elements_number = match(point$elements_number, factors$elements_number) + directions[i,]$elements_number
                    idx_y_component_number = match(point$y_component_number, factors$y_component_number) + directions[i,]$y_component_number
                    idx_vector_length = match(point$vector_length, factors$vector_length) + directions[i,]$vector_length
                    idx_temporary_size = match(point$temporary_size, factors$temporary_size) + directions[i,]$temporary_size
                    idx_threads_number = match(point$threads_number, factors$threads_number) + directions[i,]$threads_number
                    idx_lws_y = match(point$lws_y, factors$lws_y) + directions[i,]$lws_y

                    if(!(idx_elements_number %in% 1:length(levels(as.factor(df$elements_number))))) next
                    if(!(idx_y_component_number %in% 1:length(levels(as.factor(df$y_component_number))))) next
                    if(!(idx_vector_length %in% 1:length(levels(as.factor(df$vector_length))))) next
                    if(!(idx_temporary_size %in% 1:length(levels(as.factor(df$temporary_size))))) next
                    if(!(idx_threads_number %in% 1:length(levels(as.factor(df$threads_number))))) next
                    if(!(idx_lws_y %in% 1:length(levels(as.factor(df$lws_y))))) next

                    p <- data.frame(elements_number = factors$elements_number[idx_elements_number],
                                    y_component_number = factors$y_component_number[idx_y_component_number],
                                    vector_length = factors$vector_length[idx_vector_length],
                                    temporary_size = factors$temporary_size[idx_temporary_size],
                                    load_overlap = if(point$load_overlap == "true") 1 + directions[i,]$load_overlap else 0 + directions[i,]$load_overlap,
                                    threads_number = factors$threads_number[idx_threads_number],
                                    lws_y = factors$lws_y[idx_lws_y]
                                    )

                    if(check_constraint(p) == T){
                        p <- df[df$elements_number == p$elements_number & 
                                df$y_component_number == p$y_component_number & 
                                df$vector_length == p$vector_length &
                                df$temporary_size == p$temporary_size &
                                df$load_overlap == (if (p$load_overlap == 0) "false" else "true") &
                                #df$load_overlap == "true" &
                                df$threads_number == p$threads_number &
                                df$lws_y == p$lws_y,]
                        candidates <- rbind(p, candidates)
                    }
                }
                
                if(candidates[candidates$time_per_pixel == min(candidates$time_per_pixel),]$time_per_pixel < point$time_per_pixel){
                    point <- candidates[candidates$time_per_pixel == min(candidates$time_per_pixel),]
                }

                count <- count + 1
                if(count >= 100 | point_equal(old_point,point) == T){
                    break
                }
            }
            
            point
        }

        row_to_coordinate <- function(row){
            drops <- c("time_per_pixel", "vector_recompute")
            row[, !(names(row) %in% drops)]
         }
      #+end_src

      #+RESULTS:
      #+begin_example
       elements_number  y_component_number vector_length    temporary_size  vector_recompute load_overlap threads_number       lws_y       
       Min.   : 1.000   Min.   :1.000      Min.   : 1.000   Min.   :2.000   true:1000        false:485    Min.   :  32.0   Min.   :  1.00  
       1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 1.000   1st Qu.:2.000                    true :515    1st Qu.: 128.0   1st Qu.:  2.00  
       Median : 6.000   Median :3.000      Median : 2.000   Median :2.000                                 Median : 256.0   Median :  8.00  
       Mean   : 8.701   Mean   :3.483      Mean   : 3.459   Mean   :2.904                                 Mean   : 375.4   Mean   : 38.91  
       3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 4.000   3rd Qu.:4.000                                 3rd Qu.: 512.0   3rd Qu.: 32.00  
       Max.   :24.000   Max.   :6.000      Max.   :16.000   Max.   :4.000                                 Max.   :1024.0   Max.   :512.00  
       time_per_pixel     
       Min.   :1.165e-10  
       1st Qu.:1.581e-10  
       Median :2.228e-10  
       Mean   :8.282e-10  
       3rd Qu.:7.535e-10  
       Max.   :1.751e-08
      #+end_example

***** DONE Analysis                                                :Analysis:
      #+begin_src R :results output :session :exports both
        options(width=150)
        res <- data.frame()
        start <- data.frame()
        for(i in 1:1000){
            p <- df[sample(1:nrow(df), size = 1, replace = FALSE),]
            start <- rbind(start,p)  
            res <- rbind(res,gradient_descent(p))
        }
        write.csv(start, file = "../data/2016_04_08/pilipili2/18_08_24/gradient_1000_data_start.csv")
        write.csv(res, file = "../data/2016_04_08/pilipili2/18_08_24/gradient_1000_data_res.csv")
        summary(start)
        summary(res)
      #+end_src

      #+RESULTS:
      #+begin_example
       elements_number  y_component_number vector_length    temporary_size  vector_recompute load_overlap threads_number       lws_y        
       Min.   : 1.000   Min.   :1.000      Min.   : 1.000   Min.   :2.000   true:1000        false:480    Min.   :  32.0   Min.   :   1.00  
       1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.000   1st Qu.:2.000                    true :520    1st Qu.:  64.0   1st Qu.:   2.00  
       Median : 6.000   Median :3.000      Median : 4.000   Median :4.000                                 Median : 256.0   Median :  16.00  
       Mean   : 8.524   Mean   :3.479      Mean   : 5.626   Mean   :3.008                                 Mean   : 355.4   Mean   :  73.44  
       3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.000   3rd Qu.:4.000                                 3rd Qu.: 512.0   3rd Qu.:  64.00  
       Max.   :24.000   Max.   :6.000      Max.   :16.000   Max.   :4.000                                 Max.   :1024.0   Max.   :1024.00  
       time_per_pixel     
       Min.   :1.165e-10  
       1st Qu.:3.032e-10  
       Median :7.147e-10  
       Mean   :2.184e-09  
       3rd Qu.:1.919e-09  
       Max.   :4.203e-08
       elements_number  y_component_number vector_length  temporary_size  vector_recompute load_overlap threads_number       lws_y       
       Min.   : 1.000   Min.   :1.000      Min.   : 1.0   Min.   :2.000   true:1000        false:477    Min.   :  32.0   Min.   :  1.00  
       1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 1.0   1st Qu.:2.000                    true :523    1st Qu.: 128.0   1st Qu.:  2.00  
       Median : 6.000   Median :3.000      Median : 2.0   Median :2.000                                 Median : 256.0   Median :  8.00  
       Mean   : 8.598   Mean   :3.496      Mean   : 3.3   Mean   :2.872                                 Mean   : 368.6   Mean   : 37.51  
       3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 4.0   3rd Qu.:4.000                                 3rd Qu.: 512.0   3rd Qu.: 32.00  
       Max.   :24.000   Max.   :6.000      Max.   :16.0   Max.   :4.000                                 Max.   :1024.0   Max.   :512.00  
       time_per_pixel     
       Min.   :1.165e-10  
       1st Qu.:1.571e-10  
       Median :2.242e-10  
       Mean   :8.198e-10  
       3rd Qu.:7.233e-10  
       Max.   :1.759e-08
      #+end_example

      #+begin_src R :results output :session :exports both
       start <- read.csv("../data/2016_04_08/pilipili2/18_08_24/gradient_1000_data_start.csv",strip.white=T,header=T)
       res <- read.csv("../data/2016_04_08/pilipili2/18_08_24/gradient_1000_data_res.csv",strip.white=T,header=T)
      #+end_src


      By looking at the histogram showing the repartition of
      combinations over the time per pixel, we quickly see the
      gradient is not as effective than a random search for this
      problem. With the random search we had values under 1.8e-10 and
      the median was at 1.278e-10. Here with the gradient descent the
      maximum is 1.759e-08 and the median is at 2.242e-10. 
      #+begin_src R :results output graphics :file img/20160408/pilipili2/grad_1000_h.png :exports both :width 700 :height 400 :session
        library(ggplot2)
        ggplot(res) +
            aes(time_per_pixel) +
            theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
            geom_vline(xintercept = median(res$time_per_pixel), color="darkgreen", linetype=2) +
            geom_histogram(binwidth=2e-10, color="white", fill="gray0", aes(y=..density.. * 2e-10))
      #+end_src

      #+RESULTS:
      [[file:img/20160408/pilipili2/grad_1000_h.png]]

      We see earlier that with the previous histogram we are missing
      some informations. Lets have look at how far is the results from
      the global optimal. We find that is clear not effective on this
      problem with 50% of the time we have speed up less than 60%.
      We clearly see that there are lots of local optimum and lots are
      far from the global optimal.
      #+begin_src R :results output graphics :file img/20160408/pilipili2/grad_1000_speedup_best_h.png :exports both :width 600 :height 400 :session
        library(ggplot2)
        speedup <- c()
        for (i in 1:nrow(res)){
            speedup[i] <-  min(df$time_per_pixel) / res[i,]$time_per_pixel
        }
        data <- data.frame(speedup)
        ggplot(data) +
            aes(speedup) +
            theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
            geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
            geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
            geom_histogram(binwidth=0.05, color="white", fill="gray1", aes(y=..density.. * 0.05))      
      #+end_src

      #+RESULTS:
      [[file:img/20160408/pilipili2/grad_1000_speedup_best_h.png]]

      In general the improvment brought by the gradient descent compared
      to the starting point is generally twice better. This is again
      because we have lots of local optimum and the gradient is
      quickly stuck.
      #+begin_src R :results output graphics :file img/20160408/pilipili2/grad_1000_speed_start_h.png :exports both :width 700 :height 400 :session
        library(ggplot2)
        speedup <- c()
        for (i in 1:nrow(res)){
            speedup[i] <-  start[i,]$time_per_pixel / res[i,]$time_per_pixel
        }
        data <- data.frame(speedup)
        ggplot(data) +
            aes(speedup) +
            theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
            geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
            geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
            geom_histogram(binwidth=1, color="white", fill="gray1", aes(y=..density.. * 1))      
      
      #+end_src

      #+RESULTS:
      [[file:img/20160408/pilipili2/grad_1000_speed_start_h.png]]

      From this observations, what we can conclude is that we have a
      lot of local optimum in which local search can be stuck. The
      solutions are generally far from the global optimal. The
      improvment from the starting point is not very good, maybe my
      implementation is stuck at a saddle point but I don't thing. So unless
      knowing at which point starting the exploration the local search
      is not suited to this kind of problem. 

****** TODO Check if the number limit of interation is reached or not
**** DONE Genetic Algorithm
***** DONE Adding Constraint mechanism
      Gene = An option
      Genotype = Organism = A combination of genes
      Population = Set of organism
      The genetic algorithm generates a set of points by creating a
      population. A population is composed of members that express
      genes instances. The population evolves at each generation.
      The value that can take a gene can be restricted to some values
      in an individual manner, one cannot not restrict the value of a
      gene with regard to the value of the other genes of the organism.
      Maybe the most logical idea would be to check the constraints at
      the organism level.
      Need to add valid? method in population.rb
      #+BEGIN_SRC  ruby
                begin 
            super
            h = {}
            a = []
            @genotypes.genes.each{ |g|
              #h[g.name.to_sym] = @genotypes[g]          
h[g.name.to_sym] = 1024          
            }
            a.push h 
            #{@search_space.remove_unfeasible} h if #{not @search_space.rules.nil?}
          end while h.empty?
          # puts @genotypes.genes.first.name
      #+end_src
****** Passing function to a function                                  :Ruby:
       #+BEGIN_SRC ruby
         def foo(s)
           s
         end
         
         def bar(s,m)
           eval s
         end
         
         f = Proc.new{ |s|
           s
         }
         
         s = <<EOF
           bar("m[1].call('pouet')",[f,f])
         EOF
         
         eval s
       #+END_SRC

       #+RESULTS:
       : pouet

***** DONE Experiment
      Trying to find a good tuning for the Genetic algorithm
      by playing with the population size and the generation limit,
      in order to make fair comparison. We choose to take population
      size = 20 and generation limit = 5.

       #+begin_src sh :results output :exports both
        ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
        df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
       #+end_src

       #+RESULTS:

      - Generation limit 10, population size 10
        #+begin_src sh :results output :exports both
          DATA="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"
          PARAM="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_parameters_v2.yaml"
          OUTPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g10_p10_m01_e1_tt.yaml"
          for i in `seq 1 1000`; do
              ruby ../boast/optimizer_benchmarks/bench_optimizer.rb $PARAM $DATA -r $OUTPUT --generations_limit 10 --population_size 10 --mutation_rate 0.1 --elitism 1 --twin_removal true > /dev/null
          done
        #+end_src

        #+RESULTS:

        #+begin_src sh :results output :exports both
          ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g10_p10_m01_e1_tt.yaml 
        #+end_src

        #+RESULTS:
    
        This tuning of the GA is not better than a random search on our
        problem with a mean that is about at 0.85:
        #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
          res1 <- read.csv("/tmp/test.csv", strip.white=T, header=T)
         
          library(ggplot2)
          speedup <- c()
          for (i in 1:nrow(res1)){
              speedup[i] <-  min(df$time_per_pixel) / res1[i,]$time_per_pixel
          }
          data <- data.frame(speedup)
          ggplot(data) +
              aes(speedup) +
              theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
              geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
              geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
              geom_histogram(binwidth=0.02, color="white", fill="gray1", aes(y=..density.. * 0.02))      
        #+end_src

        #+RESULTS:
        [[file:/tmp/babel-4137lLN/figure4137MuX.png]]

      - Generation limit 5, population size 20
        #+begin_src sh :results output :exports both
          DATA="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"
          PARAM="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_parameters_v2.yaml"
          OUTPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g5_p20_m01_e1_tt.yaml"
          for i in `seq 1 1000`; do
              ruby ../boast/optimizer_benchmarks/bench_optimizer.rb $PARAM $DATA -r $OUTPUT --generations_limit 5 --population_size 20 --mutation_rate 0.1 --elitism 1 --twin_removal true > /dev/null
          done
        #+end_src

        #+RESULTS:

        #+begin_src sh :results output :exports both
          ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g5_p20_m01_e1_tt.yaml 
        #+end_src

        #+RESULTS:

        Here we seem very close to the results of random search:
        #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
          res2 <- read.csv("/tmp/test.csv", strip.white=T, header=T)
         
          library(ggplot2)
          speedup <- c()
          for (i in 1:nrow(res2)){
              speedup[i] <-  min(df$time_per_pixel) / res2[i,]$time_per_pixel
          }
          data <- data.frame(speedup)
          ggplot(data) +
              aes(speedup) +
              theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
              geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
              geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
              geom_histogram(binwidth=0.02, color="white", fill="gray1", aes(y=..density.. * 0.02))      
        #+end_src

        #+RESULTS:
        [[file:/tmp/babel-4137lLN/figure4137zF2.png]]

      - Generation limit 20, population size 5
        #+begin_src sh :results output :exports both
          DATA="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"
          PARAM="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_parameters_v2.yaml"
          OUTPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g20_p5_m01_e1_tt.yaml"
          for i in `seq 1 1000`; do
              ruby ../boast/optimizer_benchmarks/bench_optimizer.rb $PARAM $DATA -r $OUTPUT --generations_limit 20 --population_size 5 --mutation_rate 0.1 --elitism 1 --twin_removal true > /dev/null
          done
        #+end_src

        #+RESULTS:

      - Generation limit 2, population size 50
        #+begin_src sh :results output :exports both
          DATA="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"
          PARAM="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_parameters_v2.yaml"
          OUTPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g2_p50_m01_e1_tt.yaml"
          for i in `seq 1 1000`; do
              ruby ../boast/optimizer_benchmarks/bench_optimizer.rb $PARAM $DATA -r $OUTPUT --generations_limit 2 --population_size 50 --mutation_rate 0.1 --elitism 1 --twin_removal true > /dev/null
          done
        #+end_src

        #+RESULTS:

        #+begin_src sh :results output :exports both
          ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g20_p5_m01_e1_tt.yaml
        #+end_src

        #+RESULTS:

        This configuration is worse than pop size = 10  and generation
        limit = 10:
        #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
          res3 <- read.csv("/tmp/test.csv", strip.white=T, header=T)
         
          library(ggplot2)
          speedup <- c()
          for (i in 1:nrow(res3)){
              speedup[i] <-  min(df$time_per_pixel) / res3[i,]$time_per_pixel
          }
          data <- data.frame(speedup)
          ggplot(data) +
              aes(speedup) +
              theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
              geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
              geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
              geom_histogram(binwidth=0.02, color="white", fill="gray1", aes(y=..density.. * 0.02))      
        #+end_src

        #+RESULTS:
        [[file:/tmp/babel-4137lLN/figure4137AXw.png]]


     - Generation limit 50, population size 2
       #+begin_src sh :results output :exports both
         DATA="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"
         PARAM="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_parameters_v2.yaml"
         OUTPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g50_p2_m01_e1_tt.yaml"
         for i in `seq 1 1000`; do
             ruby ../boast/optimizer_benchmarks/bench_optimizer.rb $PARAM $DATA -r $OUTPUT --generations_limit 50 --population_size 2 --mutation_rate 0.1 --elitism 1 --twin_removal true > /dev/null
         done
       #+end_src

       #+RESULTS:

       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g50_p2_m01_e1_tt.yaml
       #+end_src

       #+RESULTS:

       A to small population size does not works well on our search
       space. Because the GA works mostly in a local way but we have
       lots local optimum.
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
         res4 <- read.csv("/tmp/test.csv", strip.white=T, header=T)
         
         library(ggplot2)
         speedup <- c()
         for (i in 1:nrow(res4)){
             speedup[i] <-  min(df$time_per_pixel) / res4[i,]$time_per_pixel
         }
         data <- data.frame(speedup)
         ggplot(data) +
             aes(speedup) +
             theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
             geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
             geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
             geom_histogram(binwidth=0.02, color="white", fill="gray1", aes(y=..density.. * 0.02))      
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-4137lLN/figure4137Z_R.png]]


     - Generation limit 1, population size 100
       #+begin_src sh :results output :exports both
         DATA="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"
         PARAM="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_parameters_v2.yaml"
         OUTPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g1_p100_m01_e1_tt.yaml"
         for i in `seq 1 1000`; do
             ruby ../boast/optimizer_benchmarks/bench_optimizer.rb $PARAM $DATA -r $OUTPUT --generations_limit 1 --population_size 100 --mutation_rate 0.1 --elitism 1 --twin_removal true > /dev/null
         done
       #+end_src

       #+RESULTS:

       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g1_p100_m01_e1_tt.yaml
       #+end_src

       #+RESULTS:

       Ok this one is the best configuration we have found but I made
       a mistake because it use a total of 200 points.
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
         res5 <- read.csv("/tmp/test.csv", strip.white=T, header=T)
         
         library(ggplot2)
         speedup <- c()
         for (i in 1:nrow(res5)){
             speedup[i] <-  min(df$time_per_pixel) / res5[i,]$time_per_pixel
         }
         data <- data.frame(speedup)
         ggplot(data) +
             aes(speedup) +
             theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
             geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
             geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
             geom_histogram(binwidth=0.02, color="white", fill="gray1", aes(y=..density.. * 0.02))      
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-4137lLN/figure4137Noq.png]]


****** DONE How many run do we need?

       #+begin_src sh :results output :exports both
         DATA="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"
         PARAM="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_parameters_v2.yaml"
         OUTPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g1_p100_m01_e1_tt_30.yaml"
         for i in `seq 1 30`; do
             ruby ../boast/optimizer_benchmarks/bench_optimizer.rb $PARAM $DATA -r $OUTPUT --generations_limit 1 --population_size 100 --mutation_rate 0.1 --elitism 1 --twin_removal true > /dev/null
         done
       #+end_src

       #+RESULTS:

       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df_tot <- read.csv("/tmp/test.csv", strip.white=T, header=T)
       #+end_src

       #+RESULTS:

       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g1_p100_m01_e1_tt_30.yaml 
       #+end_src

       #+RESULTS:

       #+begin_src R :results output graphics :file img/20160408/pilipili2/gen_g1_p100_m01_e1_tt_30_h.png :exports both :width 600 :height 400 :session
         df_30 <- read.csv("/tmp/test.csv", strip.white=T, header=T)

         library(ggplot2)
         speedup <- c()
         for (i in 1:nrow(df_30)){
             speedup[i] <-  min(df_tot$time_per_pixel) / df_30[i,]$time_per_pixel
         }
         data <- data.frame(speedup)
         ggplot(data) +
             aes(speedup) +
             theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
             geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
             geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
             geom_histogram(binwidth=0.02, color="white", fill="gray1", aes(y=..density.. * 0.02))      
       #+end_src

       #+RESULTS:
       [[file:img/20160408/pilipili2/gen_g1_p100_m01_e1_tt_30_h.png]]

       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g1_p100_m01_e1_tt_100.yaml 
       #+end_src

       #+RESULTS:

       #+begin_src R :results output graphics :file img/20160408/pilipili2/gen_g1_p100_m01_e1_tt_100_h.png :exports both :width 600 :height 400 :session
         df_100 <- read.csv("/tmp/test.csv", strip.white=T, header=T)

         library(ggplot2)
         speedup <- c()
         for (i in 1:nrow(df_100)){
             speedup[i] <-  min(df_tot$time_per_pixel) / df_100[i,]$time_per_pixel
         }
         data <- data.frame(speedup)
         ggplot(data) +
             aes(speedup) +
             theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
             geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
             geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
             geom_histogram(binwidth=0.02, color="white", fill="gray1", aes(y=..density.. * 0.02))      
       #+end_src

       #+RESULTS:
       [[file:img/20160408/pilipili2/gen_g1_p100_m01_e1_tt_100_h.png]]



       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_g1_p100_m01_e1_tt.yaml 
       #+end_src

       #+RESULTS:

       #+begin_src R :results output graphics :file img/20160408/pilipili2/gen_g1_p100_m01_e1_tt_1000_h.png :exports both :width 600 :height 400 :session
         df_1000 <- read.csv("/tmp/test.csv", strip.white=T, header=T)

         library(ggplot2)
         speedup <- c()
         for (i in 1:nrow(df_1000)){
             speedup[i] <-  min(df_tot$time_per_pixel) / df_1000[i,]$time_per_pixel
         }
         data <- data.frame(speedup)
         ggplot(data) +
             aes(speedup) +
             theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
             geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
             geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
             geom_histogram(binwidth=0.02, color="white", fill="gray1", aes(y=..density.. * 0.02))      
       #+end_src

       #+RESULTS:
       [[file:img/20160408/pilipili2/gen_g1_p100_m01_e1_tt_1000_h.png]]

       30 seems to be enough to have a good idea on the impact of the parameters
****** TODO Brute force optimization of the genetic algorithm
**** TODO Regression                                               :Analysis:
***** DONE Linear regression
****** DONE Hierarchic data
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
     #+end_src

     #+RESULTS:

      #+begin_src R :results output :session :exports both
        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        summary(df)
      #+end_src

      #+RESULTS:
      #+begin_example
       elements_number  y_component_number vector_length   temporary_size 
       Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
       1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
       Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
       Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
       3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
       Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
       vector_recompute load_overlap  threads_number       lws_y        
       true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                        true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                      Median : 256.0   Median :  16.00  
                                      Mean   : 368.1   Mean   :  73.58  
                                      3rd Qu.: 512.0   3rd Qu.:  64.00  
                                      Max.   :1024.0   Max.   :1024.00  
       time_per_pixel     
       Min.   :1.165e-10  
       1st Qu.:3.028e-10  
       Median :7.125e-10  
       Mean   :2.013e-09  
       3rd Qu.:2.001e-09  
       Max.   :4.452e-08
      #+end_example

      We can observe the impact of each parameters on the median and
      mean values, they follow te same evolution. Generally extreme
      values also tend to follow the same evolution except for the
      elements number. But its behavior is not erratic and the trend
      the time per pixel decrease with increasing the elements number.
      #+begin_src R :results output graphics :file img/20160402/pilipili2/hierarchic_factors_bp.png :exports both :width 800 :height 600 :session
        library(ggplot2)
        library(grid)
        library(gridExtra)

        p1 <- qplot(factor(df$elements_number), df$time_per_pixel) + 
            scale_y_log10() + 
            geom_boxplot() + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of elements number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p2 <- qplot(factor(df$y_component_number), df$time_per_pixel) + 
            scale_y_log10() + 
            geom_boxplot() + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of y components number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p3 <- qplot(factor(df$vector_length), df$time_per_pixel) + 
            scale_y_log10() + 
            geom_boxplot() + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of of the vector length") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p4 <- qplot(factor(df$threads_number), df$time_per_pixel) + 
            scale_y_log10() + 
            geom_boxplot() + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of of the threads number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p5 <- qplot(factor(df$lws_y), df$time_per_pixel) + 
            scale_y_log10() + 
            geom_boxplot() + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of of the lws_y") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        grid.arrange(p1, p2, p3, p4, p5, ncol=3, top=textGrob("Impact of factors in log scale")) 
      #+end_src

      #+RESULTS:
      [[file:img/20160402/pilipili2/hierarchic_factors_bp.png]]

      #+begin_src R :results output graphics :file img/20160402/pilipili2/hierarchic_factors_p.png :exports both :width 800 :height 600 :session
        library(ggplot2)
        library(grid)
        library(gridExtra)
        library(plyr)

         elem_err = ddply(df,c("elements_number"), summarize,
                     mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

         y_err = ddply(df,c("y_component_number"), summarize,
                     mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

         vec_err = ddply(df,c("vector_length"), summarize,
                     mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

         t_err = ddply(df,c("threads_number"), summarize,
                     mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

         l_err = ddply(df,c("lws_y"), summarize,
                     mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

        p1 <- qplot(df$elements_number, df$time_per_pixel) + 
            scale_y_log10() + 
            geom_point(alpha=0.1) + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=elem_err,aes(x=(elements_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of elements number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p2 <- qplot(df$y_component_number, df$time_per_pixel) + 
            scale_y_log10() + 
            geom_point(alpha=0.1) + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=y_err,aes(x=(y_component_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of y components number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p3 <- qplot(df$vector_length, df$time_per_pixel) + 
            scale_y_log10() + 
            geom_point(alpha=0.1) + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=vec_err,aes(x=(vector_length),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of of the vector length") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p4 <- qplot(df$threads_number, df$time_per_pixel) + 
            scale_y_log10() + 
            geom_point(alpha=0.1) + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=t_err,aes(x=(threads_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of of the threads number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p5 <- qplot(df$lws_y, df$time_per_pixel) + 
            scale_y_log10() + 
            geom_point() + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=l_err,aes(x=(lws_y),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of of the lws_y") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        grid.arrange(p1, p2, p3, p4, p5, ncol=3, top=textGrob("Impact of factors")) 

      #+end_src

      #+RESULTS:
      [[file:img/20160402/pilipili2/hierarchic_factors_p.png]]

      #+begin_src R :results output :session :exports both
        df[df$time_per_pixel == min(df$time_per_pixel),]
      #+end_src

      #+RESULTS:
      :       elements_number y_component_number vector_length temporary_size
      : 13752               6                  6             1              2
      :       vector_recompute load_overlap threads_number lws_y time_per_pixel
      : 13752             true         true           1024     2   1.165013e-10

      Assuming that we know at which value to set the other parameters
      can we see a different trend for the elements numbers? 
      Yes we do, that the best value for elements number is 6. We have
      a noise which does not follows the mean / median trend but the
      behavior of elements number is not erratic and the noise is
      caused by interraction with other parameters. We can
      retrieve the best value for elements number by considering
      interraction and fixing parameters. In this case quantile
      regression is not necessary. But maybe this case is too simple
      and it does not work with more complex one.
      #+begin_src R :results output graphics :file img/20160402/pilipili2/hierarchic_elem_numb_other_fixed_bp.png :exports both :width 600 :height 400 :session
        df2 <- df[df$y_component_number == 6 & df$vector_length == 1 & df$threads_number == 1024 & df$lws == 2,]
        ggplot(df2, aes(x=factor(elements_number), y=time_per_pixel)) + 
            scale_y_log10() + 
            geom_boxplot() + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of elements number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))
      #+end_src

      #+RESULTS:
      [[file:img/20160402/pilipili2/hierarchic_elem_numb_other_fixed_bp.png]]

      The idea would be to fix parameters that have an obvious
      influence first and then fix the other according to the
      interaction. But what if all parameters have complex interaction 
      and we don't know to which value fix them?

      Visual interpretation is easy but can we achieve the same
      conclusion in a more analytic way? Lets try what we did earlier
      with linear regression.
      #+begin_src R :results output :session :exports both
        summary( lm(data=df, formula = time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y + temporary_size + load_overlap) )
      #+end_src

      #+RESULTS:
      #+begin_example

      Call:
      lm(formula = time_per_pixel ~ elements_number + y_component_number + 
          vector_length + threads_number + lws_y + temporary_size + 
          load_overlap, data = df)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -7.450e-09 -1.290e-09 -4.220e-10  6.550e-10  3.781e-08 

      Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
      (Intercept)         1.392e-09  8.478e-11  16.419   <2e-16 ***
      elements_number    -1.618e-10  4.555e-12 -35.523   <2e-16 ***
      y_component_number  2.221e-10  1.619e-11  13.724   <2e-16 ***
      vector_length       2.220e-10  3.822e-12  58.075   <2e-16 ***
      threads_number     -2.350e-12  6.121e-14 -38.403   <2e-16 ***
      lws_y               1.130e-11  1.287e-13  87.823   <2e-16 ***
      temporary_size      4.209e-12  1.960e-11   0.215     0.83    
      load_overlaptrue   -6.391e-12  3.915e-11  -0.163     0.87    
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 2.975e-09 on 23112 degrees of freedom
      Multiple R-squared:  0.3588,	Adjusted R-squared:  0.3587 
      F-statistic:  1848 on 7 and 23112 DF,  p-value: < 2.2e-16
#+end_example

      #+begin_src R :results output :session :exports both
        summary(lm( data=df, formula = time_per_pixel ~ (elements_number + y_component_number + vector_length + threads_number + lws_y)^2 ))
      #+end_src

      #+RESULTS:
      #+begin_example

      Call:
      lm(formula = time_per_pixel ~ (elements_number + y_component_number + 
          vector_length + threads_number + lws_y)^2, data = df)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -1.357e-08 -8.730e-10 -1.790e-10  4.650e-10  3.565e-08 

      Coefficients:
                                           Estimate Std. Error t value Pr(>|t|)    
      (Intercept)                         1.712e-09  8.592e-11  19.928  < 2e-16 ***
      elements_number                    -2.454e-10  1.169e-11 -20.984  < 2e-16 ***
      y_component_number                 -3.947e-10  2.710e-11 -14.568  < 2e-16 ***
      vector_length                       2.855e-10  7.904e-12  36.128  < 2e-16 ***
      threads_number                     -1.541e-13  1.290e-13  -1.195    0.232    
      lws_y                               2.196e-11  4.300e-13  51.062  < 2e-16 ***
      elements_number:y_component_number  5.011e-11  1.888e-12  26.539  < 2e-16 ***
      elements_number:vector_length      -2.754e-11  7.263e-13 -37.924  < 2e-16 ***
      elements_number:threads_number      1.782e-13  1.162e-14  15.340  < 2e-16 ***
      elements_number:lws_y              -9.634e-13  2.440e-14 -39.487  < 2e-16 ***
      y_component_number:vector_length    5.302e-11  2.566e-12  20.661  < 2e-16 ***
      y_component_number:threads_number  -3.100e-13  4.104e-14  -7.553 4.39e-14 ***
      y_component_number:lws_y            2.181e-12  8.631e-14  25.273  < 2e-16 ***
      vector_length:threads_number       -3.879e-13  1.129e-14 -34.362  < 2e-16 ***
      vector_length:lws_y                 1.664e-12  2.419e-14  68.791  < 2e-16 ***
      threads_number:lws_y               -2.048e-14  3.520e-16 -58.196  < 2e-16 ***
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 2.351e-09 on 23104 degrees of freedom
      Multiple R-squared:  0.5996,	Adjusted R-squared:  0.5994 
      F-statistic:  2307 on 15 and 23104 DF,  p-value: < 2.2e-16
      #+end_example

      #+begin_src R :results output :session :exports both
        summary(lm( data=df, formula = time_per_pixel ~ elements_number * y_component_number * vector_length * threads_number * lws_y))
      #+end_src

      #+RESULTS:
      #+begin_example

      Call:
      lm(formula = time_per_pixel ~ elements_number * y_component_number * 
          vector_length * threads_number * lws_y, data = df)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -1.493e-08 -6.770e-10 -2.460e-10  2.660e-10  3.463e-08 

      Coefficients:
                                                                              Estimate
      (Intercept)                                                            1.061e-09
      elements_number                                                       -5.919e-11
      y_component_number                                                    -1.202e-10
      vector_length                                                          3.124e-10
      threads_number                                                        -1.257e-12
      lws_y                                                                  2.224e-11
      elements_number:y_component_number                                     1.046e-11
      elements_number:vector_length                                         -3.993e-11
      y_component_number:vector_length                                       5.268e-12
      elements_number:threads_number                                         4.025e-14
      y_component_number:threads_number                                      3.261e-13
      vector_length:threads_number                                          -3.027e-13
      elements_number:lws_y                                                 -1.025e-12
      y_component_number:lws_y                                              -3.595e-12
      vector_length:lws_y                                                    5.371e-12
      threads_number:lws_y                                                  -1.741e-14
      elements_number:y_component_number:vector_length                       4.580e-12
      elements_number:y_component_number:threads_number                     -1.359e-14
      elements_number:vector_length:threads_number                           6.208e-14
      y_component_number:vector_length:threads_number                       -9.385e-14
      elements_number:y_component_number:lws_y                               2.095e-13
      elements_number:vector_length:lws_y                                   -9.349e-13
      y_component_number:vector_length:lws_y                                 9.122e-13
      elements_number:threads_number:lws_y                                   1.007e-15
      y_component_number:threads_number:lws_y                                3.047e-15
      vector_length:threads_number:lws_y                                    -3.598e-15
      elements_number:y_component_number:vector_length:threads_number       -5.182e-15
      elements_number:y_component_number:vector_length:lws_y                 9.334e-14
      elements_number:y_component_number:threads_number:lws_y               -1.959e-16
      elements_number:vector_length:threads_number:lws_y                     5.780e-16
      y_component_number:vector_length:threads_number:lws_y                 -6.379e-16
      elements_number:y_component_number:vector_length:threads_number:lws_y -5.546e-17
                                                                            Std. Error
      (Intercept)                                                            1.180e-10
      elements_number                                                        2.055e-11
      y_component_number                                                     3.415e-11
      vector_length                                                          1.452e-11
      threads_number                                                         2.274e-13
      lws_y                                                                  1.479e-12
      elements_number:y_component_number                                     3.955e-12
      elements_number:vector_length                                          2.568e-12
      y_component_number:vector_length                                       4.325e-12
      elements_number:threads_number                                         4.046e-14
      y_component_number:threads_number                                      6.842e-14
      vector_length:threads_number                                           3.181e-14
      elements_number:lws_y                                                  2.584e-13
      y_component_number:lws_y                                               4.311e-13
      vector_length:lws_y                                                    1.850e-13
      threads_number:lws_y                                                   1.609e-15
      elements_number:y_component_number:vector_length                       4.979e-13
      elements_number:y_component_number:threads_number                      7.862e-15
      elements_number:vector_length:threads_number                           6.262e-15
      y_component_number:vector_length:threads_number                        1.158e-14
      elements_number:y_component_number:lws_y                               4.987e-14
      elements_number:vector_length:lws_y                                    3.338e-14
      y_component_number:vector_length:lws_y                                 5.761e-14
      elements_number:threads_number:lws_y                                   2.830e-16
      y_component_number:threads_number:lws_y                                4.762e-16
      vector_length:threads_number:lws_y                                     2.104e-16
      elements_number:y_component_number:vector_length:threads_number        1.288e-15
      elements_number:y_component_number:vector_length:lws_y                 6.587e-15
      elements_number:y_component_number:threads_number:lws_y                5.480e-17
      elements_number:vector_length:threads_number:lws_y                     3.955e-17
      y_component_number:vector_length:threads_number:lws_y                  7.231e-17
      elements_number:y_component_number:vector_length:threads_number:lws_y  8.043e-18
                                                                            t value
      (Intercept)                                                             8.990
      elements_number                                                        -2.880
      y_component_number                                                     -3.520
      vector_length                                                          21.516
      threads_number                                                         -5.527
      lws_y                                                                  15.043
      elements_number:y_component_number                                      2.644
      elements_number:vector_length                                         -15.548
      y_component_number:vector_length                                        1.218
      elements_number:threads_number                                          0.995
      y_component_number:threads_number                                       4.766
      vector_length:threads_number                                           -9.515
      elements_number:lws_y                                                  -3.966
      y_component_number:lws_y                                               -8.339
      vector_length:lws_y                                                    29.037
      threads_number:lws_y                                                  -10.822
      elements_number:y_component_number:vector_length                        9.198
      elements_number:y_component_number:threads_number                      -1.728
      elements_number:vector_length:threads_number                            9.914
      y_component_number:vector_length:threads_number                        -8.102
      elements_number:y_component_number:lws_y                                4.202
      elements_number:vector_length:lws_y                                   -28.010
      y_component_number:vector_length:lws_y                                 15.835
      elements_number:threads_number:lws_y                                    3.556
      y_component_number:threads_number:lws_y                                 6.398
      vector_length:threads_number:lws_y                                    -17.100
      elements_number:y_component_number:vector_length:threads_number        -4.023
      elements_number:y_component_number:vector_length:lws_y                 14.170
      elements_number:y_component_number:threads_number:lws_y                -3.575
      elements_number:vector_length:threads_number:lws_y                     14.615
      y_component_number:vector_length:threads_number:lws_y                  -8.821
      elements_number:y_component_number:vector_length:threads_number:lws_y  -6.895
                                                                            Pr(>|t|)
      (Intercept)                                                            < 2e-16
      elements_number                                                       0.003983
      y_component_number                                                    0.000432
      vector_length                                                          < 2e-16
      threads_number                                                        3.30e-08
      lws_y                                                                  < 2e-16
      elements_number:y_component_number                                    0.008199
      elements_number:vector_length                                          < 2e-16
      y_component_number:vector_length                                      0.223198
      elements_number:threads_number                                        0.319865
      y_component_number:threads_number                                     1.89e-06
      vector_length:threads_number                                           < 2e-16
      elements_number:lws_y                                                 7.34e-05
      y_component_number:lws_y                                               < 2e-16
      vector_length:lws_y                                                    < 2e-16
      threads_number:lws_y                                                   < 2e-16
      elements_number:y_component_number:vector_length                       < 2e-16
      elements_number:y_component_number:threads_number                     0.083990
      elements_number:vector_length:threads_number                           < 2e-16
      y_component_number:vector_length:threads_number                       5.69e-16
      elements_number:y_component_number:lws_y                              2.66e-05
      elements_number:vector_length:lws_y                                    < 2e-16
      y_component_number:vector_length:lws_y                                 < 2e-16
      elements_number:threads_number:lws_y                                  0.000377
      y_component_number:threads_number:lws_y                               1.61e-10
      vector_length:threads_number:lws_y                                     < 2e-16
      elements_number:y_component_number:vector_length:threads_number       5.77e-05
      elements_number:y_component_number:vector_length:lws_y                 < 2e-16
      elements_number:y_component_number:threads_number:lws_y               0.000351
      elements_number:vector_length:threads_number:lws_y                     < 2e-16
      y_component_number:vector_length:threads_number:lws_y                  < 2e-16
      elements_number:y_component_number:vector_length:threads_number:lws_y 5.54e-12

      (Intercept)                                                           ***
      elements_number                                                       ** 
      y_component_number                                                    ***
      vector_length                                                         ***
      threads_number                                                        ***
      lws_y                                                                 ***
      elements_number:y_component_number                                    ** 
      elements_number:vector_length                                         ***
      y_component_number:vector_length                                         
      elements_number:threads_number                                           
      y_component_number:threads_number                                     ***
      vector_length:threads_number                                          ***
      elements_number:lws_y                                                 ***
      y_component_number:lws_y                                              ***
      vector_length:lws_y                                                   ***
      threads_number:lws_y                                                  ***
      elements_number:y_component_number:vector_length                      ***
      elements_number:y_component_number:threads_number                     .  
      elements_number:vector_length:threads_number                          ***
      y_component_number:vector_length:threads_number                       ***
      elements_number:y_component_number:lws_y                              ***
      elements_number:vector_length:lws_y                                   ***
      y_component_number:vector_length:lws_y                                ***
      elements_number:threads_number:lws_y                                  ***
      y_component_number:threads_number:lws_y                               ***
      vector_length:threads_number:lws_y                                    ***
      elements_number:y_component_number:vector_length:threads_number       ***
      elements_number:y_component_number:vector_length:lws_y                ***
      elements_number:y_component_number:threads_number:lws_y               ***
      elements_number:vector_length:threads_number:lws_y                    ***
      y_component_number:vector_length:threads_number:lws_y                 ***
      elements_number:y_component_number:vector_length:threads_number:lws_y ***
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 2.033e-09 on 23088 degrees of freedom
      Multiple R-squared:  0.701,	Adjusted R-squared:  0.7006 
      F-statistic:  1747 on 31 and 23088 DF,  p-value: < 2.2e-16
#+end_example

      But I don't see how to know what the revelant interaction, we
      only see correlations. Maybe we can try to find methods to study
      interactions.

      #+begin_src R :results output :session :exports both
        anova(lm( data=df, formula = time_per_pixel ~ (elements_number + y_component_number + vector_length + threads_number + lws_y)^2 ))
      #+end_src

      #+RESULTS:
      #+begin_example
      Analysis of Variance Table

      Response: time_per_pixel
                                            Df     Sum Sq    Mean Sq   F value
      elements_number                        1 1.3021e-14 1.3021e-14  2355.211
      y_component_number                     1 1.2660e-15 1.2660e-15   229.019
      vector_length                          1 3.1561e-14 3.1561e-14  5708.681
      threads_number                         1 3.7400e-16 3.7400e-16    67.623
      lws_y                                  1 6.8265e-14 6.8265e-14 12347.483
      elements_number:y_component_number     1 4.1610e-15 4.1610e-15   752.707
      elements_number:vector_length          1 6.0160e-15 6.0160e-15  1088.126
      elements_number:threads_number         1 1.9100e-16 1.9100e-16    34.593
      elements_number:lws_y                  1 8.3090e-15 8.3090e-15  1502.969
      y_component_number:vector_length       1 2.6880e-15 2.6880e-15   486.273
      y_component_number:threads_number      1 8.8000e-17 8.8000e-17    15.938
      y_component_number:lws_y               1 1.7340e-15 1.7340e-15   313.702
      vector_length:threads_number           1 1.4900e-16 1.4900e-16    27.035
      vector_length:lws_y                    1 3.4761e-14 3.4761e-14  6287.465
      threads_number:lws_y                   1 1.8724e-14 1.8724e-14  3386.805
      Residuals                          23104 1.2773e-13 6.0000e-18          
                                            Pr(>F)    
      elements_number                    < 2.2e-16 ***
      y_component_number                 < 2.2e-16 ***
      vector_length                      < 2.2e-16 ***
      threads_number                     < 2.2e-16 ***
      lws_y                              < 2.2e-16 ***
      elements_number:y_component_number < 2.2e-16 ***
      elements_number:vector_length      < 2.2e-16 ***
      elements_number:threads_number     4.119e-09 ***
      elements_number:lws_y              < 2.2e-16 ***
      y_component_number:vector_length   < 2.2e-16 ***
      y_component_number:threads_number  6.566e-05 ***
      y_component_number:lws_y           < 2.2e-16 ***
      vector_length:threads_number       2.015e-07 ***
      vector_length:lws_y                < 2.2e-16 ***
      threads_number:lws_y               < 2.2e-16 ***
      Residuals                                       
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1
#+end_example

****** DONE Linear data
      Convert to linear if not already done:
      #+begin_src sh :results output :exports both
        ruby ../scripts/convert_hierarchic_to_linear.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
      #+end_src

      #+RESULTS:

      Convert to csv:
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned_linear.yaml
     #+end_src

     #+RESULTS:


      #+begin_src R :results output :session :exports both
        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        summary(df)
      #+end_src

      #+RESULTS:
      #+begin_example
       y_component_number vector_length   temporary_size  vector_recompute
       Min.   :1.000      Min.   : 1.00   Min.   :2.000   true:23120      
       1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000                   
       Median :3.000      Median : 4.00   Median :2.000                   
       Mean   :3.441      Mean   : 5.73   Mean   :2.975                   
       3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000                   
       Max.   :6.000      Max.   :16.00   Max.   :4.000                   
       load_overlap      lws_y             lws_x         x_component_number
       false:11400   Min.   :   1.00   Min.   :   1.00   Min.   :1.000     
       true :11720   1st Qu.:   4.00   1st Qu.:   4.00   1st Qu.:1.000     
                     Median :  16.00   Median :  16.00   Median :2.000     
                     Mean   :  73.58   Mean   :  73.58   Mean   :2.499     
                     3rd Qu.:  64.00   3rd Qu.:  64.00   3rd Qu.:3.000     
                     Max.   :1024.00   Max.   :1024.00   Max.   :4.000     
       time_per_pixel     
       Min.   :1.165e-10  
       1st Qu.:3.028e-10  
       Median :7.125e-10  
       Mean   :2.013e-09  
       3rd Qu.:2.001e-09  
       Max.   :4.452e-08
#+end_example

      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
        library(ggplot2)
        library(grid)
        library(gridExtra)

        p1 <- qplot(factor(df$x_component_number), df$time_per_pixel) + 
            scale_y_log10() + 
            geom_boxplot() + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of x component number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p2 <- qplot(factor(df$y_component_number), df$time_per_pixel) + 
            scale_y_log10() + 
            geom_boxplot() + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of y components number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p3 <- qplot(factor(df$lws_x), df$time_per_pixel) + 
            scale_y_log10() + 
            geom_boxplot() + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of lws x") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p4 <- qplot(factor(df$lws_y), df$time_per_pixel) + 
            scale_y_log10() + 
            geom_boxplot() + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of lws y") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        grid.arrange(p1, p2, p3, p4, ncol=2, top=textGrob("Impact of factors in log scale")) 

      #+end_src

      #+RESULTS:
      [[file:/tmp/babel-4163dFq/figure41639IA.png]]

      #+begin_src R :results output :session :exports both
        df[df$time_per_pixel == min(df$time_per_pixel),]
      #+end_src

      #+RESULTS:
      #+begin_example
            y_component_number vector_length temporary_size vector_recompute
      13752                  6             1              2             true
            load_overlap lws_y lws_x x_component_number time_per_pixel
      13752         true     2   512                  1   1.165013e-10
       y_component_number vector_length temporary_size vector_recompute load_overlap
       Min.   :6          Min.   :1     Min.   :2      true:16          false:8     
       1st Qu.:6          1st Qu.:1     1st Qu.:2                       true :8     
       Median :6          Median :1     Median :3                                   
       Mean   :6          Mean   :1     Mean   :3                                   
       3rd Qu.:6          3rd Qu.:1     3rd Qu.:4                                   
       Max.   :6          Max.   :1     Max.   :4                                   
           lws_y       lws_x     x_component_number time_per_pixel     
       Min.   :2   Min.   :512   Min.   :1.00       Min.   :1.165e-10  
       1st Qu.:2   1st Qu.:512   1st Qu.:1.75       1st Qu.:1.444e-10  
       Median :2   Median :512   Median :2.50       Median :1.752e-10  
       Mean   :2   Mean   :512   Mean   :2.50       Mean   :1.678e-10  
       3rd Qu.:2   3rd Qu.:512   3rd Qu.:3.25       3rd Qu.:1.967e-10  
       Max.   :2   Max.   :512   Max.   :4.00       Max.   :2.057e-10
       #+end_example

      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
        df2 <- df[df$y_component_number == 6 & df$vector_length == 1 & df$lws_x == 512 & df$lws_y == 2,]
        ggplot(df2, aes(x=factor(x_component_number), y=time_per_pixel)) + 
            scale_y_log10() + 
            geom_boxplot() + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            ggtitle("Impact of x component number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))
      #+end_src

      #+RESULTS:
      [[file:/tmp/babel-4163dFq/figure4163KTG.png]]

      For now we have exactly the same observation as with hierarchic factors.

****** DONE Conclusion
       Now I am convinced linear regression is not suited because even
       if we can study interactions between parameters, if for all of
       them the distribution of the noise is not known (doesn't follow
       any law) like the case of elements number, say in a different
       way for all the parameters if the minimum does not follow the
       same evolution than the mean, we cannot predict the
       best value.
***** TODO Quantile regression
     First need to know exactly what is behind quantile
     regression. Then we need to know what design of experiments could
     work with extremal quantile regression. That means which one
     brings us the most informations with the smallest set of
     points. But first need to know it the correct model for our
     data. So we first define the model, then try different 
     experiment designs and finally try to recover the model from the
     selected experiment design by using the least point as possible.

     - [X] Compare weighted with rq and geom_quantile
     - [X] Take a look at predict
     - [ ] Try optim on the model

****** TODO How does it really work?
       There is multiple way of doing quantile regression. For example
       we have:
         - Empirical quantile regression
         - Least absolute value
         - Weigthed least squares
         - etc
******* TODO The rq function
        _WARNING_: For the moment we are stuck with rq because of the
        problem with our data, the summary function cannot compute
        p-values, std err, etc....

        #+begin_src sh :results output :exports both
          ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
        #+end_src

        #+RESULTS:

        #+begin_src R :results output :session :exports both
          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          summary(df)
        #+end_src
        
        #+begin_src R :results output :session :exports both
          library(quantreg)
          df$log_time_per_pixel <- log(df$time_per_pixel)
          model <- rq(data=df, formula = log_time_per_pixel ~ lws_y, tau=.05, method="fn")
          summary(model) 
        #+end_src

        #+RESULTS:
        #+begin_example

        Call: rq(formula = log_time_per_pixel ~ lws_y, tau = 0.05, data = df, 
            method = "fn")

        tau: [1] 0.05

        Coefficients:
                    Value       Std. Error  t value     Pr(>|t|)   
        (Intercept)   -22.58029     0.00558 -4045.88306     0.00000
        lws_y           0.00310     0.00004    78.30774     0.00000
       #+end_example

******* DONE Weighted least squares
******** DONE Function
        #+begin_src sh :results output :exports both
          ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
        #+end_src

        #+RESULTS:

        #+begin_src R :results output :session :exports both
          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          summary(df)
        #+end_src

        #+RESULTS:
        #+begin_example
         elements_number  y_component_number vector_length   temporary_size 
         Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
         1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
         Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
         Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
         3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
         Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
         vector_recompute load_overlap  threads_number       lws_y        
         true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                          true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                        Median : 256.0   Median :  16.00  
                                        Mean   : 368.1   Mean   :  73.58  
                                        3rd Qu.: 512.0   3rd Qu.:  64.00  
                                        Max.   :1024.0   Max.   :1024.00  
         time_per_pixel     
         Min.   :1.165e-10  
         1st Qu.:3.028e-10  
         Median :7.125e-10  
         Mean   :2.013e-09  
         3rd Qu.:2.001e-09  
         Max.   :4.452e-08
#+end_example

        #+begin_src R :results output :session :exports both
          f <- function(x) { x * (0.05 - 1 * (x < 0)) }
          g <- function(x) { f(x)/x^2 }
          iwr <- function(d, form) { 
              model <- lm(data=d,formula=form)
              for(i in 1:200){
                  residus <- residuals(reg)
                  model <- lm(data=d, formula=form, weight=g(residus))
              }
              model
          }
        #+end_src

        #+RESULTS:

        #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
          default <- par()
          par(mfrow = c(1, 2))
          curve(f,-10,10)
          curve(g,-10,10)
          par(default)
        #+end_src

        #+RESULTS:
        [[file:/tmp/babel-3544UyE/figure3544yPq.png]]
******** Playing with weight regression 
********* Elements number        
        I don't know why but in the function iwr R cannot found
        residus we using weight in lm:
        #+begin_src R :results output :session :exports both
          formula <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number
          reg <- iwr(d=df,form=formula)
          summary(reg)
        #+end_src

        #+RESULTS:
        : Error in residuals(reg) (from #4) : objet 'reg' introuvable
        : Error in summary(reg) : objet 'reg' introuvable

        #+begin_src R :results output :session :exports both
          formula <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number
          reg <- lm(data=df,formula=formula)
          for(i in 1:200){
              E <- residuals(reg)
              reg <- lm(data=df,formula=formula,weight=g(E))
          }
          summary(reg)
        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm(formula = formula, data = df, weights = g(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -1.054e-05  2.272e-06  4.404e-06  9.175e-06  4.685e-05 

        Coefficients:
                             Estimate Std. Error t value Pr(>|t|)    
        (Intercept)         1.711e-10  2.128e-12  80.403   <2e-16 ***
        elements_number    -6.737e-12  1.469e-13 -45.872   <2e-16 ***
        y_component_number -5.149e-12  4.285e-13 -12.017   <2e-16 ***
        vector_length       2.910e-11  7.438e-14 391.253   <2e-16 ***
        threads_number      7.604e-16  1.758e-15   0.433    0.665    
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 9.417e-06 on 23115 degrees of freedom
        Multiple R-squared:  0.9991,	Adjusted R-squared:  0.9991 
        F-statistic: 6.667e+06 on 4 and 23115 DF,  p-value: < 2.2e-16
        #+end_example

        The linear model is not correct for the elements number:
        #+begin_src R :results output graphics :file img/20160402/pilipili2/hierarchic_wq_elements_number_zoom_lin_p.png :exports both :width 600 :height 400 :session
        plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,5e-10))
        abline(reg,col="red")
        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/hierarchic_wq_elements_number_zoom_lin_p.png]]

        #+begin_src R :results output :session :exports both
          # formula <-formula(time_per_pixel ~ elements_number + I(1/elements_number))
          formula <-formula(time_per_pixel ~ elements_number + I(1/elements_number))
          reg_wq <- lm(data=df,formula=formula)
                for(i in 1:200){
                    E <- residuals(reg_wq)
                    reg_wq <- lm(data=df,formula=formula,weight=g(E))
                }
          summary(reg_wq)
        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm(formula = formula, data = df, weights = g(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -7.149e-06  2.596e-06  5.170e-06  9.525e-06  4.705e-05 

        Coefficients:
                               Estimate Std. Error t value Pr(>|t|)    
        (Intercept)           1.534e-10  9.112e-13 168.303   <2e-16 ***
        elements_number      -3.765e-13  4.070e-14  -9.249   <2e-16 ***
        I(1/elements_number)  9.854e-11  3.496e-12  28.184   <2e-16 ***
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 9.652e-06 on 23117 degrees of freedom
        Multiple R-squared:  0.1369,	Adjusted R-squared:  0.1368 
        F-statistic:  1833 on 2 and 23117 DF,  p-value: < 2.2e-16
#+end_example

        
        Let's compare
        #+begin_src R :results output graphics :file img/20160402/pilipili2/hierarchic_wq_elements_number_zoom_bp.png :exports both :width 600 :height 400 :session
          plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,1e-9))
          lines(sort(df$elements_number),predict(reg_wq)[order(df$elements_number)],col="red")  
        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/hierarchic_wq_elements_number_zoom_bp.png]]

        #+begin_src R :results output graphics :file img/20160402/pilipili2/hierarchic_wq_elements_number_reg_plot.png :exports both :width 800 :height 600 :session
          default <- par()
          par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
          plot(reg_wq)
          par(default)        
        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/hierarchic_wq_elements_number_reg_plot.png]]

        #+begin_src R :results output graphics :file img/20160402/pilipili2/hierarchic_geom_q_elements_number_zoom_bp.png :exports both :width 600 :height 400 :session
          library(ggplot2)
          ggplot(df) + 
              aes(x=elements_number, y=time_per_pixel ) +
              geom_point(alpha=.2) +
              coord_cartesian(ylim=c(0,1e-9)) +
              geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
              geom_quantile(quantiles=0.05, formula = y ~ x + I(1/x), colour="green")
        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/hierarchic_geom_q_elements_number_zoom_bp.png]]

        #+begin_src R :results output graphics :file img/20160402/pilipili2/hierarchic_rq_elements_number_zoom_bp.png :exports both :width 600 :height 400 :session
          library(quantreg)
          reg_rq <- rq(data=df, formula = time_per_pixel ~ elements_number + I(1/elements_number), tau=.05)
          plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,1e-9))
          lines(sort(df$elements_number),predict(reg_rq)[order(df$elements_number)],col="red")  
        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/hierarchic_rq_elements_number_zoom_bp.png]]

        
        By looking at the plot and comparing the result given by rq
        and the weighted regression we see that they are pretty close
        #+begin_src R :results output :session :exports both
          reg_wq
          reg_rq
        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm(formula = formula, data = df, weights = g(E))

        Coefficients:
                 (Intercept)       elements_number  I(1/elements_number)  
                   1.534e-10            -3.765e-13             9.854e-11
        Call:
        rq(formula = time_per_pixel ~ elements_number + I(1/elements_number), 
            tau = 0.05, data = df)

        Coefficients:
                 (Intercept)      elements_number I(1/elements_number) 
                1.536550e-10        -3.815466e-13         9.460339e-11 

        Degrees of freedom: 23120 total; 23117 residual
        #+end_example

********* Lws y
        
        #+begin_src R :results output :session :exports both
          reg_wq <- lm(data=df,formula=time_per_pixel ~ lws_y)
          for(i in 1:200){
              E <- residuals(reg_wq)
              reg_wq <- lm(data=df,formula=time_per_pixel ~ lws_y, weight=g(E))
          }
          summary(reg_wq)
        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm(formula = time_per_pixel ~ lws_y, data = df, weights = g(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -1.290e-05  2.483e-06  4.784e-06  8.696e-06  4.630e-05 

        Coefficients:
                     Estimate Std. Error t value Pr(>|t|)    
        (Intercept) 1.300e-10  4.794e-13   271.3   <2e-16 ***
        lws_y       3.289e-12  6.549e-15   502.3   <2e-16 ***
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 9.191e-06 on 23118 degrees of freedom
        Multiple R-squared:  0.9161,	Adjusted R-squared:  0.9161 
        F-statistic: 2.523e+05 on 1 and 23118 DF,  p-value: < 2.2e-16
#+end_example

        The linear model is not correct for the elements number:
        #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
        plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,1e-8))
        abline(reg_wq,col="red")
        #+end_src

        #+RESULTS:
        [[file:/tmp/babel-14260bXM/figure14260h3P.png]]

        #+begin_src R :results output :session :exports both
          # formula <-formula(time_per_pixel ~ elements_number + I(1/elements_number))
          formula <-formula(time_per_pixel ~ lws_y )
          reg_wq <- lm(data=df,formula=formula)
                for(i in 1:200){
                    E <- residuals(reg_wq)
                    reg_wq <- lm(data=df,formula=formula,weight=g(E))
                }
          summary(reg_wq)
        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm(formula = formula, data = df, weights = g(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -1.290e-05  2.483e-06  4.784e-06  8.696e-06  4.630e-05 

        Coefficients:
                     Estimate Std. Error t value Pr(>|t|)    
        (Intercept) 1.300e-10  4.794e-13   271.3   <2e-16 ***
        lws_y       3.289e-12  6.549e-15   502.3   <2e-16 ***
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 9.191e-06 on 23118 degrees of freedom
        Multiple R-squared:  0.9161,	Adjusted R-squared:  0.9161 
        F-statistic: 2.523e+05 on 1 and 23118 DF,  p-value: < 2.2e-16
#+end_example

        #+begin_src R :results output graphics :file img/20160402/pilipili2/hierarchic_wq_lws_y_zoom_bp.png :exports both :width 600 :height 400 :session
           plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,1e-8))
          lines(sort(df$lws_y),predict(reg_wq)[order(df$lws_y)],col="red")  
        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/hierarchic_wq_lws_y_zoom_bp.png]]

        #+begin_src R :results output graphics :file img/20160402/pilipili2/hierarchic_wq_lws_y_reg_plot.png :exports both :width 800 :height 600 :session
          default <- par()
          par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
          plot(reg_wq)
          par(default)        
        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/hierarchic_wq_lws_y_reg_plot.png]]

        #+begin_src R :results output graphics :file img/20160402/pilipili2/hierarchic_geom_q_lws_y_zoom_bp.png :exports both :width 600 :height 400 :session
          library(ggplot2)
          ggplot(df) + 
              aes(x=lws_y, y=time_per_pixel ) +
              geom_point(alpha=.2) +
              coord_cartesian(ylim=c(0,1e-8)) +
              geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
              geom_quantile(quantiles=0.05, formula = y ~ x, colour="green")
        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/hierarchic_geom_q_lws_y_zoom_bp.png]]

        #+begin_src R :results output graphics :file img/20160402/pilipili2/hierarchic_rq_lws_y_zoom_bp.png :exports both :width 600 :height 400 :session
          library(quantreg)
          reg_rq <- rq(data=df, formula = time_per_pixel ~ lws_y, tau=.05)
          plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,1e-8))
          lines(sort(df$lws_y),predict(reg_rq)[order(df$lws_y)],col="red")  
        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/hierarchic_rq_lws_y_zoom_bp.png]]

******** DONE Comparison
         Lets's compare what we have with rq and weighted regression:
         #+begin_src R :results output :session :exports both
            form_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
            form_y_comp <- time_per_pixel ~ y_component_number
            form_v_len <- time_per_pixel ~ vector_length 
            form_th_nb <- time_per_pixel ~ threads_number
            form_lws_y <- time_per_pixel ~ lws_y

            model_elem_nb <- lm(data=df,formula=form_elem_nb)
            for(i in 1:200){
                E <- residuals(model_elem_nb)
                model_elem_nb <- lm(data=df,formula=form_elem_nb,weight=g(E))
            }

            model_y_comp <- lm(data=df,formula=form_y_comp)
            for(i in 1:200){
                E <- residuals(model_y_comp)
                model_y_comp <- lm(data=df,formula=form_y_comp,weight=g(E))
            }

            model_v_len <- lm(data=df,formula=form_v_len)
            for(i in 1:200){
                E <- residuals(model_v_len)
                model_v_len <- lm(data=df,formula=form_v_len,weight=g(E))
            }

            model_th_nb <- lm(data=df,formula=form_th_nb)
            for(i in 1:200){
                E <- residuals(model_th_nb)
                model_th_nb <- lm(data=df,formula=form_th_nb,weight=g(E))
            }

            model_lws_y <- lm(data=df,formula=form_lws_y)
            for(i in 1:200){
                E <- residuals(model_lws_y)
                model_lws_y <- lm(data=df,formula=form_lws_y,weight=g(E))
            }

         #+end_src

         #+RESULTS:

         #+begin_src R :results output :session :exports both
           library(quantreg)
           model_rq_elem_nb <- rq(data=df,formula=form_elem_nb,tau=.05)
           model_rq_y_comp <- rq(data=df,formula=form_y_comp,tau=.05)
           model_rq_v_len <- rq(data=df,formula=form_v_len,tau=.05)
           model_rq_th_nb <- rq(data=df,formula=form_th_nb,tau=.05)
           model_rq_lws_y <- rq(data=df,formula=form_lws_y,tau=.05)
         #+end_src

         #+RESULTS:

         We can see that the value for the the intercept are very
         close between rq and weighted regression:
         #+begin_src R :results output :session :exports both
           model_rq_elem_nb
           model_elem_nb
           model_rq_y_comp
           model_y_comp
           model_rq_v_len
           model_v_len
           model_rq_th_nb
           model_th_nb
           model_rq_lws_y
           model_lws_y
         #+end_src

         #+RESULTS:
         #+begin_example
         Call:
         rq(formula = form_elem_nb, tau = 0.05, data = df)

         Coefficients:
                  (Intercept)      elements_number I(1/elements_number) 
                 1.536550e-10        -3.815466e-13         9.460339e-11 

         Degrees of freedom: 23120 total; 23117 residual

         Call:
         lm(formula = form_elem_nb, data = df, weights = g(E))

         Coefficients:
                  (Intercept)       elements_number  I(1/elements_number)  
                    1.534e-10            -3.765e-13             9.854e-11
         Call:
         rq(formula = form_y_comp, tau = 0.05, data = df)

         Coefficients:
                (Intercept) y_component_number 
               2.470980e-10      -2.056082e-11 

         Degrees of freedom: 23120 total; 23118 residual

         Call:
         lm(formula = form_y_comp, data = df, weights = g(E))

         Coefficients:
                (Intercept)  y_component_number  
                  2.471e-10          -2.056e-11
         Call:
         rq(formula = form_v_len, tau = 0.05, data = df)

         Coefficients:
           (Intercept) vector_length 
          1.025898e-10  2.395627e-11 

         Degrees of freedom: 23120 total; 23118 residual

         Call:
         lm(formula = form_v_len, data = df, weights = g(E))

         Coefficients:
           (Intercept)  vector_length  
             1.026e-10      2.396e-11
         Call:
         rq(formula = form_th_nb, tau = 0.05, data = df)

         Coefficients:
            (Intercept) threads_number 
           1.637616e-10  -8.463471e-15 

         Degrees of freedom: 23120 total; 23118 residual

         Call:
         lm(formula = form_th_nb, data = df, weights = g(E))

         Coefficients:
            (Intercept)  threads_number  
              1.638e-10      -8.463e-15
         Call:
         rq(formula = form_lws_y, tau = 0.05, data = df)

         Coefficients:
          (Intercept)        lws_y 
         1.303927e-10 3.181779e-12 

         Degrees of freedom: 23120 total; 23118 residual

         Call:
         lm(formula = form_lws_y, data = df, weights = g(E))

         Coefficients:
         (Intercept)        lws_y  
           1.300e-10    3.289e-12
         #+end_example

         Visually we can say that the results is still pretty close:
         #+begin_src R :results output graphics :file img/20160402/pilipili2/comparison_rq_wq.png :exports both :width 800 :height 600 :session
           default <- par()
           par(mfrow = c(2, 5), oma = c(0, 0, 2, 0))

           plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,1e-9))
           lines(sort(df$elements_number),predict(model_elem_nb)[order(df$elements_number)],col="red")  
           title("weighted")

           plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,1e-9))
           lines(sort(df$elements_number),predict(model_rq_elem_nb)[order(df$elements_number)],col="red")  
           title("rq")

           plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,5e-10))
           lines(sort(df$y_component_number),predict(model_y_comp)[order(df$y_component_number)],col="red")  
           title("weighted")

           plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,5e-10))
           lines(sort(df$y_component_number),predict(model_rq_y_comp)[order(df$y_component_number)],col="red")  
           title("rq")

           plot(y=df$time_per_pixel,df$vector_length, ylim=c(0,5e-10))
           lines(sort(df$vector_length),predict(model_v_len)[order(df$vector_length)],col="red")  
           title("weighted")

           plot(y=df$time_per_pixel,df$vector_length, ylim=c(0,5e-10))
           lines(sort(df$vector_length),predict(model_rq_v_len)[order(df$vector_length)],col="red")  
           title("rq")

           plot(y=df$time_per_pixel,df$threads_number, ylim=c(0,1e-9))
           lines(sort(df$threads_number),predict(model_th_nb)[order(df$threads_number)],col="red")  
           title("weighted")

           plot(y=df$time_per_pixel,df$threads_number, ylim=c(0,1e-9))
           lines(sort(df$threads_number),predict(model_rq_th_nb)[order(df$threads_number)],col="red")  
           title("rq")

           plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,1e-8))
           lines(sort(df$lws_y),predict(model_lws_y)[order(df$lws_y)],col="red")  
           title("weighted")

           plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,1e-8))
           lines(sort(df$lws_y),predict(model_rq_lws_y)[order(df$lws_y)],col="red")  
           title("rq")

           par(default)        

         #+end_src

         #+RESULTS:
         [[file:img/20160402/pilipili2/comparison_rq_wq.png]]

         #+begin_src R :results output graphics :file img/20160402/pilipili2/comparison_rq_wq_sup.png :exports both :width 800 :height 600 :session
           default <- par()
           par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

           plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,5e-10))
           lines(sort(df$elements_number),predict(model_elem_nb)[order(df$elements_number)],col="red")  
           lines(sort(df$elements_number),predict(model_rq_elem_nb)[order(df$elements_number)],col="blue")  

           plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,3e-10))
           lines(sort(df$y_component_number),predict(model_y_comp)[order(df$y_component_number)],col="red")  
           lines(sort(df$y_component_number),predict(model_rq_y_comp)[order(df$y_component_number)],col="blue")  

           plot(y=df$time_per_pixel,df$vector_length, ylim=c(0,5e-10))
           lines(sort(df$vector_length),predict(model_v_len)[order(df$vector_length)],col="red")  
           lines(sort(df$vector_length),predict(model_rq_v_len)[order(df$vector_length)],col="blue")  

           plot(y=df$time_per_pixel,df$threads_number, ylim=c(0,2e-10))
           lines(sort(df$threads_number),predict(model_th_nb)[order(df$threads_number)],col="red")  
           lines(sort(df$threads_number),predict(model_rq_th_nb)[order(df$threads_number)],col="blue")  

           plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,4e-9))
           lines(sort(df$lws_y),predict(model_lws_y)[order(df$lws_y)],col="red")  
           lines(sort(df$lws_y),predict(model_rq_lws_y)[order(df$lws_y)],col="blue")  

           par(default)        
         #+end_src

         #+RESULTS:
         [[file:img/20160402/pilipili2/comparison_rq_wq_sup.png]]

         Weighted regression seems to do what we want to. For now we
         can't make more comparison due to the trouble we have with
         rq and the summary function. We stick with the weighted regression.
         #+begin_src R :results output :session :exports both
         summary(model_rq_v_len)
         #+end_src

         #+RESULTS:
         : Error in base::backsolve(r, x, k = k, upper.tri = upper.tri, transpose = transpose,  : 
         :   matrice singuliÃ¨re dans 'backsolve'. Premier zÃ©ro sur la diagonale [1]
         : De plus : Warning message:
         : In summary.rq(model_rq_v_len) : 14688 non-positive fis

******** TODO How many iterations is really needed
         With 50 iterations we are still pretty close to the rq
         function but we are less accurate with 100 iterations. But
         how do we know how many iterations are needed?
         #+begin_src R :results output :session :exports both
            form_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
            form_y_comp <- time_per_pixel ~ y_component_number
            form_v_len <- time_per_pixel ~ vector_length 
            form_th_nb <- time_per_pixel ~ threads_number
            form_lws_y <- time_per_pixel ~ lws_y

            model_elem_nb_50 <- lm(data=df,formula=form_elem_nb)
            for(i in 1:50){
                E <- residuals(model_elem_nb_50)
                model_elem_nb_50 <- lm(data=df,formula=form_elem_nb,weight=g(E))
            }

            model_y_comp_50 <- lm(data=df,formula=form_y_comp)
            for(i in 1:50){
                E <- residuals(model_y_comp_50)
                model_y_comp_50 <- lm(data=df,formula=form_y_comp,weight=g(E))
            }

            model_v_len_50 <- lm(data=df,formula=form_v_len)
            for(i in 1:50){
                E <- residuals(model_v_len_50)
                model_v_len_50 <- lm(data=df,formula=form_v_len,weight=g(E))
            }

            model_th_nb_50 <- lm(data=df,formula=form_th_nb)
            for(i in 1:50){
                E <- residuals(model_th_nb_50)
                model_th_nb_50 <- lm(data=df,formula=form_th_nb,weight=g(E))
            }

            model_lws_y_50 <- lm(data=df,formula=form_lws_y)
            for(i in 1:50){
                E <- residuals(model_lws_y_50)
                model_lws_y_50 <- lm(data=df,formula=form_lws_y,weight=g(E))
            }

            model_elem_nb_100 <- lm(data=df,formula=form_elem_nb)
            for(i in 1:100){
                E <- residuals(model_elem_nb_100)
                model_elem_nb_100 <- lm(data=df,formula=form_elem_nb,weight=g(E))
            }

            model_y_comp_100 <- lm(data=df,formula=form_y_comp)
            for(i in 1:100){
                E <- residuals(model_y_comp_100)
                model_y_comp_100 <- lm(data=df,formula=form_y_comp,weight=g(E))
            }

            model_v_len_100 <- lm(data=df,formula=form_v_len)
            for(i in 1:100){
                E <- residuals(model_v_len_100)
                model_v_len_100 <- lm(data=df,formula=form_v_len,weight=g(E))
            }

            model_th_nb_100 <- lm(data=df,formula=form_th_nb)
            for(i in 1:100){
                E <- residuals(model_th_nb_100)
                model_th_nb_100 <- lm(data=df,formula=form_th_nb,weight=g(E))
            }

            model_lws_y_100 <- lm(data=df,formula=form_lws_y)
            for(i in 1:100){
                E <- residuals(model_lws_y_100)
                model_lws_y_100 <- lm(data=df,formula=form_lws_y,weight=g(E))
            }

         #+end_src

         #+RESULTS:

         #+begin_src R :results output :session :exports both
           library(quantreg)
           model_rq_elem_nb <- rq(data=df,formula=form_elem_nb,tau=.05)
           model_rq_y_comp <- rq(data=df,formula=form_y_comp,tau=.05)
           model_rq_v_len <- rq(data=df,formula=form_v_len,tau=.05)
           model_rq_th_nb <- rq(data=df,formula=form_th_nb,tau=.05)
           model_rq_lws_y <- rq(data=df,formula=form_lws_y,tau=.05)
         #+end_src

         #+RESULTS:
         : Le chargement a nÃ©cessitÃ© le package : SparseM
         : 
         : Attachement du package : âSparseMâ
         : 
         : The following object is masked from âpackage:baseâ:
         : 
         :     backsolve

         Visually we can say that the results is still pretty close:
         #+begin_src R :results output graphics :file img/20160402/pilipili2/comparison_wq_iterations.png :exports both :width 800 :height 600 :session
           default <- par()
           par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

           plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,5e-10))
           lines(sort(df$elements_number),predict(model_elem_nb_50)[order(df$elements_number)],col="red")  
           lines(sort(df$elements_number),predict(model_elem_nb_100)[order(df$elements_number)],col="green")  
           lines(sort(df$elements_number),predict(model_rq_elem_nb)[order(df$elements_number)],col="blue")  

           plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,3e-10))
           lines(sort(df$y_component_number),predict(model_y_comp_50)[order(df$y_component_number)],col="red")  
           lines(sort(df$y_component_number),predict(model_y_comp_100)[order(df$y_component_number)],col="green")  
           lines(sort(df$y_component_number),predict(model_rq_y_comp)[order(df$y_component_number)],col="blue")  

           plot(y=df$time_per_pixel,df$vector_length, ylim=c(0,5e-10))
           lines(sort(df$vector_length),predict(model_v_len_50)[order(df$vector_length)],col="red")  
           lines(sort(df$vector_length),predict(model_v_len_100)[order(df$vector_length)],col="green")  
           lines(sort(df$vector_length),predict(model_rq_v_len)[order(df$vector_length)],col="blue")  

           plot(y=df$time_per_pixel,df$threads_number, ylim=c(0,2e-10))
           lines(sort(df$threads_number),predict(model_th_nb_50)[order(df$threads_number)],col="red")  
           lines(sort(df$threads_number),predict(model_th_nb_100)[order(df$threads_number)],col="green")  
           lines(sort(df$threads_number),predict(model_rq_th_nb)[order(df$threads_number)],col="blue")  

           plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,4e-9))
           lines(sort(df$lws_y),predict(model_lws_y_50)[order(df$lws_y)],col="red")  
           lines(sort(df$lws_y),predict(model_lws_y_100)[order(df$lws_y)],col="green")  
           lines(sort(df$lws_y),predict(model_rq_lws_y)[order(df$lws_y)],col="blue")  

           par(default)        
         #+end_src

         #+RESULTS:
         [[file:img/20160402/pilipili2/comparison_wq_iterations.png]]
******** TODO Which limit to the weight
         #+begin_src R :results output :session :exports both
           f <- function(x) { x * (0.05 - 1 * (x < 0)) }
           g <- function(x) { f(x)/x^2 }
           h <- function(x) {pmin(g(x),1e15)}
         #+end_src

         #+RESULTS:

         #+begin_src R :results output :session :exports both
            form_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
            form_y_comp <- time_per_pixel ~ y_component_number
            form_v_len <- time_per_pixel ~ vector_length 
            form_th_nb <- time_per_pixel ~ threads_number
            form_lws_y <- time_per_pixel ~ lws_y

            model_elem_nb_50 <- lm(data=df,formula=form_elem_nb)
            for(i in 1:50){
                E <- residuals(model_elem_nb_50)
                model_elem_nb_50 <- lm(data=df,formula=form_elem_nb,weight=g(E))
            }

            model_y_comp_50 <- lm(data=df,formula=form_y_comp)
            for(i in 1:50){
                E <- residuals(model_y_comp_50)
                model_y_comp_50 <- lm(data=df,formula=form_y_comp,weight=g(E))
            }

            model_v_len_50 <- lm(data=df,formula=form_v_len)
            for(i in 1:50){
                E <- residuals(model_v_len_50)
                model_v_len_50 <- lm(data=df,formula=form_v_len,weight=g(E))
            }

            model_th_nb_50 <- lm(data=df,formula=form_th_nb)
            for(i in 1:50){
                E <- residuals(model_th_nb_50)
                model_th_nb_50 <- lm(data=df,formula=form_th_nb,weight=g(E))
            }

            model_lws_y_50 <- lm(data=df,formula=form_lws_y)
            for(i in 1:50){
                E <- residuals(model_lws_y_50)
                model_lws_y_50 <- lm(data=df,formula=form_lws_y,weight=g(E))
            }
         #+end_src

         #+RESULTS:

         #+begin_src R :results output :session :exports both
            model_elem_nb_100 <- lm(data=df,formula=form_elem_nb)
            for(i in 1:100){
                E <- residuals(model_elem_nb_100)
                model_elem_nb_100 <- lm(data=df,formula=form_elem_nb,weight=h(E))
            }

            model_y_comp_100 <- lm(data=df,formula=form_y_comp)
            for(i in 1:100){
                E <- residuals(model_y_comp_100)
                model_y_comp_100 <- lm(data=df,formula=form_y_comp,weight=h(E))
            }

            model_v_len_100 <- lm(data=df,formula=form_v_len)
            for(i in 1:100){
                E <- residuals(model_v_len_100)
                model_v_len_100 <- lm(data=df,formula=form_v_len,weight=h(E))
            }

            model_th_nb_100 <- lm(data=df,formula=form_th_nb)
            for(i in 1:100){
                E <- residuals(model_th_nb_100)
                model_th_nb_100 <- lm(data=df,formula=form_th_nb,weight=h(E))
            }

            model_lws_y_100 <- lm(data=df,formula=form_lws_y)
            for(i in 1:100){
                E <- residuals(model_lws_y_100)
                model_lws_y_100 <- lm(data=df,formula=form_lws_y,weight=h(E))
            }

         #+end_src

         #+RESULTS:

         #+begin_src R :results output :session :exports both
           library(quantreg)
           model_rq_elem_nb <- rq(data=df,formula=form_elem_nb,tau=.05)
           model_rq_y_comp <- rq(data=df,formula=form_y_comp,tau=.05)
           model_rq_v_len <- rq(data=df,formula=form_v_len,tau=.05)
           model_rq_th_nb <- rq(data=df,formula=form_th_nb,tau=.05)
           model_rq_lws_y <- rq(data=df,formula=form_lws_y,tau=.05)
         #+end_src

         #+RESULTS:

         Visually we can say that the results is still pretty close:
         #+begin_src R :results output graphics :file img/20160402/pilipili2/weighted_1.png :exports both :width 800 :height 600 :session
           default <- par()
           par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

           plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,5e-10))
           lines(sort(df$elements_number),predict(model_elem_nb_50)[order(df$elements_number)],col="red")  
           lines(sort(df$elements_number),predict(model_elem_nb_100)[order(df$elements_number)],col="green")  
           lines(sort(df$elements_number),predict(model_rq_elem_nb)[order(df$elements_number)],col="blue")  

           plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,3e-10))
           lines(sort(df$y_component_number),predict(model_y_comp_50)[order(df$y_component_number)],col="red")  
           lines(sort(df$y_component_number),predict(model_y_comp_100)[order(df$y_component_number)],col="green")  
           lines(sort(df$y_component_number),predict(model_rq_y_comp)[order(df$y_component_number)],col="blue")  

           plot(y=df$time_per_pixel,df$vector_length, ylim=c(0,5e-10))
           lines(sort(df$vector_length),predict(model_v_len_50)[order(df$vector_length)],col="red")  
           lines(sort(df$vector_length),predict(model_v_len_100)[order(df$vector_length)],col="green")  
           lines(sort(df$vector_length),predict(model_rq_v_len)[order(df$vector_length)],col="blue")  

           plot(y=df$time_per_pixel,df$threads_number, ylim=c(0,2e-10))
           lines(sort(df$threads_number),predict(model_th_nb_50)[order(df$threads_number)],col="red")  
           lines(sort(df$threads_number),predict(model_th_nb_100)[order(df$threads_number)],col="green")  
           lines(sort(df$threads_number),predict(model_rq_th_nb)[order(df$threads_number)],col="blue")  

           plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,4e-9))
           lines(sort(df$lws_y),predict(model_lws_y_50)[order(df$lws_y)],col="red")  
           lines(sort(df$lws_y),predict(model_lws_y_100)[order(df$lws_y)],col="green")  
           lines(sort(df$lws_y),predict(model_rq_lws_y)[order(df$lws_y)],col="blue")  

           par(default)        
         #+end_src

         #+RESULTS:
         [[file:img/20160402/pilipili2/weighted_1.png]]


         By checking the complete model we can see that the coef for y
         component number is not correct, it should be negative
         because the minimum decrease with the increasing of the y
         component number:
         #+begin_src R :results output :session :exports both
           model <- time_per_pixel ~ elements_number + I(1/elements_number) + y_component_number + 
                    vector_length + threads_number + lws_y

           fit_100 <- lm(data=df,formula=model)
           for(i in 1:100){
               E <- residuals(fit_100)
               fit_100 <- lm(data=df,formula=model,weight=h(E))
           }
           summary(fit_100)
         #+end_src

         #+RESULTS:
         #+begin_example

         Call:
         lm(formula = model, data = df, weights = h(E))

         Weighted Residuals:
                Min         1Q     Median         3Q        Max 
         -1.235e-05  2.357e-06  3.836e-06  8.074e-06  4.593e-05 

         Coefficients:
                                Estimate Std. Error t value Pr(>|t|)    
         (Intercept)           1.318e-10  2.528e-12   52.15   <2e-16 ***
         elements_number      -8.832e-12  8.425e-14 -104.83   <2e-16 ***
         I(1/elements_number)  1.852e-10  4.921e-12   37.63   <2e-16 ***
         y_component_number    6.232e-12  3.541e-13   17.60   <2e-16 ***
         vector_length         3.156e-11  8.370e-14  377.06   <2e-16 ***
         threads_number       -1.530e-13  1.421e-15 -107.68   <2e-16 ***
         lws_y                 3.510e-12  1.414e-15 2482.89   <2e-16 ***
         ---
         Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

         Residual standard error: 8.805e-06 on 23113 degrees of freedom
         Multiple R-squared:  0.9983,	Adjusted R-squared:  0.9983 
         F-statistic: 2.247e+06 on 6 and 23113 DF,  p-value: < 2.2e-16
         #+end_example

         By unzooming, we can see that for y component number it is
         almost flat so maybe that is why the we did not found the
         correct coefficient.
         #+begin_src R :results output graphics :file img/20160402/pilipili2/weighted_no_zoom.png :exports both :width 600 :height 400 :session
               default <- par()
           par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

           plot(y=df$time_per_pixel,df$elements_number)
           lines(sort(df$elements_number),predict(model_elem_nb_50)[order(df$elements_number)],col="red")  
           lines(sort(df$elements_number),predict(model_elem_nb_100)[order(df$elements_number)],col="green")  
           lines(sort(df$elements_number),predict(model_rq_elem_nb)[order(df$elements_number)],col="blue")  

           plot(y=df$time_per_pixel,df$y_component_number)
           lines(sort(df$y_component_number),predict(model_y_comp_50)[order(df$y_component_number)],col="red")  
           lines(sort(df$y_component_number),predict(model_y_comp_100)[order(df$y_component_number)],col="green")  
           lines(sort(df$y_component_number),predict(model_rq_y_comp)[order(df$y_component_number)],col="blue")  

           plot(y=df$time_per_pixel,df$vector_length)
           lines(sort(df$vector_length),predict(model_v_len_50)[order(df$vector_length)],col="red")  
           lines(sort(df$vector_length),predict(model_v_len_100)[order(df$vector_length)],col="green")  
           lines(sort(df$vector_length),predict(model_rq_v_len)[order(df$vector_length)],col="blue")  

           plot(y=df$time_per_pixel,df$threads_number)
           lines(sort(df$threads_number),predict(model_th_nb_50)[order(df$threads_number)],col="red")  
           lines(sort(df$threads_number),predict(model_th_nb_100)[order(df$threads_number)],col="green")  
           lines(sort(df$threads_number),predict(model_rq_th_nb)[order(df$threads_number)],col="blue")  

           plot(y=df$time_per_pixel,df$lws_y)
           lines(sort(df$lws_y),predict(model_lws_y_50)[order(df$lws_y)],col="red")  
           lines(sort(df$lws_y),predict(model_lws_y_100)[order(df$lws_y)],col="green")  
           lines(sort(df$lws_y),predict(model_rq_lws_y)[order(df$lws_y)],col="blue")  

           par(default)        
         #+end_src

         #+RESULTS:
         [[file:img/20160402/pilipili2/weighted_no_zoom.png]]

         Do we still have NA coef? Yes we do.
         #+begin_src R :results output :session :exports both
           form_complete <- time_per_pixel ~ elements_number + I(1/elements_number) + I(1/y_component_number) + vector_length + threads_number + I(1/threads_number) + lws_y 
           model_screen_complete <- lm(data=set,formula=form_complete)
           for(i in 1:200){
               E <- residuals(model_screen_complete)
               model_screen_complete <- lm(data=set,formula=form_complete,weight=h(E))
           }
           summary(model_screen_complete)
         #+end_src

         #+RESULTS:
         #+begin_example

         Call:
         lm.default(formula = form_complete, data = set, weights = h(E))

         Weighted Residuals:
                Min         1Q     Median         3Q        Max 
         -1.110e-08  2.660e-07  2.573e-06  6.802e-06  8.768e-06 

         Coefficients: (3 not defined because of singularities)
                                   Estimate Std. Error   t value Pr(>|t|)    
         (Intercept)              4.148e-10  2.217e-10     1.871   0.0859 .  
         elements_number         -7.015e-11  1.213e-14 -5782.658  < 2e-16 ***
         I(1/elements_number)            NA         NA        NA       NA    
         I(1/y_component_number)         NA         NA        NA       NA    
         vector_length            1.067e-10  1.345e-11     7.936 4.08e-06 ***
         threads_number          -1.848e-13  2.034e-13    -0.909   0.3815    
         I(1/threads_number)             NA         NA        NA       NA    
         lws_y                    4.993e-12  2.727e-16 18308.133  < 2e-16 ***
         ---
         Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

         Residual standard error: 6.239e-06 on 12 degrees of freedom
         Multiple R-squared:      1,	Adjusted R-squared:      1 
         F-statistic: 1.226e+08 on 4 and 12 DF,  p-value: < 2.2e-16
#+end_example

         Maybe the weight bound is to heigh? Even with low bound we
         have NA values:
         #+begin_src R :results output :session :exports both
           h <- function(x) {pmin(g(x),1e2)}
           form_complete <- time_per_pixel ~ elements_number + I(1/elements_number) + I(1/y_component_number) + vector_length + threads_number + I(1/threads_number) + lws_y 
           model_screen_complete <- lm(data=set,formula=form_complete)
           for(i in 1:200){
               E <- residuals(model_screen_complete)
               model_screen_complete <- lm(data=set,formula=form_complete,weight=h(E))
           }
           summary(model_screen_complete)

         #+end_src

         #+RESULTS:
         #+begin_example

         Call:
         lm.default(formula = form_complete, data = set, weights = h(E))

         Residuals:
                Min         1Q     Median         3Q        Max 
         -7.553e-09 -3.545e-09  1.792e-09  2.525e-09  6.943e-09 

         Coefficients: (3 not defined because of singularities)
                                   Estimate Std. Error t value Pr(>|t|)    
         (Intercept)              4.807e-10  3.049e-10   1.577 0.140844    
         elements_number         -4.711e-11  1.081e-11  -4.359 0.000930 ***
         I(1/elements_number)            NA         NA      NA       NA    
         I(1/y_component_number)         NA         NA      NA       NA    
         vector_length            1.011e-10  1.814e-11   5.576 0.000121 ***
         threads_number           4.724e-13  2.728e-13   1.732 0.108959    
         I(1/threads_number)             NA         NA      NA       NA    
         lws_y                    4.084e-12  3.415e-13  11.957 5.03e-08 ***
         ---
         Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

         Residual standard error: 4.926e-09 on 12 degrees of freedom
         Multiple R-squared:  0.9464,	Adjusted R-squared:  0.9286 
         F-statistic: 52.99 on 4 and 12 DF,  p-value: 1.58e-07
         #+end_example

******** TODO How to compute confidence intervals?
         Do we really need them? Of course we do!
****** TODO Modelization  
       Can we really make a good estimation of extremal values with a
       model?

     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
     #+end_src

     #+RESULTS:

      #+begin_src R :results output :session :exports both
        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        summary(df)
      #+end_src

      #+RESULTS:
      #+begin_example
       elements_number  y_component_number vector_length   temporary_size 
       Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
       1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
       Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
       Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
       3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
       Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
       vector_recompute load_overlap  threads_number       lws_y        
       true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                        true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                      Median : 256.0   Median :  16.00  
                                      Mean   : 368.1   Mean   :  73.58  
                                      3rd Qu.: 512.0   3rd Qu.:  64.00  
                                      Max.   :1024.0   Max.   :1024.00  
       time_per_pixel     
       Min.   :1.165e-10  
       1st Qu.:3.028e-10  
       Median :7.125e-10  
       Mean   :2.013e-09  
       3rd Qu.:2.001e-09  
       Max.   :4.452e-08
#+end_example

******* DONE Model approximation        
       Lets try to build a model by hypothesis on the role of the factors:
       - elements number determines the number of threads used to
         perform the computation. The number of threads is given by
         size of the image / elements number. The more thread we have
         the more component we are able to compute at the same. But more
         threads can mean less efficient usage of the ressources.
         We can also have some overhead with bigger number of threads.
         Knowing that we can express the impact of elements number
         either :
         - Data sharing is more important \to elements number + 1/elements number
         - More threads are better \to elements number + log(elements
           number)
       - y component number deternimes the repartition of the
         component on the y axis for one thread. It has an impact on
         nvidia architecture because of the cores are
         organized. Better data usage? Bigger y component should be
         better. Not sure there is overhead with it. We would have
         some thing like this:
         - 1/y component number
       - vector length have a bad effect because there is not
         vectorization on Nvidia GPU, so could expect that bigger
         vector length causes overhead. We would have:
         - vector length
       - threads number determines the size of a work group. Threads
         in work group can share data, bigger groups means better data
         usage. But smaller work group gives more flexible scheduling
         opportunity but here is not really a concern. We probably
         also have overhead due to the number of work groups. We would
         have: 
         - threads number + 1/threads number
       - lws y

       #+begin_src R :results output :session :exports both
            form_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
            form_y_comp <- time_per_pixel ~ I(1/y_component_number)
            form_v_len <- time_per_pixel ~ vector_length 
            form_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
            form_lws_y <- time_per_pixel ~ lws_y 

            model_elem_nb <- lm(data=df,formula=form_elem_nb)
            for(i in 1:200){
                E <- residuals(model_elem_nb)
                model_elem_nb <- lm(data=df,formula=form_elem_nb,weight=g(E))
            }

            model_y_comp <- lm(data=df,formula=form_y_comp)
            for(i in 1:200){
                E <- residuals(model_y_comp)
                model_y_comp <- lm(data=df,formula=form_y_comp,weight=g(E))
            }

            model_v_len <- lm(data=df,formula=form_v_len)
            for(i in 1:200){
                E <- residuals(model_v_len)
                model_v_len <- lm(data=df,formula=form_v_len,weight=g(E))
            }

            model_th_nb <- lm(data=df,formula=form_th_nb)
            for(i in 1:200){
                E <- residuals(model_th_nb)
                model_th_nb <- lm(data=df,formula=form_th_nb,weight=g(E))
            }

            model_lws_y <- lm(data=df,formula=form_lws_y)
            for(i in 1:200){
                E <- residuals(model_lws_y)
                model_lws_y <- lm(data=df,formula=form_lws_y,weight=g(E))
            }
       #+end_src

       #+RESULTS:

       Visually the model is fine:
       #+begin_src R :results output graphics :file img/20160402/pilipili2/model_wq.png :exports both :width 800 :height 600 :session
         default <- par()
         par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

         plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,4e-10))
         lines(sort(df$elements_number),predict(model_elem_nb)[order(df$elements_number)],col="red")  

         plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,5e-10))
         lines(sort(df$y_component_number),predict(model_y_comp)[order(df$y_component_number)],col="red")  

         plot(y=df$time_per_pixel,df$vector_length, ylim=c(0,5e-10))
         lines(sort(df$vector_length),predict(model_v_len)[order(df$vector_length)],col="red")  

         plot(y=df$time_per_pixel,df$threads_number, ylim=c(0,4e-10))
         lines(sort(df$threads_number),predict(model_th_nb)[order(df$threads_number)],col="red")  

         plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,4e-9))
         lines(sort(df$lws_y),predict(model_lws_y)[order(df$lws_y)],col="red")  

         par(default)        

       #+end_src

       #+RESULTS:
       [[file:img/20160402/pilipili2/model_wq.png]]

       Can we exploit the information of the summary? The model seems
       to fit the data very well.
       #+begin_src R :results output :session :exports both
         form_complete <- time_per_pixel ~ elements_number + I(1/elements_number) + I(1/y_component_number) + vector_length + threads_number + I(1/threads_number) + lws_y + load_overlap + temporary_size
         model_complete <- lm(data=df,formula=form_complete)
           for(i in 1:200){
               E <- residuals(model_complete)
               model_complete <- lm(data=df,formula=form_complete,weight=g(E))
           }
         summary(model_complete)
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = form_complete, data = df, weights = g(E))

       Weighted Residuals:
              Min         1Q     Median         3Q        Max 
       -1.275e-05  2.267e-06  3.767e-06  8.051e-06  4.593e-05 

       Coefficients:
                                 Estimate Std. Error t value Pr(>|t|)    
       (Intercept)              1.010e-10  3.181e-12  31.755   <2e-16 ***
       elements_number         -7.498e-12  1.603e-13 -46.774   <2e-16 ***
       I(1/elements_number)     6.405e-11  4.235e-12  15.125   <2e-16 ***
       I(1/y_component_number)  1.000e-10  3.427e-12  29.187   <2e-16 ***
       vector_length            3.047e-11  1.272e-13 239.598   <2e-16 ***
       threads_number          -1.033e-13  2.977e-15 -34.719   <2e-16 ***
       I(1/threads_number)      2.300e-09  1.074e-10  21.405   <2e-16 ***
       lws_y                    3.471e-12  6.227e-15 557.380   <2e-16 ***
       load_overlaptrue         6.356e-13  1.250e-12   0.509    0.611    
       temporary_size          -5.116e-13  5.826e-13  -0.878    0.380    
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 8.793e-06 on 23110 degrees of freedom
       Multiple R-squared:  0.9535,	Adjusted R-squared:  0.9535 
       F-statistic: 5.27e+04 on 9 and 23110 DF,  p-value: < 2.2e-16
#+end_example

       What about the interactions? R found a lot of interactions but
       not all of them are revelant(correlation) and it can be
       difficult to identify all real interactions:
       #+begin_src R :results output :session :exports both
         form_complete <- time_per_pixel ~ (elements_number + I(1/elements_number) + I(1/y_component_number) + vector_length + threads_number + I(1/threads_number) + lws_y)^2
         model_complete <- lm(data=df,formula=form_complete)
           for(i in 1:200){
               E <- residuals(model_complete)
               model_complete <- lm(data=df,formula=form_complete,weight=g(E))
           }
         summary(model_complete)
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = form_complete, data = df, weights = g(E))

       Weighted Residuals:
              Min         1Q     Median         3Q        Max 
       -3.405e-05  2.101e-06  3.025e-06  5.168e-06  4.340e-05 

       Coefficients: (2 not defined because of singularities)
                                                      Estimate Std. Error t value
       (Intercept)                                  -1.063e-10  5.732e-12 -18.555
       elements_number                               1.116e-11  4.515e-13  24.719
       I(1/elements_number)                         -4.412e-10  1.614e-11 -27.344
       I(1/y_component_number)                       6.932e-10  9.518e-12  72.833
       vector_length                                 5.086e-11  5.202e-13  97.782
       threads_number                                6.038e-14  7.761e-15   7.780
       I(1/threads_number)                           2.373e-09  3.095e-10   7.668
       lws_y                                         1.578e-12  3.319e-14  47.554
       elements_number:I(1/elements_number)                 NA         NA      NA
       elements_number:I(1/y_component_number)      -8.701e-11  1.353e-12 -64.290
       elements_number:vector_length                -7.284e-13  3.020e-14 -24.122
       elements_number:threads_number                8.175e-15  4.759e-16  17.179
       elements_number:I(1/threads_number)          -5.036e-10  2.303e-11 -21.869
       elements_number:lws_y                        -1.710e-13  2.335e-15 -73.237
       I(1/elements_number):I(1/y_component_number) -1.327e-10  1.467e-11  -9.048
       I(1/elements_number):vector_length            1.441e-10  9.048e-13 159.246
       I(1/elements_number):threads_number           8.158e-14  2.341e-14   3.486
       I(1/elements_number):I(1/threads_number)      8.630e-09  5.793e-10  14.897
       I(1/elements_number):lws_y                    1.602e-12  4.939e-14  32.440
       I(1/y_component_number):vector_length        -7.264e-11  8.745e-13 -83.073
       I(1/y_component_number):threads_number       -1.596e-13  1.068e-14 -14.942
       I(1/y_component_number):I(1/threads_number)  -1.663e-09  3.390e-10  -4.906
       I(1/y_component_number):lws_y                 5.490e-13  3.170e-14  17.320
       vector_length:threads_number                 -1.519e-14  5.662e-16 -26.831
       vector_length:I(1/threads_number)             3.463e-10  1.730e-11  20.020
       vector_length:lws_y                           4.870e-13  2.890e-15 168.492
       threads_number:I(1/threads_number)                   NA         NA      NA
       threads_number:lws_y                         -1.441e-15  3.018e-17 -47.734
       I(1/threads_number):lws_y                     2.766e-09  5.580e-12 495.738
                                                    Pr(>|t|)    
       (Intercept)                                   < 2e-16 ***
       elements_number                               < 2e-16 ***
       I(1/elements_number)                          < 2e-16 ***
       I(1/y_component_number)                       < 2e-16 ***
       vector_length                                 < 2e-16 ***
       threads_number                               7.56e-15 ***
       I(1/threads_number)                          1.82e-14 ***
       lws_y                                         < 2e-16 ***
       elements_number:I(1/elements_number)               NA    
       elements_number:I(1/y_component_number)       < 2e-16 ***
       elements_number:vector_length                 < 2e-16 ***
       elements_number:threads_number                < 2e-16 ***
       elements_number:I(1/threads_number)           < 2e-16 ***
       elements_number:lws_y                         < 2e-16 ***
       I(1/elements_number):I(1/y_component_number)  < 2e-16 ***
       I(1/elements_number):vector_length            < 2e-16 ***
       I(1/elements_number):threads_number          0.000492 ***
       I(1/elements_number):I(1/threads_number)      < 2e-16 ***
       I(1/elements_number):lws_y                    < 2e-16 ***
       I(1/y_component_number):vector_length         < 2e-16 ***
       I(1/y_component_number):threads_number        < 2e-16 ***
       I(1/y_component_number):I(1/threads_number)  9.35e-07 ***
       I(1/y_component_number):lws_y                 < 2e-16 ***
       vector_length:threads_number                  < 2e-16 ***
       vector_length:I(1/threads_number)             < 2e-16 ***
       vector_length:lws_y                           < 2e-16 ***
       threads_number:I(1/threads_number)                 NA    
       threads_number:lws_y                          < 2e-16 ***
       I(1/threads_number):lws_y                     < 2e-16 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 7.186e-06 on 23093 degrees of freedom
       Multiple R-squared:  0.9918,	Adjusted R-squared:  0.9918 
       F-statistic: 1.08e+05 on 26 and 23093 DF,  p-value: < 2.2e-16
      #+end_example

       Lets try to find the real interactions with what we know from
       the kernel: 
       - vector length \to as there is no vectorization the vector length
         should not have any interactions
       - elements number & y component number \to elements number dictates
         the possible values for the y component number. Y component
         number divides elements number and determines how the work is
         organized for a thread so they probably have some
         interactions but I am not sure.
       - threads number and lws y \to should have interaction because it
         specifies how threads are organized
       - threads number and elements number \to specify the quantity of
         ressources (compute unit and memory used) by a work
         group. Finding the good balance determines the good usage of
         the SMX. So they should have interactions

       #+begin_src R :results output :session :exports both
           form_complete <- time_per_pixel ~ elements_number + I(1/elements_number) + 
                                             I(1/y_component_number) + 
                                             vector_length + 
                                             threads_number + I(1/threads_number) + 
                                             lws_y + 
                                             elements_number:y_component_number +
                                             threads_number:lws_y +
                                             threads_number:elements_number

           model_complete <- lm(data=df,formula=form_complete)
           for(i in 1:200){
             E <- residuals(model_complete)
             model_complete <- lm(data=df,formula=form_complete,weight=g(E))
           }
           summary(model_complete)
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = form_complete, data = df, weights = g(E))

       Weighted Residuals:
              Min         1Q     Median         3Q        Max 
       -1.760e-05  2.357e-06  3.560e-06  7.449e-06  4.577e-05 

       Coefficients:
                                            Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                         9.259e-11  2.185e-12   42.38   <2e-16 ***
       elements_number                    -3.649e-11  5.511e-13  -66.21   <2e-16 ***
       I(1/elements_number)               -1.995e-11  1.722e-12  -11.59   <2e-16 ***
       I(1/y_component_number)             1.350e-10  1.142e-12  118.20   <2e-16 ***
       vector_length                       3.646e-11  1.099e-13  331.60   <2e-16 ***
       threads_number                     -4.121e-14  2.287e-15  -18.02   <2e-16 ***
       I(1/threads_number)                 5.557e-09  6.196e-11   89.68   <2e-16 ***
       lws_y                               9.079e-12  1.476e-14  615.01   <2e-16 ***
       elements_number:y_component_number  4.010e-12  6.223e-14   64.43   <2e-16 ***
       threads_number:lws_y               -5.583e-15  2.480e-17 -225.12   <2e-16 ***
       elements_number:threads_number      3.455e-15  4.031e-16    8.57   <2e-16 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 8.433e-06 on 23109 degrees of freedom
       Multiple R-squared:  0.9924,	Adjusted R-squared:  0.9924 
       F-statistic: 3.011e+05 on 10 and 23109 DF,  p-value: < 2.2e-16
       #+end_example

       T values are big, is it a problem? It is the ratio "siganl
       noise" of the mean difference between the data and the model
       and over the variation. t-values that are far from zero are
       good. But as it is related to the mean do we really care?

       Lets compare to a normal linear regression:
       #+begin_src R :results output :session :exports both
         form_complete <- time_per_pixel ~ elements_number + I(1/elements_number) + I(1/y_component_number) +  vector_length +  threads_number + I(1/threads_number) + lws_y +
              elements_number:y_component_number +
              threads_number:lws_y +
              threads_number:elements_number

         model_complete <- lm(data=df,formula=form_complete)
         summary(model_complete)
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = form_complete, data = df)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -7.690e-09 -1.167e-09 -1.050e-10  7.620e-10  3.398e-08 

       Coefficients:
                                            Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                        -4.553e-10  9.076e-11  -5.016 5.32e-07 ***
       elements_number                    -2.181e-10  1.291e-11 -16.894  < 2e-16 ***
       I(1/elements_number)                4.351e-09  1.489e-10  29.213  < 2e-16 ***
       I(1/y_component_number)            -1.624e-09  9.714e-11 -16.722  < 2e-16 ***
       vector_length                       2.233e-10  3.389e-12  65.888  < 2e-16 ***
       threads_number                     -4.736e-13  1.024e-13  -4.623 3.80e-06 ***
       I(1/threads_number)                 7.681e-08  2.476e-09  31.019  < 2e-16 ***
       lws_y                               3.521e-11  3.685e-13  95.554  < 2e-16 ***
       elements_number:y_component_number  2.120e-11  1.924e-12  11.016  < 2e-16 ***
       threads_number:lws_y               -2.771e-14  4.065e-16 -68.174  < 2e-16 ***
       elements_number:threads_number      8.566e-14  8.340e-15  10.272  < 2e-16 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.636e-09 on 23109 degrees of freedom
       Multiple R-squared:  0.4967,	Adjusted R-squared:  0.4965 
       F-statistic:  2280 on 10 and 23109 DF,  p-value: < 2.2e-16
      #+end_example

       But how can we guest the model of something like that? The
       formula elements number + 1 / elements number explain well the
       mean, the general tendency but does not explain well the 5th percentiles: 
       #+begin_src R :results output graphics :file img/20160402/pilipili2/model_elem_nb_p.png :exports both :width 600 :height 400 :session
         library(ggplot2)
         library(grid)
         library(gridExtra)
         library(plyr)

         elem_err = ddply(df,c("elements_number"), summarize,
                          mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

         p1 <- qplot(df$elements_number, df$time_per_pixel) + 
             geom_point(alpha=0.1) + 
             scale_y_log10() + 
             geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
             geom_errorbar(data=elem_err,aes(x=(elements_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
             ggtitle("Impact of elements number") +
             geom_quantile(quantiles=0.05, formula = y ~ x + I(1/x), colour="green") +
             theme(axis.text=element_text(size=12),
                   axis.title=element_text(size=14,face="bold"))

         grid.arrange(p1, top=textGrob("Impact of factors")) 

       #+end_src

       #+RESULTS:
       [[file:img/20160402/pilipili2/model_elem_nb_p.png]]

       I just figure out that the model is not accurate yet because
       the coeffcient of y component is positive instead of negative
       (because we saw that we want the bigger value for it)
       #+begin_src R :results output :session :exports both
           form_complete <- time_per_pixel ~ elements_number + I(1/elements_number) + 
                                             y_component_number + I(1/y_component_number) + 
                                             vector_length + 
                                             threads_number + I(1/threads_number) + 
                                             lws_y + 
                                             elements_number:y_component_number +
                                             threads_number:lws_y +
                                             threads_number:elements_number

           model_complete <- lm(data=df,formula=form_complete)
           for(i in 1:200){
             E <- residuals(model_complete)
             model_complete <- lm(data=df,formula=form_complete,weight=g(E))
           }
           summary(model_complete)
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = form_complete, data = df, weights = g(E))

       Weighted Residuals:
              Min         1Q     Median         3Q        Max 
       -1.810e-05  2.364e-06  3.765e-06  7.541e-06  4.591e-05 

       Coefficients:
                                            Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                         6.704e-11  7.614e-13   88.05   <2e-16 ***
       vector_length                       3.058e-11  1.027e-13  297.62   <2e-16 ***
       threads_number                      4.136e-14  2.650e-15   15.61   <2e-16 ***
       I(1/threads_number)                 4.117e-09  6.331e-11   65.03   <2e-16 ***
       lws_y                               8.986e-12  5.707e-15 1574.37   <2e-16 ***
       elements_number:y_component_number -1.167e-12  2.456e-14  -47.51   <2e-16 ***
       threads_number:lws_y               -5.463e-15  1.015e-17 -538.17   <2e-16 ***
       threads_number:elements_number     -1.363e-14  2.768e-16  -49.26   <2e-16 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 8.527e-06 on 23112 degrees of freedom
       Multiple R-squared:  0.9999,	Adjusted R-squared:  0.9999 
       F-statistic: 5.774e+07 on 7 and 23112 DF,  p-value: < 2.2e-16
#+end_example

       #+begin_src R :results output graphics :file img/20160402/pilipili2/model_y_comp_nb_p.png :exports both :width 600 :height 400 :session
         form_y_comp <- time_per_pixel ~ y_component_number + I(1/y_component_number)

         model_y_comp <- lm(data=df,formula=form_y_comp)
         for(i in 1:200){
             E <- residuals(model_y_comp)
             model_y_comp <- lm(data=df,formula=form_y_comp,weight=g(E))
         }

         plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,5e-10))
         lines(sort(df$y_component_number),predict(model_y_comp)[order(df$y_component_number)],col="red")  
                
       #+end_src

       #+RESULTS:
       [[file:img/20160402/pilipili2/model_y_comp_nb_p.png]]

       - Just to see if quadratic model works:
         #+begin_src R :results output graphics :file img/20160402/pilipili2/model_anotherone_nb_p.png :exports both :width 600 :height 400 :session
           f <- function(x) { x * (0.05 - 1 * (x < 0)) }
           g <- function(x) { f(x)/x^2 }
           form_elem_nb <- time_per_pixel ~ elements_number + I(elements_number^2) + I(elements_number^3)
           form_y_comp <- time_per_pixel ~ I(1/y_component_number)
           form_v_len <- time_per_pixel ~ vector_length 
           form_th_nb <- time_per_pixel ~ threads_number + I(threads_number^2)
           form_lws_y <- time_per_pixel ~ lws_y 
           
           model_elem_nb <- lm(data=df,formula=form_elem_nb)
           for(i in 1:200){
               E <- residuals(model_elem_nb)
               model_elem_nb <- lm(data=df,formula=form_elem_nb,weight=g(E))
           }
           
           model_y_comp <- lm(data=df,formula=form_y_comp)
           for(i in 1:200){
               E <- residuals(model_y_comp)
               model_y_comp <- lm(data=df,formula=form_y_comp,weight=g(E))
           }
           
           model_v_len <- lm(data=df,formula=form_v_len)
           for(i in 1:200){
               E <- residuals(model_v_len)
               model_v_len <- lm(data=df,formula=form_v_len,weight=g(E))
           }
           
           model_th_nb <- lm(data=df,formula=form_th_nb)
           for(i in 1:200){
               E <- residuals(model_th_nb)
               model_th_nb <- lm(data=df,formula=form_th_nb,weight=g(E))
           }
           
           model_lws_y <- lm(data=df,formula=form_lws_y)
           for(i in 1:200){
               E <- residuals(model_lws_y)
               model_lws_y <- lm(data=df,formula=form_lws_y,weight=g(E))
           }
           
           default <- par()
           par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))
           
           plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,4e-10))
           lines(sort(df$elements_number),predict(model_elem_nb)[order(df$elements_number)],col="red")  
           
           plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,5e-10))
           lines(sort(df$y_component_number),predict(model_y_comp)[order(df$y_component_number)],col="red")  
           
           plot(y=df$time_per_pixel,df$vector_length, ylim=c(0,5e-10))
           lines(sort(df$vector_length),predict(model_v_len)[order(df$vector_length)],col="red")  
           
           plot(y=df$time_per_pixel,df$threads_number, ylim=c(0,4e-10))
           lines(sort(df$threads_number),predict(model_th_nb)[order(df$threads_number)],col="red")  
           
           plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,4e-9))
           lines(sort(df$lws_y),predict(model_lws_y)[order(df$lws_y)],col="red")  
           
           par(default)        
           
       #+end_src

         #+RESULTS:
         [[file:img/20160402/pilipili2/model_anotherone_nb_p.png]]


******* DONE Model refinement
       We have lots of noise but we already know how to set the
       majority of the parameters. So how does elements number looks
       like now?
       
       #+begin_src R :results output :session :exports both
         df[df$time_per_pixel == min(df$time_per_pixel),]
         df_pruned <- df[df$y_component_number == 6 & df$vector_length == 1 & df$threads_number == 1024 & df$lws_y == 2,]
         df_pruned
       #+end_src

       #+RESULTS:
       #+begin_example
             elements_number y_component_number vector_length temporary_size
       13752               6                  6             1              2
             vector_recompute load_overlap threads_number lws_y time_per_pixel
       13752             true         true           1024     2   1.165013e-10
             elements_number y_component_number vector_length temporary_size
       11920               6                  6             1              2
       12465              12                  6             1              2
       12840              12                  6             1              2
       13140              12                  6             1              4
       13752               6                  6             1              2
       14084              18                  6             1              2
       14134               6                  6             1              4
       15199              18                  6             1              4
       15493               6                  6             1              4
       16171              24                  6             1              4
       16723              12                  6             1              4
       16931              24                  6             1              2
       18960              18                  6             1              4
       20908              24                  6             1              2
       21028              18                  6             1              2
       21305              24                  6             1              4
             vector_recompute load_overlap threads_number lws_y time_per_pixel
       11920             true        false           1024     2   1.205250e-10
       12465             true         true           1024     2   1.579781e-10
       12840             true        false           1024     2   1.543490e-10
       13140             true        false           1024     2   1.561956e-10
       13752             true         true           1024     2   1.165013e-10
       14084             true         true           1024     2   2.057422e-10
       14134             true         true           1024     2   1.183983e-10
       15199             true         true           1024     2   2.029676e-10
       15493             true        false           1024     2   1.187175e-10
       16171             true        false           1024     2   1.936598e-10
       16723             true         true           1024     2   1.523371e-10
       16931             true        false           1024     2   1.946504e-10
       18960             true        false           1024     2   2.046648e-10
       20908             true         true           1024     2   1.924196e-10
       21028             true        false           1024     2   2.027626e-10
       21305             true         true           1024     2   1.933576e-10
#+end_example

       Let's apply the same model than earlier for elements number:
       #+begin_src R :results output :session :exports both
         form_elem_nb_pruned <- time_per_pixel ~ elements_number + I(1/elements_number)

         model_elem_nb_pruned <- lm(data=df_pruned, formula=form_elem_nb_pruned)
         for(i in 1:20){ # 200 did not work but work with less
              E <- residuals(model_elem_nb_pruned)
              model_elem_nb_pruned <- lm(data=df_pruned, formula=form_elem_nb_pruned, weight=g(E))
         }
         summary(model_elem_nb_pruned)
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = form_elem_nb_pruned, data = df_pruned, weights = g(E))

       Weighted Residuals:
              Min         1Q     Median         3Q        Max 
       -7.000e-11  2.409e-07  3.334e-07  6.974e-07  1.257e-06 

       Coefficients:
                              Estimate Std. Error t value Pr(>|t|)    
       (Intercept)           1.438e-10  8.639e-16  166508   <2e-16 ***
       elements_number       2.463e-12  2.886e-17   85344   <2e-16 ***
       I(1/elements_number) -2.527e-10  4.145e-15  -60966   <2e-16 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 7.433e-07 on 13 degrees of freedom
       Multiple R-squared:      1,	Adjusted R-squared:      1 
       F-statistic: 6.541e+12 on 2 and 13 DF,  p-value: < 2.2e-16
#+end_example

       We get a very good R-squared but when checking visually the
       model is not that accurate. So for the weigted regression the
       R-squared is not accurate enough because too optimistic. And
       here the linear regression will do the job.
       #+begin_src R :results output graphics :file img/20160402/pilipili2/model_elem_nb_pruned_wq_p.png :exports both :width 600 :height 400 :session
         plot(df_pruned$elements_number,df_pruned$time_per_pixel)
         lines(sort(df_pruned$elements_number),predict(model_elem_nb_pruned)[order(df_pruned$elements_number)],col="red")  
       #+end_src

       #+RESULTS:
       [[file:img/20160402/pilipili2/model_elem_nb_pruned_wq_p.png]]

       
       The linear regression allow us to get more accurate information
       about the correctness of our model. It is good but not perfect:
       #+begin_src R :results output :session :exports both
         form_elem_nb_pruned <- time_per_pixel ~ elements_number + I(1/elements_number)
         model_elem_nb_pruned <- lm(data=df_pruned, formula=form_elem_nb_pruned)
         summary(model_elem_nb_pruned)
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = form_elem_nb_pruned, data = df_pruned)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -1.405e-11 -8.442e-12 -3.245e-12  6.759e-12  1.846e-11 

       Coefficients:
                              Estimate Std. Error t value Pr(>|t|)    
       (Intercept)           1.966e-10  3.232e-11   6.085 3.87e-05 ***
       elements_number       1.081e-12  1.213e-12   0.891  0.38900    
       I(1/elements_number) -5.187e-10  1.678e-10  -3.091  0.00859 ** 
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 1.206e-11 on 13 degrees of freedom
       Multiple R-squared:  0.8965,	Adjusted R-squared:  0.8805 
       F-statistic: 56.28 on 2 and 13 DF,  p-value: 3.965e-07
#+end_example

       Lets try to improve of model with the principle that more
       threads = better perfs. We see that the model fits better. 
       #+begin_src R :results output :session :exports both
         form_elem_nb_pruned <- time_per_pixel ~ elements_number + I(elements_number^2)
         model_elem_nb_pruned <- lm(data=df_pruned, formula=form_elem_nb_pruned)
         summary(model_elem_nb_pruned)       
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = form_elem_nb_pruned, data = df_pruned)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -1.360e-11 -5.496e-12 -4.528e-13  6.534e-12  1.243e-11 

       Coefficients:
                              Estimate Std. Error t value Pr(>|t|)    
       (Intercept)           4.039e-11  1.255e-11   3.220 0.006709 ** 
       elements_number       1.439e-11  1.907e-12   7.546 4.21e-06 ***
       I(elements_number^2) -3.277e-13  6.259e-14  -5.236 0.000161 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 9.013e-12 on 13 degrees of freedom
       Multiple R-squared:  0.9422,	Adjusted R-squared:  0.9333 
       F-statistic:   106 on 2 and 13 DF,  p-value: 8.953e-09
#+end_example

       But the residuals are big:
       #+begin_src R :results output graphics :file img/20160402/pilipili2/model_elem_nb_pruned_lm_mod1_p.png :exports both :width 600 :height 400 :session
         plot(df_pruned$elements_number,df_pruned$time_per_pixel)
         lines(sort(df_pruned$elements_number),predict(model_elem_nb_pruned)[order(df_pruned$elements_number)],col="red")  
       #+end_src

       #+RESULTS:
       [[file:img/20160402/pilipili2/model_elem_nb_pruned_lm_mod1_p.png]]


       We can futher henence the model like follows. But I don't know
       how to justify it. Here we have a perfect:
       #+begin_src R :results output :session :exports both
         form_elem_nb_pruned <- time_per_pixel ~ elements_number + I(elements_number^2) + I(elements_number^3)

         model_elem_nb_pruned <- lm(data=df_pruned, formula=form_elem_nb_pruned)
         summary(model_elem_nb_pruned)
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = form_elem_nb_pruned, data = df_pruned)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -2.878e-12 -1.076e-12  3.700e-16  1.018e-12  2.763e-12 

       Coefficients:
                              Estimate Std. Error t value Pr(>|t|)    
       (Intercept)           1.655e-10  7.030e-12   23.54 2.07e-11 ***
       elements_number      -1.876e-11  1.792e-12  -10.47 2.18e-07 ***
       I(elements_number^2)  2.154e-12  1.319e-13   16.32 1.47e-09 ***
       I(elements_number^3) -5.515e-14  2.920e-15  -18.88 2.72e-10 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 1.693e-12 on 12 degrees of freedom
       Multiple R-squared:  0.9981,	Adjusted R-squared:  0.9976 
       F-statistic:  2122 on 3 and 12 DF,  p-value: < 2.2e-16
#+end_example

       #+begin_src R :results output graphics :file img/20160402/pilipili2/model_elem_nb_pruned_lm_mod2_p.png :exports both :width 600 :height 400 :session
         plot(df_pruned$elements_number,df_pruned$time_per_pixel)
         lines(sort(df_pruned$elements_number),predict(model_elem_nb_pruned)[order(df_pruned$elements_number)],col="red")  
       #+end_src

       #+RESULTS:
       [[file:img/20160402/pilipili2/model_elem_nb_pruned_lm_mod2_p.png]]

       What would we have in a complete model?
       #+begin_src R :results output :session :exports both
         f <- function(x) { x * (0.05 - 1 * (x < 0)) }
         g <- function(x) { f(x)/x^2 }
         
         model <- time_per_pixel ~ elements_number + I(elements_number^2) + I(elements_number^3) +
             y_component_number + I(1/y_component_number) + 
             vector_length + 
             threads_number + I(1/threads_number) + 
             lws_y + 
             elements_number:y_component_number +
             threads_number:lws_y +
             threads_number:elements_number
         fit <- lm(data=df,formula=model)
         for(i in 1:200){
             E <- residuals(fit)
             model_y_comp <- lm(data=df,formula=model,weight=g(E))
         }
         summary(fit)
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm.default(formula = model, data = df)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -7.833e-09 -1.199e-09 -1.670e-10  7.990e-10  3.513e-08 

       Coefficients:
                                            Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                         1.659e-09  2.520e-10   6.580  4.8e-11 ***
       elements_number                    -1.061e-09  3.186e-11 -33.301  < 2e-16 ***
       I(elements_number^2)                7.188e-11  3.120e-12  23.040  < 2e-16 ***
       I(elements_number^3)               -1.507e-12  7.648e-14 -19.706  < 2e-16 ***
       y_component_number                  4.796e-10  5.661e-11   8.473  < 2e-16 ***
       I(1/y_component_number)            -2.055e-10  1.857e-10  -1.106 0.268527    
       vector_length                       2.234e-10  3.406e-12  65.600  < 2e-16 ***
       threads_number                     -4.647e-13  1.029e-13  -4.514  6.4e-06 ***
       I(1/threads_number)                 7.685e-08  2.488e-09  30.887  < 2e-16 ***
       lws_y                               3.521e-11  3.703e-13  95.093  < 2e-16 ***
       elements_number:y_component_number -1.783e-11  5.145e-12  -3.465 0.000532 ***
       threads_number:lws_y               -2.771e-14  4.084e-16 -67.842  < 2e-16 ***
       elements_number:threads_number      8.501e-14  8.380e-15  10.144  < 2e-16 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.649e-09 on 23107 degrees of freedom
       Multiple R-squared:  0.4919,	Adjusted R-squared:  0.4916 
       F-statistic:  1864 on 12 and 23107 DF,  p-value: < 2.2e-16
       #+end_example

       Now we that the best value for elements number is six(from the
       previous figure) let's what remains:
       #+begin_src R :results output :session :exports both
         subset <- df[df$elements_number == 6 & df$y_component_number == 6 & df$vector_length == 1 & df$threads_number == 1024 & df$lws_y == 1, ]
         model <- time_per_pixel ~ load_overlap + temporary_size

         fit <- lm(data=subset,formula=model)
         summary(fit)
       #+end_src

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
         subset <- df[df$elements_number == 6 & df$y_component_number == 6 & df$vector_length == 1 & df$threads_number == 1024 & df$lws_y == 1, ]
         model <- time_per_pixel ~ load_overlap
         f <- function(x) { x * (0.05 - 1 * (x < 0)) }
         g <- function(x) { f(x)/x^2 }
         h <- function(x) {pmin(g(x),1e15)}
         fit <- lm(data=subset,formula=model)
         for(i in 1:100){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=g(E))
         } 

         plot(x=subset$load_overlap,y=subset$time_per_pixel)
         abline(fit,col=2)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-3585yF_/figure3585kfy.png]]

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
         subset <- df[df$elements_number == 6 & df$y_component_number == 6 & df$vector_length == 1 & df$threads_number == 1024 & df$lws_y == 1, ]
         model <- time_per_pixel ~ temporary_size
                                                 # fit <- rq(data=subset,formula=model,tau=0.05)
         f <- function(x) { x * (0.05 - 1 * (x < 0)) }
         g <- function(x) { f(x)/x^2 }
         h <- function(x) {pmin(g(x),1e15)}
         fit <- lm(data=subset,formula=model)
         for(i in 1:100){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=g(E))
         } 
         plot(x=subset$temporary_size,y=subset$time_per_pixel)
         abline(fit,col=2)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-3585yF_/figure3585XVs.png]]

******* TODO What about factors with 2 values?
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
         plot(df_pruned$temporary_size,df_pruned$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-4778z0D/figure4778bKH.png]]

****** TODO Which design of experiments?
******* TODO Random
        #+begin_src sh :results output :exports both
          ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
        #+end_src

        #+RESULTS:

        #+begin_src R :results output :session :exports both
          f <- function(x) { x * (0.05 - 1 * (x < 0)) }
          g <- function(x) { f(x)/x^2 }
          h <- function(x) {pmin(g(x),1e10)}
          iwr <- function(d, form) { 
              fit <- lm(data=d,formula=form)
              for(i in 1:200){
                  residus <- residuals(fit)
                  fit <- lm(data=d, formula=form, weight=h(residus))
              }
              return(fit)
          }
        #+end_src

        #+RESULTS:

        #+begin_src R :results output :session :exports both
          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          summary(df)
        #+end_src

        #+RESULTS:
        #+begin_example
         elements_number  y_component_number vector_length   temporary_size 
         Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
         1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
         Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
         Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
         3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
         Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
         vector_recompute load_overlap  threads_number       lws_y        
         true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                          true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                        Median : 256.0   Median :  16.00  
                                        Mean   : 368.1   Mean   :  73.58  
                                        3rd Qu.: 512.0   3rd Qu.:  64.00  
                                        Max.   :1024.0   Max.   :1024.00  
         time_per_pixel     
         Min.   :1.165e-10  
         1st Qu.:3.028e-10  
         Median :7.125e-10  
         Mean   :2.013e-09  
         3rd Qu.:2.001e-09  
         Max.   :4.452e-08
#+end_example

        Take a random set:
        #+begin_src R :results output :session :exports both
          set.seed(1) 
          random_set <- df[sample(1:nrow(df), size = 100, replace = FALSE),]
        #+end_src

        #+RESULTS:

        Checking if there are some duplicated points. There are no duplicated points:
        #+begin_src R :results output :session :exports both
          nrow(random_set[duplicated(random_set),])
        #+end_src

        #+RESULTS:
        : [1] 0

        #+begin_src R :results output graphics :file img/20160402/pilipili2/random_100_set_points.png :exports both :width 800 :height 600 :session
          plot(random_set[,c(1,2,3,4,6,7,8)])
        #+end_src
        
        #+RESULTS:
        [[file:img/20160402/pilipili2/random_100_set_points.png]]

        The R-squared is worse than with LHS but can we really trust
        it? And It detects less usefull factors:
        #+begin_src R :results output :session :exports both
          form_complete <- time_per_pixel ~ elements_number + I(1/elements_number) + 
              I(1/y_component_number) + 
              vector_length + 
              threads_number + I(1/threads_number) + 
              lws_y + 
              elements_number:y_component_number +
              threads_number:lws_y +
              threads_number:elements_number

          model_complete <- lm(data=random_set,formula=form_complete)
          for(i in 1:200){
              E <- residuals(model_complete)
              model_complete <- lm(data=random_set,formula=form_complete,weight=h(E))
          }
          summary(model_complete)

        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm(formula = form_complete, data = random_set, weights = h(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -1.482e-05  2.349e-06  3.846e-06  6.139e-06  3.797e-05 

        Coefficients:
                                             Estimate Std. Error t value Pr(>|t|)    
        (Intercept)                        -1.697e-10  1.259e-10  -1.348  0.18099    
        elements_number                    -5.167e-11  2.584e-11  -1.999  0.04863 *  
        I(1/elements_number)                5.800e-10  1.886e-10   3.076  0.00279 ** 
        I(1/y_component_number)            -1.970e-10  1.544e-10  -1.275  0.20548    
        vector_length                       5.920e-11  8.235e-12   7.188 1.94e-10 ***
        threads_number                      2.549e-13  1.260e-13   2.023  0.04608 *  
        I(1/threads_number)                 1.752e-08  3.855e-09   4.543 1.73e-05 ***
        lws_y                               1.403e-11  9.268e-13  15.137  < 2e-16 ***
        elements_number:y_component_number  7.541e-12  3.846e-12   1.961  0.05306 .  
        threads_number:lws_y               -8.966e-15  1.007e-15  -8.907 5.86e-14 ***
        elements_number:threads_number     -3.176e-14  1.542e-14  -2.060  0.04236 *  
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 8.843e-06 on 89 degrees of freedom
        Multiple R-squared:  0.8858,	Adjusted R-squared:  0.8729 
        F-statistic: 69.01 on 10 and 89 DF,  p-value: < 2.2e-16
        #+end_example

        Can we compare it to the full space? Anova? We can't use anova
        because we don't have the some number of data between the full
        space and the random set
        #+begin_src R :results output :session :exports both
          form_complete <- time_per_pixel ~ elements_number + I(1/elements_number) + 
              I(1/y_component_number) + 
              vector_length + 
              threads_number + I(1/threads_number) + 
              lws_y + 
              elements_number:y_component_number +
              threads_number:lws_y +
              threads_number:elements_number

          model_complete_full_space <- lm(data=df,formula=form_complete)
          for(i in 1:200){
              E <- residuals(model_complete_full_space)
              model_complete_full_space <- lm(data=df,formula=form_complete,weight=h(E))
          }
          anova(model_complete_full_space,model_complete)
        #+end_src

        #+RESULTS:
        : Error in anova.lmlist(object, ...) : 
        :   tous les modÃ¨les n'ont pas Ã©tÃ© ajustÃ©s Ã  la mÃªme taille du jeu de donnÃ©es

        #+begin_src R :results output :session :exports both
          form_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
          form_y_comp <- time_per_pixel ~ y_component_number + I(1/y_component_number)
          form_v_len <- time_per_pixel ~ vector_length 
          form_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
          form_lws_y <- time_per_pixel ~ lws_y

          model_elem_nb <- lm(data=df,formula=form_elem_nb)
          for(i in 1:200){
              E <- residuals(model_elem_nb)
              model_elem_nb <- lm(data=df,formula=form_elem_nb,weight=h(E))
          }

          model_y_comp <- lm(data=df,formula=form_y_comp)
          for(i in 1:200){
              E <- residuals(model_y_comp)
              model_y_comp <- lm(data=df,formula=form_y_comp,weight=h(E))
          }

          model_v_len <- lm(data=df,formula=form_v_len)
          for(i in 1:200){
              E <- residuals(model_v_len)
              model_v_len <- lm(data=df,formula=form_v_len,weight=h(E))
          }

          model_th_nb <- lm(data=df,formula=form_th_nb)
          for(i in 1:200){
              E <- residuals(model_th_nb)
              model_th_nb <- lm(data=df,formula=form_th_nb,weight=h(E))
          }

          model_lws_y <- lm(data=df,formula=form_lws_y)
          for(i in 1:200){
              E <- residuals(model_lws_y)
              model_lws_y <- lm(data=df,formula=form_lws_y,weight=h(E))
          }

          #########################

          model_subset_elem_nb <- lm(data=random_set,formula=form_elem_nb)
          for(i in 1:200){
              E <- residuals(model_subset_elem_nb)
              model_subset_elem_nb <- lm(data=random_set,formula=form_elem_nb,weight=h(E))
          }

          model_subset_y_comp <- lm(data=random_set,formula=form_y_comp)
          for(i in 1:200){
              E <- residuals(model_subset_y_comp)
              model_subset_y_comp <- lm(data=random_set,formula=form_y_comp,weight=h(E))
          }

          model_subset_v_len <- lm(data=random_set,formula=form_v_len)
          for(i in 1:200){
              E <- residuals(model_subset_v_len)
              model_subset_v_len <- lm(data=random_set,formula=form_v_len,weight=h(E))
          }

          model_subset_th_nb <- lm(data=random_set,formula=form_th_nb)
          for(i in 1:200){
              E <- residuals(model_subset_th_nb)
              model_subset_th_nb <- lm(data=random_set,formula=form_th_nb,weight=h(E))
          }

          model_subset_lws_y <- lm(data=random_set,formula=form_lws_y)
          for(i in 1:200){
              E <- residuals(model_subset_lws_y)
              model_subset_lws_y <- lm(data=random_set,formula=form_lws_y,weight=h(E))
          }
        #+end_src

        #+RESULTS:

        #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
          default <- par()
          par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

          plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,9e-10))
          lines(sort(df$elements_number),predict(model_elem_nb)[order(df$elements_number)],col="red")  
          lines(sort(random_set$elements_number),predict(model_subset_elem_nb)[order(random_set$elements_number)],col="green")  

          plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,9e-10))
          lines(sort(df$y_component_number),predict(model_y_comp)[order(df$y_component_number)],col="red")  
          lines(sort(random_set$y_component_number),predict(model_subset_y_comp)[order(random_set$y_component_number)],col="green")  

          plot(y=df$time_per_pixel,df$vector_length, ylim=c(0,5e-10))
          lines(sort(df$vector_length),predict(model_v_len)[order(df$vector_length)],col="red")  
          lines(sort(random_set$vector_length),predict(model_subset_v_len)[order(random_set$vector_length)],col="green")  

          plot(y=df$time_per_pixel,df$threads_number, ylim=c(0,1e-9))
          lines(sort(df$threads_number),predict(model_th_nb)[order(df$threads_number)],col="red")  
          lines(sort(random_set$threads_number),predict(model_subset_th_nb)[order(random_set$threads_number)],col="green")  

          plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,4e-9))
          lines(sort(df$lws_y),predict(model_lws_y)[order(df$lws_y)],col="red")  
          lines(sort(random_set$lws_y),predict(model_subset_lws_y)[order(random_set$lws_y)],col="green")  

          par(default)        

      
        #+end_src

        #+RESULTS:
        [[file:/tmp/babel-3647p_q/figure3647MO1.png]]

 
        We cannot take conclusion by comparing with one sample. We
        need many and make the average of the fit. On average it
        seems that we can get pretty close estimate compared to the
        full search space regression:
        #+begin_src R :results output graphics :file img/20160402/pilipili2/random_100_fit_100_avg_comp.png :exports both :width 800 :height 600 :session
           elements_number_val = as.numeric(levels(as.factor(df$elements_number)))
           y_component_number_val = as.numeric(levels(as.factor(df$y_component_number)))
           vector_length_val = as.numeric(levels(as.factor(df$vector_length)))
           threads_number_val = as.numeric(levels(as.factor(df$threads_number)))
           lws_y_val = as.numeric(levels(as.factor(df$lws_y)))
           
           sum_elem_nb <- c(rep(0,length(elements_number_val)))                      
           sum_y_comp <- c(rep(0,length(y_component_number_val)))                      
           sum_v_len <- c(rep(0,length(vector_length_val)))                      
           sum_th_nb <- c(rep(0,length(threads_number_val)))                      
           sum_lws_y <- c(rep(0,length(lws_y_val))) 

           runs = 100   
                            
           for(j in 1:runs){
               random_set <- df[sample(1:nrow(df), size = 100, replace = FALSE),]
               model_subset_elem_nb <- lm(data=random_set,formula=form_elem_nb)
               model_subset_y_comp <- lm(data=random_set,formula=form_y_comp)
               model_subset_v_len <- lm(data=random_set,formula=form_v_len)
               model_subset_th_nb <- lm(data=random_set,formula=form_th_nb)
               model_subset_lws_y <- lm(data=random_set,formula=form_lws_y)
               for(i in 1:200){
                   E <- residuals(model_subset_elem_nb)
                   model_subset_elem_nb <- lm(data=random_set,formula=form_elem_nb,weight=h(E))

                   E <- residuals(model_subset_y_comp)
                   model_subset_y_comp <- lm(data=random_set,formula=form_y_comp,weight=h(E))

                   E <- residuals(model_subset_v_len)
                   model_subset_v_len <- lm(data=random_set,formula=form_v_len,weight=h(E))

                   E <- residuals(model_subset_th_nb)
                   model_subset_th_nb <- lm(data=random_set,formula=form_th_nb,weight=h(E))

                   E <- residuals(model_subset_lws_y)
                   model_subset_lws_y <- lm(data=random_set,formula=form_lws_y,weight=h(E))

               }
               sum_elem_nb <- sum_elem_nb + predict(model_subset_elem_nb,data.frame(elements_number=elements_number_val),interval="none")
               sum_y_comp <- sum_y_comp + predict(model_subset_y_comp,data.frame(y_component_number=y_component_number_val),interval="none")
               sum_v_len <- sum_v_len + predict(model_subset_v_len,data.frame(vector_length=vector_length_val),interval="none")
               sum_th_nb <- sum_th_nb + predict(model_subset_th_nb,data.frame(threads_number=threads_number_val),interval="none")
               sum_lws_y <- sum_lws_y + predict(model_subset_lws_y,data.frame(lws_y=lws_y_val),interval="none")
          }

           avg_elem_nb <- sum_elem_nb / runs
           avg_y_comp <- sum_y_comp / runs 
           avg_v_len <- sum_v_len / runs 
           avg_th_nb <- sum_th_nb / runs 
           avg_lws_y <- sum_lws_y / runs 

          default <- par()
          par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

          plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,1e-9))
          lines(sort(df$elements_number),predict(model_elem_nb)[order(df$elements_number)],col="red")  
          lines(elements_number_val,avg_elem_nb,col="green")  

          plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,5e-9))
          lines(sort(df$y_component_number),predict(model_y_comp)[order(df$y_component_number)],col="red")  
          lines(y_component_number_val,avg_y_comp,col="green")  

          plot(y=df$time_per_pixel,df$vector_length, ylim=c(0,5e-9))
          lines(sort(df$vector_length),predict(model_v_len)[order(df$vector_length)],col="red")  
          lines(vector_length_val,avg_v_len,col="green")  

          plot(y=df$time_per_pixel,df$threads_number, ylim=c(0,1e-9))
          lines(sort(df$threads_number),predict(model_th_nb)[order(df$threads_number)],col="red")  
          lines(threads_number_val,avg_th_nb,col="green")  

          plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,9e-9))
          lines(sort(df$lws_y),predict(model_lws_y)[order(df$lws_y)],col="red")  
          lines(lws_y_val,avg_lws_y,col="green")  

          par(default)        

        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/random_100_fit_100_avg_comp.png]]

        
******* DONE Screening design
        #+begin_src sh :results output :exports both
          ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
        #+end_src

        #+RESULTS:

        #+begin_src R :results output :session :exports both
          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          summary(df)
        #+end_src

        #+RESULTS:
        #+begin_example
         elements_number  y_component_number vector_length   temporary_size 
         Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
         1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
         Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
         Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
         3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
         Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
         vector_recompute load_overlap  threads_number       lws_y        
         true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                          true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                        Median : 256.0   Median :  16.00  
                                        Mean   : 368.1   Mean   :  73.58  
                                        3rd Qu.: 512.0   3rd Qu.:  64.00  
                                        Max.   :1024.0   Max.   :1024.00  
         time_per_pixel     
         Min.   :1.165e-10  
         1st Qu.:3.028e-10  
         Median :7.125e-10  
         Mean   :2.013e-09  
         3rd Qu.:2.001e-09  
         Max.   :4.452e-08
#+end_example

        Create the screening desgin:
        #+begin_src R :results output :session :exports both
          library(FrF2)
          screening_d <-  pb(nruns= 64 ,n12.taguchi= FALSE ,nfactors= 7, ncenter= 0 , 
              replications= 1 ,repeat.only= FALSE ,randomize= TRUE ,seed= 26654 , 
              factor.names=list( elements_number=c(-1,1),
                                 y_component_number=c(-1,1),
                                 vector_length=c(-1,1),
                                 temporary_size=c(-1,1),
                                 load_overlap=c(-1,1),
                                 threads_number=c(-1,1),
                                 lws_y=c(-1, 1) ) )
          screening_d
        #+end_src

        #+RESULTS:
        #+begin_example
           elements_number y_component_number vector_length temporary_size load_overlap
        1                1                 -1            -1             -1           -1
        2                1                  1             1              1            1
        3               -1                  1            -1             -1            1
        4               -1                 -1            -1              1            1
        5               -1                 -1             1              1           -1
        6               -1                  1             1              1           -1
        7                1                  1             1             -1           -1
        8               -1                  1             1             -1            1
        9               -1                 -1            -1             -1           -1
        10              -1                  1             1              1           -1
        11              -1                 -1             1             -1           -1
        12               1                  1             1              1           -1
        13               1                  1            -1              1           -1
        14               1                 -1             1             -1           -1
        15               1                  1            -1              1            1
        16               1                 -1            -1              1           -1
        17               1                 -1            -1             -1           -1
        18               1                 -1             1              1           -1
        19              -1                  1             1              1            1
        20               1                 -1             1              1            1
        21               1                 -1             1             -1            1
        22              -1                 -1            -1              1            1
        23               1                  1            -1              1            1
        24               1                  1             1             -1            1
        25               1                  1             1             -1           -1
        26              -1                  1             1              1            1
        27              -1                 -1             1              1            1
        28              -1                 -1            -1              1            1
        29               1                  1             1              1           -1
        30              -1                  1            -1              1           -1
        31               1                 -1            -1             -1            1
        32               1                 -1             1              1           -1
        33               1                 -1            -1              1           -1
        34              -1                 -1            -1              1           -1
        35              -1                  1            -1             -1            1
        36              -1                  1             1              1           -1
        37               1                  1            -1             -1            1
        38              -1                 -1            -1              1           -1
        39               1                  1            -1             -1           -1
        40               1                 -1             1              1            1
        41              -1                 -1            -1             -1            1
        42               1                 -1             1              1            1
        43               1                  1            -1              1            1
        44              -1                  1             1             -1            1
        45               1                 -1            -1              1           -1
        46              -1                  1             1             -1            1
        47              -1                  1            -1             -1           -1
        48              -1                  1            -1              1            1
        49               1                  1             1             -1           -1
        50              -1                 -1            -1             -1            1
        51               1                  1            -1              1            1
        52               1                 -1            -1             -1            1
        53               1                  1             1             -1            1
        54              -1                 -1             1             -1           -1
        55              -1                 -1             1             -1            1
        56              -1                 -1             1             -1           -1
        57              -1                  1            -1             -1           -1
        58              -1                  1            -1              1           -1
        59               1                 -1            -1             -1            1
        60               1                 -1             1             -1            1
        61               1                  1            -1             -1           -1
        62              -1                 -1             1              1            1
        63              -1                 -1             1             -1           -1
        64              -1                  1            -1             -1           -1
           threads_number lws_y
        1               1     1
        2               1     1
        3              -1    -1
        4               1     1
        5               1     1
        6              -1     1
        7              -1     1
        8               1    -1
        9              -1    -1
        10             -1    -1
        11              1    -1
        12              1     1
        13              1    -1
        14             -1     1
        15              1    -1
        16             -1    -1
        17              1    -1
        18              1     1
        19             -1    -1
        20             -1    -1
        21             -1    -1
        22             -1     1
        23             -1     1
        24              1    -1
        25              1    -1
        26             -1     1
        27              1    -1
        28              1    -1
        29             -1    -1
        30              1     1
        31              1    -1
        32              1     1
        33             -1    -1
        34             -1     1
        35             -1    -1
        36              1    -1
        37             -1    -1
        38              1    -1
        39             -1     1
        40             -1    -1
        41              1     1
        42              1    -1
        43             -1     1
        44              1     1
        45             -1     1
        46              1     1
        47              1     1
        48              1    -1
        49             -1    -1
        50             -1    -1
        51              1     1
        52              1     1
        53             -1     1
        54              1    -1
        55             -1     1
        56             -1    -1
        57              1     1
        58             -1    -1
        59             -1     1
        60              1     1
        61              1    -1
        62             -1     1
        63             -1     1
        64             -1     1
        class=design, type= pb
#+end_example

        Decoding into min and max values:
        #+begin_src R :results output :session :exports both
          decode <- function(code,x){
              if(code == -1){
                  res <- min(x)
              }
              else{
                  res <- max(x)
              }
              res
          }

          set <- data.frame()
          for(i in 1:nrow(screening_d)){
              set <- rbind(set,
                           df[df$elements_number == decode(screening_d[i,]$elements_number, df$elements_number) &
                           df$y_component_number == decode(screening_d[i,]$y_component_number, df$y_component_number) &
                           df$vector_length == decode(screening_d[i,]$vector_length, df$vector_length) &
                           df$temporary_size == decode(screening_d[i,]$temporary_size, df$temporary_size) &
                           df$load_overlap == (if (screening_d[i,]$load_overlap == -1) "false" else "true") &
                           df$threads_number == decode(screening_d[i,]$threads_number, df$threads_number) &
                           df$lws_y == decode(screening_d[i,]$lws_y, df$lws_y)
                              ,])
          }
          set
        #+end_src

        #+RESULTS:
        #+begin_example
               elements_number y_component_number vector_length temporary_size
        21511                1                  1             1              4
        1536                 1                  1             1              2
        15572                1                  1            16              2
        9062                24                  6             1              4
        21779               24                  6             1              4
        13920                1                  1            16              4
        9025                 1                  1             1              4
        8983                24                  6            16              4
        11657               24                  6             1              2
        21644                1                  1             1              4
        12022                1                  1             1              2
        11205               24                  6            16              2
        4896                 1                  1             1              2
        11687               24                  6             1              4
        155721               1                  1            16              2
        4081                 1                  1            16              2
        14494               24                  6             1              2
               vector_recompute load_overlap threads_number lws_y time_per_pixel
        21511              true         true           1024  1024   5.375467e-09
        1536               true        false             32     1   5.828804e-10
        15572              true        false           1024     1   2.793304e-09
        9062               true        false           1024     1   1.914266e-10
        21779              true         true           1024     1   1.913311e-10
        13920              true         true           1024     1   2.783658e-09
        9025               true         true           1024     1   2.672037e-10
        8983               true        false             32     1   4.378793e-10
        11657              true         true             32     1   1.646092e-10
        21644              true        false           1024     1   2.686187e-10
        12022              true         true           1024  1024   5.379390e-09
        11205              true        false             32     1   4.395678e-10
        4896               true         true             32     1   5.825783e-10
        11687              true         true           1024  1024   3.761999e-09
        155721             true        false           1024     1   2.793304e-09
        4081               true        false             32     1   2.415739e-09
        14494              true        false           1024     1   1.911056e-10
#+end_example

         #+begin_src R :results output :session :exports both
           f <- function(x) { x * (0.05 - 1 * (x < 0)) }
           g <- function(x) { f(x)/x^2 }
           h <- function(x) {pmin(g(x),1e15)}
         #+end_src


        The problem is that I don't get the number of points I asked
        because of the constraints. Lots of combination of maximxal
        values are unfeasible. Lets put that aside for the moment. 
        Lets try see I we can have the same coefficient using the same
        model as earlier:
        #+begin_src R :results output :session :exports both
            form_screen_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
            form_screen_y_comp <- time_per_pixel ~ I(1/y_component_number)
            form_screen_v_len <- time_per_pixel ~ vector_length 
            form_screen_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
            form_screen_lws_y <- time_per_pixel ~ lws_y 

            model_screen_elem_nb <- lm(data=set,formula=form_screen_elem_nb)
            for(i in 1:5){
                E <- residuals(model_screen_elem_nb)
                model_screen_elem_nb <- lm(data=set,formula=form_screen_elem_nb,weight=g(E))
            }

            model_screen_y_comp <- lm(data=set,formula=form_screen_y_comp)
            for(i in 1:5){
                E <- residuals(model_screen_y_comp)
                model_screen_y_comp <- lm(data=set,formula=form_screen_y_comp,weight=g(E))
            }

            model_screen_v_len <- lm(data=set,formula=form_screen_v_len)
            for(i in 1:5){
                E <- residuals(model_screen_v_len)
                model_screen_v_len <- lm(data=set,formula=form_screen_v_len,weight=g(E))
            }

            model_screen_th_nb <- lm(data=set,formula=form_screen_th_nb)
            for(i in 1:5){
                E <- residuals(model_screen_th_nb)
                model_screen_th_nb <- lm(data=set,formula=form_screen_th_nb,weight=g(E))
            }

            model_screen_lws_y <- lm(data=set,formula=form_screen_lws_y)
            for(i in 1:5){
                E <- residuals(model_screen_lws_y)
                model_screen_lws_y <- lm(data=set,formula=form_screen_lws_y,weight=g(E))
            }
       #+end_src

        #+RESULTS:

        For comparison with the full search space:
        #+begin_src R :results output :session :exports both
          form_full_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
          form_full_y_comp <- time_per_pixel ~ I(1/y_component_number)
          form_full_v_len <- time_per_pixel ~ vector_length 
          form_full_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
          form_full_lws_y <- time_per_pixel ~ lws_y 

          model_full_elem_nb <- lm(data=df,formula=form_full_elem_nb)
          for(i in 1:200){
              E <- residuals(model_full_elem_nb)
              model_full_elem_nb <- lm(data=df,formula=form_full_elem_nb,weight=g(E))
          }

          model_full_y_comp <- lm(data=df,formula=form_full_y_comp)
          for(i in 1:200){
              E <- residuals(model_full_y_comp)
              model_full_y_comp <- lm(data=df,formula=form_full_y_comp,weight=g(E))
          }

          model_full_v_len <- lm(data=df,formula=form_full_v_len)
          for(i in 1:200){
              E <- residuals(model_full_v_len)
              model_full_v_len <- lm(data=df,formula=form_full_v_len,weight=g(E))
          }

          model_full_th_nb <- lm(data=df,formula=form_full_th_nb)
          for(i in 1:200){
              E <- residuals(model_full_th_nb)
              model_full_th_nb <- lm(data=df,formula=form_full_th_nb,weight=g(E))
          }

          model_full_lws_y <- lm(data=df,formula=form_full_lws_y)
          for(i in 1:200){
              E <- residuals(model_full_lws_y)
              model_full_lws_y <- lm(data=df,formula=form_full_lws_y,weight=g(E))
          }
       #+end_src

        #+RESULTS:


        We have not that bad approximation of coefficient that have a
        simple model:
        #+begin_src R :results output graphics :file img/20160402/pilipili2/sc_desgin_64.png :exports both :width 800 :height 600 :session
          default <- par()
          par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

          plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,4e-10))
          lines(sort(set$elements_number),predict(model_screen_elem_nb)[order(set$elements_number)],col="red")  
          lines(sort(df$elements_number),predict(model_full_elem_nb)[order(df$elements_number)],col="green")  

          plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,5e-10))
          lines(sort(set$y_component_number),predict(model_screen_y_comp)[order(set$y_component_number)],col="red")  
          lines(sort(df$y_component_number),predict(model_full_y_comp)[order(df$y_component_number)],col="green")  

          plot(y=df$time_per_pixel,df$vector_length, ylim=c(0,5e-10))
          lines(sort(set$vector_length),predict(model_screen_v_len)[order(set$vector_length)],col="red")  
          lines(sort(df$vector_length),predict(model_full_v_len)[order(df$vector_length)],col="green")  

          plot(y=df$time_per_pixel,df$threads_number, ylim=c(0,4e-10))
          lines(sort(set$threads_number),predict(model_screen_th_nb)[order(set$threads_number)],col="red")  
          lines(sort(df$threads_number),predict(model_full_th_nb)[order(df$threads_number)],col="green")  

          plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,4e-9))
          lines(sort(set$lws_y),predict(model_screen_lws_y)[order(set$lws_y)],col="red")  
          lines(sort(df$lws_y),predict(model_full_lws_y)[order(df$lws_y)],col="green")  

          par(default)        

        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/sc_desgin_64.png]]

        Now lets see the pertinency of the model. Here we have two
        problem: 
          - Some coefficient failed to be estimated
          - We don't know how many iterate is correct
        #+begin_src R :results output :session :exports both
          form_complete <- time_per_pixel ~ elements_number + I(1/elements_number) + I(1/y_component_number) + vector_length + threads_number + I(1/threads_number) + lws_y 
          # form_complete <- time_per_pixel ~ elements_number + vector_length + threads_number  + lws_y 
          model_screen_complete <- lm(data=set,formula=form_complete)
          for(i in 1:200){
              E <- residuals(model_screen_complete)
              model_screen_complete <- lm(data=set,formula=form_complete,weight=g(E))
          }

          summary(model_screen_complete)
        #+end_src

        #+RESULTS:
        #+begin_example
         Error in model.frame.default(formula = form_complete, data = set, weights = g(E),  (from #3) : 
          les longueurs des variables diffÃ¨rent (trouvÃ© pour '(weights)')

        Call:
        lm.default(formula = form_complete, data = set, weights = g(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -5.824e-05 -4.484e-05  6.970e-07  1.122e-05  1.599e-05 

        Coefficients: (6 not defined because of singularities)
                                 Estimate Std. Error  t value Pr(>|t|)    
        (Intercept)             1.153e-10  1.154e-17  9990308   <2e-16 ***
        elements_number         1.519e-10  1.154e-17 13170699   <2e-16 ***
        I(1/elements_number)           NA         NA       NA       NA    
        I(1/y_component_number)        NA         NA       NA       NA    
        vector_length                  NA         NA       NA       NA    
        threads_number                 NA         NA       NA       NA    
        I(1/threads_number)            NA         NA       NA       NA    
        lws_y                          NA         NA       NA       NA    
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 3.276e-05 on 14 degrees of freedom
          (1 observation deleted due to missingness)
        Multiple R-squared:      1,	Adjusted R-squared:      1 
        F-statistic: 1.735e+14 on 1 and 14 DF,  p-value: < 2.2e-16
        #+end_example

          #+begin_src R :results output :session :exports both
          summary(model_screen_elem_nb)
          summary(model_screen_y_comp)
          summary(model_screen_v_len)
          summary(model_screen_th_nb)
          summary(model_screen_lws_y)
          #+end_src

          #+RESULTS:
          #+begin_example

          Call:
          lm.default(formula = form_screen_elem_nb, data = set, weights = g(E))

          Weighted Residuals:
                 Min         1Q     Median         3Q        Max 
          -3.568e-06  1.253e-06  4.055e-06  1.127e-05  1.601e-05 

          Coefficients: (1 not defined because of singularities)
                                 Estimate Std. Error t value Pr(>|t|)    
          (Intercept)           2.768e-10  3.323e-11   8.331 5.21e-07 ***
          elements_number      -3.923e-12  1.856e-12  -2.113   0.0518 .  
          I(1/elements_number)         NA         NA      NA       NA    
          ---
          Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

          Residual standard error: 9.16e-06 on 15 degrees of freedom
          Multiple R-squared:  0.2294,	Adjusted R-squared:  0.178 
          F-statistic: 4.466 on 1 and 15 DF,  p-value: 0.05175

          Call:
          lm.default(formula = form_screen_y_comp, data = set, weights = g(E))

          Weighted Residuals:
                 Min         1Q     Median         3Q        Max 
          -3.568e-06  1.253e-06  4.055e-06  1.127e-05  1.601e-05 

          Coefficients:
                                   Estimate Std. Error t value Pr(>|t|)    
          (Intercept)             1.646e-10  3.475e-11   4.738 0.000264 ***
          I(1/y_component_number) 1.083e-10  5.123e-11   2.113 0.051755 .  
          ---
          Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

          Residual standard error: 9.16e-06 on 15 degrees of freedom
          Multiple R-squared:  0.2294,	Adjusted R-squared:  0.178 
          F-statistic: 4.466 on 1 and 15 DF,  p-value: 0.05175

          Call:
          lm.default(formula = form_screen_v_len, data = set, weights = g(E))

          Weighted Residuals:
                 Min         1Q     Median         3Q        Max 
          -4.952e-06  3.754e-07  4.428e-06  1.085e-05  1.611e-05 

          Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
          (Intercept)   1.742e-10  8.105e-12   21.49 1.11e-12 ***
          vector_length 1.653e-11  7.972e-13   20.73 1.87e-12 ***
          ---
          Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

          Residual standard error: 9.024e-06 on 15 degrees of freedom
          Multiple R-squared:  0.9663,	Adjusted R-squared:  0.964 
          F-statistic: 429.9 on 1 and 15 DF,  p-value: 1.871e-12

          Call:
          lm.default(formula = form_screen_th_nb, data = set, weights = g(E))

          Weighted Residuals:
                 Min         1Q     Median         3Q        Max 
          -2.884e-06  1.966e-06  4.799e-06  1.141e-05  1.611e-05 

          Coefficients: (1 not defined because of singularities)
                                Estimate Std. Error t value Pr(>|t|)  
          (Intercept)          1.923e-10  8.848e-11   2.173   0.0462 *
          threads_number      -6.697e-16  8.675e-14  -0.008   0.9939  
          I(1/threads_number)         NA         NA      NA       NA  
          ---
          Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

          Residual standard error: 9.297e-06 on 15 degrees of freedom
          Multiple R-squared:  3.973e-06,	Adjusted R-squared:  -0.06666 
          F-statistic: 5.959e-05 on 1 and 15 DF,  p-value: 0.9939

          Call:
          lm.default(formula = form_screen_lws_y, data = set, weights = g(E))

          Weighted Residuals:
                 Min         1Q     Median         3Q        Max 
          -4.812e-06  4.677e-07  3.540e-06  8.994e-06  1.141e-05 

          Coefficients:
                       Estimate Std. Error t value Pr(>|t|)    
          (Intercept) 1.864e-10  1.231e-11   15.14  1.7e-10 ***
          lws_y       3.492e-12  1.283e-14  272.09  < 2e-16 ***
          ---
          Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

          Residual standard error: 7.114e-06 on 15 degrees of freedom
          Multiple R-squared:  0.9998,	Adjusted R-squared:  0.9998 
          F-statistic: 7.403e+04 on 1 and 15 DF,  p-value: < 2.2e-16
#+end_example

        
       Maybe that with this set of data summary.rq works... but it
       still fails:
       #+begin_src R :results output :session :exports both
         library(quantreg)
         summary(rq(data=set,formula=form_complete,tau=.05))
       #+end_src

       #+RESULTS:
       : Le chargement a nÃ©cessitÃ© le package : SparseM
       : 
       : Attachement du package : âSparseMâ
       : 
       : The following object is masked from âpackage:baseâ:
       : 
       :     backsolve
       : Error in rq.fit.br(x, y, tau = tau, ...) : Singular design matrix

       And what about the coefficients? It failed...
       #+begin_src R :results output :session :exports both
         rq(data=set,formula=form_complete,tau=.05)
       #+end_src

       #+RESULTS:
       : Error in rq.fit.br(x, y, tau = tau, ...) : Singular design matrix

       *Warning wrong thinking:* The main problem with methods is that
       supposed to be used with a "symetric" search space, I mean
       rectangular or square. Because of the constraints this is not
       the case and we lose lots of points and we and up with not
       enough points to do the regression correctly, it fails to
       compute some coefficients.

       If we had NA value on the model ealier is it not because we do
       not had enough points but because by taking low and high point
       we consider only linear combination of factors. Not something
       like 1/a + b^2 + c. Lets try to use it how it is suppose to be. 
       #+begin_src R :results output :session :exports both
         library(FrF2)
         screening_d <-  pb(nruns= 100 ,n12.taguchi= FALSE ,nfactors= 7, ncenter= 0 , 
         replications= 1 ,repeat.only= FALSE ,randomize= TRUE ,seed= 26654 , 
         factor.names=list( elements_number=c(-1,1),
                           y_component_number=c(-1,1),
                           vector_length=c(-1,1),
                           temporary_size=c(-1,1),
                           load_overlap=c(-1,1),
                           threads_number=c(-1,1),
                           lws_y=c(-1, 1) ) )

       decode <- function(code,x){
              if(code == -1){
                  res <- min(x)
              }
              else{
                  res <- max(x)
              }
              res
          }

          set <- data.frame()
          for(i in 1:nrow(screening_d)){
              set <- rbind(set,
                           df[df$elements_number == decode(screening_d[i,]$elements_number, df$elements_number) &
                           df$y_component_number == decode(screening_d[i,]$y_component_number, df$y_component_number) &
                           df$vector_length == decode(screening_d[i,]$vector_length, df$vector_length) &
                           df$temporary_size == decode(screening_d[i,]$temporary_size, df$temporary_size) &
                           df$load_overlap == (if (screening_d[i,]$load_overlap == -1) "false" else "true") &
                           df$threads_number == decode(screening_d[i,]$threads_number, df$threads_number) &
                           df$lws_y == decode(screening_d[i,]$lws_y, df$lws_y)
                              ,])
          }
          nrow(set)
       #+end_src

       #+RESULTS:
       : [1] 32

       
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
         plot(set[,!names(set) %in% c("vector_recompute")])
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-4119VUY/figure4119ECc.png]]

          With quantile regression we could remove load overlap and
          temporary size but could not compute y component number. The
          problem come from our method to perform quantile regression
          #+begin_src R :results output :session :exports both
            f <- function(x) { x * (0.05 - 1 * (x < 0)) }
            g <- function(x) { f(x)/x^2 }
            h <- function(x) {pmin(g(x),1e15)}
            
            model <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y + load_overlap + temporary_size
            
            fit <- lm(data=set,formula=model)
            for(i in 1:50){
                E <- residuals(fit)
                fit <- lm(data=set,formula=model,weight=h(E))
            }
            
            summary(fit)
            
            model <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y
            
            fit <- lm(data=set,formula=model)
            for(i in 1:50){
                E <- residuals(fit)
                fit <- lm(data=set,formula=model,weight=h(E))
            }
            
            summary(fit)
        #+end_src

          #+RESULTS:
          #+begin_example

          Call:
          lm.default(formula = model, data = set, weights = h(E))

          Weighted Residuals:
                 Min         1Q     Median         3Q        Max 
          -7.000e-09 -1.000e-09  4.850e-07  7.798e-06  4.325e-05 

          Coefficients: (1 not defined because of singularities)
                               Estimate Std. Error   t value Pr(>|t|)    
          (Intercept)         5.583e-10  3.513e-11    15.892 1.41e-14 ***
          elements_number    -7.103e-11  1.537e-12   -46.222  < 2e-16 ***
          y_component_number         NA         NA        NA       NA    
          vector_length       9.966e-11  1.179e-12    84.563  < 2e-16 ***
          threads_number     -3.142e-13  1.782e-14   -17.634 1.29e-15 ***
          lws_y               4.993e-12  4.124e-16 12109.393  < 2e-16 ***
          load_overlaptrue    4.397e-12  1.768e-11     0.249    0.806    
          temporary_size     -1.835e-12  8.835e-12    -0.208    0.837    
          ---
          Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

          Residual standard error: 1.334e-05 on 25 degrees of freedom
          Multiple R-squared:      1,	Adjusted R-squared:      1 
          F-statistic: 4.093e+07 on 6 and 25 DF,  p-value: < 2.2e-16

          Call:
          lm.default(formula = model, data = set, weights = h(E))

          Weighted Residuals:
                 Min         1Q     Median         3Q        Max 
          -7.000e-09 -1.000e-09  6.470e-07  7.822e-06  4.325e-05 

          Coefficients: (1 not defined because of singularities)
                               Estimate Std. Error t value Pr(>|t|)    
          (Intercept)         5.506e-10  4.468e-13    1232   <2e-16 ***
          elements_number    -7.106e-11  1.765e-14   -4025   <2e-16 ***
          y_component_number         NA         NA      NA       NA    
          vector_length       9.985e-11  4.280e-14    2333   <2e-16 ***
          threads_number     -3.098e-13  5.013e-16    -618   <2e-16 ***
          lws_y               4.993e-12  3.969e-16   12581   <2e-16 ***
          ---
          Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

          Residual standard error: 1.284e-05 on 27 degrees of freedom
          Multiple R-squared:      1,	Adjusted R-squared:      1 
          F-statistic: 6.251e+07 on 4 and 27 DF,  p-value: < 2.2e-16
          #+end_example

          Lets try with lm. Obsviously it work better with lm even if
          first we have NA for y component number:
          #+begin_src R :results output :session :exports both
            model <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y + load_overlap + temporary_size
            fit <- lm(data=set,formula=model)
            summary(fit)

            model <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y 
            fit <- lm(data=set,formula=model)
            summary(fit)

            model <- time_per_pixel ~ vector_length  + lws_y 
            fit <- lm(data=set,formula=model)
            summary(fit)
          #+end_src

          #+RESULTS:
          #+begin_example

          Call:
          lm.default(formula = model, data = set)

          Residuals:
                 Min         1Q     Median         3Q        Max 
          -8.280e-09 -4.633e-09 -1.169e-09  2.579e-09  1.990e-08 

          Coefficients: (1 not defined because of singularities)
                               Estimate Std. Error t value Pr(>|t|)   
          (Intercept)         3.517e-09  5.515e-09   0.638  0.52946   
          elements_number    -1.428e-10  1.294e-10  -1.104  0.28027   
          y_component_number         NA         NA      NA       NA   
          vector_length       6.049e-10  2.126e-10   2.845  0.00873 **
          threads_number      3.082e-12  3.484e-12   0.885  0.38483   
          lws_y               1.103e-11  3.964e-12   2.783  0.01011 * 
          load_overlaptrue   -2.553e-09  3.054e-09  -0.836  0.41118   
          temporary_size     -1.562e-09  1.520e-09  -1.028  0.31394   
          ---
          Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

          Residual standard error: 7.803e-09 on 25 degrees of freedom
          Multiple R-squared:  0.5672,	Adjusted R-squared:  0.4633 
          F-statistic:  5.46 on 6 and 25 DF,  p-value: 0.001001

          Call:
          lm.default(formula = model, data = set)

          Residuals:
                 Min         1Q     Median         3Q        Max 
          -7.561e-09 -5.107e-09  5.095e-10  2.910e-09  2.194e-08 

          Coefficients: (1 not defined because of singularities)
                               Estimate Std. Error t value Pr(>|t|)   
          (Intercept)        -2.932e-09  3.293e-09  -0.890  0.38127   
          elements_number    -1.033e-10  1.266e-10  -0.816  0.42168   
          y_component_number         NA         NA      NA       NA   
          vector_length       6.274e-10  2.035e-10   3.083  0.00468 **
          threads_number      2.102e-12  3.440e-12   0.611  0.54633   
          lws_y               1.288e-11  3.770e-12   3.417  0.00202 **
          ---
          Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

          Residual standard error: 7.852e-09 on 27 degrees of freedom
          Multiple R-squared:  0.5267,	Adjusted R-squared:  0.4566 
          F-statistic: 7.511 on 4 and 27 DF,  p-value: 0.0003338

          Call:
          lm.default(formula = model, data = set)

          Residuals:
                 Min         1Q     Median         3Q        Max 
          -8.618e-09 -6.195e-09  2.871e-09  2.975e-09  2.258e-08 

          Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
          (Intercept)   -3.345e-09  2.035e-09  -1.644  0.11097    
          vector_length  6.228e-10  1.933e-10   3.222  0.00313 ** 
          lws_y          1.473e-11  3.108e-12   4.738 5.25e-05 ***
          ---
          Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

          Residual standard error: 7.738e-09 on 29 degrees of freedom
          Multiple R-squared:  0.5063,	Adjusted R-squared:  0.4723 
          F-statistic: 14.87 on 2 and 29 DF,  p-value: 3.591e-05
#+end_example

          #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
          default <- par()
          par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
           plot(fit)
          par(default)
          #+end_src

          #+RESULTS:
          [[file:/tmp/babel-4119VUY/figure4119RMi.png]]

                 #+begin_src R :results output :session :exports both
         library(FrF2)
         screening_d <-  pb(nruns= 80 ,n12.taguchi= FALSE ,nfactors= 7, ncenter= 0 , 
         replications= 1 ,repeat.only= FALSE ,randomize= TRUE ,seed= 26654 , 
         factor.names=list( elements_number=c(-1,1),
                           y_component_number=c(-1,1),
                           vector_length=c(-1,1),
                           temporary_size=c(-1,1),
                           load_overlap=c(-1,1),
                           threads_number=c(-1,1),
                           lws_y=c(-1, 1) ) )

       decode <- function(code,x){
              if(code == -1){
                  res <- min(x)
              }
              else{
                  res <- max(x)
              }
              res
          }

          set <- data.frame()
          for(i in 1:nrow(screening_d)){
              set <- rbind(set,
                           df[df$elements_number == decode(screening_d[i,]$elements_number, df$elements_number) &
                           df$y_component_number == decode(screening_d[i,]$y_component_number, df$y_component_number) &
                           df$vector_length == decode(screening_d[i,]$vector_length, df$vector_length) &
                           df$temporary_size == decode(screening_d[i,]$temporary_size, df$temporary_size) &
                           df$load_overlap == (if (screening_d[i,]$load_overlap == -1) "false" else "true") &
                           df$threads_number == decode(screening_d[i,]$threads_number, df$threads_number) &
                           df$lws_y == decode(screening_d[i,]$lws_y, df$lws_y)
                              ,])
          }
          nrow(set)
       #+end_src

                 #+RESULTS:
                 : [1] 24

         With about 20 points we can detect that vector_length and lws_y
         have the more significant impact:
         #+begin_src R :results output :session :exports both
            model <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y + load_overlap + temporary_size
            fit <- lm(data=set,formula=model)
            summary(fit)

            model <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y 
            fit <- lm(data=set,formula=model)
            summary(fit)

            model <- time_per_pixel ~ vector_length  + lws_y 
            fit <- lm(data=set,formula=model)
            summary(fit)
          #+end_src

         #+RESULTS:
         #+begin_example

         Call:
         lm.default(formula = model, data = set)

         Residuals:
                Min         1Q     Median         3Q        Max 
         -1.121e-08 -5.648e-09  8.391e-10  3.778e-09  1.640e-08 

         Coefficients: (1 not defined because of singularities)
                              Estimate Std. Error t value Pr(>|t|)   
         (Intercept)         5.850e-09  7.909e-09   0.740  0.46960   
         elements_number    -2.132e-10  1.930e-10  -1.105  0.28462   
         y_component_number         NA         NA      NA       NA   
         vector_length       5.901e-10  2.677e-10   2.205  0.04154 * 
         threads_number     -3.043e-12  4.444e-12  -0.685  0.50274   
         lws_y               1.923e-11  4.896e-12   3.927  0.00109 **
         load_overlaptrue   -5.931e-10  3.727e-09  -0.159  0.87545   
         temporary_size     -1.552e-09  1.876e-09  -0.827  0.41951   
         ---
         Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

         Residual standard error: 8.479e-09 on 17 degrees of freedom
         Multiple R-squared:  0.6439,	Adjusted R-squared:  0.5182 
         F-statistic: 5.123 on 6 and 17 DF,  p-value: 0.003584

         Call:
         lm.default(formula = model, data = set)

         Residuals:
                Min         1Q     Median         3Q        Max 
         -1.297e-08 -4.786e-09  1.004e-09  3.894e-09  1.685e-08 

         Coefficients: (1 not defined because of singularities)
                              Estimate Std. Error t value Pr(>|t|)    
         (Intercept)         1.753e-10  4.027e-09   0.044 0.965728    
         elements_number    -1.860e-10  1.741e-10  -1.068 0.298969    
         y_component_number         NA         NA      NA       NA    
         vector_length       6.107e-10  2.552e-10   2.393 0.027205 *  
         threads_number     -2.269e-12  4.155e-12  -0.546 0.591369    
         lws_y               1.960e-11  4.697e-12   4.172 0.000517 ***
         ---
         Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

         Residual standard error: 8.187e-09 on 19 degrees of freedom
         Multiple R-squared:  0.6289,	Adjusted R-squared:  0.5508 
         F-statistic: 8.051 on 4 and 19 DF,  p-value: 0.0005667

         Call:
         lm.default(formula = model, data = set)

         Residuals:
                Min         1Q     Median         3Q        Max 
         -1.233e-08 -5.498e-09  2.589e-09  2.697e-09  1.771e-08 

         Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
         (Intercept)   -3.148e-09  2.273e-09  -1.385 0.180640    
         vector_length  7.054e-10  2.322e-10   3.038 0.006259 ** 
         lws_y          1.807e-11  3.952e-12   4.573 0.000165 ***
         ---
         Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

         Residual standard error: 8.023e-09 on 21 degrees of freedom
         Multiple R-squared:  0.6062,	Adjusted R-squared:  0.5687 
         F-statistic: 16.16 on 2 and 21 DF,  p-value: 5.632e-05
#+end_example

******* DONE LHS
        #+begin_src sh :results output :exports both
          ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
        #+end_src

        #+RESULTS:

        #+begin_src R :results output :session :exports both
          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          summary(df)
        #+end_src

        #+RESULTS:
        #+begin_example
         elements_number  y_component_number vector_length   temporary_size 
         Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
         1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
         Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
         Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
         3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
         Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
         vector_recompute load_overlap  threads_number       lws_y        
         true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                          true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                        Median : 256.0   Median :  16.00  
                                        Mean   : 368.1   Mean   :  73.58  
                                        3rd Qu.: 512.0   3rd Qu.:  64.00  
                                        Max.   :1024.0   Max.   :1024.00  
         time_per_pixel     
         Min.   :1.165e-10  
         1st Qu.:3.028e-10  
         Median :7.125e-10  
         Mean   :2.013e-09  
         3rd Qu.:2.001e-09  
         Max.   :4.452e-08
#+end_example

        Let's generate the LHS design and discretize the points:
        #+begin_src R :results output :session :exports both
            library(DoE.base)
            library(DoE.wrapper)
            
            elements_number_val <- as.numeric(levels(as.factor(df$elements_number)))
            y_component_number_val <- as.numeric(levels(as.factor(df$y_component_number)))
            vector_length_val <- as.numeric(levels(as.factor(df$vector_length)))
            threads_number_val <- as.numeric(levels(as.factor(df$threads_number)))
            lws_y_val <- as.numeric(levels(as.factor(df$lws_y)))
            temporary_size_val <- as.numeric(levels(as.factor(df$temporary_size)))
            load_overlap_val <- levels(df$load_overlap)
            
          Design.1 <- lhs.design( type= "maximin" , nruns= 441 ,nfactors= 7 ,digits= NULL ,seed=20049 , factor.names=list(idx_elements_number = c(1,length(elements_number_val)), 
                                                                                                                          idx_y_component_number = c(1,length(y_component_number_val)),
                                                                                                                          idx_vector_length = c(1,length(vector_length_val)), 
                                                                                                                          idx_threads_number = c(1,length(threads_number_val)),
                                                                                                                          idx_temporary_size = c(1,length(temporary_size_val)), 
                                                                                                                          idx_lws_y = c(1,length(lws_y_val)), 
                                                                                                                          idx_load_overlap = c(1,length(load_overlap_val)) 
                                                                                                                          ) 
                                )
            
          Design.1.rounded <- round(Design.1) # Ideally we would like to express factor(local_work_size_index) but the Dopt.design does not know how to handle it
            
          set <- data.frame()
          for(i in 1:nrow(Design.1)){
              set <- rbind(set, df[ df$elements_number == elements_number_val[Design.1$idx_elements_number[i]]
                                   & df$y_component_number == y_component_number_val[Design.1$idx_y_component_number[i]]
                                   & df$vector_length == vector_length_val[Design.1$idx_vector_length[i]]
                                   & df$threads_number == threads_number_val[Design.1$idx_threads_number[i]]
                                   & df$lws_y == lws_y_val[Design.1$idx_lws_y[i]]
                                   & df$temporary_size == temporary_size_val[Design.1$idx_temporary_size[i]]
                                   & df$load_overlap == load_overlap_val[Design.1$idx_load_overlap[i]], ])
          }
                    
          summary(set)
        #+end_src

        #+RESULTS:
        #+begin_example
        Loading required package: grid
        Loading required package: conf.design

        Attaching package: âDoE.baseâ

        The following objects are masked from âpackage:statsâ:

            aov, lm

        The following object is masked from âpackage:graphicsâ:

            plot.design

        The following object is masked from âpackage:baseâ:

            lengths
        Loading required package: FrF2
        Loading required package: rsm
         elements_number  y_component_number vector_length   temporary_size
         Min.   : 1.000   Min.   :1.000      Min.   :1.000   Min.   :2     
         1st Qu.: 3.000   1st Qu.:2.000      1st Qu.:2.000   1st Qu.:2     
         Median : 6.000   Median :3.000      Median :2.000   Median :2     
         Mean   : 6.822   Mean   :2.842      Mean   :3.564   Mean   :2     
         3rd Qu.:10.000   3rd Qu.:4.000      3rd Qu.:4.000   3rd Qu.:2     
         Max.   :20.000   Max.   :5.000      Max.   :8.000   Max.   :2     
         vector_recompute load_overlap threads_number      lws_y       
         true:101         false:101    Min.   : 32.0   Min.   :  1.00  
                          true :  0    1st Qu.: 64.0   1st Qu.:  4.00  
                                       Median :128.0   Median : 16.00  
                                       Mean   :187.2   Mean   : 51.95  
                                       3rd Qu.:256.0   3rd Qu.: 32.00  
                                       Max.   :512.0   Max.   :512.00  
         time_per_pixel     
         Min.   :1.457e-10  
         1st Qu.:3.087e-10  
         Median :7.661e-10  
         Mean   :1.830e-09  
         3rd Qu.:1.889e-09  
         Max.   :1.790e-08
#+end_example

        Now let's see how much informations we can get. Here it is
        worst than the with the D-optimal design:
        #+begin_src R :results output :session :exports both
          f <- function(x) { x * (0.05 - 1 * (x < 0)) }
          g <- function(x) { f(x)/x^2 }
          h <- function(x) {pmin(g(x),1e10)}
          
          model <- time_per_pixel ~ elements_number + I(1/elements_number) + 
              y_component_number + I(1/y_component_number) + 
              vector_length + 
              threads_number + I(1/threads_number) + 
              lws_y + 
              elements_number:y_component_number +
              threads_number:lws_y +
              threads_number:elements_number
          fit <- lm(data=set,formula=model)
          for(i in 1:200){
              E <- residuals(fit)
              fit <- lm(data=set,formula=model,weight=h(E))
          }
          summary(fit)
        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm.default(formula = model, data = set, weights = h(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -5.401e-06  1.533e-06  3.391e-06  6.573e-06  2.677e-05 

        Coefficients:
                                             Estimate Std. Error t value Pr(>|t|)    
        (Intercept)                         5.218e-10  3.509e-10   1.487  0.14054    
        elements_number                    -1.239e-10  3.609e-11  -3.432  0.00091 ***
        I(1/elements_number)               -2.453e-10  1.682e-10  -1.458  0.14825    
        y_component_number                 -9.731e-11  7.899e-11  -1.232  0.22118    
        I(1/y_component_number)             4.069e-11  2.287e-10   0.178  0.85917    
        vector_length                       5.377e-11  7.661e-12   7.019 4.24e-10 ***
        threads_number                      6.660e-14  2.197e-13   0.303  0.76246    
        I(1/threads_number)                 8.171e-09  2.512e-09   3.253  0.00162 ** 
        lws_y                               1.853e-11  9.771e-13  18.961  < 2e-16 ***
        elements_number:y_component_number  2.229e-11  7.204e-12   3.094  0.00264 ** 
        threads_number:lws_y               -2.394e-14  2.359e-15 -10.150  < 2e-16 ***
        elements_number:threads_number      1.750e-14  3.571e-14   0.490  0.62527    
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 7.943e-06 on 89 degrees of freedom
        Multiple R-squared:  0.9554,	Adjusted R-squared:  0.9499 
        F-statistic: 173.3 on 11 and 89 DF,  p-value: < 2.2e-16
#+end_example

        We can see that the model does not correctly fit the
        points. And it did not sample point at 1024 for the
        threads_number and lws_y:
        #+begin_src R :results output graphics :file img/20160402/pilipili2/lhs_desgin_100.png :exports both :width 600 :height 400 :session
          form_Dopt_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
          form_Dopt_y_comp <- time_per_pixel ~ I(1/y_component_number)
          form_Dopt_v_len <- time_per_pixel ~ vector_length 
          form_Dopt_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
          form_Dopt_lws_y <- time_per_pixel ~ lws_y 
          
          model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_elem_nb)
              model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb,weight=h(E))
          }
          
          model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp)
          for(i in 1:200){
              E <- residuals(model_Dopt_y_comp)
              model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp,weight=h(E))
          }
          
          model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len)
          for(i in 1:200){
              E <- residuals(model_Dopt_v_len)
              model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len,weight=h(E))
          }
          
          model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_th_nb)
              model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb,weight=h(E))
          }
          
          model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y)
          for(i in 1:200){
              E <- residuals(model_Dopt_lws_y)
              model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y,weight=h(E))
          }
          default <- par()
          par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

          plot(y=set$time_per_pixel,set$elements_number, ylim=c(0,4e-10))
          lines(sort(set$elements_number),predict(model_Dopt_elem_nb)[order(set$elements_number)],col="green")  

          plot(y=set$time_per_pixel,set$y_component_number, ylim=c(0,5e-10))
          lines(sort(set$y_component_number),predict(model_Dopt_y_comp)[order(set$y_component_number)],col="green")  

          plot(y=set$time_per_pixel,set$vector_length, ylim=c(0,5e-10))
          lines(sort(set$vector_length),predict(model_Dopt_v_len)[order(set$vector_length)],col="green")  

          plot(y=set$time_per_pixel,set$threads_number, ylim=c(0,4e-10))
          lines(sort(set$threads_number),predict(model_Dopt_th_nb)[order(set$threads_number)],col="green")  

          plot(y=set$time_per_pixel,set$lws_y, ylim=c(0,4e-8))
          lines(sort(set$lws_y),predict(model_Dopt_lws_y)[order(set$lws_y)],col="green")  

          par(default)        

        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/lhs_desgin_100.png]]
        
        And with a different model
        #+begin_src R :results output graphics :file img/20160402/pilipili2/lhs_desgin_100_2.png :exports both :width 600 :height 400 :session
          form_Dopt_elem_nb <- time_per_pixel ~ elements_number + I(elements_number^2) 
          form_Dopt_y_comp <- time_per_pixel ~ I(1/y_component_number)
          form_Dopt_v_len <- time_per_pixel ~ vector_length 
          form_Dopt_th_nb <- time_per_pixel ~ threads_number + I(threads_number^2) 
          form_Dopt_lws_y <- time_per_pixel ~ lws_y 
          
          model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_elem_nb)
              model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb,weight=h(E))
          }
          
          model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp)
          for(i in 1:200){
              E <- residuals(model_Dopt_y_comp)
              model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp,weight=h(E))
          }
          
          model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len)
          for(i in 1:200){
              E <- residuals(model_Dopt_v_len)
              model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len,weight=h(E))
          }
          
          model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_th_nb)
              model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb,weight=h(E))
          }
          
          model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y)
          for(i in 1:200){
              E <- residuals(model_Dopt_lws_y)
              model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y,weight=h(E))
          }
          default <- par()
          par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

          plot(y=set$time_per_pixel,set$elements_number, ylim=c(0,4e-10))
          lines(sort(set$elements_number),predict(model_Dopt_elem_nb)[order(set$elements_number)],col="green")  

          plot(y=set$time_per_pixel,set$y_component_number, ylim=c(0,5e-10))
          lines(sort(set$y_component_number),predict(model_Dopt_y_comp)[order(set$y_component_number)],col="green")  

          plot(y=set$time_per_pixel,set$vector_length, ylim=c(0,5e-10))
          lines(sort(set$vector_length),predict(model_Dopt_v_len)[order(set$vector_length)],col="green")  

          plot(y=set$time_per_pixel,set$threads_number, ylim=c(0,4e-10))
          lines(sort(set$threads_number),predict(model_Dopt_th_nb)[order(set$threads_number)],col="green")  

          plot(y=set$time_per_pixel,set$lws_y, ylim=c(0,4e-8))
          lines(sort(set$lws_y),predict(model_Dopt_lws_y)[order(set$lws_y)],col="green")  

          par(default)        

        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/lhs_desgin_100_2.png]]

        Let's try the complete model:
        #+begin_src R :results output :session :exports both
                  f <- function(x) { x * (0.05 - 1 * (x < 0)) }
          g <- function(x) { f(x)/x^2 }
          h <- function(x) {pmin(g(x),1e10)}
          
          model <- time_per_pixel ~ elements_number + I(elements_number^2) + 
              y_component_number + I(1/y_component_number) + 
              vector_length + 
              threads_number + I(threads_number^2) + 
              lws_y + 
              elements_number:y_component_number +
              threads_number:lws_y +
              threads_number:elements_number
          fit <- lm(data=set,formula=model)
          for(i in 1:200){
              E <- residuals(fit)
              fit <- lm(data=set,formula=model,weight=h(E))
          }
          summary(fit)

        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm.default(formula = model, data = set, weights = h(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -5.503e-06  1.177e-06  3.576e-06  6.239e-06  2.681e-05 

        Coefficients:
                                             Estimate Std. Error t value Pr(>|t|)    
        (Intercept)                         5.876e-10  4.077e-10   1.441 0.152988    
        elements_number                    -8.260e-11  2.430e-11  -3.399 0.001015 ** 
        I(elements_number^2)               -9.666e-13  1.796e-12  -0.538 0.591896    
        y_component_number                 -7.263e-11  1.296e-10  -0.560 0.576651    
        I(1/y_component_number)             1.006e-10  2.917e-10   0.345 0.730969    
        vector_length                       4.610e-11  7.565e-12   6.094 2.76e-08 ***
        threads_number                     -2.393e-12  5.441e-13  -4.397 3.03e-05 ***
        I(threads_number^2)                 3.583e-15  9.065e-16   3.953 0.000154 ***
        lws_y                               1.849e-11  9.811e-13  18.848  < 2e-16 ***
        elements_number:y_component_number  1.867e-11  1.151e-11   1.621 0.108486    
        threads_number:lws_y               -2.410e-14  2.328e-15 -10.355  < 2e-16 ***
        elements_number:threads_number      3.717e-14  2.535e-14   1.466 0.146127    
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 7.887e-06 on 89 degrees of freedom
        Multiple R-squared:  0.9431,	Adjusted R-squared:  0.9361 
        F-statistic: 134.1 on 11 and 89 DF,  p-value: < 2.2e-16
        #+end_example

        This model suggest to fix the parameters as follows:
        #+begin_src R :results output :session :exports both
        reduced <- df[df$vector_length == 1 & df$lws_y == 1 & df$threads_number == 1024 & df$elements_number == 24,]
        summary(reduced)        
        #+end_src

        #+RESULTS:
        #+begin_example
         elements_number y_component_number vector_length temporary_size
         Min.   :24      Min.   :6          Min.   :1     Min.   :2     
         1st Qu.:24      1st Qu.:6          1st Qu.:1     1st Qu.:2     
         Median :24      Median :6          Median :1     Median :3     
         Mean   :24      Mean   :6          Mean   :1     Mean   :3     
         3rd Qu.:24      3rd Qu.:6          3rd Qu.:1     3rd Qu.:4     
         Max.   :24      Max.   :6          Max.   :1     Max.   :4     
         vector_recompute load_overlap threads_number     lws_y   time_per_pixel     
         true:4           false:2      Min.   :1024   Min.   :1   Min.   :1.911e-10  
                          true :2      1st Qu.:1024   1st Qu.:1   1st Qu.:1.911e-10  
                                       Median :1024   Median :1   Median :1.912e-10  
                                       Mean   :1024   Mean   :1   Mean   :1.912e-10  
                                       3rd Qu.:1024   3rd Qu.:1   3rd Qu.:1.914e-10  
                                       Max.   :1024   Max.   :1   Max.   :1.914e-10
        #+end_example

        Now we are missign some points to know how to fix the y
        component number:
        #+begin_src R :results output graphics :file img/20160402/pilipili2/lhs_desgin_pruned.png :exports both :width 600 :height 400 :session
        plot(reduced)
        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/lhs_desgin_pruned.png]]

        Either we are not accurate enough with 100 points and we need
        more at the begining either we could use Dopt.augment to add
        more points (but it assumes we know the model).

        Are we better with 200 points?
        #+begin_src R :results output :session :exports both
                    library(DoE.base)
            library(DoE.wrapper)
            
            elements_number_val <- as.numeric(levels(as.factor(df$elements_number)))
            y_component_number_val <- as.numeric(levels(as.factor(df$y_component_number)))
            vector_length_val <- as.numeric(levels(as.factor(df$vector_length)))
            threads_number_val <- as.numeric(levels(as.factor(df$threads_number)))
            lws_y_val <- as.numeric(levels(as.factor(df$lws_y)))
            temporary_size_val <- as.numeric(levels(as.factor(df$temporary_size)))
            load_overlap_val <- levels(df$load_overlap)
            
          Design.1 <- lhs.design( type= "maximin" , nruns= 863 ,nfactors= 7 ,digits= NULL ,seed=20049 , factor.names=list(idx_elements_number = c(1,length(elements_number_val)), 
                                                                                                                          idx_y_component_number = c(1,length(y_component_number_val)),
                                                                                                                          idx_vector_length = c(1,length(vector_length_val)), 
                                                                                                                          idx_threads_number = c(1,length(threads_number_val)),
                                                                                                                          idx_temporary_size = c(1,length(temporary_size_val)), 
                                                                                                                          idx_lws_y = c(1,length(lws_y_val)), 
                                                                                                                          idx_load_overlap = c(1,length(load_overlap_val)) 
                                                                                                                          ) 
                                )
            
          Design.1.rounded <- round(Design.1) # Ideally we would like to express factor(local_work_size_index) but the Dopt.design does not know how to handle it
            
          set <- data.frame()
          for(i in 1:nrow(Design.1)){
              set <- rbind(set, df[ df$elements_number == elements_number_val[Design.1$idx_elements_number[i]]
                                   & df$y_component_number == y_component_number_val[Design.1$idx_y_component_number[i]]
                                   & df$vector_length == vector_length_val[Design.1$idx_vector_length[i]]
                                   & df$threads_number == threads_number_val[Design.1$idx_threads_number[i]]
                                   & df$lws_y == lws_y_val[Design.1$idx_lws_y[i]]
                                   & df$temporary_size == temporary_size_val[Design.1$idx_temporary_size[i]]
                                   & df$load_overlap == load_overlap_val[Design.1$idx_load_overlap[i]], ])
          }
                    
          summary(set)

        #+end_src

        #+RESULTS:
        #+begin_example
         elements_number  y_component_number vector_length   temporary_size
         Min.   : 1.000   Min.   :1.000      Min.   :1.000   Min.   :2     
         1st Qu.: 3.000   1st Qu.:2.000      1st Qu.:2.000   1st Qu.:2     
         Median : 6.000   Median :3.000      Median :4.000   Median :2     
         Mean   : 7.631   Mean   :3.049      Mean   :3.783   Mean   :2     
         3rd Qu.:12.000   3rd Qu.:4.000      3rd Qu.:4.000   3rd Qu.:2     
         Max.   :20.000   Max.   :5.000      Max.   :8.000   Max.   :2     
         vector_recompute load_overlap threads_number      lws_y       
         true:203         false:203    Min.   : 32.0   Min.   :  1.00  
                          true :  0    1st Qu.: 64.0   1st Qu.:  2.00  
                                       Median :256.0   Median :  8.00  
                                       Mean   :243.2   Mean   : 44.51  
                                       3rd Qu.:512.0   3rd Qu.: 32.00  
                                       Max.   :512.0   Max.   :512.00  
         time_per_pixel     
         Min.   :1.301e-10  
         1st Qu.:2.802e-10  
         Median :5.127e-10  
         Mean   :1.403e-09  
         3rd Qu.:1.442e-09  
         Max.   :1.833e-08
#+end_example

         #+begin_src R :results output :session :exports both
          f <- function(x) { x * (0.05 - 1 * (x < 0)) }
          g <- function(x) { f(x)/x^2 }
          h <- function(x) {pmin(g(x),1e10)}
          
          model <- time_per_pixel ~ elements_number + I(1/elements_number) + 
              y_component_number + I(1/y_component_number) + 
              vector_length + 
              threads_number + I(1/threads_number) + 
              lws_y + 
              elements_number:y_component_number +
              threads_number:lws_y +
              threads_number:elements_number
          fit <- lm(data=set,formula=model)
          for(i in 1:200){
              E <- residuals(fit)
              fit <- lm(data=set,formula=model,weight=h(E))
          }
          summary(fit)
        #+end_src

         #+RESULTS:
         #+begin_example

         Call:
         lm.default(formula = model, data = set, weights = h(E))

         Weighted Residuals:
                Min         1Q     Median         3Q        Max 
         -9.350e-06  1.812e-06  3.049e-06  5.476e-06  2.928e-05 

         Coefficients:
                                              Estimate Std. Error t value Pr(>|t|)    
         (Intercept)                         1.359e-10  1.997e-10   0.680   0.4970    
         elements_number                    -3.638e-11  1.590e-11  -2.289   0.0232 *  
         I(1/elements_number)                6.879e-11  1.206e-10   0.570   0.5691    
         y_component_number                 -3.526e-11  3.854e-11  -0.915   0.3613    
         I(1/y_component_number)             6.451e-12  1.206e-10   0.053   0.9574    
         vector_length                       4.268e-11  6.015e-12   7.096 2.45e-11 ***
         threads_number                      1.195e-13  1.253e-13   0.954   0.3415    
         I(1/threads_number)                 8.965e-09  2.087e-09   4.296 2.77e-05 ***
         lws_y                               1.932e-11  5.652e-13  34.180  < 2e-16 ***
         elements_number:y_component_number  4.304e-12  3.328e-12   1.293   0.1975    
         threads_number:lws_y               -2.649e-14  1.194e-15 -22.181  < 2e-16 ***
         elements_number:threads_number      8.759e-15  1.151e-14   0.761   0.4476    
         ---
         Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

         Residual standard error: 6.551e-06 on 191 degrees of freedom
         Multiple R-squared:  0.9499,	Adjusted R-squared:  0.947 
         F-statistic: 328.9 on 11 and 191 DF,  p-value: < 2.2e-16
#+end_example
        
        With 200 points its not that great either:
        #+begin_src R :results output graphics :file img/20160402/pilipili2/lhs_desgin_200.png :exports both :width 600 :height 400 :session
          form_Dopt_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
          form_Dopt_y_comp <- time_per_pixel ~ I(1/y_component_number)
          form_Dopt_v_len <- time_per_pixel ~ vector_length 
          form_Dopt_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
          form_Dopt_lws_y <- time_per_pixel ~ lws_y 
          
          model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_elem_nb)
              model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb,weight=h(E))
          }
          
          model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp)
          for(i in 1:200){
              E <- residuals(model_Dopt_y_comp)
              model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp,weight=h(E))
          }
          
          model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len)
          for(i in 1:200){
              E <- residuals(model_Dopt_v_len)
              model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len,weight=h(E))
          }
          
          model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_th_nb)
              model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb,weight=h(E))
          }
          
          model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y)
          for(i in 1:200){
              E <- residuals(model_Dopt_lws_y)
              model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y,weight=h(E))
          }
          default <- par()
          par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

          plot(y=set$time_per_pixel,set$elements_number, ylim=c(0,4e-10))
          lines(sort(set$elements_number),predict(model_Dopt_elem_nb)[order(set$elements_number)],col="green")  

          plot(y=set$time_per_pixel,set$y_component_number, ylim=c(0,5e-10))
          lines(sort(set$y_component_number),predict(model_Dopt_y_comp)[order(set$y_component_number)],col="green")  

          plot(y=set$time_per_pixel,set$vector_length, ylim=c(0,5e-10))
          lines(sort(set$vector_length),predict(model_Dopt_v_len)[order(set$vector_length)],col="green")  

          plot(y=set$time_per_pixel,set$threads_number, ylim=c(0,4e-10))
          lines(sort(set$threads_number),predict(model_Dopt_th_nb)[order(set$threads_number)],col="green")  

          plot(y=set$time_per_pixel,set$lws_y, ylim=c(0,4e-8))
          lines(sort(set$lws_y),predict(model_Dopt_lws_y)[order(set$lws_y)],col="green")  

          par(default)        

        #+end_src

                #+RESULTS:
                [[file:img/20160402/pilipili2/lhs_desgin_200.png]]

         Maybe 5th percentile is not enough. Let's see with 1th
         percentile:
         #+begin_src R :results output graphics :file img/20160402/pilipili2/lhs_desgin_200_1th.png :exports both :width 600 :height 400 :session
           f <- function(x) { x * (0.01 - 1 * (x < 0)) }
           g <- function(x) { f(x)/x^2 }
           h <- function(x) {pmin(g(x),1e10)}
           
          form_Dopt_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
          form_Dopt_y_comp <- time_per_pixel ~ I(1/y_component_number)
          form_Dopt_v_len <- time_per_pixel ~ vector_length 
          form_Dopt_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
          form_Dopt_lws_y <- time_per_pixel ~ lws_y 
          
          model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_elem_nb)
              model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb,weight=h(E))
          }
          
          model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp)
          for(i in 1:200){
              E <- residuals(model_Dopt_y_comp)
              model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp,weight=h(E))
          }
          
          model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len)
          for(i in 1:200){
              E <- residuals(model_Dopt_v_len)
              model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len,weight=h(E))
          }
          
          model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_th_nb)
              model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb,weight=h(E))
          }
          
          model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y)
          for(i in 1:200){
              E <- residuals(model_Dopt_lws_y)
              model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y,weight=h(E))
          }
          default <- par()
          par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

          plot(y=set$time_per_pixel,set$elements_number, ylim=c(0,4e-10))
          lines(sort(set$elements_number),predict(model_Dopt_elem_nb)[order(set$elements_number)],col="green")  

          plot(y=set$time_per_pixel,set$y_component_number, ylim=c(0,5e-10))
          lines(sort(set$y_component_number),predict(model_Dopt_y_comp)[order(set$y_component_number)],col="green")  

          plot(y=set$time_per_pixel,set$vector_length, ylim=c(0,5e-10))
          lines(sort(set$vector_length),predict(model_Dopt_v_len)[order(set$vector_length)],col="green")  

          plot(y=set$time_per_pixel,set$threads_number, ylim=c(0,4e-10))
          lines(sort(set$threads_number),predict(model_Dopt_th_nb)[order(set$threads_number)],col="green")  

          plot(y=set$time_per_pixel,set$lws_y, ylim=c(0,4e-8))
          lines(sort(set$lws_y),predict(model_Dopt_lws_y)[order(set$lws_y)],col="green")  

          par(default)        

         #+end_src

         #+RESULTS:
         [[file:img/20160402/pilipili2/lhs_desgin_200_1th.png]]

         Or maybe it comes from the bound:
         #+begin_src R :results output graphics :file img/20160402/pilipili2/lhs_desgin_200_no_bound.png :exports both :width 600 :height 400 :session
           f <- function(x) { x * (0.05 - 1 * (x < 0)) }
           g <- function(x) { f(x)/x^2 }
           h <- function(x) {pmin(g(x),1e10)}
           
          form_Dopt_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
          form_Dopt_y_comp <- time_per_pixel ~ I(1/y_component_number)
          form_Dopt_v_len <- time_per_pixel ~ vector_length 
          form_Dopt_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
          form_Dopt_lws_y <- time_per_pixel ~ lws_y 
          
          model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_elem_nb)
              model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb,weight=g(E))
          }
          
          model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp)
          for(i in 1:200){
              E <- residuals(model_Dopt_y_comp)
              model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp,weight=g(E))
          }
          
          model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len)
          for(i in 1:200){
              E <- residuals(model_Dopt_v_len)
              model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len,weight=g(E))
          }
          
          model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_th_nb)
              model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb,weight=g(E))
          }
          
          model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y)
          for(i in 1:200){
              E <- residuals(model_Dopt_lws_y)
              model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y,weight=g(E))
          }
          default <- par()
          par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

          plot(y=set$time_per_pixel,set$elements_number, ylim=c(0,4e-10))
          lines(sort(set$elements_number),predict(model_Dopt_elem_nb)[order(set$elements_number)],col="green")  

          plot(y=set$time_per_pixel,set$y_component_number, ylim=c(0,5e-10))
          lines(sort(set$y_component_number),predict(model_Dopt_y_comp)[order(set$y_component_number)],col="green")  

          plot(y=set$time_per_pixel,set$vector_length, ylim=c(0,5e-10))
          lines(sort(set$vector_length),predict(model_Dopt_v_len)[order(set$vector_length)],col="green")  

          plot(y=set$time_per_pixel,set$threads_number, ylim=c(0,4e-10))
          lines(sort(set$threads_number),predict(model_Dopt_th_nb)[order(set$threads_number)],col="green")  

          plot(y=set$time_per_pixel,set$lws_y, ylim=c(0,4e-8))
          lines(sort(set$lws_y),predict(model_Dopt_lws_y)[order(set$lws_y)],col="green")  

          par(default)        

         #+end_src

         #+RESULTS:
         [[file:img/20160402/pilipili2/lhs_desgin_200_no_bound.png]]


         What about 100 points with 1th percentile:
         #+begin_src R :results output graphics :file img/20160402/pilipili2/lhs_desgin_100_1th.png :exports both :width 600 :height 400 :session
                     library(DoE.base)
            library(DoE.wrapper)
            
            elements_number_val <- as.numeric(levels(as.factor(df$elements_number)))
            y_component_number_val <- as.numeric(levels(as.factor(df$y_component_number)))
            vector_length_val <- as.numeric(levels(as.factor(df$vector_length)))
            threads_number_val <- as.numeric(levels(as.factor(df$threads_number)))
            lws_y_val <- as.numeric(levels(as.factor(df$lws_y)))
            temporary_size_val <- as.numeric(levels(as.factor(df$temporary_size)))
            load_overlap_val <- levels(df$load_overlap)
            
          Design.1 <- lhs.design( type= "maximin" , nruns= 441 ,nfactors= 7 ,digits= NULL ,seed=20049 , factor.names=list(idx_elements_number = c(1,length(elements_number_val)), 
                                                                                                                          idx_y_component_number = c(1,length(y_component_number_val)),
                                                                                                                          idx_vector_length = c(1,length(vector_length_val)), 
                                                                                                                          idx_threads_number = c(1,length(threads_number_val)),
                                                                                                                          idx_temporary_size = c(1,length(temporary_size_val)), 
                                                                                                                          idx_lws_y = c(1,length(lws_y_val)), 
                                                                                                                          idx_load_overlap = c(1,length(load_overlap_val)) 
                                                                                                                          ) 
                                )
            
          Design.1.rounded <- round(Design.1)
            
          set <- data.frame()
          for(i in 1:nrow(Design.1)){
              set <- rbind(set, df[ df$elements_number == elements_number_val[Design.1$idx_elements_number[i]]
                                   & df$y_component_number == y_component_number_val[Design.1$idx_y_component_number[i]]
                                   & df$vector_length == vector_length_val[Design.1$idx_vector_length[i]]
                                   & df$threads_number == threads_number_val[Design.1$idx_threads_number[i]]
                                   & df$lws_y == lws_y_val[Design.1$idx_lws_y[i]]
                                   & df$temporary_size == temporary_size_val[Design.1$idx_temporary_size[i]]
                                   & df$load_overlap == load_overlap_val[Design.1$idx_load_overlap[i]], ])
          }
                    
        f <- function(x) { x * (0.01 - 1 * (x < 0)) }
           g <- function(x) { f(x)/x^2 }
           h <- function(x) {pmin(g(x),1e10)}
           
          form_Dopt_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
          form_Dopt_y_comp <- time_per_pixel ~ I(1/y_component_number)
          form_Dopt_v_len <- time_per_pixel ~ vector_length 
          form_Dopt_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
          form_Dopt_lws_y <- time_per_pixel ~ lws_y 
          
          model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_elem_nb)
              model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb,weight=h(E))
          }
          
          model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp)
          for(i in 1:200){
              E <- residuals(model_Dopt_y_comp)
              model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp,weight=h(E))
          }
          
          model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len)
          for(i in 1:200){
              E <- residuals(model_Dopt_v_len)
              model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len,weight=h(E))
          }
          
          model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_th_nb)
              model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb,weight=h(E))
          }
          
          model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y)
          for(i in 1:200){
              E <- residuals(model_Dopt_lws_y)
              model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y,weight=h(E))
          }
          default <- par()
          par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

          plot(y=set$time_per_pixel,set$elements_number, ylim=c(0,4e-10))
          lines(sort(set$elements_number),predict(model_Dopt_elem_nb)[order(set$elements_number)],col="green")  

          plot(y=set$time_per_pixel,set$y_component_number, ylim=c(0,5e-10))
          lines(sort(set$y_component_number),predict(model_Dopt_y_comp)[order(set$y_component_number)],col="green")  

          plot(y=set$time_per_pixel,set$vector_length, ylim=c(0,5e-10))
          lines(sort(set$vector_length),predict(model_Dopt_v_len)[order(set$vector_length)],col="green")  

          plot(y=set$time_per_pixel,set$threads_number, ylim=c(0,4e-10))
          lines(sort(set$threads_number),predict(model_Dopt_th_nb)[order(set$threads_number)],col="green")  

          plot(y=set$time_per_pixel,set$lws_y, ylim=c(0,4e-8))
          lines(sort(set$lws_y),predict(model_Dopt_lws_y)[order(set$lws_y)],col="green")  

          par(default)        

         #+end_src

         #+RESULTS:
         [[file:img/20160402/pilipili2/lhs_desgin_100_1th.png]]

         Let's compare it with the full search space regression by
         running it 100 and dooing the average:
         #+begin_src R :results output :session :exports both
            library(DoE.base)
            library(DoE.wrapper)

            elements_number_val <- as.numeric(levels(as.factor(df$elements_number)))
            y_component_number_val <- as.numeric(levels(as.factor(df$y_component_number)))
            vector_length_val <- as.numeric(levels(as.factor(df$vector_length)))
            threads_number_val <- as.numeric(levels(as.factor(df$threads_number)))
            lws_y_val <- as.numeric(levels(as.factor(df$lws_y)))
            temporary_size_val <- as.numeric(levels(as.factor(df$temporary_size)))
            load_overlap_val <- levels(df$load_overlap)

            sum_elem_nb <- c(rep(0,length(elements_number_val)))                      
            sum_y_comp <- c(rep(0,length(y_component_number_val)))                      
            sum_v_len <- c(rep(0,length(vector_length_val)))                      
            sum_th_nb <- c(rep(0,length(threads_number_val)))                      
            sum_lws_y <- c(rep(0,length(lws_y_val))) 

           form_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
           form_y_comp <- time_per_pixel ~ y_component_number + I(1/y_component_number)
           form_v_len <- time_per_pixel ~ vector_length 
           form_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
           form_lws_y <- time_per_pixel ~ lws_y

            model_elem_nb <- lm(data=df,formula=form_elem_nb)
            model_y_comp <- lm(data=df,formula=form_y_comp)
            model_v_len <- lm(data=df,formula=form_v_len)
            model_th_nb <- lm(data=df,formula=form_th_nb)
            model_lws_y <- lm(data=df,formula=form_lws_y)
            for(i in 1:200){
                E <- residuals(model_elem_nb)
                model_elem_nb <- lm(data=df,formula=form_elem_nb,weight=h(E))

                E <- residuals(model_y_comp)
                model_y_comp <- lm(data=df,formula=form_y_comp,weight=h(E))

                E <- residuals(model_v_len)
                model_v_len <- lm(data=df,formula=form_v_len,weight=h(E))

                E <- residuals(model_th_nb)
                model_th_nb <- lm(data=df,formula=form_th_nb,weight=h(E))

                E <- residuals(model_lws_y)
                model_lws_y <- lm(data=df,formula=form_lws_y,weight=h(E))

            }

            runs = 100   

            for(j in 1:runs){
                Design.1 <- lhs.design( type= "maximin" , nruns= 441 ,nfactors= 7, randomize=TRUE ,digits= NULL, factor.names=list(idx_elements_number = c(1,length(elements_number_val)), 
                                                                                                                   idx_y_component_number = c(1,length(y_component_number_val)),
                                                                                                                   idx_vector_length = c(1,length(vector_length_val)), 
                                                                                                                   idx_threads_number = c(1,length(threads_number_val)),
                                                                                                                   idx_temporary_size = c(1,length(temporary_size_val)), 
                                                                                                                   idx_lws_y = c(1,length(lws_y_val)), 
                                                                                                                   idx_load_overlap = c(1,length(load_overlap_val)) 
                                                                                                                   ) 
                                       )

                Design.1.rounded <- round(Design.1) 

                set <- data.frame()
                for(i in 1:nrow(Design.1)){
                    set <- rbind(set, df[ df$elements_number == elements_number_val[Design.1$idx_elements_number[i]]
                                         & df$y_component_number == y_component_number_val[Design.1$idx_y_component_number[i]]
                                         & df$vector_length == vector_length_val[Design.1$idx_vector_length[i]]
                                         & df$threads_number == threads_number_val[Design.1$idx_threads_number[i]]
                                         & df$lws_y == lws_y_val[Design.1$idx_lws_y[i]]
                                         & df$temporary_size == temporary_size_val[Design.1$idx_temporary_size[i]]
                                         & df$load_overlap == load_overlap_val[Design.1$idx_load_overlap[i]], ])
                }


                model_subset_elem_nb <- lm(data=set,formula=form_elem_nb)
                model_subset_y_comp <- lm(data=set,formula=form_y_comp)
                model_subset_v_len <- lm(data=set,formula=form_v_len)
                model_subset_th_nb <- lm(data=set,formula=form_th_nb)
                model_subset_lws_y <- lm(data=set,formula=form_lws_y)
                for(i in 1:200){
                    E <- residuals(model_subset_elem_nb)
                    model_subset_elem_nb <- lm(data=set,formula=form_elem_nb,weight=h(E))

                    E <- residuals(model_subset_y_comp)
                    model_subset_y_comp <- lm(data=set,formula=form_y_comp,weight=h(E))

                    E <- residuals(model_subset_v_len)
                    model_subset_v_len <- lm(data=set,formula=form_v_len,weight=h(E))

                    E <- residuals(model_subset_th_nb)
                    model_subset_th_nb <- lm(data=set,formula=form_th_nb,weight=h(E))

                    E <- residuals(model_subset_lws_y)
                    model_subset_lws_y <- lm(data=set,formula=form_lws_y,weight=h(E))

                }
                sum_elem_nb <- sum_elem_nb + predict(model_subset_elem_nb,data.frame(elements_number=elements_number_val),interval="none")
                sum_y_comp <- sum_y_comp + predict(model_subset_y_comp,data.frame(y_component_number=y_component_number_val),interval="none")
                sum_v_len <- sum_v_len + predict(model_subset_v_len,data.frame(vector_length=vector_length_val),interval="none")
                sum_th_nb <- sum_th_nb + predict(model_subset_th_nb,data.frame(threads_number=threads_number_val),interval="none")
                sum_lws_y <- sum_lws_y + predict(model_subset_lws_y,data.frame(lws_y=lws_y_val),interval="none")
            }

            avg_elem_nb <- sum_elem_nb / runs
            avg_y_comp <- sum_y_comp / runs 
            avg_v_len <- sum_v_len / runs 
            avg_th_nb <- sum_th_nb / runs 
            avg_lws_y <- sum_lws_y / runs 

         #+end_src

         #+RESULTS:

         That's weird LHS is better for most of the factors expect for
         lws_y. The hypothesis is that because of the constraints lots
         of high lws_y are rejected. That's why we are worse than random:
         #+begin_src R :results output graphics :file img/20160402/pilipili2/LHS_100_fit_100_avg_comp.png :exports both :width 800 :height 600 :session
           default <- par()
           par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

           plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,1e-9))
           lines(sort(df$elements_number),predict(model_elem_nb)[order(df$elements_number)],col="red")  
           lines(elements_number_val,avg_elem_nb,col="green")  

           plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,5e-9))
           lines(sort(df$y_component_number),predict(model_y_comp)[order(df$y_component_number)],col="red")  
           lines(y_component_number_val,avg_y_comp,col="green")  

           plot(y=df$time_per_pixel,df$vector_length, ylim=c(0,5e-9))
           lines(sort(df$vector_length),predict(model_v_len)[order(df$vector_length)],col="red")  
           lines(vector_length_val,avg_v_len,col="green")  

           plot(y=df$time_per_pixel,df$threads_number, ylim=c(0,1e-9))
           lines(sort(df$threads_number),predict(model_th_nb)[order(df$threads_number)],col="red")  
           lines(threads_number_val,avg_th_nb,col="green")  

           plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,9e-9))
           lines(sort(df$lws_y),predict(model_lws_y)[order(df$lws_y)],col="red")  
           lines(lws_y_val,avg_lws_y,col="green")  

           par(default)                 
         #+end_src

         #+RESULTS:
         [[file:img/20160402/pilipili2/LHS_100_fit_100_avg_comp.png]]


******* DONE D-Opt
        - Conclusion of the D-optimal design:
          D-Optimal should be used when we already know what is the
          correct model. For finding the model we should be careful to
          *not* make any hypothesis on the model and just suppose a
          linear model (maybe with interactions between
          factors). Because otherwise it will select points that
          explain the model. In our case we have lots of points that can
          explain many different models as we see bellow with an
          absurb model. The model must be know before.           
        #+begin_src sh :results output :exports both
          ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
        #+end_src

        #+RESULTS:

        #+begin_src R :results output :session :exports both
          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          summary(df)
        #+end_src

        #+RESULTS:
        #+begin_example
         elements_number  y_component_number vector_length   temporary_size 
         Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
         1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
         Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
         Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
         3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
         Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
         vector_recompute load_overlap  threads_number       lws_y        
         true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                          true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                        Median : 256.0   Median :  16.00  
                                        Mean   : 368.1   Mean   :  73.58  
                                        3rd Qu.: 512.0   3rd Qu.:  64.00  
                                        Max.   :1024.0   Max.   :1024.00  
         time_per_pixel     
         Min.   :1.165e-10  
         1st Qu.:3.028e-10  
         Median :7.125e-10  
         Mean   :2.013e-09  
         3rd Qu.:2.001e-09  
         Max.   :4.452e-08
#+end_example

        Lets use the entire search space to generate a D-optimal design:
        #+begin_src R :results output :session :exports both
          kernel_size <- function(elements_number,y_component_number,vector_length,threads_number,lws_y,temporary_size,load_overlap) {
                                                  # load_overlap <- if (load_overlap == "true") 1 else 0
              vector_number <- ceiling((elements_number / y_component_number) / vector_length)
              
              tempload <- (1 - load_overlap) * (vector_number * vector_length) / vector_length * vector_length
              temp <-  load_overlap * 3 * vector_number * (y_component_number+2) * vector_length
              res <- vector_number * y_component_number * vector_length
              tempc <- 3 * vector_number * (y_component_number + 2) * temporary_size * vector_length
              out_vec = (1 - load_overlap) * tempc
              resc <- vector_number * y_component_number * temporary_size * vector_length

              tot <- (tempload + temp + res + tempc + out_vec + resc) * threads_number
          }

          check_constraint <- function(elements_number,y_component_number,vector_length,threads_number,lws_y,temporary_size,load_overlap){
              res <- if(#load_overlap %in% 0:1 &
                        lws_y <= threads_number &
                        elements_number %% y_component_number == 0 &
                        elements_number %/% y_component_number <= 4 &
                        kernel_size(elements_number,y_component_number,vector_length,threads_number,lws_y,temporary_size,load_overlap) < kernel_size(elements_number=6, y_component_number=6, vector_length=8, temporary_size=2, load_overlap=0, threads_number=1024)
                        ) T else F
          }

          elements_number_values <- as.numeric(levels(as.factor(df$elements_number)))
          y_component_number_values <- as.numeric(levels(as.factor(df$y_component_number)))
          vector_length_values <- as.numeric(levels(as.factor(df$vector_length)))
          load_overlap_values <- c(0,1) # levels(df$load_overlap)
          threads_number_values <- as.numeric(levels(as.factor(df$threads_number)))
          temporary_sizes_values <- as.numeric(levels(as.factor(df$temporary_size)))
          lws_y_values <- as.numeric(levels(as.factor(df$lws_y)))

          elements_number <- c()
          y_component_number <- c()
          vector_length <- c()
          threads_number <- c()
          lws_y <- c()
          temporary_size <- c()
          load_overlap <- c()

          for(e in elements_number_values){
              for(y in y_component_number_values){
                  for(v in vector_length_values){
                      for(t in threads_number_values){
                          for(l in lws_y_values) {
                              for(s in temporary_sizes_values){
                                  for(o in load_overlap_values){
                                      if(check_constraint(elements_number=e, y_component_number=y, vector_length=v, threads_number=t, lws_y=l, temporary_size=s, load_overlap=o)){
                                          elements_number[length(elements_number)+1] <- e
                                          y_component_number[length(y_component_number)+1] <- y
                                          vector_length[length(vector_length)+1] <- v
                                          threads_number[length(threads_number)+1] <- t
                                          lws_y[length(lws_y)+1] <- l
                                          temporary_size[length(temporary_size)+1] <- s
                                          load_overlap[length(load_overlap)+1] <- o
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }

          complete_set <- data.frame(elements_number,y_component_number,vector_length,threads_number,lws_y,temporary_size,load_overlap)
          summary(complete_set)
        #+end_src

        #+RESULTS:
        #+begin_example
         elements_number  y_component_number vector_length    threads_number  
         Min.   : 1.000   Min.   :1.000      Min.   : 1.000   Min.   :  32.0  
         1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.000   1st Qu.:  64.0  
         Median : 6.000   Median :3.000      Median : 4.000   Median : 256.0  
         Mean   : 8.602   Mean   :3.441      Mean   : 5.721   Mean   : 367.9  
         3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.000   3rd Qu.: 512.0  
         Max.   :24.000   Max.   :6.000      Max.   :16.000   Max.   :1024.0  
             lws_y         temporary_size   load_overlap   
         Min.   :   1.00   Min.   :2.000   Min.   :0.0000  
         1st Qu.:   4.00   1st Qu.:2.000   1st Qu.:0.0000  
         Median :  16.00   Median :2.000   Median :1.0000  
         Mean   :  73.56   Mean   :2.974   Mean   :0.5074  
         3rd Qu.:  64.00   3rd Qu.:4.000   3rd Qu.:1.0000  
         Max.   :1024.00   Max.   :4.000   Max.   :1.0000
         #+end_example

        We generate 100 points just to see if it is enough. With just
        a very simple model, it detects that temporary size and load
        overlap have an important impact but they aren't in fact for
        the moment. It fails to detect the impact of y component
        number also but we know that it have a very small impact and
        it is difficult to detect it. Also the R-squared is to high
        and it is difficult to conclude anything:
        #+begin_src R :results output :session :exports both
          library(DoE.base)
          library(DoE.wrapper)


          Dopt <- Dopt.design( 100 , data=complete_set, formula= 
                                                           "~(elements_number  + y_component_number  + vector_length  + threads_number + lws_y  + temporary_size + load_overlap)" , nRepeat= 5 ,randomize= TRUE ,seed= 28517 )

          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          set <- data.frame()
          for(i in 1:nrow(Dopt)){
              set <- rbind(set, df[ df$elements_number == Dopt$elements_number[i]
                                   & df$y_component_number == Dopt$y_component_number[i]
                                   & df$vector_length == Dopt$vector_length[i]
                                   & df$temporary_size == Dopt$temporary_size[i] 
                                   & df$threads_number == Dopt$threads_number[i]
                                   & df$load_overlap == (if (Dopt$load_overlap[i] == 1) "true" else "false")
                                   & df$lws_y == Dopt$lws_y[i], ])


          }

          f <- function(x) { x * (0.05 - 1 * (x < 0)) }
          g <- function(x) { f(x)/x^2 }

          model <- time_per_pixel ~ (elements_number + y_component_number + vector_length + threads_number + lws_y + temporary_size + load_overlap)
          fit <- lm(data=set,formula=model)
          for(i in 1:200){
              E <- residuals(fit)
              fit <- lm(data=set,formula=model,weight=g(E))
          }
          summary(fit)
        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm.default(formula = model, data = set, weights = g(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -9.159e-06  3.188e-06  5.565e-06  9.843e-06  4.452e-05 

        Coefficients:
                             Estimate Std. Error t value Pr(>|t|)    
        (Intercept)         2.314e-10  2.698e-11   8.577 2.25e-13 ***
        elements_number    -2.261e-11  1.105e-11  -2.046 0.043627 *  
        y_component_number -3.454e-11  3.716e-11  -0.930 0.355048    
        vector_length       5.318e-11  3.452e-12  15.408  < 2e-16 ***
        threads_number     -1.575e-13  5.413e-14  -2.910 0.004537 ** 
        lws_y               3.797e-12  1.024e-13  37.067  < 2e-16 ***
        temporary_size      2.061e-11  7.292e-12   2.827 0.005766 ** 
        load_overlaptrue    5.475e-11  1.542e-11   3.551 0.000608 ***
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 1.37e-05 on 92 degrees of freedom
        Multiple R-squared:      1,	Adjusted R-squared:      1 
        F-statistic: 1.63e+11 on 7 and 92 DF,  p-value: < 2.2e-16
       #+end_example

        We cannot compare model because the r-squared are the
        same. 
        #+begin_src R :results output :session :exports both
          library(DoE.base)
          library(DoE.wrapper)
          
          Dopt <- Dopt.design( 100 , data=complete_set, formula= 
                                                           "~ elements_number + I(1/elements_number) + 
                                             y_component_number + I(1/y_component_number) + 
                                             vector_length + 
                                             threads_number + I(1/threads_number) + 
                                             lws_y + 
                                             elements_number:y_component_number +
                                             threads_number:lws_y +
                                             threads_number:elements_number" , nRepeat= 5 ,randomize= TRUE ,seed= 28517 )
          
          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          set <- data.frame()
          for(i in 1:nrow(Dopt)){
              set <- rbind(set, df[ df$elements_number == Dopt$elements_number[i]
                                   & df$y_component_number == Dopt$y_component_number[i]
                                   & df$vector_length == Dopt$vector_length[i]
                                   & df$temporary_size == Dopt$temporary_size[i] 
                                   & df$threads_number == Dopt$threads_number[i]
                                   & df$load_overlap == (if (Dopt$load_overlap[i] == 1) "true" else "false")
                                   & df$lws_y == Dopt$lws_y[i], ])
          
          
          }
          
          f <- function(x) { x * (0.05 - 1 * (x < 0)) }
          g <- function(x) { f(x)/x^2 }
          
          model <- time_per_pixel ~ elements_number + I(1/elements_number) + 
                                             y_component_number + I(1/y_component_number) + 
                                             vector_length + 
                                             threads_number + I(1/threads_number) + 
                                             lws_y + 
                                             elements_number:y_component_number +
                                             threads_number:lws_y +
                                             threads_number:elements_number
          fit <- lm(data=set,formula=model)
          for(i in 1:200){
              E <- residuals(fit)
              fit <- lm(data=set,formula=model,weight=g(E))
          }
          summary(fit)
        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm.default(formula = model, data = set, weights = g(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -1.100e-05  2.922e-06  7.295e-06  1.263e-05  4.555e-05 

        Coefficients: (2 not defined because of singularities)
                                             Estimate Std. Error t value Pr(>|t|)    
        (Intercept)                         2.830e-12  2.083e-10   0.014   0.9892    
        elements_number                    -4.850e-13  3.330e-12  -0.146   0.8845    
        I(1/elements_number)                3.893e-10  4.184e-11   9.304 8.03e-15 ***
        y_component_number                 -6.335e-11  1.444e-11  -4.388 3.11e-05 ***
        I(1/y_component_number)            -3.206e-10  1.274e-10  -2.517   0.0136 *  
        vector_length                       3.936e-11  4.973e-12   7.915 6.10e-12 ***
        threads_number                      1.907e-13  9.220e-14   2.069   0.0415 *  
        I(1/threads_number)                 2.665e-08  2.927e-09   9.102 2.11e-14 ***
        lws_y                               3.768e-12  6.289e-14  59.906  < 2e-16 ***
        elements_number:y_component_number         NA         NA      NA       NA    
        threads_number:lws_y                       NA         NA      NA       NA    
        elements_number:threads_number      1.733e-15  2.799e-15   0.619   0.5375    
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 1.659e-05 on 90 degrees of freedom
        Multiple R-squared:      1,	Adjusted R-squared:      1 
        F-statistic: 1.746e+08 on 9 and 90 DF,  p-value: < 2.2e-16
#+end_example

        With a nRepeat=20 we have a different slope direction of the
        elements number, which is different from what we obtain from
        the full search space. But it found more factor impact:
        #+begin_src R :results output :session :exports both
          library(DoE.base)
          library(DoE.wrapper)


          Dopt <- Dopt.design( 100 , data=complete_set, formula= 
                                                            "~ elements_number + I(1/elements_number) + 
                                             y_component_number + I(1/y_component_number) + 
                                             vector_length + 
                                             threads_number + I(1/threads_number) + 
                                             lws_y + 
                                             elements_number:y_component_number +
                                             threads_number:lws_y +
                                             threads_number:elements_number" , nRepeat= 20 ,randomize= TRUE ,seed= 28517 )

          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          set <- data.frame()
          for(i in 1:nrow(Dopt)){
              set <- rbind(set, df[ df$elements_number == Dopt$elements_number[i]
                                   & df$y_component_number == Dopt$y_component_number[i]
                                   & df$vector_length == Dopt$vector_length[i]
                                   & df$temporary_size == Dopt$temporary_size[i] 
                                   & df$threads_number == Dopt$threads_number[i]
                                   & df$load_overlap == (if (Dopt$load_overlap[i] == 1) "true" else "false")
                                   & df$lws_y == Dopt$lws_y[i], ])


          }

          f <- function(x) { x * (0.05 - 1 * (x < 0)) }
          g <- function(x) { f(x)/x^2 }

          model <- time_per_pixel ~ elements_number + I(1/elements_number) + 
              y_component_number + I(1/y_component_number) + 
              vector_length + 
              threads_number + I(1/threads_number) + 
              lws_y + 
              elements_number:y_component_number +
              threads_number:lws_y +
              threads_number:elements_number
          fit <- lm(data=set,formula=model)
          for(i in 1:200){
              E <- residuals(fit)
              fit <- lm(data=set,formula=model,weight=g(E))
          }
          summary(fit)

        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm.default(formula = model, data = set, weights = g(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -3.251e-06  3.741e-06  6.194e-06  1.379e-05  4.344e-05 

        Coefficients: (2 not defined because of singularities)
                                             Estimate Std. Error  t value Pr(>|t|)    
        (Intercept)                        -7.145e-10  1.123e-11   -63.65   <2e-16 ***
        elements_number                     9.646e-12  2.315e-14   416.74   <2e-16 ***
        I(1/elements_number)                1.582e-09  3.333e-12   474.50   <2e-16 ***
        y_component_number                 -1.018e-10  1.193e-12   -85.38   <2e-16 ***
        I(1/y_component_number)            -3.261e-10  6.959e-12   -46.86   <2e-16 ***
        vector_length                       8.466e-11  1.361e-13   621.85   <2e-16 ***
        threads_number                      1.018e-13  3.557e-15    28.61   <2e-16 ***
        I(1/threads_number)                 1.913e-08  1.313e-10   145.75   <2e-16 ***
        lws_y                               1.150e-11  5.968e-15  1926.50   <2e-16 ***
        elements_number:y_component_number         NA         NA       NA       NA    
        threads_number:lws_y               -6.832e-15  5.951e-18 -1147.95   <2e-16 ***
        elements_number:threads_number             NA         NA       NA       NA    
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 1.457e-05 on 90 degrees of freedom
        Multiple R-squared:      1,	Adjusted R-squared:      1 
        F-statistic: 6.772e+16 on 9 and 90 DF,  p-value: < 2.2e-16
        #+end_example

        Let's take a look at elements number only and compare nRepeat
        = 5 and 20:
        #+begin_src R :results output :session :exports both
          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          
          Dopt_5 <- Dopt.design( 100 , data=complete_set, formula= 
                                                            "~ elements_number + I(1/elements_number) + 
                                             y_component_number + I(1/y_component_number) + 
                                             vector_length + 
                                             threads_number + I(1/threads_number) + 
                                             lws_y + 
                                             elements_number:y_component_number +
                                             threads_number:lws_y +
                                             threads_number:elements_number" , nRepeat= 5 ,randomize= TRUE ,seed= 28517 )
          
          set_5 <- data.frame()
          for(i in 1:nrow(Dopt_5)){
              set_5 <- rbind(set_5, df[ df$elements_number == Dopt_5$elements_number[i]
                                   & df$y_component_number == Dopt_5$y_component_number[i]
                                   & df$vector_length == Dopt_5$vector_length[i]
                                   & df$temporary_size == Dopt_5$temporary_size[i] 
                                   & df$threads_number == Dopt_5$threads_number[i]
                                   & df$load_overlap == (if (Dopt_5$load_overlap[i] == 1) "true" else "false")
                                   & df$lws_y == Dopt_5$lws_y[i], ])
          
          
          }
          
          Dopt_20 <- Dopt.design( 100 , data=complete_set, formula= 
                                                              "~ elements_number + I(1/elements_number) + 
                                             y_component_number + I(1/y_component_number) + 
                                             vector_length + 
                                             threads_number + I(1/threads_number) + 
                                             lws_y + 
                                             elements_number:y_component_number +
                                             threads_number:lws_y +
                                             threads_number:elements_number" , nRepeat= 20 ,randomize= TRUE ,seed= 28517 )
          
          set_20 <- data.frame()
          for(i in 1:nrow(Dopt_20)){
              set_20 <- rbind(set_20, df[ df$elements_number == Dopt_20$elements_number[i]
                                   & df$y_component_number == Dopt_20$y_component_number[i]
                                   & df$vector_length == Dopt_20$vector_length[i]
                                   & df$temporary_size == Dopt_20$temporary_size[i] 
                                   & df$threads_number == Dopt_20$threads_number[i]
                                   & df$load_overlap == (if (Dopt_20$load_overlap[i] == 1) "true" else "false")
                                   & df$lws_y == Dopt_20$lws_y[i], ])
          
          
          }
          
          
          f <- function(x) { x * (0.05 - 1 * (x < 0)) }
          g <- function(x) { f(x)/x^2 }
          
          model <- time_per_pixel ~ elements_number + I(1/elements_number) + 
                                             y_component_number + I(1/y_component_number) + 
                                             vector_length + 
                                             threads_number + I(1/threads_number) + 
                                             lws_y + 
                                             elements_number:y_component_number +
                                             threads_number:lws_y +
                                             threads_number:elements_number

          fit_20 <- lm(data=set_20,formula=model)
          for(i in 1:200){
              E <- residuals(fit_20)
              fit_20 <- lm(data=set_20,formula=model,weight=g(E))
          }
          
          fit_5 <- lm(data=set_5,formula=model)
          for(i in 1:200){
              E <- residuals(fit)
              fit_5 <- lm(data=set_5,formula=model,weight=g(E))
          }        
          summary(fit_5)
          summary(fit_20)
        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm.default(formula = model, data = set_5, weights = g(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -1.103e-05  2.916e-06  7.293e-06  1.263e-05  4.555e-05 

        Coefficients: (2 not defined because of singularities)
                                             Estimate Std. Error t value Pr(>|t|)    
        (Intercept)                         9.389e-12  1.478e-10   0.064 0.949496    
        elements_number                    -5.500e-13  2.375e-12  -0.232 0.817416    
        I(1/elements_number)                3.879e-10  2.943e-11  13.178  < 2e-16 ***
        y_component_number                 -6.385e-11  1.139e-11  -5.605 2.25e-07 ***
        I(1/y_component_number)            -3.246e-10  9.312e-11  -3.486 0.000759 ***
        vector_length                       3.933e-11  4.132e-12   9.516 2.89e-15 ***
        threads_number                      1.876e-13  6.040e-14   3.106 0.002540 ** 
        I(1/threads_number)                 2.657e-08  1.868e-09  14.225  < 2e-16 ***
        lws_y                               3.768e-12  5.240e-14  71.893  < 2e-16 ***
        elements_number:y_component_number         NA         NA      NA       NA    
        threads_number:lws_y                       NA         NA      NA       NA    
        elements_number:threads_number      1.816e-15  1.941e-15   0.935 0.352105    
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 1.659e-05 on 90 degrees of freedom
        Multiple R-squared:      1,	Adjusted R-squared:      1 
        F-statistic: 3.291e+08 on 9 and 90 DF,  p-value: < 2.2e-16

        Call:
        lm.default(formula = model, data = set_20, weights = g(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -3.251e-06  3.741e-06  6.194e-06  1.379e-05  4.344e-05 

        Coefficients: (2 not defined because of singularities)
                                             Estimate Std. Error  t value Pr(>|t|)    
        (Intercept)                        -7.145e-10  1.123e-11   -63.65   <2e-16 ***
        elements_number                     9.646e-12  2.315e-14   416.74   <2e-16 ***
        I(1/elements_number)                1.582e-09  3.333e-12   474.50   <2e-16 ***
        y_component_number                 -1.018e-10  1.193e-12   -85.38   <2e-16 ***
        I(1/y_component_number)            -3.261e-10  6.959e-12   -46.86   <2e-16 ***
        vector_length                       8.466e-11  1.361e-13   621.85   <2e-16 ***
        threads_number                      1.018e-13  3.557e-15    28.61   <2e-16 ***
        I(1/threads_number)                 1.913e-08  1.313e-10   145.75   <2e-16 ***
        lws_y                               1.150e-11  5.968e-15  1926.50   <2e-16 ***
        elements_number:y_component_number         NA         NA       NA       NA    
        threads_number:lws_y               -6.832e-15  5.951e-18 -1147.95   <2e-16 ***
        elements_number:threads_number             NA         NA       NA       NA    
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 1.457e-05 on 90 degrees of freedom
        Multiple R-squared:      1,	Adjusted R-squared:      1 
        F-statistic: 6.772e+16 on 9 and 90 DF,  p-value: < 2.2e-16
       #+end_example

        How does it compare visually? In fact is it not usefull to do
        that because we don't take into account the other factor for
        the regression.
        #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
          f_5 <- function(x){
              fit_5$coefficients[2] * x + fit_5$coefficients[2] * 1/x
          }
          
          f_20 <- function(x){
              fit_20$coefficients[2] * x + fit_20$coefficients[2] * 1/x
          }
          
          default <- par()
          par(mfrow = c(1, 2), oma = c(0, 0, 2, 0))
          
          plot(y=set_5$time_per_pixel,set_5$elements_number, ylim=c(0,5e-10))
          lines(seq(1,24),f_5(seq(1,24)),col="red")  

          plot(y=set_20$time_per_pixel,set_20$elements_number, ylim=c(0,20e-10))
          lines(seq(1,24),f_20(seq(1,24)),col="red")  
          
          par(default)
        #+end_src   

        #+RESULTS:
        [[file:/tmp/babel-2509iKA/figure2509r2V.png]]

        We cannot make conclusion because of the R-squared but we can
        still check visually how to compare to the full search space:
        #+begin_src R :results output :session :exports both
          Dopt_20 <- Dopt.design( 100 , data=complete_set, formula= 
                                                              "~ elements_number + I(1/elements_number) + 
                                             y_component_number + I(1/y_component_number) + 
                                             vector_length + 
                                             threads_number + I(1/threads_number) +
                                             lws_y + 
                                             elements_number:y_component_number +
                                             threads_number:lws_y +
                                             threads_number:elements_number" , nRepeat= 20 ,randomize= TRUE ,seed= 28517 )
          
          set_20 <- data.frame()
          for(i in 1:nrow(Dopt_20)){
              set_20 <- rbind(set_20, df[ df$elements_number == Dopt_20$elements_number[i]
                                   & df$y_component_number == Dopt_20$y_component_number[i]
                                   & df$vector_length == Dopt_20$vector_length[i]
                                   & df$temporary_size == Dopt_20$temporary_size[i] 
                                   & df$threads_number == Dopt_20$threads_number[i]
                                   & df$load_overlap == (if (Dopt_20$load_overlap[i] == 1) "true" else "false")
                                   & df$lws_y == Dopt_20$lws_y[i], ])
          
          
          }
          
          
          f <- function(x) { x * (0.05 - 1 * (x < 0)) }
          g <- function(x) { f(x)/x^2 }
          h <- function(x) {pmin(g(x),1e15)}
          
          form_Dopt_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
          form_Dopt_y_comp <- time_per_pixel ~ I(1/y_component_number)
          form_Dopt_v_len <- time_per_pixel ~ vector_length 
          form_Dopt_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
          form_Dopt_lws_y <- time_per_pixel ~ lws_y 
          
          model_Dopt_elem_nb <- lm(data=set_20,formula=form_Dopt_elem_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_elem_nb)
              model_Dopt_elem_nb <- lm(data=set_20,formula=form_Dopt_elem_nb,weight=h(E))
          }
          
          model_Dopt_y_comp <- lm(data=set_20,formula=form_Dopt_y_comp)
          for(i in 1:200){
              E <- residuals(model_Dopt_y_comp)
              model_Dopt_y_comp <- lm(data=set_20,formula=form_Dopt_y_comp,weight=h(E))
          }
          
          model_Dopt_v_len <- lm(data=set_20,formula=form_Dopt_v_len)
          for(i in 1:200){
              E <- residuals(model_Dopt_v_len)
              model_Dopt_v_len <- lm(data=set_20,formula=form_Dopt_v_len,weight=h(E))
          }
          
          model_Dopt_th_nb <- lm(data=set_20,formula=form_Dopt_th_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_th_nb)
              model_Dopt_th_nb <- lm(data=set_20,formula=form_Dopt_th_nb,weight=h(E))
          }
          
          model_Dopt_lws_y <- lm(data=set_20,formula=form_Dopt_lws_y)
          for(i in 1:200){
              E <- residuals(model_Dopt_lws_y)
              model_Dopt_lws_y <- lm(data=set_20,formula=form_Dopt_lws_y,weight=h(E))
          }
   
        #+end_src

        #+RESULTS:

        #+begin_src R :results output graphics :file img/20160402/pilipili2/dopt_desgin_100.png :exports both :width 800 :height 600 :session
               
          default <- par()
          par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

          plot(y=set_20$time_per_pixel,set_20$elements_number, ylim=c(0,4e-10))
          lines(sort(set_20$elements_number),predict(model_Dopt_elem_nb)[order(set_20$elements_number)],col="green")  

          plot(y=set_20$time_per_pixel,set_20$y_component_number, ylim=c(0,5e-10))
          lines(sort(set_20$y_component_number),predict(model_Dopt_y_comp)[order(set_20$y_component_number)],col="green")  

          plot(y=set_20$time_per_pixel,set_20$vector_length, ylim=c(0,5e-10))
          lines(sort(set_20$vector_length),predict(model_Dopt_v_len)[order(set_20$vector_length)],col="green")  

          plot(y=set_20$time_per_pixel,set_20$threads_number, ylim=c(0,4e-10))
          lines(sort(set_20$threads_number),predict(model_Dopt_th_nb)[order(set_20$threads_number)],col="green")  

          plot(y=set_20$time_per_pixel,set_20$lws_y, ylim=c(0,4e-8))
          lines(sort(set_20$lws_y),predict(model_Dopt_lws_y)[order(set_20$lws_y)],col="green")  

          par(default)        


        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/dopt_desgin_100.png]]

        The problem with the D-optimal design is tath we can nout use
        it to check a model. As we can see below, we generated points
        with a different model than above and D-optimal design
        selected points that justify the model:
        #+begin_src R :results output graphics :file img/20160402/pilipili2/dopt_desgin_100_2.png :exports both :width 600 :height 400 :session
          Dopt_20 <- Dopt.design( 100 , data=complete_set, formula= 
                                                              "~ elements_number + I(1/elements_number) + 
                                             y_component_number + I(1/y_component_number) + 
                                             vector_length + 
                                             threads_number + I(threads_number^2) + I(threads_number^3) +
                                             lws_y + 
                                             elements_number:y_component_number +
                                             threads_number:lws_y +
                                             threads_number:elements_number" , nRepeat= 20 ,randomize= TRUE ,seed= 28517 )
          
          set_20 <- data.frame()
          for(i in 1:nrow(Dopt_20)){
              set_20 <- rbind(set_20, df[ df$elements_number == Dopt_20$elements_number[i]
                                   & df$y_component_number == Dopt_20$y_component_number[i]
                                   & df$vector_length == Dopt_20$vector_length[i]
                                   & df$temporary_size == Dopt_20$temporary_size[i] 
                                   & df$threads_number == Dopt_20$threads_number[i]
                                   & df$load_overlap == (if (Dopt_20$load_overlap[i] == 1) "true" else "false")
                                   & df$lws_y == Dopt_20$lws_y[i], ])
          
          
          }
          
          
          f <- function(x) { x * (0.05 - 1 * (x < 0)) }
          g <- function(x) { f(x)/x^2 }
          h <- function(x) {pmin(g(x),1e15)}
          
          form_Dopt_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
          form_Dopt_y_comp <- time_per_pixel ~ I(1/y_component_number)
          form_Dopt_v_len <- time_per_pixel ~ vector_length 
          form_Dopt_th_nb <- time_per_pixel ~ threads_number + I(threads_number^2) + I(threads_number^3)
          form_Dopt_lws_y <- time_per_pixel ~ lws_y 
          
          model_Dopt_elem_nb <- lm(data=set_20,formula=form_Dopt_elem_nb)
          for(i in 1:800){
              E <- residuals(model_Dopt_elem_nb)
              model_Dopt_elem_nb <- lm(data=set_20,formula=form_Dopt_elem_nb,weight=h(E))
          }
          
          model_Dopt_y_comp <- lm(data=set_20,formula=form_Dopt_y_comp)
          for(i in 1:800){
              E <- residuals(model_Dopt_y_comp)
              model_Dopt_y_comp <- lm(data=set_20,formula=form_Dopt_y_comp,weight=h(E))
          }
          
          model_Dopt_v_len <- lm(data=set_20,formula=form_Dopt_v_len)
          for(i in 1:800){
              E <- residuals(model_Dopt_v_len)
              model_Dopt_v_len <- lm(data=set_20,formula=form_Dopt_v_len,weight=h(E))
          }
          
          model_Dopt_th_nb <- lm(data=set_20,formula=form_Dopt_th_nb)
          for(i in 1:800){
              E <- residuals(model_Dopt_th_nb)
              model_Dopt_th_nb <- lm(data=set_20,formula=form_Dopt_th_nb,weight=h(E))
          }
          
          model_Dopt_lws_y <- lm(data=set_20,formula=form_Dopt_lws_y)
          for(i in 1:800){
              E <- residuals(model_Dopt_lws_y)
              model_Dopt_lws_y <- lm(data=set_20,formula=form_Dopt_lws_y,weight=h(E))
          }
   

          default <- par()
          par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

          plot(y=set_20$time_per_pixel,set_20$elements_number, ylim=c(0,4e-10))
          lines(sort(set_20$elements_number),predict(model_Dopt_elem_nb)[order(set_20$elements_number)],col="green")  

          plot(y=set_20$time_per_pixel,set_20$y_component_number, ylim=c(0,5e-10))
          lines(sort(set_20$y_component_number),predict(model_Dopt_y_comp)[order(set_20$y_component_number)],col="green")  

          plot(y=set_20$time_per_pixel,set_20$vector_length, ylim=c(0,5e-10))
          lines(sort(set_20$vector_length),predict(model_Dopt_v_len)[order(set_20$vector_length)],col="green")  

          plot(y=set_20$time_per_pixel,set_20$threads_number, ylim=c(0,4e-10))
          lines(sort(set_20$threads_number),predict(model_Dopt_th_nb)[order(set_20$threads_number)],col="green")  

          plot(y=set_20$time_per_pixel,set_20$lws_y, ylim=c(0,4e-8))
          lines(sort(set_20$lws_y),predict(model_Dopt_lws_y)[order(set_20$lws_y)],col="green")  

          par(default)        

        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/dopt_desgin_100_2.png]]

        Let's try with an an absurb model with a random formula. Here
        again we still have point that explain the model.
        #+begin_src R :results output graphics :file img/20160402/pilipili2/dopt_desgin_100_absurd.png :exports both :width 600 :height 400 :session
          Dopt_20 <- Dopt.design( 100 , data=complete_set, formula= 
                                                               "~ elements_number + I(elements_number^2) + 
                                             y_component_number + I(y_component_number^2) + 
                                             vector_length + I(vector_length^2) + I(vector_length^3) +
                                             threads_number + I(threads_number^2) + I(threads_number^3) +
                                             lws_y + I(1/lws_y) +
                                             elements_number:y_component_number +
                                             threads_number:lws_y +
                                             threads_number:elements_number" , nRepeat= 20 ,randomize= TRUE ,seed= 28517 )
          
          set_20 <- data.frame()
          for(i in 1:nrow(Dopt_20)){
              set_20 <- rbind(set_20, df[ df$elements_number == Dopt_20$elements_number[i]
                                         & df$y_component_number == Dopt_20$y_component_number[i]
                                         & df$vector_length == Dopt_20$vector_length[i]
                                         & df$temporary_size == Dopt_20$temporary_size[i] 
                                         & df$threads_number == Dopt_20$threads_number[i]
                                         & df$load_overlap == (if (Dopt_20$load_overlap[i] == 1) "true" else "false")
                                         & df$lws_y == Dopt_20$lws_y[i], ])
          
          
          }
          
          
          f <- function(x) { x * (0.05 - 1 * (x < 0)) }
          g <- function(x) { f(x)/x^2 }
          h <- function(x) {pmin(g(x),1e15)}
          
          form_Dopt_elem_nb <- time_per_pixel ~ elements_number + I(elements_number^2)
          form_Dopt_y_comp <- time_per_pixel ~ y_component_number + I(y_component_number^2)
          form_Dopt_v_len <- time_per_pixel ~ vector_length + I(vector_length^2) + I(vector_length^3)
          form_Dopt_th_nb <- time_per_pixel ~ threads_number + I(threads_number^2) + I(threads_number^3)
          form_Dopt_lws_y <- time_per_pixel ~ lws_y + I(1/lws_y)
          
          model_Dopt_elem_nb <- lm(data=set_20,formula=form_Dopt_elem_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_elem_nb)
              model_Dopt_elem_nb <- lm(data=set_20,formula=form_Dopt_elem_nb,weight=h(E))
          }
          
          model_Dopt_y_comp <- lm(data=set_20,formula=form_Dopt_y_comp)
          for(i in 1:200){
              E <- residuals(model_Dopt_y_comp)
              model_Dopt_y_comp <- lm(data=set_20,formula=form_Dopt_y_comp,weight=h(E))
          }
          
          model_Dopt_v_len <- lm(data=set_20,formula=form_Dopt_v_len)
          for(i in 1:200){
              E <- residuals(model_Dopt_v_len)
              model_Dopt_v_len <- lm(data=set_20,formula=form_Dopt_v_len,weight=h(E))
          }
          
          model_Dopt_th_nb <- lm(data=set_20,formula=form_Dopt_th_nb)
          for(i in 1:200){
              E <- residuals(model_Dopt_th_nb)
              model_Dopt_th_nb <- lm(data=set_20,formula=form_Dopt_th_nb,weight=h(E))
          }
          
          model_Dopt_lws_y <- lm(data=set_20,formula=form_Dopt_lws_y)
          for(i in 1:200){
              E <- residuals(model_Dopt_lws_y)
              model_Dopt_lws_y <- lm(data=set_20,formula=form_Dopt_lws_y,weight=h(E))
          }
          
          
          default <- par()
          par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))
          
          plot(y=set_20$time_per_pixel,set_20$elements_number, ylim=c(0,4e-10))
          lines(sort(set_20$elements_number),predict(model_Dopt_elem_nb)[order(set_20$elements_number)],col="green")  
          
          plot(y=set_20$time_per_pixel,set_20$y_component_number, ylim=c(0,5e-10))
          lines(sort(set_20$y_component_number),predict(model_Dopt_y_comp)[order(set_20$y_component_number)],col="green")  
          
          plot(y=set_20$time_per_pixel,set_20$vector_length, ylim=c(0,5e-10))
          lines(sort(set_20$vector_length),predict(model_Dopt_v_len)[order(set_20$vector_length)],col="green")  
          
          plot(y=set_20$time_per_pixel,set_20$threads_number, ylim=c(0,4e-10))
          lines(sort(set_20$threads_number),predict(model_Dopt_th_nb)[order(set_20$threads_number)],col="green")  
          
          plot(y=set_20$time_per_pixel,set_20$lws_y, ylim=c(0,4e-8))
          lines(sort(set_20$lws_y),predict(model_Dopt_lws_y)[order(set_20$lws_y)],col="green")  
          
          par(default)        
          
        #+end_src

                #+RESULTS:
                [[file:img/20160402/pilipili2/dopt_desgin_100_absurd.png]]

       What if I try with a "non-oriented choice": 
       #+begin_src R :results output :session :exports both
        library(DoE.base)
        library(DoE.wrapper)

         f <- function(x) { x * (0.05 - 1 * (x < 0)) }
         g <- function(x) { f(x)/x^2 }
         h <- function(x) {pmin(g(x),1e15)}

         Dopt <- Dopt.design( 100 , data=complete_set, formula= 
                                                              "~ elements_number +
                                                                 y_component_number + 
                                                                 vector_length + 
                                                                 threads_number + 
                                                                 lws_y + 
                                                                 load_overlap +
                                                                 temporary_size" , nRepeat= 20 ,randomize= TRUE ,seed= 28517 )

         set <- data.frame()
         for(i in 1:nrow(Dopt)){
             set <- rbind(set, df[ df$elements_number == Dopt$elements_number[i]
                                        & df$y_component_number == Dopt$y_component_number[i]
                                        & df$vector_length == Dopt$vector_length[i]
                                        & df$temporary_size == Dopt$temporary_size[i] 
                                        & df$threads_number == Dopt$threads_number[i]
                                        & df$load_overlap == (if (Dopt$load_overlap[i] == 1) "true" else "false")
                                        & df$lws_y == Dopt$lws_y[i], ])
         }

          model <- time_per_pixel ~ elements_number + I(1/elements_number) + 
                                             y_component_number + I(1/y_component_number) + 
                                             vector_length + 
                                             threads_number + I(1/threads_number) + 
                                             lws_y + 
                                             elements_number:y_component_number +
                                             threads_number:lws_y +
                                             threads_number:elements_number
          fit <- lm(data=set,formula=model)
          for(i in 1:200){
              E <- residuals(fit)
              fit <- lm(data=set,formula=model,weight=g(E))
          }
          summary(fit)
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm.default(formula = model, data = set, weights = g(E))

       Weighted Residuals:
              Min         1Q     Median         3Q        Max 
       -1.040e-05  4.860e-07  4.094e-06  1.051e-05  4.442e-05 

       Coefficients: (3 not defined because of singularities)
                                            Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                        -1.748e-10  7.140e-10  -0.245  0.80713    
       elements_number                    -1.309e-11  1.048e-11  -1.249  0.21502    
       I(1/elements_number)                2.964e-10  6.959e-10   0.426  0.67119    
       y_component_number                  7.584e-11  8.718e-11   0.870  0.38660    
       I(1/y_component_number)             4.766e-10  4.897e-10   0.973  0.33296    
       vector_length                       2.341e-11  8.564e-12   2.734  0.00752 ** 
       threads_number                     -3.270e-13  1.559e-13  -2.098  0.03871 *  
       I(1/threads_number)                        NA         NA      NA       NA    
       lws_y                               3.549e-12  1.644e-14 215.877  < 2e-16 ***
       elements_number:y_component_number         NA         NA      NA       NA    
       threads_number:lws_y                       NA         NA      NA       NA    
       elements_number:threads_number      1.595e-14  8.986e-15   1.775  0.07919 .  
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 1.186e-05 on 91 degrees of freedom
       Multiple R-squared:      1,	Adjusted R-squared:      1 
       F-statistic: 1.951e+13 on 8 and 91 DF,  p-value: < 2.2e-16
#+end_example

       Using no hypothesis at the begining could be a good starting point:
       #+begin_src R :results output graphics :file img/20160402/pilipili2/dopt_desgin_100_no_hypothesis.png :exports both :width 600 :height 400 :session

         form_Dopt_elem_nb <- time_per_pixel ~ elements_number + I(elements_number^2)
         form_Dopt_y_comp <- time_per_pixel ~ y_component_number + I(y_component_number^2)
         form_Dopt_v_len <- time_per_pixel ~ vector_length 
         form_Dopt_th_nb <- time_per_pixel ~ threads_number + I(threads_number^2)
         form_Dopt_lws_y <- time_per_pixel ~ lws_y + I(1/lws_y)

         model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb)
         for(i in 1:200){
             E <- residuals(model_Dopt_elem_nb)
             model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb,weight=h(E))
         }

         model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp)
         for(i in 1:200){
             E <- residuals(model_Dopt_y_comp)
             model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp,weight=h(E))
         }

         model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len)
         for(i in 1:200){
             E <- residuals(model_Dopt_v_len)
             model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len,weight=h(E))
         }

         model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb)
         for(i in 1:200){
             E <- residuals(model_Dopt_th_nb)
             model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb,weight=h(E))
         }

         model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y)
         for(i in 1:200){
             E <- residuals(model_Dopt_lws_y)
             model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y,weight=h(E))
         }

         default <- par()
         par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

         plot(y=set$time_per_pixel,set$elements_number,ylim=c(0,4e-9))
         lines(sort(set$elements_number),predict(model_Dopt_elem_nb)[order(set$elements_number)],col="green")  

         plot(y=set$time_per_pixel,set$y_component_number, ylim=c(0,5e-10))
         lines(sort(set$y_component_number),predict(model_Dopt_y_comp)[order(set$y_component_number)],col="green")  

         plot(y=set$time_per_pixel,set$vector_length, ylim=c(0,5e-10))
         lines(sort(set$vector_length),predict(model_Dopt_v_len)[order(set$vector_length)],col="green")  

         plot(y=set$time_per_pixel,set$threads_number, ylim=c(0,4e-10))
         lines(sort(set$threads_number),predict(model_Dopt_th_nb)[order(set$threads_number)],col="green")  

         plot(y=set$time_per_pixel,set$lws_y, ylim=c(0,4e-8))
         lines(sort(set$lws_y),predict(model_Dopt_lws_y)[order(set$lws_y)],col="green")  

         par(default)        

       #+end_src

       #+RESULTS:
       [[file:img/20160402/pilipili2/dopt_desgin_100_no_hypothesis.png]]

       Here we can compare to different model with a neutral D-opt:
       #+begin_src R :results output graphics :file img/20160402/pilipili2/dopt_desgin_100_no_hypothesis_2.png :exports both :width 600 :height 400 :session

         form_Dopt_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
         form_Dopt_y_comp <- time_per_pixel ~ y_component_number + I(1/y_component_number)
         form_Dopt_v_len <- time_per_pixel ~ vector_length 
         form_Dopt_th_nb <- time_per_pixel ~ threads_number + I(threads_number^2)
         form_Dopt_lws_y <- time_per_pixel ~ lws_y + I(1/lws_y)

         model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb)
         for(i in 1:200){
             E <- residuals(model_Dopt_elem_nb)
             model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb,weight=h(E))
         }

         model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp)
         for(i in 1:200){
             E <- residuals(model_Dopt_y_comp)
             model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp,weight=h(E))
         }

         model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len)
         for(i in 1:200){
             E <- residuals(model_Dopt_v_len)
             model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len,weight=h(E))
         }

         model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb)
         for(i in 1:200){
             E <- residuals(model_Dopt_th_nb)
             model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb,weight=h(E))
         }

         model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y)
         for(i in 1:200){
             E <- residuals(model_Dopt_lws_y)
             model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y,weight=h(E))
         }

         default <- par()
         par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

         plot(y=set$time_per_pixel,set$elements_number,ylim=c(0,4e-9))
         lines(sort(set$elements_number),predict(model_Dopt_elem_nb)[order(set$elements_number)],col="green")  

         plot(y=set$time_per_pixel,set$y_component_number, ylim=c(0,5e-10))
         lines(sort(set$y_component_number),predict(model_Dopt_y_comp)[order(set$y_component_number)],col="green")  

         plot(y=set$time_per_pixel,set$vector_length, ylim=c(0,5e-10))
         lines(sort(set$vector_length),predict(model_Dopt_v_len)[order(set$vector_length)],col="green")  

         plot(y=set$time_per_pixel,set$threads_number, ylim=c(0,4e-10))
         lines(sort(set$threads_number),predict(model_Dopt_th_nb)[order(set$threads_number)],col="green")  

         plot(y=set$time_per_pixel,set$lws_y, ylim=c(0,4e-8))
         lines(sort(set$lws_y),predict(model_Dopt_lws_y)[order(set$lws_y)],col="green")  

         par(default)        

       #+end_src

       #+RESULTS:
       [[file:img/20160402/pilipili2/dopt_desgin_100_no_hypothesis_2.png]]

       And with interactions:
      #+begin_src R :results output :session :exports both
        library(DoE.base)
        library(DoE.wrapper)

         f <- function(x) { x * (0.05 - 1 * (x < 0)) }
         g <- function(x) { f(x)/x^2 }
         h <- function(x) {pmin(g(x),1e15)}

         Dopt <- Dopt.design( 100 , data=complete_set, formula= 
                                                              "~ (elements_number +
                                                                 y_component_number + 
                                                                 vector_length + 
                                                                 threads_number + 
                                                                 lws_y + 
                                                                 load_overlap +
                                                                 temporary_size)^2" , nRepeat= 20 ,randomize= TRUE ,seed= 28517 )

         set <- data.frame()
         for(i in 1:nrow(Dopt)){
             set <- rbind(set, df[ df$elements_number == Dopt$elements_number[i]
                                        & df$y_component_number == Dopt$y_component_number[i]
                                        & df$vector_length == Dopt$vector_length[i]
                                        & df$temporary_size == Dopt$temporary_size[i] 
                                        & df$threads_number == Dopt$threads_number[i]
                                        & df$load_overlap == (if (Dopt$load_overlap[i] == 1) "true" else "false")
                                        & df$lws_y == Dopt$lws_y[i], ])
         }

          model <- time_per_pixel ~ elements_number + I(1/elements_number) + 
                                             y_component_number + I(1/y_component_number) + 
                                             vector_length + 
                                             threads_number + I(1/threads_number) + 
                                             lws_y + 
                                             elements_number:y_component_number +
                                             threads_number:lws_y +
                                             threads_number:elements_number
          fit <- lm(data=set,formula=model)
          for(i in 1:200){
              E <- residuals(fit)
              fit <- lm(data=set,formula=model,weight=g(E))
          }
          summary(fit)
       #+end_src

      #+RESULTS:
      #+begin_example

      Call:
      lm.default(formula = model, data = set, weights = g(E))

      Weighted Residuals:
             Min         1Q     Median         3Q        Max 
      -1.052e-05  1.391e-06  4.007e-06  9.869e-06  4.572e-05 

      Coefficients: (2 not defined because of singularities)
                                           Estimate Std. Error t value Pr(>|t|)    
      (Intercept)                         5.972e-11  1.266e-10   0.472 0.638305    
      elements_number                    -1.834e-11  5.133e-12  -3.572 0.000572 ***
      I(1/elements_number)                9.090e-11  3.684e-11   2.467 0.015508 *  
      y_component_number                 -1.454e-12  5.842e-12  -0.249 0.804017    
      I(1/y_component_number)                    NA         NA      NA       NA    
      vector_length                       3.676e-11  4.881e-12   7.532 3.72e-11 ***
      threads_number                      8.194e-14  8.859e-14   0.925 0.357496    
      I(1/threads_number)                 6.999e-09  4.212e-09   1.662 0.100049    
      lws_y                               8.741e-12  3.571e-13  24.480  < 2e-16 ***
      elements_number:y_component_number         NA         NA      NA       NA    
      threads_number:lws_y               -5.082e-15  3.487e-16 -14.575  < 2e-16 ***
      elements_number:threads_number      6.590e-15  5.669e-15   1.162 0.248135    
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 1.426e-05 on 90 degrees of freedom
      Multiple R-squared:      1,	Adjusted R-squared:      1 
      F-statistic: 2.015e+15 on 9 and 90 DF,  p-value: < 2.2e-16
#+end_example

       Linear + interactions seems  also to be a good start to find a model:
      #+begin_src R :results output graphics :file img/20160402/pilipili2/dopt_desgin_100_no_hypothesis_interaction.png :exports both :width 600 :height 400 :session

         form_Dopt_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
         form_Dopt_y_comp <- time_per_pixel ~ y_component_number + I(1/y_component_number)
         form_Dopt_v_len <- time_per_pixel ~ vector_length 
         form_Dopt_th_nb <- time_per_pixel ~ threads_number + I(threads_number^2)
         form_Dopt_lws_y <- time_per_pixel ~ lws_y + I(1/lws_y)

         model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb)
         for(i in 1:200){
             E <- residuals(model_Dopt_elem_nb)
             model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb,weight=h(E))
         }

         model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp)
         for(i in 1:200){
             E <- residuals(model_Dopt_y_comp)
             model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp,weight=h(E))
         }

         model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len)
         for(i in 1:200){
             E <- residuals(model_Dopt_v_len)
             model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len,weight=h(E))
         }

         model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb)
         for(i in 1:200){
             E <- residuals(model_Dopt_th_nb)
             model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb,weight=h(E))
         }

         model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y)
         for(i in 1:200){
             E <- residuals(model_Dopt_lws_y)
             model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y,weight=h(E))
         }

         default <- par()
         par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

         plot(y=set$time_per_pixel,set$elements_number,ylim=c(0,4e-9))
         lines(sort(set$elements_number),predict(model_Dopt_elem_nb)[order(set$elements_number)],col="green")  

         plot(y=set$time_per_pixel,set$y_component_number, ylim=c(0,5e-10))
         lines(sort(set$y_component_number),predict(model_Dopt_y_comp)[order(set$y_component_number)],col="green")  

         plot(y=set$time_per_pixel,set$vector_length, ylim=c(0,5e-10))
         lines(sort(set$vector_length),predict(model_Dopt_v_len)[order(set$vector_length)],col="green")  

         plot(y=set$time_per_pixel,set$threads_number, ylim=c(0,4e-10))
         lines(sort(set$threads_number),predict(model_Dopt_th_nb)[order(set$threads_number)],col="green")  

         plot(y=set$time_per_pixel,set$lws_y, ylim=c(0,4e-8))
         lines(sort(set$lws_y),predict(model_Dopt_lws_y)[order(set$lws_y)],col="green")  

         par(default)        

       #+end_src

      #+RESULTS:
      [[file:img/20160402/pilipili2/dopt_desgin_100_no_hypothesis_interaction.png]]

      #+begin_src R :results output graphics :file img/20160402/pilipili2/dopt_desgin_100_no_hypothesis_interactions_2.png :exports both :width 600 :height 400 :session

         form_Dopt_elem_nb <- time_per_pixel ~ elements_number + I(elements_number^2)
         form_Dopt_y_comp <- time_per_pixel ~ y_component_number + I(y_component_number^2)
         form_Dopt_v_len <- time_per_pixel ~ vector_length 
         form_Dopt_th_nb <- time_per_pixel ~ threads_number + I(threads_number^2)
         form_Dopt_lws_y <- time_per_pixel ~ lws_y + I(1/lws_y)

         model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb)
         for(i in 1:200){
             E <- residuals(model_Dopt_elem_nb)
             model_Dopt_elem_nb <- lm(data=set,formula=form_Dopt_elem_nb,weight=h(E))
         }

         model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp)
         for(i in 1:200){
             E <- residuals(model_Dopt_y_comp)
             model_Dopt_y_comp <- lm(data=set,formula=form_Dopt_y_comp,weight=h(E))
         }

         model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len)
         for(i in 1:200){
             E <- residuals(model_Dopt_v_len)
             model_Dopt_v_len <- lm(data=set,formula=form_Dopt_v_len,weight=h(E))
         }

         model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb)
         for(i in 1:200){
             E <- residuals(model_Dopt_th_nb)
             model_Dopt_th_nb <- lm(data=set,formula=form_Dopt_th_nb,weight=h(E))
         }

         model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y)
         for(i in 1:200){
             E <- residuals(model_Dopt_lws_y)
             model_Dopt_lws_y <- lm(data=set,formula=form_Dopt_lws_y,weight=h(E))
         }

         default <- par()
         par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

         plot(y=set$time_per_pixel,set$elements_number,ylim=c(0,4e-9))
         lines(sort(set$elements_number),predict(model_Dopt_elem_nb)[order(set$elements_number)],col="green")  

         plot(y=set$time_per_pixel,set$y_component_number, ylim=c(0,5e-10))
         lines(sort(set$y_component_number),predict(model_Dopt_y_comp)[order(set$y_component_number)],col="green")  

         plot(y=set$time_per_pixel,set$vector_length, ylim=c(0,5e-10))
         lines(sort(set$vector_length),predict(model_Dopt_v_len)[order(set$vector_length)],col="green")  

         plot(y=set$time_per_pixel,set$threads_number, ylim=c(0,4e-10))
         lines(sort(set$threads_number),predict(model_Dopt_th_nb)[order(set$threads_number)],col="green")  

         plot(y=set$time_per_pixel,set$lws_y, ylim=c(0,4e-8))
         lines(sort(set$lws_y),predict(model_Dopt_lws_y)[order(set$lws_y)],col="green")  

         par(default)        

       #+end_src

      #+RESULTS:
      [[file:img/20160402/pilipili2/dopt_desgin_100_no_hypothesis_interactions_2.png]]

      Let's compare to the full search space regression byt running
      100 and averaging:
      #+begin_src R :results output :session :exports both
         library(DoE.base)
         library(DoE.wrapper)

         f <- function(x) { x * (0.05 - 1 * (x < 0)) }
         g <- function(x) { f(x)/x^2 }
         h <- function(x) {pmin(g(x),1e10)}

         elements_number_val <- as.numeric(levels(as.factor(df$elements_number)))
         y_component_number_val <- as.numeric(levels(as.factor(df$y_component_number)))
         vector_length_val <- as.numeric(levels(as.factor(df$vector_length)))
         threads_number_val <- as.numeric(levels(as.factor(df$threads_number)))
         lws_y_val <- as.numeric(levels(as.factor(df$lws_y)))
         temporary_size_val <- as.numeric(levels(as.factor(df$temporary_size)))
         load_overlap_val <- levels(df$load_overlap)

         sum_elem_nb <- c(rep(0,length(elements_number_val)))                      
         sum_y_comp <- c(rep(0,length(y_component_number_val)))                      
         sum_v_len <- c(rep(0,length(vector_length_val)))                      
         sum_th_nb <- c(rep(0,length(threads_number_val)))                      
         sum_lws_y <- c(rep(0,length(lws_y_val))) 

        form_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
        form_y_comp <- time_per_pixel ~ y_component_number + I(1/y_component_number)
        form_v_len <- time_per_pixel ~ vector_length 
        form_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
        form_lws_y <- time_per_pixel ~ lws_y

         model_elem_nb <- lm(data=df,formula=form_elem_nb)
         model_y_comp <- lm(data=df,formula=form_y_comp)
         model_v_len <- lm(data=df,formula=form_v_len)
         model_th_nb <- lm(data=df,formula=form_th_nb)
         model_lws_y <- lm(data=df,formula=form_lws_y)
         for(i in 1:200){
             E <- residuals(model_elem_nb)
             model_elem_nb <- lm(data=df,formula=form_elem_nb,weight=h(E))

             E <- residuals(model_y_comp)
             model_y_comp <- lm(data=df,formula=form_y_comp,weight=h(E))

             E <- residuals(model_v_len)
             model_v_len <- lm(data=df,formula=form_v_len,weight=h(E))

             E <- residuals(model_th_nb)
             model_th_nb <- lm(data=df,formula=form_th_nb,weight=h(E))

             E <- residuals(model_lws_y)
             model_lws_y <- lm(data=df,formula=form_lws_y,weight=h(E))

         }

         runs = 100   

         for(j in 1:runs){
             set <- Dopt.design( 100 , data=df, formula="~(elements_number  + y_component_number  + vector_length  + threads_number + lws_y  + temporary_size + load_overlap)" , nRepeat= 20 ,randomize= TRUE)
             model_subset_elem_nb <- lm(data=set,formula=form_elem_nb)
             model_subset_y_comp <- lm(data=set,formula=form_y_comp)
             model_subset_v_len <- lm(data=set,formula=form_v_len)
             model_subset_th_nb <- lm(data=set,formula=form_th_nb)
             model_subset_lws_y <- lm(data=set,formula=form_lws_y)
             for(i in 1:200){
                 E <- residuals(model_subset_elem_nb)
                 model_subset_elem_nb <- lm(data=set,formula=form_elem_nb,weight=h(E))

                 E <- residuals(model_subset_y_comp)
                 model_subset_y_comp <- lm(data=set,formula=form_y_comp,weight=h(E))

                 E <- residuals(model_subset_v_len)
                 model_subset_v_len <- lm(data=set,formula=form_v_len,weight=h(E))

                 E <- residuals(model_subset_th_nb)
                 model_subset_th_nb <- lm(data=set,formula=form_th_nb,weight=h(E))

                 E <- residuals(model_subset_lws_y)
                 model_subset_lws_y <- lm(data=set,formula=form_lws_y,weight=h(E))

             }
             sum_elem_nb <- sum_elem_nb + predict(model_subset_elem_nb,data.frame(elements_number=elements_number_val),interval="none")
             sum_y_comp <- sum_y_comp + predict(model_subset_y_comp,data.frame(y_component_number=y_component_number_val),interval="none")
             sum_v_len <- sum_v_len + predict(model_subset_v_len,data.frame(vector_length=vector_length_val),interval="none")
             sum_th_nb <- sum_th_nb + predict(model_subset_th_nb,data.frame(threads_number=threads_number_val),interval="none")
             sum_lws_y <- sum_lws_y + predict(model_subset_lws_y,data.frame(lws_y=lws_y_val),interval="none")
         }

         avg_elem_nb <- sum_elem_nb / runs
         avg_y_comp <- sum_y_comp / runs 
         avg_v_len <- sum_v_len / runs 
         avg_th_nb <- sum_th_nb / runs 
         avg_lws_y <- sum_lws_y / runs 
         #+end_src

      #+RESULTS:

      With D-Opt without hypothesis we are still able to get an "idea"
      of the slope but it is less accurate than random or lhs:
      #+begin_src R :results output graphics :file img/20160402/pilipili2/Dopt_100_fit_100_avg_comp.png :exports both :width 800 :height 600 :session
           default <- par()
           par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

           plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,1e-9))
           lines(sort(df$elements_number),predict(model_elem_nb)[order(df$elements_number)],col="red")  
           lines(elements_number_val,avg_elem_nb,col="green")  

           plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,5e-9))
           lines(sort(df$y_component_number),predict(model_y_comp)[order(df$y_component_number)],col="red")  
           lines(y_component_number_val,avg_y_comp,col="green")  

           plot(y=df$time_per_pixel,df$vector_length, ylim=c(0,5e-9))
           lines(sort(df$vector_length),predict(model_v_len)[order(df$vector_length)],col="red")  
           lines(vector_length_val,avg_v_len,col="green")  

           plot(y=df$time_per_pixel,df$threads_number, ylim=c(0,1e-9))
           lines(sort(df$threads_number),predict(model_th_nb)[order(df$threads_number)],col="red")  
           lines(threads_number_val,avg_th_nb,col="green")  

           plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,9e-9))
           lines(sort(df$lws_y),predict(model_lws_y)[order(df$lws_y)],col="red")  
           lines(lws_y_val,avg_lws_y,col="green")  

           par(default)                 
         #+end_src

      #+RESULTS:
      [[file:img/20160402/pilipili2/Dopt_100_fit_100_avg_comp.png]]

      Let's see what we get if we add interactions:
      #+begin_src R :results output :session :exports both
         library(DoE.base)
         library(DoE.wrapper)

         f <- function(x) { x * (0.05 - 1 * (x < 0)) }
         g <- function(x) { f(x)/x^2 }
         h <- function(x) {pmin(g(x),1e10)}

         elements_number_val <- as.numeric(levels(as.factor(df$elements_number)))
         y_component_number_val <- as.numeric(levels(as.factor(df$y_component_number)))
         vector_length_val <- as.numeric(levels(as.factor(df$vector_length)))
         threads_number_val <- as.numeric(levels(as.factor(df$threads_number)))
         lws_y_val <- as.numeric(levels(as.factor(df$lws_y)))
         temporary_size_val <- as.numeric(levels(as.factor(df$temporary_size)))
         load_overlap_val <- levels(df$load_overlap)

         sum_elem_nb <- c(rep(0,length(elements_number_val)))                      
         sum_y_comp <- c(rep(0,length(y_component_number_val)))                      
         sum_v_len <- c(rep(0,length(vector_length_val)))                      
         sum_th_nb <- c(rep(0,length(threads_number_val)))                      
         sum_lws_y <- c(rep(0,length(lws_y_val))) 

        form_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
        form_y_comp <- time_per_pixel ~ y_component_number + I(1/y_component_number)
        form_v_len <- time_per_pixel ~ vector_length 
        form_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
        form_lws_y <- time_per_pixel ~ lws_y

         model_elem_nb <- lm(data=df,formula=form_elem_nb)
         model_y_comp <- lm(data=df,formula=form_y_comp)
         model_v_len <- lm(data=df,formula=form_v_len)
         model_th_nb <- lm(data=df,formula=form_th_nb)
         model_lws_y <- lm(data=df,formula=form_lws_y)
         for(i in 1:200){
             E <- residuals(model_elem_nb)
             model_elem_nb <- lm(data=df,formula=form_elem_nb,weight=h(E))

             E <- residuals(model_y_comp)
             model_y_comp <- lm(data=df,formula=form_y_comp,weight=h(E))

             E <- residuals(model_v_len)
             model_v_len <- lm(data=df,formula=form_v_len,weight=h(E))

             E <- residuals(model_th_nb)
             model_th_nb <- lm(data=df,formula=form_th_nb,weight=h(E))

             E <- residuals(model_lws_y)
             model_lws_y <- lm(data=df,formula=form_lws_y,weight=h(E))

         }

         runs = 100   

         for(j in 1:runs){
             set <- Dopt.design( 100 , data=df, formula="~(elements_number  + y_component_number  + vector_length  + threads_number + lws_y  + temporary_size + load_overlap)^2" , nRepeat= 20 ,randomize= TRUE)
             model_subset_elem_nb <- lm(data=set,formula=form_elem_nb)
             model_subset_y_comp <- lm(data=set,formula=form_y_comp)
             model_subset_v_len <- lm(data=set,formula=form_v_len)
             model_subset_th_nb <- lm(data=set,formula=form_th_nb)
             model_subset_lws_y <- lm(data=set,formula=form_lws_y)
             for(i in 1:200){
                 E <- residuals(model_subset_elem_nb)
                 model_subset_elem_nb <- lm(data=set,formula=form_elem_nb,weight=h(E))

                 E <- residuals(model_subset_y_comp)
                 model_subset_y_comp <- lm(data=set,formula=form_y_comp,weight=h(E))

                 E <- residuals(model_subset_v_len)
                 model_subset_v_len <- lm(data=set,formula=form_v_len,weight=h(E))

                 E <- residuals(model_subset_th_nb)
                 model_subset_th_nb <- lm(data=set,formula=form_th_nb,weight=h(E))

                 E <- residuals(model_subset_lws_y)
                 model_subset_lws_y <- lm(data=set,formula=form_lws_y,weight=h(E))

             }
             sum_elem_nb <- sum_elem_nb + predict(model_subset_elem_nb,data.frame(elements_number=elements_number_val),interval="none")
             sum_y_comp <- sum_y_comp + predict(model_subset_y_comp,data.frame(y_component_number=y_component_number_val),interval="none")
             sum_v_len <- sum_v_len + predict(model_subset_v_len,data.frame(vector_length=vector_length_val),interval="none")
             sum_th_nb <- sum_th_nb + predict(model_subset_th_nb,data.frame(threads_number=threads_number_val),interval="none")
             sum_lws_y <- sum_lws_y + predict(model_subset_lws_y,data.frame(lws_y=lws_y_val),interval="none")
         }

         avg_elem_nb <- sum_elem_nb / runs
         avg_y_comp <- sum_y_comp / runs 
         avg_v_len <- sum_v_len / runs 
         avg_th_nb <- sum_th_nb / runs 
         avg_lws_y <- sum_lws_y / runs 
         #+end_src

      #+RESULTS:

            #+begin_src R :results output graphics :file img/20160402/pilipili2/Dopt_100_fit_100_avg_interactions_comp.png :exports both :width 800 :height 600 :session
           default <- par()
           par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))

           plot(y=df$time_per_pixel,df$elements_number, ylim=c(0,1e-9))
           lines(sort(df$elements_number),predict(model_elem_nb)[order(df$elements_number)],col="red")  
           lines(elements_number_val,avg_elem_nb,col="green")  

           plot(y=df$time_per_pixel,df$y_component_number, ylim=c(0,5e-9))
           lines(sort(df$y_component_number),predict(model_y_comp)[order(df$y_component_number)],col="red")  
           lines(y_component_number_val,avg_y_comp,col="green")  

           plot(y=df$time_per_pixel,df$vector_length, ylim=c(0,5e-9))
           lines(sort(df$vector_length),predict(model_v_len)[order(df$vector_length)],col="red")  
           lines(vector_length_val,avg_v_len,col="green")  

           plot(y=df$time_per_pixel,df$threads_number, ylim=c(0,1e-9))
           lines(sort(df$threads_number),predict(model_th_nb)[order(df$threads_number)],col="red")  
           lines(threads_number_val,avg_th_nb,col="green")  

           plot(y=df$time_per_pixel,df$lws_y, ylim=c(0,9e-9))
           lines(sort(df$lws_y),predict(model_lws_y)[order(df$lws_y)],col="red")  
           lines(lws_y_val,avg_lws_y,col="green")  

           par(default)                 
         #+end_src

         #+RESULTS:
         [[file:img/20160402/pilipili2/Dopt_100_fit_100_avg_interactions_comp.png]]

         We also need to know if we can still investigate to find the
         relevant factors. We can not only really on the result below
         because all the factors do not have the same impact:
         #+begin_src R :results output :session :exports both
           library(DoE.wrapper)
           f <- function(x) { x * (0.05 - 1 * (x < 0)) }
           g <- function(x) { f(x)/x^2 }
           h <- function(x) {pmin(g(x),1e15)}
           
           Dopt <- Dopt.design( 20 , data=df, formula="~elements_number  + y_component_number  + vector_length  + threads_number + lws_y  + temporary_size + load_overlap" , nRepeat= 5 ,randomize= TRUE)
           Dopt_interact <- Dopt.design( 20 , data=df, formula="~(elements_number  + y_component_number  + vector_length  + threads_number + lws_y  + temporary_size + load_overlap)^2" , nRepeat= 5 ,randomize= TRUE)
           
           model <- time_per_pixel ~ elements_number  + y_component_number  + vector_length  + threads_number + lws_y  + temporary_size + load_overlap
           
           fit <- lm(data=Dopt,formula=model)
           fit_interact <- lm(data=Dopt_interact,formula=model)
           for(i in 1:200){
               E <- residuals(fit)
               fit <- lm(data=Dopt,formula=model,weight=h(E))

               E_interact <- residuals(fit_interact)
               fit_interact <- lm(data=Dopt_interact,formula=model,weight=h(E_interact))
           }

           summary(fit)
           summary(fit_interact)
         #+end_src

         #+RESULTS:
         #+begin_example
         Error in optFederov(formula, data, nruns, augment = FALSE, center = center,  : 
           nTrials must be greater than or equal to the number of columns in expanded X
         
         Call:
         lm.default(formula = model, data = Dopt, weights = h(E))
         
         Weighted Residuals:
                Min         1Q     Median         3Q        Max 
         -6.000e-09 -1.000e-09  5.441e-06  1.025e-05  4.442e-05 
         
         Coefficients:
                              Estimate Std. Error  t value Pr(>|t|)    
         (Intercept)         1.056e-09  1.171e-12   901.49   <2e-16 ***
         elements_number     3.635e-12  5.057e-14    71.88   <2e-16 ***
         y_component_number -2.778e-10  2.225e-13 -1248.22   <2e-16 ***
         vector_length       9.488e-11  1.051e-13   902.66   <2e-16 ***
         threads_number     -1.079e-12  1.506e-15  -716.10   <2e-16 ***
         lws_y               3.796e-12  8.902e-16  4263.78   <2e-16 ***
         temporary_size     -1.314e-10  6.438e-13  -204.10   <2e-16 ***
         load_overlaptrue    1.983e-09  1.374e-12  1444.03   <2e-16 ***
         ---
         Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1
         
         Residual standard error: 2.035e-05 on 12 degrees of freedom
         Multiple R-squared:      1,	Adjusted R-squared:      1 
         F-statistic: 9.235e+06 on 7 and 12 DF,  p-value: < 2.2e-16
         
         Call:
         lm.default(formula = model, data = Dopt_interact, weights = h(E_interact))
         
         Weighted Residuals:
                Min         1Q     Median         3Q        Max 
         -6.063e-06  2.287e-06  4.796e-06  9.341e-06  4.577e-05 
         
         Coefficients:
                              Estimate Std. Error t value Pr(>|t|)    
         (Intercept)         1.978e-10  8.637e-13  229.04   <2e-16 ***
         elements_number    -2.694e-11  5.386e-14 -500.19   <2e-16 ***
         y_component_number  6.958e-12  2.247e-13   30.96   <2e-16 ***
         vector_length       5.508e-11  6.494e-14  848.11   <2e-16 ***
         threads_number     -1.479e-14  7.025e-16  -21.06   <2e-16 ***
         lws_y               3.571e-12  1.069e-15 3341.11   <2e-16 ***
         temporary_size     -9.882e-12  4.630e-13  -21.34   <2e-16 ***
         load_overlaptrue    1.006e-11  6.551e-13   15.36   <2e-16 ***
         ---
         Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1
         
         Residual standard error: 1.466e-05 on 92 degrees of freedom
         Multiple R-squared:      1,	Adjusted R-squared:      1 
         F-statistic: 6.428e+06 on 7 and 92 DF,  p-value: < 2.2e-16
         #+end_example
         
         #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 900 :height 700 :session
           plot(Dopt_interact)
         #+end_src
         
         #+RESULTS:
     [[file:/tmp/babel-2451WOS/figure2451ZIv.png]]

         #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
         model <- time_per_pixel ~ threads_number + I(1/threads_number)
         fit <- lm(data=Dopt_interact,formula=model)           
         for(i in 1:200){
               E <- residuals(fit)
               fit <- lm(data=Dopt_interact,formula=model,weight=h(E))
         }

         plot(Dopt_interact$threads_number,Dopt_interact$time_per_pixel,ylim=c(0,1e-9))
         lines(seq(32,1024),as.numeric(predict(fit,data.frame(threads_number=seq(32,1024)),interval="none")),col=2)
         #+end_src

         #+RESULTS:
         [[file:/tmp/babel-2451WOS/figure2451ZWX.png]]
   
         Let's try to had more point to see if we can get more
         information for threads number:
         #+begin_src R :results output :session :exports both
           augmented1 <- Dopt.augment(Dopt_interact,m=20,formula="~ threads_number + I(1/threads_number)", seed=1, candidates=df, randomize=TRUE, nRepeats=5)
           plot(augmented1)
         #+end_src

         #+RESULTS:
         : Error in Dopt.augment(Dopt_interact, m = 20, formula = "~ threads_number + I(1/threads_number)",  : 
         :   candidates must be a matrix or data frame
         : Error in plot(augmented1) : object 'augmented1' not found

         Can I use directly my constraint with Dopt? Yes but it
         complaines that it cannot get more than 38 points
         #+begin_src R :results output :session :exports both
           kernel_size <- function(elements_number,y_component_number,vector_length,threads_number,lws_y,temporary_size,load_overlap) {
                                                   # load_overlap <- if (load_overlap == "true") 1 else 0
               vector_number <- ceiling((elements_number / y_component_number) / vector_length)
               
               tempload <- (1 - load_overlap) * (vector_number * vector_length) / vector_length * vector_length
               temp <-  load_overlap * 3 * vector_number * (y_component_number+2) * vector_length
               res <- vector_number * y_component_number * vector_length
               tempc <- 3 * vector_number * (y_component_number + 2) * temporary_size * vector_length
               out_vec = (1 - load_overlap) * tempc
               resc <- vector_number * y_component_number * temporary_size * vector_length
           
               tot <- (tempload + temp + res + tempc + out_vec + resc) * threads_number
           }
           
           check_constraint <- function(elements_number,y_component_number,vector_length,threads_number,lws_y,temporary_size,load_overlap){
               res <- if(#load_overlap %in% 0:1 &
                   lws_y <= threads_number &
                   elements_number %% y_component_number == 0 &
                   elements_number %/% y_component_number <= 4 &
                   kernel_size(elements_number,y_component_number,vector_length,threads_number,lws_y,temporary_size,load_overlap) < kernel_size(elements_number=6, y_component_number=6, vector_length=8, temporary_size=2, load_overlap=0, threads_number=1024)
               ) T else F
           }
                      
           Dopt_interact <- Dopt.design( 20000 , factor.names=list(elements_number=c(1,24),
                                                                y_component_number=c(1,6),
                                                                vector_length=c(1,16),
                                                                threads_number=c(32,1024),
                                                                lws_y=c(1,1024),
                                                                temporary_size=c(2,4),
                                                                load_overlap=c(0,1)), 
                                         formula="~(elements_number  + y_component_number  + vector_length  + threads_number + lws_y  + temporary_size + load_overlap)^2" , 
                                         nRepeat= 5,
                                         randomize= TRUE, 
                                         constraint="lws_y <= threads_number & elements_number %% y_component_number == 0 & elements_number %/% y_component_number <= 4 & kernel_size(elements_number,y_component_number,vector_length,threads_number,lws_y,temporary_size,load_overlap) < kernel_size(elements_number=6, y_component_number=6, vector_length=8, temporary_size=2, load_overlap=0, threads_number=1024) " )
         #+end_src

         #+RESULTS:
         :  creating full factorial with 128 runs ...
         : 
         : Error in Dopt.design(20000, factor.names = list(elements_number = c(1,  : 
         :   The constraint reduces the candidate set to 38 rows.


****** TODO Optimization on the model to find the value
******* DONE Understanding why the bfgs method of optim does not work with my regression
        - Conclusion:
          The reason why bfgs methods did not improve the starting
          value is that the slope is nearly flat so I increase it by
          multipling each coefficient.
       #+begin_src sh :results output :exports both
         ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        summary(df)
       #+end_src

       #+RESULTS:
       #+begin_example
        elements_number  y_component_number vector_length   temporary_size 
        Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
        1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
        Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
        Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
        3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
        Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
        vector_recompute load_overlap  threads_number       lws_y        
        true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                         true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                       Median : 256.0   Median :  16.00  
                                       Mean   : 368.1   Mean   :  73.58  
                                       3rd Qu.: 512.0   3rd Qu.:  64.00  
                                       Max.   :1024.0   Max.   :1024.00  
        time_per_pixel     
        Min.   :1.165e-10  
        1st Qu.:3.028e-10  
        Median :7.125e-10  
        Mean   :2.013e-09  
        3rd Qu.:2.001e-09  
        Max.   :4.452e-08
#+end_example

       #+begin_src R :results output :session :exports both
         f <- function(x) { x * (0.05 - 1 * (x < 0)) }
         g <- function(x) { f(x)/x^2 }
       #+end_src

       #+RESULTS:
       
       BFGS doesn't work on a very simple case, there is no
       improvement of the start value.:
       #+begin_src R :results output :session :exports both
         model <- time_per_pixel ~ elements_number # + I(1/elements_number)
         fit <- lm(data=df,formula=model)
         func <- function(x){
             as.numeric(predict(fit,data.frame(elements_number=x[1]),interval="none"))
         }
         optim(c(5),func,method="L-BFGS-B",lower=1,upper=24)
       #+end_src

       #+RESULTS:
       #+begin_example
       $par
       [1] 5

       $value
       [1] 2.458811e-09

       $counts
       function gradient 
              2        2 

       $convergence
       [1] 0

       $message
       [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
#+end_example

       #+begin_src R :results output :session :exports both
       summary(fit) 
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = model, data = df)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -2.727e-09 -1.806e-09 -1.019e-09  2.420e-10  4.157e-08 

       Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
       (Intercept)      3.079e-09  4.157e-11   74.07   <2e-16 ***
       elements_number -1.240e-10  3.953e-12  -31.36   <2e-16 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 3.638e-09 on 23118 degrees of freedom
       Multiple R-squared:  0.04081,	Adjusted R-squared:  0.04077 
       F-statistic: 983.7 on 1 and 23118 DF,  p-value: < 2.2e-16
#+end_example

       #+begin_src R :results output :session :exports both
         func(24)
       #+end_src

       #+RESULTS:
       : [1] 1.029919e-10

       The slope value is too small for the algorithm, the solution is
       to normalize:
       #+begin_src R :results output :session :exports both
         func <- function(x){
             as.numeric(predict(fit,data.frame(elements_number=x[1]),interval="none"))/as.numeric(predict(fit,data.frame(elements_number=3),interval="none"))
         }
         optim(c(5),func,method="L-BFGS-B",lower=1,upper=24)
       #+end_src

       #+RESULTS:
       #+begin_example
       $par
       [1] 24

       $value
       [1] 0.03804942

       $counts
       function gradient 
              3        3 

       $convergence
       [1] 0

       $message
       [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
#+end_example


       Let's test an even simpler one. L-BFGS-B Still doesn't works:
       #+begin_src R :results output :session :exports both
         model <- time_per_pixel ~ vector_length
         fit <- lm(data=df,formula=model)
         func <- function(x){
             as.numeric(predict(fit,data.frame(vector_length=x[1]),interval="none"))
         }
         optim(c(5),func,method="Brent",lower=1,upper=24)
         optim(c(5),func,method="L-BFGS-B",lower=1,upper=24)
       #+end_src

       #+RESULTS:
       #+begin_example
       $par
       [1] 1

       $value
       [1] 9.300069e-10

       $counts
       function gradient 
             NA       NA 

       $convergence
       [1] 0

       $message
       NULL
       $par
       [1] 5

       $value
       [1] 1.845604e-09

       $counts
       function gradient 
              2        2 

       $convergence
       [1] 0

       $message
       [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
#+end_example

       Maybe it cannot compute the gradiant because the expression is
       not available. In fact it is because the slope is to low,
       almost flat:
       #+begin_src R :results output :session :exports both
         func2 <- function(x){
             as.numeric(fit$coefficients[1])*1e11 + as.numeric(fit$coefficients[2])*1e11 * x[1]
         }
         func3 <- function(x){
             7.011077e-10 + 2.288992e-10 * x[1]
         }
         func4 <- function(x){
             7.011077e-4 + 2.288992e-4 * x[1]
         }
         func5 <- function(x){
             7.011077e-6 + 2.288992e-6 * x[1]
         }
         as.numeric(fit$coefficients[1])
         as.numeric(fit$coefficients[2])
         optim(c(10),func2,method="L-BFGS-B",lower=1,upper=24)
         optim(c(10),func3,method="L-BFGS-B",lower=1,upper=24)
         optim(c(10),func4,method="L-BFGS-B",lower=1,upper=24)
         optim(c(10),func5,method="L-BFGS-B",lower=1,upper=24)
       #+end_src

       #+RESULTS:
       #+begin_example
       [1] 7.011077e-10
       [1] 2.288992e-10
       $par
       [1] 1

       $value
       [1] 93.00069

       $counts
       function gradient 
              2        2 

       $convergence
       [1] 0

       $message
       [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
       $par
       [1] 10

       $value
       [1] 2.9901e-09

       $counts
       function gradient 
              2        2 

       $convergence
       [1] 0

       $message
       [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
       $par
       [1] 1

       $value
       [1] 0.0009300069

       $counts
       function gradient 
             11       11 

       $convergence
       [1] 0

       $message
       [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
       $par
       [1] 9.999998

       $value
       [1] 2.990099e-05

       $counts
       function gradient 
              2        2 

       $convergence
       [1] 0

       $message
       [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
       #+end_example

       Same problem with another package:
       #+begin_src R :results output :session :exports both
         library(lbfgsb3)
         func2 <- function(x){
             as.numeric(fit$coefficients[1]) + as.numeric(fit$coefficients[2]) * x[1]
         }
         a<-lbfgsb3(c(10),func2,lower=1,upper=16)
         a
       #+end_src

       #+RESULTS:
       #+begin_example
       $prm
       [1] 10

       $f
       [1] 2.9901e-09

       $g
       [1] 2.288992e-10

       $info
       $info$task
       [1] "START"

       $info$itask
       [1] 7

       $info$lsave
       [1] FALSE  TRUE  TRUE FALSE

       $info$icsave
       [1] 0

       $info$dsave
        [1] 1.000000e+00 0.000000e+00 2.220446e-09 0.000000e+00 2.220446e-16
        [6] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
       [11] 0.000000e+00 0.000000e+00 2.288992e-10 0.000000e+00 0.000000e+00
       [16] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
       [21] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
       [26] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00

       $info$isave
        [1]   5  25 100   1   6  11  36  61  86 186 286 287 288 289 290 291   0   0   0
       [20]   0   0   0   0   8   0   0   1   0   0   0   0   0   0   1   0   0   0   1
       [39]   0   0   0   0   0   0
#+end_example

       Is multiplying coef correct? It seems to have the same shape:
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
         model <- time_per_pixel ~ elements_number + I(1/elements_number)
         fit <- lm(data=df,formula=model)
         func1 <- function(x){
             as.numeric(fit$coefficients[1]) + as.numeric(fit$coefficients[2]) * x + as.numeric(fit$coefficients[3]) * 1 / x
         }
         func2 <- function(x){
             as.numeric(fit$coefficients[1])*1e11 + as.numeric(fit$coefficients[2])*1e11 * x + as.numeric(fit$coefficients[3])*1e11 * 1 / x
         }
         default <- par()
         par(mfrow = c(1, 2), oma = c(0, 0, 2, 0))
         plot(func1)
         plot(func2)
         par(default)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-3066ESq/figure3066alB.png]]

       So I should multiple all my coef by 1e11:
       #+begin_src R :results output :session :exports both
         model <- time_per_pixel ~ elements_number + I(1/elements_number)
         fit <- lm(data=df,formula=model)
         fit$coefficients <- fit$coefficients*1e11
         func <- function(x){
             as.numeric(predict(fit,data.frame(elements_number=x[1]),interval="none"))
         }
         optim(c(5),func,method="L-BFGS-B",lower=1,upper=24)
       #+end_src

       #+RESULTS:
       #+begin_example
       $par
       [1] 24

       $value
       [1] 79.09117

       $counts
       function gradient 
              3        3 

       $convergence
       [1] 0

       $message
       [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
       #+end_example

******* TODO Testing
 
       - complex case:
         #+begin_src R :results output :session :exports both
           f <- function(x) { x * (0.05 - 1 * (x < 0)) }
           g <- function(x) { f(x)/x^2 }
           h <- function(x) {pmin(g(x),1e15)}
           
           model <- time_per_pixel ~ elements_number + I(1/elements_number) + 
               y_component_number + I(1/y_component_number) + 
               vector_length + 
               threads_number + I(1/threads_number) + 
               lws_y + 
               elements_number:y_component_number +
               threads_number:lws_y +
               threads_number:elements_number
           
           fit <- lm(data=df,formula=model)
           for(i in 1:200){
               E <- residuals(fit)
               fit <- lm(data=df,formula=model,weight=g(E))
           }
           
           fit$coefficients <- fit$coefficients*1e11
           func <- function(x){
               as.numeric(predict(fit,data.frame(elements_number=x[1], y_component_number=x[2], vector_length=x[3], threads_number=x[4], lws_y=x[5]),interval="none"))
           }
         #+end_src

         #+RESULTS:

         The results corresponds to what we obtain with the model:
         #+begin_src R :results output :session :exports both
           optim(c(2,6,2,256,5),func,method="L-BFGS-B",lower=c(1,1,1,32,1),upper=c(24,6,16,1024,1024))
         #+end_src

         #+RESULTS:
         #+begin_example
         $par
         [1]  24.000000   1.183297   1.000000 404.301994   1.000000

         $value
         [1] -48.24422

         $counts
         function gradient 
               31       31 

         $convergence
         [1] 0

         $message
         [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
         #+end_example

         But the closest combination doesn't exist. Because All
         combinations with more than 6 elements on the x-axis are
         reject by the constraints:
         #+begin_src R :results output :session :exports both
           df[df$elements_number==24 & df$y_component_number==1 & df$vector_length==1 & df$threads_number==512 & df$lws_y==1 ,]
           df[df$y_component_number==1 & df$vector_length==1 & df$threads_number==512 & df$lws_y==1 ,]
         #+end_src

         #+RESULTS:
         #+begin_example
         [1] elements_number    y_component_number vector_length      temporary_size    
         [5] vector_recompute   load_overlap       threads_number     lws_y             
         [9] time_per_pixel    
         <0 rows> (or 0-length row.names)
              elements_number y_component_number vector_length temporary_size
         391                3                  1             1              2
         452                4                  1             1              4
         860                4                  1             1              2
         1057               2                  1             1              2
         1185               3                  1             1              2
         1587               2                  1             1              4
         1780               1                  1             1              4
         2323               3                  1             1              4
         2397               2                  1             1              4
         3775               4                  1             1              2
         4465               1                  1             1              2
         4496               4                  1             1              4
         4961               3                  1             1              4
         5485               2                  1             1              2
         6052               1                  1             1              2
         6088               1                  1             1              4
              vector_recompute load_overlap threads_number lws_y time_per_pixel
         391              true         true            512     1   3.378041e-10
         452              true        false            512     1   3.304370e-10
         860              true        false            512     1   3.300297e-10
         1057             true        false            512     1   2.829691e-10
         1185             true        false            512     1   3.383311e-10
         1587             true         true            512     1   2.878744e-10
         1780             true         true            512     1   2.410064e-10
         2323             true        false            512     1   3.397962e-10
         2397             true        false            512     1   2.877417e-10
         3775             true         true            512     1   3.283868e-10
         4465             true         true            512     1   2.404110e-10
         4496             true         true            512     1   3.310624e-10
         4961             true         true            512     1   3.398253e-10
         5485             true         true            512     1   2.843226e-10
         6052             true        false            512     1   2.422354e-10
         6088             true        false            512     1   2.410245e-10
#+end_example
         
******* TODO Deal with constraint / non-continuous functions
        Warning: By lack of time this part is suspended. 
        #+begin_src sh :results output :exports both
          ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
        #+end_src

        #+RESULTS:

        #+begin_src R :results output :session :exports both
          df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        #+end_src

        #+RESULTS:

        Constraint can be taken into account in the objective
        function.
        Fictive value to hide non-continuous.
         #+begin_src R :results output :session :exports both
            f <- function(x) { x * (0.05 - 1 * (x < 0)) }
            g <- function(x) { f(x)/x^2 }
            h <- function(x) {pmin(g(x),1e15)}

           # kernel_size <- function(elements_number,y_component_number,vector_length,threads_number,lws_y,temporary_size,load_overlap) {
           #                                         # load_overlap <- if (load_overlap == "true") 1 else 0
           #     vector_number <- ceiling((elements_number / y_component_number) / vector_length)
               
           #     tempload <- (1 - load_overlap) * (vector_number * vector_length) / vector_length * vector_length
           #     temp <-  load_overlap * 3 * vector_number * (y_component_number+2) * vector_length
           #     res <- vector_number * y_component_number * vector_length
           #     tempc <- 3 * vector_number * (y_component_number + 2) * temporary_size * vector_length
           #     out_vec = (1 - load_overlap) * tempc
           #     resc <- vector_number * y_component_number * temporary_size * vector_length

           #     tot <- (tempload + temp + res + tempc + out_vec + resc) * threads_number
           # }

           check_constraint <- function(elements_number,y_component_number,vector_length,threads_number,lws_y,temporary_size,load_overlap){
               res <- if(#load_overlap %in% 0:1 &
                         lws_y <= threads_number &
                         # elements_number %% y_component_number == 0 & # multiple of 4 and can be rewritten as follow
                         elements_number <= y_component_number * 4 &
                         elements_number %/% y_component_number <= 4
                         # kernel_size(elements_number,y_component_number,vector_length,threads_number,lws_y,temporary_size,load_overlap) < kernel_size(elements_number=6, y_component_number=6, vector_length=8, temporary_size=2, load_overlap=0, threads_number=1024)
                         ) T else F
           }

            
            model <- time_per_pixel ~ elements_number + I(1/elements_number) + 
                y_component_number + I(1/y_component_number) + 
                vector_length + 
                threads_number + I(1/threads_number) + 
                lws_y + 
                elements_number:y_component_number +
                threads_number:lws_y +
                threads_number:elements_number
            
            fit <- lm(data=df,formula=model)
            for(i in 1:200){
                E <- residuals(fit)
                fit <- lm(data=df,formula=model,weight=g(E))
            }
            
            fit$coefficients <- fit$coefficients*1e11
            f <- function(x){
                if(check_constraint(x[1],x[2],x[3],x[4],x[5])){
                    as.numeric(predict(fit,data.frame(elements_number=x[1], y_component_number=x[2], vector_length=x[3], threads_number=x[4], lws_y=x[5]),interval="none"))
                }
                else{
                    10000  
                }
            }

            g <- function(x){
                
            }

            optim(c(6,6,2,256,2),f,method="L-BFGS-B",lower=c(1,1,1,32,1),upper=c(24,6,16,1024,1024))
         #+end_src

         #+RESULTS:
         #+begin_example
         $par
         [1]    6    6    1 1024    1

         $value
         [1] 5.759064

         $counts
         function gradient 
               49       49 

         $convergence
         [1] 0

         $message
         [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
         #+end_example

        Let's see how the search space look like with constraint in 3D:
        #+begin_src R :results output :session :exports both
            f <- function(x) { x * (0.05 - 1 * (x < 0)) }
            g <- function(x) { f(x)/x^2 }
            h <- function(x) {pmin(g(x),1e15)}

          model <- time_per_pixel ~ elements_number + I(1/elements_number) + 
              y_component_number + I(1/y_component_number)
              # vector_length + 
              # threads_number + I(1/threads_number) + 
              # lws_y + 
              # elements_number:y_component_number +
              # threads_number:lws_y +
              # threads_number:elements_number

          fit <- lm(data=df,formula=model)
          for(i in 1:200){
              E <- residuals(fit)
              fit <- lm(data=df,formula=model,weight=g(E))
          }

        #+end_src

        #+RESULTS:

        #+begin_src R :results output graphics :file img/20160402/pilipili2/model_3D_elem_y_comp.png :exports both :width 600 :height 400 :session
          library(plot3D)
          f <- function(x){
              as.numeric(predict(fit,data.frame(elements_number=x[1], y_component_number=x[2]),interval="none"))
          }
          combinations <- matrix(NA,nrow=24*resi,ncol=6*resj)
          i2 <- 1
          for(i in 1:(24*resi)){
              j2 <- 1
              for(j in 1:(6*resj)){
                combinations[i2,j2] <- f(c(i,j))
                j2 <- j2 + 1
              }
              i2 <- i2 + 1
          }

          persp3D(x=1:(24*resi)/resi, y=1:(6*resj)/resj, xlab="elements_number", ylab="y_component_number", zlab="time per pixel in s", z=combinations, phi=20, theta=220, clab=c("time per pixel in s"), colkey = list(length = 0.5, width=0.4), border=NA, ticktype="detailed")
        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/model_3D_elem_y_comp.png]]

        #+begin_src R :results output graphics :file img/20160402/pilipili2/model_3D_elem_y_comp_constraint.png :exports both :width 800 :height 600 :session     
          g <- function(x){
              ifelse(x[1] <= x[2] * 4, f(x), NA)
          }

          # combinations <- matrix(NA,nrow=24,ncol=6)
          # for(i in 1:24){
          #     for(j in 1:6){
          #       combinations[i,j] <- g(c(i,j))
          #     }
          # }
          resi = 5
          resj = 5
          offi = 3
          offj = 3
          combinations <- matrix(NA,nrow=24*resi,ncol=6*resj)
          i2 <- 1
          for(i in 1:(24*resi)){
              j2 <- 1
              for(j in 1:(6*resj)){
                combinations[i2,j2] <- g(c((i+offi)/resi,(j+offj)/resj))
                j2 <- j2 + 1
              }
              i2 <- i2 + 1
          }

          persp3D(x=1:(24*resi)/resi, y=1:(6*resj)/resj, xlab="elements_number", ylab="y_component_number", zlab="time per pixel in s", z=combinations, phi=20, theta=220, clab=c("time per pixel in s"), colkey = list(side=1,length = 0.5, width=0.4))
        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/model_3D_elem_y_comp_constraint.png]]

        #+begin_src R :results output graphics :file img/20160402/pilipili2/model_3D_elem_y_comp_constraint_2.png :exports both :width 400 :height 400 :session     
                             g <- function(x){
                                 ifelse((x[1] <= x[2] * 4) & (x[1] %% x[2] == 0), f(x), NA)
                             }

                             resi = 1
                             resj = 1
                             offi = 1
                             offj = 1
                             x <- c()
                             y <- c()
                             z <- c()

                             count <- 1
                             for(i in 1:(24*resi)){
                                 for(j in 1:(6*resj)){
                                   x[count] <- i
                                   y[count] <- j
                                   z[count] <- g(c((i+offi)/resi,(j+offj)/resj))
                                   count <- count +1
                                 }
                             }

          combinations <- matrix(NA,nrow=24,ncol=6)
          for(i in 1:24){
              for(j in 1:6){
                  combinations[i,j] <- f(c(i,j))
              }
          }


                             # persp3D(x=1:(24*resi)/resi, y=1:(6*resj)/resj, xlab="elements_number", ylab="y_component_number", zlab="time per pixel in s", z=combinations, phi=20, theta=220, clab=c("time per pixel in s"), colkey = list(side=1,length = 0.5, width=0.4))
                             #scatter3D(x=x, y=y, xlab="elements_number", ylab="y_component_number", zlab="time per pixel in s", z=z, pch=20, 
                              #         phi=20, type="h", theta=220, clab=c("time per pixel in s"), colkey = list(side=1,length = 0.5, width=0.4))
          scatter3D(x, y, z, phi = 20, theta= 200, type = "h", surf = list(x=1:24,y=1:6,z=combinations,facet=NA),
                     ticktype = "detailed")

        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/model_3D_elem_y_comp_constraint_2.png]]

        #+begin_src R :results output graphics :file img/20160402/pilipili2/model_3D_elem_y_comp_barrier.png :exports both :width 600 :height 400 :session
          h <- function(x){
            # x <- c(x[1], )
            ifelse(x[1] <= x[2] * 4, f(x), (1 + .1*abs(x[1]-4*x[2]) ) * f(x))
          }

          combinations <- matrix(NA,nrow=24,ncol=6)
          for(i in 1:24){
              for(j in 1:6){
                combinations[i,j] <- h(c(i,j))
              }
          }


          persp3D(z=combinations, phi=20, theta=190)

        #+end_src

        #+RESULTS:
        [[file:img/20160402/pilipili2/model_3D_elem_y_comp_barrier.png]]
      
        #+begin_src R :results output :session :exports both
            f <- function(x) { x * (0.05 - 1 * (x < 0)) }
            g <- function(x) { f(x)/x^2 }
            h <- function(x) {pmin(g(x),1e15)}

          model <- time_per_pixel ~ # elements_number + I(1/elements_number) + 
              # y_component_number + I(1/y_component_number) +
              # vector_length + 
              threads_number + I(1/threads_number) + 
              lws_y + 
              # elements_number:y_component_number 
              threads_number:lws_y
              # threads_number:elements_number

          fit <- lm(data=df,formula=model)
          for(i in 1:200){
              E <- residuals(fit)
              fit <- lm(data=df,formula=model,weight=g(E))
          }        
          summary(fit)
        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm(formula = model, data = df, weights = g(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -1.354e-05  2.551e-06  4.462e-06  8.134e-06  4.617e-05 

        Coefficients:
                               Estimate Std. Error t value Pr(>|t|)    
        (Intercept)           1.113e-10  1.641e-12   67.84   <2e-16 ***
        threads_number       -8.332e-14  1.980e-15  -42.08   <2e-16 ***
        I(1/threads_number)   3.625e-09  9.300e-11   38.98   <2e-16 ***
        lws_y                 8.226e-12  3.023e-14  272.11   <2e-16 ***
        threads_number:lws_y -4.881e-15  2.953e-17 -165.29   <2e-16 ***
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 8.843e-06 on 23115 degrees of freedom
        Multiple R-squared:  0.9928,	Adjusted R-squared:  0.9928 
        F-statistic: 7.981e+05 on 4 and 23115 DF,  p-value: < 2.2e-16
#+end_example

        #+begin_src R :results output :session :exports both
          f <- function(x){
              as.numeric(predict(fit,data.frame(threads_number=x[1], lws_y=x[2]),interval="none"))
          }

          res <- 8
          combinations <- matrix(NA,nrow=(1024)/res,ncol=1024/res)

          i2 <- 1
          for(i in seq(1,1024,res)){
              j2 <- 1
              for(j in seq(1,1024,res)){
                combinations[i2,j2] <- f(c(i,j))
                j2 <- j2 + 1
              }
                i2 <- i2 + 1
          }
                  
        #+end_src

        #+RESULTS:

        #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
          library(plot3D)

          persp3D(z=combinations, phi=20, theta=110)   

        #+end_src

        #+RESULTS:
        [[file:/tmp/babel-7841klr/figure78417rU.png]]

        #+begin_src R :results output :session :exports both
            f <- function(x) { x * (0.05 - 1 * (x < 0)) }
            g <- function(x) { f(x)/x^2 }
            h <- function(x) {pmin(g(x),1e15)}

          model <- time_per_pixel ~ # elements_number + I(1/elements_number) + 
              # y_component_number + I(1/y_component_number) +
              vector_length + 
              threads_number + I(1/threads_number) + 
              #lws_y + 
              # elements_number:y_component_number 
              threads_number:vector_length
              # threads_number:elements_number

          fit <- lm(data=df,formula=model)
          for(i in 1:200){
              E <- residuals(fit)
              fit <- lm(data=df,formula=model,weight=g(E))
          }        
          summary(fit)
        #+end_src

        #+RESULTS:
        #+begin_example

        Call:
        lm(formula = model, data = df, weights = g(E))

        Weighted Residuals:
               Min         1Q     Median         3Q        Max 
        -9.388e-06  2.241e-06  4.537e-06  9.245e-06  4.688e-05 

        Coefficients:
                                      Estimate Std. Error t value Pr(>|t|)    
        (Intercept)                  7.267e-11  1.667e-12   43.60   <2e-16 ***
        vector_length                2.518e-11  2.184e-13  115.32   <2e-16 ***
        threads_number               3.026e-14  1.719e-15   17.60   <2e-16 ***
        I(1/threads_number)          1.800e-09  7.972e-11   22.57   <2e-16 ***
        vector_length:threads_number 4.195e-15  2.170e-16   19.33   <2e-16 ***
        ---
        Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

        Residual standard error: 9.472e-06 on 23115 degrees of freedom
        Multiple R-squared:  0.9863,	Adjusted R-squared:  0.9863 
        F-statistic: 4.175e+05 on 4 and 23115 DF,  p-value: < 2.2e-16
#+end_example

        #+begin_src R :results output :session :exports both
          f <- function(x){
              as.numeric(predict(fit,data.frame(threads_number=x[1], vector_length=x[2]),interval="none"))
          }

          res <- 8
          combinations <- matrix(NA,nrow=(1024)/res,ncol=16)

          i2 <- 1
          for(i in seq(1,1024,res)){
              j2 <- 1
              for(j in 1:16){
                combinations[i2,j2] <- f(c(i,j))
                j2 <- j2 + 1
              }
                i2 <- i2 + 1
          }
                  
        #+end_src

        #+RESULTS:

        #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
          library(plot3D)

          persp3D(z=combinations, phi=20, theta=110)   

        #+end_src

        #+RESULTS:
        [[file:/tmp/babel-7841klr/figure7841I2a.png]]

******* Playing with optim 
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
         p <- poly.calc(-1:5)
         func <- as.function(p)
         plot(func,0,5)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-5109ISg/figure5109lzc.png]]

       #+begin_src R :results output :session :exports both
         func2 <- function(x){
             func(x[1])
         }
         optim(c(3),func2,method="L-BFGS-B", lower=0,upper=5)
       #+end_src

       #+RESULTS:
       #+begin_example
       $par
       [1] 2.530655

       $value
       [1] -12.35878

       $counts
       function gradient 
              8        8 

       $convergence
       [1] 0

       $message
       [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
#+end_example

******* TODO Exhaustive search
        _Warning: in this part we use rq because I have some trouble_
        _using lm with the weights optiions multiple time._
******** Let's try with all the factors
         Here we try to use a complete model, based of the model that
          suit the best the full search space, in order to see if we
          can make good prediction in "one shot".

          Only 54% of speedup
          #+begin_src R :results output :session :exports both
            library(quantreg) 
            model <- formula(time_per_pixel ~ elements_number + I(1/elements_number) + 
               y_component_number + I(1/y_component_number) + 
               vector_length + 
               threads_number + I(1/threads_number) + 
               lws_y + I(1/lws_y) + 
               elements_number:y_component_number +
               threads_number:lws_y +
               threads_number:elements_number +
               load_overlap +
               temporary_size)

           fit1 <- rq(data=df,formula=model,tau=.05)

           f <- function(x){
               as.numeric(predict(fit1,data.frame(elements_number=x$elements_number, 
                                                 y_component_number=x$y_component_number, 
                                                 vector_length=x$vector_length, 
                                                 threads_number=x$threads_number,
                                                 load_overlap=x$load_overlap,
                                                 temporary_size=x$temporary_size, 
                                                 lws_y=x$lws_y,interval="none")))
           }

           best <- df[f(df[,c(1,2,3,4,6,7,8)]) == min(f(df[,c(1,2,3,4,6,7,8)])), c(1,2,3,4,6,7,8)][1,]
           sol <- df[df$elements_number == best$elements_number & df$y_component_number == best$y_component_number & df$vector_length == best$vector_length & df$threads_number == best$threads_number & df$lws_y == best$lws_y & df$temporary_size == best$temporary_size & df$load_overlap == best$load_overlap, ]           
           sol
           df[df$time_per_pixel == min(df$time_per_pixel),]   
           df[df$time_per_pixel == min(df$time_per_pixel),]$time_per_pixel / sol$time_per_pixel                       
          #+end_src

          #+RESULTS:
          :       elements_number y_component_number vector_length temporary_size
          : 14759              16                  4             1              4
          :       vector_recompute load_overlap threads_number lws_y time_per_pixel
          : 14759             true        false           1024     1   2.140347e-10
          :       elements_number y_component_number vector_length temporary_size
          : 13752               6                  6             1              2
          :       vector_recompute load_overlap threads_number lws_y time_per_pixel
          : 13752             true         true           1024     2   1.165013e-10
          : [1] 0.5443105

******** With only relevant factors
          #+begin_src sh :results output :exports both
           ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
          #+end_src

          #+RESULTS:

          #+begin_src R :results output :session :exports both
            df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          #+end_src

          #+RESULTS:

         #+begin_src R :results output :session :exports both
           library(quantreg)
           f <- function(x) { x * (0.05 - 1 * (x < 0)) }
           g <- function(x) { f(x)/x^2 }
           h <- function(x) {pmin(g(x),1e15)}

           iwr <- function(data,formula,iter=200){
             fit <- lm(data=data,formula=formula)
             for(i in 1:iter){              
               fit <- lm(data=data,formula=formula,weight=h(residuals(fit)))
             }
             return(fit)
           }

           model <- formula(time_per_pixel ~ elements_number + I(1/elements_number) + 
               y_component_number + I(1/y_component_number) + 
               vector_length + 
               threads_number + I(1/threads_number) + 
               lws_y + I(1/lws_y) + 
               elements_number:y_component_number +
               threads_number:lws_y +
               threads_number:elements_number)

           fit1 <- rq(data=df,formula=model,tau=.05)

           f <- function(x){
               as.numeric(predict(fit1,data.frame(elements_number=x$elements_number, 
                                                 y_component_number=x$y_component_number, 
                                                 vector_length=x$vector_length, 
                                                 threads_number=x$threads_number, 
                                                 lws_y=x$lws_y,interval="none")))
           }

           best <- df[f(df[,c(1,2,3,7,8)]) == min(f(df[,c(1,2,3,7,8)])), c(1,2,3,7,8)][1,]
           best
         #+end_src

         #+RESULTS:
         : Le chargement a nÃ©cessitÃ© le package : SparseM
         : 
         : Attachement du package : âSparseMâ
         : 
         : The following object is masked from âpackage:baseâ:
         : 
         :     backsolve
         :      elements_number y_component_number vector_length threads_number lws_y
         : 6467              16                  4             1           1024     1

         #+begin_src R :results output :session :exports both
           subset <- df[df$elements_number == best$elements_number & df$y_component_number == best$y_component_number & df$vector_length == best$vector_length & df$threads_number == best$threads_number & df$lws_y == best$lws_y, ]           
           model2 <- time_per_pixel ~ temporary_size + load_overlap

           fit2 <- rq(data=subset,formula=model2,tau=.05)

            # fit2 <- lm(data=subset,formula=model2)
            # for(i in 1:20){
            #     E <- residuals(fit2)
            #     fit2 <- lm(data=subset,formula=model2,weight=h(E))
            # }

           func <- function(x){
               as.numeric( predict(fit2,data.frame(temporary_size=x$temporary_size, 
                                                   load_overlap=x$load_overlap, interval="none")))
           }

           best2 <- subset[func(subset[,c(4,6)]) == min(func(subset[,c(4,6)])), c(4,6)][1,]
           best2
           #+end_src

         #+RESULTS:
         : Warning message:
         : In rq.fit.br(x, y, tau = tau, ...) : Solution may be nonunique
         :      temporary_size load_overlap
         : 9455              4         true

         Here we only get a speedup of 54% like previously without
         removing useless factors:
         #+begin_src R :results output :session :exports both
           sol <- df[df$elements_number == best$elements_number & df$y_component_number == best$y_component_number & df$vector_length == best$vector_length & df$threads_number == best$threads_number & df$lws_y == best$lws_y & df$temporary_size == best2$temporary_size & df$load_overlap == best2$load_overlap, ]           
           sol
           df[df$time_per_pixel == min(df$time_per_pixel),]   
           df[df$time_per_pixel == min(df$time_per_pixel),]$time_per_pixel / sol$time_per_pixel             
         #+end_src

         #+RESULTS:
         :      elements_number y_component_number vector_length temporary_size
         : 9455              16                  4             1              4
         :      vector_recompute load_overlap threads_number lws_y time_per_pixel
         : 9455             true         true           1024     1   2.137997e-10
         :       elements_number y_component_number vector_length temporary_size
         : 13752               6                  6             1              2
         :       vector_recompute load_overlap threads_number lws_y time_per_pixel
         : 13752             true         true           1024     2   1.165013e-10
         : [1] 0.5449087

********  Without elements number:
********* Manual
         #+begin_src R :results output :session :exports both
           df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         #+end_src

         #+RESULTS:

          #+begin_src R :results output :session :exports both
           f <- function(x) { x * (0.05 - 1 * (x < 0)) }
           g <- function(x) { f(x)/x^2 }
           h <- function(x) {pmin(g(x),1e15)}
          #+end_src

          #+RESULTS:

          Let's fix factors. I have a weird error when I rerun this a
          second time I got the following error.:
         #+begin_src R :results output :session :exports both
           model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
               vector_length + 
               threads_number + I(1/threads_number) + 
               lws_y + 
               threads_number:lws_y

           fit <- lm(data=df,formula=model)
           for(i in 1:200){
               E <- residuals(fit)
               fit <- lm(data=df,formula=model,weight=h(E))
           }

           f <- function(x){
                                                    as.numeric(predict(fit,data.frame(y_component_number = x$y_component_number, 
                                                                                      vector_length = x$vector_length, 
                                                                                      threads_number = x$threads_number, 
                                                                                      lws_y = x$lws_y),
                                                                                      interval="none"))

               # as.numeric(predict(fit,data.frame(y_component_number = x[,"y_component_number"], 
               #                                   vector_length = x[,"vector_length"], 
               #                                   threads_number = x[,"threads_number"], 
               #                                   lws_y = x[,"lws_y"]),
               #                                   interval="none"))
           }

           best <- df[f(df[,c(2,3,7,8)]) == min(f(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]
           best
         #+end_src

         #+RESULTS:
         :  Error in x[, "y_component_number"] (from #8) : nombre de dimensions incorrect
         :      y_component_number vector_length threads_number lws_y
         : 7136                  5             1            512     1

          #+begin_src R :results output :session :exports both
          
          #+end_src


          Now we know the values the factors let's fix elements number and make a
          regression on what remains:
          #+begin_src R :results output :session :exports both
            subset <- df[df$y_component_number == best$y_component_number & df$vector_length == best$vector_length & df$threads_number == best$threads_number & df$lws_y == best$lws_y, ]
            model <- time_per_pixel ~ elements_number + I(elements_number^2)

            fit <- lm(data=subset,formula=model)
            for(i in 1:100){
              E <- residuals(fit)
              fit <- lm(data=subset,formula=model,weights=h(E))
            }

            f <- function(x){
                as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
            }

            best <- subset[ f(subset$elements_number) == min(f(subset$elements_number)) , ][1,]
            best
          #+end_src

          #+RESULTS:
          :      elements_number y_component_number vector_length temporary_size
          : 7136               5                  5             1              4
          :      vector_recompute load_overlap threads_number lws_y time_per_pixel
          : 7136             true        false            512     1   1.265289e-10



          - Now we have to fix load overlap:
            #+begin_src R :results output :session :exports both
            subset <- subset[subset$elements_number == best$elements_number, ]
            model <- time_per_pixel ~ load_overlap

            fit <- lm(data=subset,formula=model)
            for(i in 1:100){
              E <- residuals(fit)
              fit <- lm(data=subset,formula=model,weights=h(E))
            }
            summary(fit)
            #+end_src

            #+RESULTS:
            #+begin_example
             Error in eval(expr, envir, enclos) (from #2) : objet 'load_overlap' introuvable

            Call:
            lm(formula = model, data = subset)

            Residuals:
                 14403      19156      19245      19807 
            -2.019e-12 -1.648e-12  2.019e-12  1.648e-12 

            Coefficients:
                              Estimate Std. Error t value Pr(>|t|)    
            (Intercept)      1.270e-10  1.842e-12  68.940  0.00021 ***
            load_overlaptrue 6.270e-13  2.606e-12   0.241  0.83225    
            ---
            Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

            Residual standard error: 2.606e-12 on 2 degrees of freedom
            Multiple R-squared:  0.02814,	Adjusted R-squared:  -0.4578 
            F-statistic: 0.05791 on 1 and 2 DF,  p-value: 0.8323
            #+end_example

            #+begin_src R :results output :session :exports both
            f <- function(x){
                as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
            }

            best <- data.frame(time_per_pixel=Inf)
            for(i in 1:nrow(subset)){
                if(f(subset[i,6]) < best$time_per_pixel){
                    best <- data.frame(elements_number=6, 
                                       y_component_number=6,
                                       vector_length=1, 
                                       threads_number=1024, 
                                       lws_y=1,
                                       load_overlap=subset[i,6],
                                       time_per_pixel=f(subset[i,6]))
                }
            } 
            best
            #+end_src

            #+RESULTS:
            :   elements_number y_component_number vector_length threads_number lws_y
            : 1               6                  6             1           1024     1
            :   load_overlap time_per_pixel
            : 1        false   1.270216e-10

          - And now temporary size
            #+begin_src R :results output :session :exports both
            subset <- df[df$elements_number == 6 & df$y_component_number == 6 & df$vector_length == 1 & df$threads_number == 1024 & df$lws_y == 1, ]
            model <- time_per_pixel ~ temporary_size

            fit <- lm(data=subset,formula=model)
            for(i in 1:100){
              E <- residuals(fit)
              fit <- lm(data=subset,formula=model,weights=h(E))
            }
            summary(fit)
            #+end_src

            #+RESULTS:
          #+begin_example
           Error in eval(expr, envir, enclos) (from #2) : objet 'temporary_size' introuvable

          Call:
          lm(formula = model, data = subset)

          Residuals:
               14403      19156      19245      19807 
          -1.520e-12 -2.147e-12  2.147e-12  1.520e-12 

          Coefficients:
                          Estimate Std. Error t value Pr(>|t|)   
          (Intercept)    1.268e-10  4.159e-12  30.486  0.00107 **
          temporary_size 1.855e-13  1.315e-12   0.141  0.90073   
          ---
          Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

          Residual standard error: 2.63e-12 on 2 degrees of freedom
          Multiple R-squared:  0.009855,	Adjusted R-squared:  -0.4852 
          F-statistic: 0.01991 on 1 and 2 DF,  p-value: 0.9007
         #+end_example
            He we need a higher bound other wise the regression is on
            the bad quantile:
            #+begin_src R :results output :session :exports both
            subset <- df[df$elements_number == 6 & df$y_component_number == 6 & df$vector_length == 1 & df$threads_number == 1024 & df$lws_y == 1, ]
            model <- time_per_pixel ~ temporary_size

            f <- function(x) { x * (0.05 - 1 * (x < 0)) }
            g <- function(x) { f(x)/x^2 }
            h <- function(x) {pmin(g(x),1e20)}

            fit <- lm(data=subset,formula=model)
            for(i in 1:200){
                E <- residuals(fit)
                fit <- lm(data=subset,formula=model,weights=h(E))
            }
            summary(fit)
            #+end_src

            #+RESULTS:
            #+begin_example

          Call:
          lm(formula = model, data = subset, weights = h(E))

          Weighted Residuals:
               14403      19156      19245      19807 
          -5.000e-12 -5.000e-12  4.633e-07  3.898e-07 

          Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
          (Intercept)     1.259e-10  9.574e-17 1314910 5.78e-13 ***
          temporary_size -1.280e-13  3.027e-17   -4227 5.60e-08 ***
          ---
          Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

          Residual standard error: 4.282e-07 on 2 degrees of freedom
          Multiple R-squared:      1,	Adjusted R-squared:      1 
          F-statistic: 1.787e+07 on 1 and 2 DF,  p-value: 5.596e-08
#+end_example

            #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
            plot(subset$temporary_size,subset$time_per_pixel)
            abline(fit,col=2)
          #+end_src

            #+RESULTS:
          [[file:/tmp/babel-3585yF_/figure3585wEC.png]]

            #+begin_src R :results output :session :exports both
              f <- function(x){
                  as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
              }

              best <- data.frame(time_per_pixel=Inf)
              for(i in 1:nrow(subset)){
                  if(f(subset[i,]$temporary_size) < best$time_per_pixel){
                      best <- data.frame(elements_number=6, 
                                         y_component_number=6,
                                         vector_length=1, 
                                         threads_number=1024, 
                                         lws_y=1,
                                         temporary_size=subset[i,]$temporary_size,
                                         time_per_pixel=f(subset[i,]$temporary_size))
                  }
              } 
              best
            #+end_src

            #+RESULTS:
            :   elements_number y_component_number vector_length threads_number lws_y
            : 1               6                  6             1           1024     1
            :   temporary_size time_per_pixel
            : 1              4    1.25374e-10
 
            Finally the best combination found is. We achieve 93% of
            the maximal speed. Our model is not perfect and fail to
            find the best value for lws_y:
            #+begin_src R :results output :session :exports both
              df[df$elements_number == 6 & df$y_component_number == 6 & df$vector_length == 1 & df$threads_number == 1024 & df$lws_y == 1 & df$load_overlap == "false" & df$temporary_size == 4, ]
              df[df$time_per_pixel == min(df$time_per_pixel),]

              df[df$time_per_pixel == min(df$time_per_pixel),]$time_per_pixel / df[df$elements_number == 6 & df$y_component_number == 6 & df$vector_length == 1 & df$threads_number == 1024 & df$lws_y == 1 & df$load_overlap == "false" & df$temporary_size == 4, ]$time_per_pixel
            #+end_src

            #+RESULTS:
            :       elements_number y_component_number vector_length temporary_size
            : 19156               6                  6             1              4
            :       vector_recompute load_overlap threads_number lws_y time_per_pixel
            : 19156             true        false           1024     1    1.25374e-10
            :       elements_number y_component_number vector_length temporary_size
            : 13752               6                  6             1              2
            :       vector_recompute load_overlap threads_number lws_y time_per_pixel
            : 13752             true         true           1024     2   1.165013e-10
            : [1] 0.9292303

            To have the best value for lws_y we need this kind of model:
            #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
              # subset <- df[df$elements_number == 6 & df$y_component_number == 6 & df$vector_length == 1 & df$threads_number == 1024,]
              model <- time_per_pixel ~ lws_y + I(1/lws_y)
              fit <- lm(data=df, formula= model )
              for(i in 1:200){
                E <- residuals(fit)
                fit <- lm(data=df, formula= model, weights=h(E) )
              }
              # library(quantreg)
              # fit <- rq(data=df, formula= time_per_pixel ~ lws_y + I(1/lws_y),tau=.05 )
              plot(df$lws_y,df$time_per_pixel, ylim=c(0,2e-10))
              lines(c(1,2,4,8,16,32,64,128,256,512,1024), predict(fit,data.frame( lws_y=c(1,2,4,8,16,32,64,128,256,512,1024)), interval="none"),col=2)      
            #+end_src

            #+RESULTS:
            [[file:/tmp/babel-3585yF_/figure3585m2c.png]]



********* Auto
          Automatization of the process.
********** Iterated version 
          #+begin_src R :results output :session :exports both
            df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          #+end_src

          #+RESULTS:


          #+begin_src R :results output :session :exports both
            f <- function(x) { x * (0.05 - 1 * (x < 0)) }
            g <- function(x) { f(x)/x^2 }
            h <- function(x) {pmin(g(x),1e15)}
            model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
                vector_length + 
                lws_y + I(1/lws_y) +
                threads_number + I(1/threads_number)

            fit <- lm(data=df,formula=model)
            for(i in 1:200){
                E <- residuals(fit)
                fit <- lm(data=df,formula=model,weight=h(E))
            }

            f <- function(x){
                as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                                  vector_length=x$vector_length, 
                                                  threads_number=x$threads_number,
                                                  lws_y=x$lws_y,
                                                  interval="none")))
            }

            best <- data.frame(time_per_pixel=Inf)
            for(i in 1:nrow(df)){
              if(f(df[i,c(2,3,7,8)]) < best$time_per_pixel){
                  best <- data.frame(y_component_number=df[i,c(2,3,7,8)]$y_component_number,
                                     vector_length=df[i,c(2,3,7,8)]$vector_length, 
                                     threads_number=df[i,c(2,3,7,8)]$threads_number, 
                                     lws_y=df[i,c(2,3,7,8)]$lws_y, 
                                     time_per_pixel=f(df[i,c(2,3,7,8)]))
              } 
            }
          #+end_src

          #+RESULTS:

          #+begin_src R :results output :session :exports both
            subset <- df[df$y_component_number == best$y_component_number & df$vector_length == best$vector_length & df$threads_number == best$threads_number, ]
            model <- time_per_pixel ~ lws_y + I(1/lws_y)

            fit <- lm(data=df,formula=model)
            for(i in 1:200){
                E <- residuals(fit)
                fit <- lm(data=df,formula=model,weight=h(E))
            }

            f <- function(x){
                as.numeric(predict(fit,data.frame(lws_y=x, interval="none")))
            }

            best <- data.frame(time_per_pixel=Inf)
            for(i in 1:nrow(df)){
              if(f(subset[i,]$lws_y) < best$time_per_pixel){
                  best <- data.frame(y_component_number=subset[i,]$y_component_number,
                                     vector_length=subset[i,]$vector_length, 
                                     threads_number=subset[i,]$threads_number, 
                                     lws_y=subset[i,]$lws_y,
                                     time_per_pixel=f(subset[i,]$lws_y))
              } 
            }

          #+end_src

          #+begin_src R :results output :session :exports both
            subset <- df[df$y_component_number == best$y_component_number & df$vector_length == best$vector_length & df$threads_number == best$threads_number & df$lws_y == best$lws_y, ]
            model <- time_per_pixel ~ elements_number + I(elements_number^2)

            h <- function(x) {pmin(g(x),1e10)}

            fit <- lm(data=subset,formula=model)
            for(i in 1:100){
              E <- residuals(fit)
              fit <- lm(data=subset,formula=model,weights=h(E))
            }

            f <- function(x){
                as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
            }

            best <- data.frame(time_per_pixel=Inf)
            for(i in 1:nrow(subset)){
                if(f(subset[i,]$elements_number) < best$time_per_pixel){
                    best <- data.frame(elements_number=subset[i,]$elements_number, 
                                       y_component_number=subset[i,]$y_component_number,
                                       vector_length=subset[i,]$vector_length, 
                                       threads_number=subset[i,]$threads_number, 
                                       lws_y=subset[i,]$lws_y,
                                       time_per_pixel=f(subset[i,]$elements_number))
                }
            } 
            #+end_src

          #+RESULTS:


            #+begin_src R :results output :session :exports both
            subset <- df[df$elements_number == best$elements_number  & df$y_component_number == best$elements_number & df$vector_length == best$vector_length & df$threads_number == best$threads_number & df$lws_y == df$lws_y, ]
            model <- time_per_pixel ~ as.numeric(load_overlap)

            h <- function(x) {pmin(g(x),1e5)}

            fit <- lm(data=subset,formula=model)
            for(i in 1:100){
              E <- residuals(fit)
              fit <- lm(data=subset,formula=model,weights=h(E))
            }
            
            f <- function(x){
                as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
            }

            best_lo <- data.frame(time_per_pixel=Inf)
            for(i in 1:nrow(subset)){
                if(f(subset[i,]$load_overlap) < best_lo$time_per_pixel){
                    best_lo <- data.frame(elements_number=subset[i,]$elements_number, 
                                       y_component_number=subset[i,]$y_component_number,
                                       vector_length=subset[i,]$vector_length, 
                                       threads_number=subset[i,]$threads_number, 
                                       lws_y=subset[i,]$lws_y,
                                       load_overlap=subset[i,]$load_overlap,
                                       time_per_pixel=f(subset[i,]$load_overlap))
                }
            } 
          #+end_src

            #+RESULTS:


          #+begin_src R :results output :session :exports both
            model <- time_per_pixel ~ temporary_size

            h <- function(x) {pmin(g(x),1e20)}

            fit <- lm(data=subset,formula=model)
            for(i in 1:200){
                E <- residuals(fit)
                fit <- lm(data=subset,formula=model,weights=h(E))
            } 

            f <- function(x){
                  as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
              }

              best_tmp <- data.frame(time_per_pixel=Inf)
              for(i in 1:nrow(subset)){
                  if(f(subset[i,]$temporary_size) < best_tmp$time_per_pixel){
                      best_tmp <- data.frame(elements_number=subset[i,]$elements_number, 
                                             y_component_number=subset[i,]$y_component_number,
                                             vector_length=subset[i,]$vector_length, 
                                             threads_number=subset[i,]$threads_number, 
                                             lws_y=subset[i,]$lws_y,
                                             temporary_size=subset[i,]$temporary_size,
                                             time_per_pixel=f(subset[i,]$temporary_size))
                  }
              } 

             best <- df[df$elements_number == best$elements_number  & df$y_component_number == best$elements_number & df$vector_length == best$vector_length & df$threads_number == best$threads_number & df$lws_y == df$lws_y & df$temporary_size == best_tmp$temporary_size & df$load_overlap == best_lo$load_overlap, ]
             df[df$time_per_pixel == min(df$time_per_pixel),]
             subset$time_per_pixel / best$time_per_pixel
          #+end_src

          #+RESULTS:
          #+begin_example
           Error in x$y_component_number (from #2) : $ operator is invalid for atomic vectors
           Error in eval(expr, envir, enclos) (from #2) : objet 'load_overlap' introuvable
           Error in eval(expr, envir, enclos) (from #2) : objet 'temporary_size' introuvable
                elements_number y_component_number vector_length temporary_size
          13752               6                  6             1              2
                vector_recompute load_overlap threads_number lws_y time_per_pixel
          13752             true         true           1024     2   1.165013e-10
           [1]  1.00000000  3.33137974  1.06262224  1.97206081  0.99593646  1.00550523
           [7] 16.10916575 31.18455689  1.88170330  0.28113301  0.03141699  0.06835585
          [13]  1.81163108  0.96482123  0.13410078  1.03153270  1.01698978  0.49854794
          [19]  7.40134273  7.11559130  4.16468229  0.03156525  0.07146158  3.29936289
          [25]  0.96943121  0.13236658  3.65292194  1.97872591  1.00244607  1.00000000
          [31]  7.22089093  2.11690507  0.03252928  0.07428958  0.96345376  1.05884580
          [37]  0.14594800  3.61119187  0.99615295  0.55061826 14.79409118 29.87727618
          [43]  0.30009774  1.00000000
#+end_example

********** Rq version 
*********** Independent elements number
          #+begin_src R :results output :session :exports both
            df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          #+end_src

          #+RESULTS:

           We obtain 92% of speedup:
          #+begin_src R :results output :session :exports both
            library(quantreg)

            model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
                                      vector_length + 
                                      lws_y + I(1/lws_y) +
                                      threads_number + I(1/threads_number)

            fit <- rq(data=df,formula=model,tau=.05)

            f <- function(x){
                as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                                  vector_length=x$vector_length, 
                                                  threads_number=x$threads_number,
                                                  lws_y=x$lws_y,
                                                  interval="none")))
            }

           best1 <- df[f(df[,c(2,3,7,8)]) == min(f(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]

            subset1 <- df[df$y_component_number == best1$y_component_number & df$vector_length == best1$vector_length & df$threads_number == best1$threads_number & df$lws_y == best1$lws_y, ]
            model <- time_per_pixel ~ elements_number + I(elements_number^2)

            h <- function(x) {pmin(g(x),1e10)}

            fit <- rq(data=subset1,formula=model,tau=.05)

            f <- function(x){
                as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
            }

            best2 <- subset1[f(subset1$elements_number) == min(f(subset1$elements_number)),][1,]$elements_number

            subset2 <- subset1[subset1$elements_number == best2  & subset1$y_component_number == best1$y_component_number & subset1$vector_length == best1$vector_length & subset1$threads_number == best1$threads_number, ]
            model <- time_per_pixel ~ load_overlap

            fit <- rq(data=subset,formula=model,tau=.05)
            
            f <- function(x){
                as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
            }

            best3 <- subset2[f(subset2$load_overlap) == min(f(subset2$load_overlap)),][1,]$load_overlap
            best3

            model <- time_per_pixel ~ temporary_size

            fit <- rq(data=subset,formula=model,tau=.05)

            f <- function(x){
                  as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
            }

            best4 <- subset2[f(subset2$temporary_size) == min(f(subset2$temporary_size)),][1,]$temporary_size
            best4

            sol <- subset2[subset2$load_overlap == best3 & subset2$temporary_size == best4,]
            sol
            df[df$time_per_pixel == min(df$time_per_pixel),]
            df[df$time_per_pixel == min(df$time_per_pixel),]$time_per_pixel / sol$time_per_pixel           
           #+end_src

           #+RESULTS:
           #+begin_example
           [1] true
           Levels: false true
           [1] 2
                 elements_number y_component_number vector_length temporary_size
           14403               6                  6             1              2
                 vector_recompute load_overlap threads_number lws_y time_per_pixel
           14403             true         true           1024     1     1.2563e-10
                 elements_number y_component_number vector_length temporary_size
           13752               6                  6             1              2
                 vector_recompute load_overlap threads_number lws_y time_per_pixel
           13752             true         true           1024     2   1.165013e-10
           [1] 0.9273371
           #+end_example

*********** Independent lws y + elements number
          #+begin_src R :results output :session :exports both
            df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
          #+end_src

          #+RESULTS:

          #+begin_src R :results output :session :exports both
            library(quantreg)

            model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
                vector_length + 
                lws_y + I(1/lws_y) +
                threads_number + I(1/threads_number)

            fit <- rq(data=df,formula=model,tau=.05)

            f <- function(x){
                as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                                  vector_length=x$vector_length, 
                                                  threads_number=x$threads_number,
                                                  lws_y=x$lws_y,
                                                  interval="none")))
            }

           best_base <- df[f(df[,c(2,3,7,8)]) == min(f(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]
           best_base
          #+end_src

          #+RESULTS:
          :      y_component_number vector_length threads_number lws_y
          : 7103                  6             1           1024     1

         #+begin_src R :results output :session :exports both
            subset1 <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
            model <- time_per_pixel ~ lws_y + I(1/lws_y)

            h <- function(x) {pmin(g(x),1e10)}

            fit <- rq(data=subset1,formula=model,tau=.05)

            f <- function(x){
                as.numeric(predict(fit,data.frame(lws_y=x, interval="none")))
            }

            best_lws_y <- subset1[f(subset1$lws_y) == min(f(subset1$lws_y)),][1,]$lws_y
            best_lws_y
          #+end_src

         #+RESULTS:
         : [1] 8

           #+begin_src R :results output graphics :file img/20160402/pilipili2/why_we_cant_get_better_lws_y.png :exports both :width 600 :height 400 :session
             plot(subset1$lws_y,subset1$time_per_pixel,xlim=c(1,50), ylim=c(0,2e-10))
             lines(seq(1,1024,0.1),f(seq(1,1024,0.1)),col="green")
             abline(min(df$time_per_pixel),0,col=2,lty=2)
           #+end_src

           #+RESULTS:
           [[file:img/20160402/pilipili2/why_we_cant_get_better_lws_y.png]]


          #+begin_src R :results output :session :exports both
            subset2 <- subset1[subset1$lws_y == best_lws_y, ]
            model <- time_per_pixel ~ elements_number + I(elements_number^2)

            h <- function(x) {pmin(g(x),1e10)}

            fit <- rq(data=subset1,formula=model,tau=.05)

            f <- function(x){
                as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
            }

            best_elements_number <- subset1[f(subset1$elements_number) == min(f(subset1$elements_number)),][1,]$elements_number
            best_elements_number
          #+end_src


          #+RESULTS:
          : [1] 6

          #+begin_src R :results output :session :exports both
            subset3 <- subset2[subset2$elements_number == best_elements_number, ]
            model <- time_per_pixel ~ load_overlap

            fit <- rq(data=subset,formula=model,tau=.05)
            
            f <- function(x){
                as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
            }

            best_load_overlap <- subset3[f(subset3$load_overlap) == min(f(subset3$load_overlap)),][1,]$load_overlap
            best_load_overlap
          #+end_src

          #+RESULTS:
          : [1] true
          : Levels: false true

          #+begin_src R :results output :session :exports both
            model <- time_per_pixel ~ temporary_size

            fit <- rq(data=subset3,formula=model,tau=.05)

            f <- function(x){
                  as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
            }

            best_temporary_size <- subset3[f(subset3$temporary_size) == min(f(subset3$temporary_size)),][1,]$temporary_size
            best_temporary_size

          #+end_src

          #+RESULTS:
          : [1] 2

           We obtain 98% of speedup, because we fail (to model) to
           predict the best value for lws y:
           #+begin_src R :results output :session :exports both
            sol <- subset3[subset3$load_overlap == best_load_overlap & subset3$temporary_size == best_temporary_size,]
            df[df$time_per_pixel == min(df$time_per_pixel),]
            df[df$time_per_pixel == min(df$time_per_pixel),]$time_per_pixel / sol$time_per_pixel           
           #+end_src

           #+RESULTS:
           :       elements_number y_component_number vector_length temporary_size
           : 13752               6                  6             1              2
           :       vector_recompute load_overlap threads_number lws_y time_per_pixel
           : 13752             true         true           1024     2   1.165013e-10
           : [1] 0.9853364

* Mai
** 2016-05-02
*** Device partitionning                                               :Ruby:
    Allow to choose a particular device.
    #+begin_src sh :results output :exports both
      gem update --user-install opencl_ruby_ffi
    #+end_src
    
    #+BEGIN_SRC ruby
      require "opencl_ruby_ffi"
      device = OpenCL::platforms[0].devices[0]
      subdevice = device.partition_by_names_ext([0,1])
      kernel.build(:CLDEVICE => subdevice)
    #+END_SRC
    
** 2016-05-04
*** TODO Compare rq et wq on simple example for CI 
    Trying to see if the std err, t-values and p-values using the
    iterated way are correct.

     #+begin_src R :results output :session :exports both
       f <- function(x) { x * (0.05 - 1 * (x < 0)) }
       g <- function(x) { f(x)/x^2 }
       wq <- function(data, formula) { 
           model <- lm(data=data,formula=formula)
           for(i in 1:200){
               residus <- residuals(model)
               model <- lm(data=data, formula=formula, weight=g(residus))
           }
           model
       }
       library(quantreg)
       data("engel")
       attach(engel)
     #+end_src

     #+RESULTS:

    We can see that we have totaly different values for std error and
    t value, but they seems to be link by maybe an order of
    magntitude. Maybe it is because of the weight: 
    #+begin_src R :results output :session :exports both
      model_rq <- rq(data=engel, formula=foodexp~income, tau=0.05)

      model_wq <- lm(data=engel,formula=foodexp~income)
      for(i in 1:200){
          E <- residuals(model_wq)
          model_wq <- lm(data=engel,formula=foodexp~income ,weight=g(E))
      }


      summary(model_rq,se="nid")
      summary(model_wq)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call: rq(formula = foodexp ~ income, tau = 0.05, data = engel)

    tau: [1] 0.05

    Coefficients:
                Value     Std. Error t value   Pr(>|t|) 
    (Intercept) 124.88004  35.06673    3.56121   0.00045
    income        0.34336   0.04994    6.87609   0.00000

    Call:
    lm(formula = foodexp ~ income, data = engel, weights = g(E))

    Weighted Residuals:
        Min      1Q  Median      3Q     Max 
    -11.417   1.865   2.710   3.339   6.850 

    Coefficients:
                 Estimate Std. Error t value Pr(>|t|)    
    (Intercept) 1.251e+02  3.176e-01   393.8   <2e-16 ***
    income      3.433e-01  6.407e-05  5358.7   <2e-16 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 3.055 on 233 degrees of freedom
    Multiple R-squared:      1,	Adjusted R-squared:      1 
    F-statistic: 2.872e+07 on 1 and 233 DF,  p-value: < 2.2e-16
   #+end_example

    With less iterations we have again different value for the std
    error and the t-value. I don't yet how to interpret this.
    #+begin_src R :results output :session :exports both
      model_wq <- lm(data=engel,formula=foodexp~income)
      for(i in 1:50){
          E <- residuals(model_wq)
          model_wq <- lm(data=engel,formula=foodexp~income ,weight=g(E))
      }


      summary(model_wq)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = foodexp ~ income, data = engel, weights = g(E))

    Weighted Residuals:
        Min      1Q  Median      3Q     Max 
    -11.415   1.866   2.711   3.340   6.851 

    Coefficients:
                 Estimate Std. Error t value Pr(>|t|)    
    (Intercept) 1.250e+02  1.103e+00   113.4   <2e-16 ***
    income      3.433e-01  2.328e-04  1475.0   <2e-16 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 3.055 on 233 degrees of freedom
    Multiple R-squared:  0.9999,	Adjusted R-squared:  0.9999 
    F-statistic: 2.176e+06 on 1 and 233 DF,  p-value: < 2.2e-16
#+end_example

    
    Lets check if we can observe the same thing on another set of
    data.
** 2016-05-06
*** Brute for on BEPO
**** Data
     - [[file:~/Dev/M2/M2_Internship/data/2016_04_25/bepo-HP-Z800-Workstation/17_01_58/Info17_01_58.org][Environment]]
     - [[file:../data/2016_04_25/bepo-HP-Z800-Workstation/17_01_58/Data17_01_58.yaml][Results]]
     - [[file:~/Dev/M2/M2_Internship/data/2016_04_25/bepo-HP-Z800-Workstation/17_01_58/Data17_01_58_parameters.yaml][Search space]]
**** TODO Warm up effect
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data_detailed_v2.rb ../data/2016_04_25/bepo-HP-Z800-Workstation/17_01_58/Data17_01_58.yaml
     #+end_src

     #+RESULTS:

     #+begin_src R :results output :session :exports both
       df = read.csv("/tmp/test.csv",strip.white=T,header=T)
       summary(df)
     #+end_src

     #+RESULTS:
     #+begin_example
      elements_number  y_component_number vector_length    temporary_size 
      Min.   : 1.000   Min.   :1.000      Min.   : 1.000   Min.   :2.000  
      1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.000   1st Qu.:2.000  
      Median : 6.000   Median :3.000      Median : 4.000   Median :2.000  
      Mean   : 8.602   Mean   :3.441      Mean   : 5.721   Mean   :2.974  
      3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.000   3rd Qu.:4.000  
      Max.   :24.000   Max.   :6.000      Max.   :16.000   Max.   :4.000  
      vector_recompute load_overlap   threads_number       lws_y        
      true:462000      false:227600   Min.   :  32.0   Min.   :   1.00  
                       true :234400   1st Qu.:  64.0   1st Qu.:   4.00  
                                      Median : 256.0   Median :  16.00  
                                      Mean   : 367.9   Mean   :  73.56  
                                      3rd Qu.: 512.0   3rd Qu.:  64.00  
                                      Max.   :1024.0   Max.   :1024.00  
      image_size_index   run_index    time_per_pixel     
      Min.   :0        Min.   :0.00   Min.   :8.077e-10  
      1st Qu.:1        1st Qu.:0.75   1st Qu.:3.190e-09  
      Median :2        Median :1.50   Median :5.021e-09  
      Mean   :2        Mean   :1.50   Mean   :5.863e-09  
      3rd Qu.:3        3rd Qu.:2.25   3rd Qu.:6.767e-09  
      Max.   :4        Max.   :3.00   Max.   :1.398e-07
#+end_example

   #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
       library(ggplot2)

       df = read.csv("/tmp/test.csv",strip.white=T,header=T)
       d <- df[df$vector_length == 1 & df$threads_number == 32 & df$lws_y == 2 & df$elements_number == 1,]
       ggplot(d,aes(x=factor(run_index), y=time_per_pixel, color=image_size_index)) +
           
           facet_grid(. ~ image_size_index) +
           geom_hline(yintercept=min(d$time_per_pixel), color="red", linetype=2) +
           geom_boxplot()
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-4778z0D/figure4778ebE.png]]
    
    From a more global view we still see the impact of the warm
    up:
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      library(plyr)
      d2 <- df[df$lws_y == 2 & df$elements_number == 1 & df$threads_number == 32,]

      df2 = ddply(d2,.(run_index,vector_length,image_size_index), summarize, 
                  mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))


      ggplot(d2) +
          geom_jitter(aes(x=factor(run_index), y=time_per_pixel, color=factor(load_overlap), shape=factor(temporary_size))) + 
          geom_errorbar(data=df2,aes(x=factor(run_index),y=mean, ymin=mean-err, ymax=mean+err)) +
          facet_grid(vector_length ~ image_size_index, scales="free_y", labeller=label_both) 
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-4778z0D/figure4778rlK.png]]

    Let's focus on the first image size and try to quantify this effect:
    #+begin_src R :results output :session :exports both
      library(plyr)
      d2 <- df[df$lws_y == 2 & df$elements_number == 1 & df$image_size_index == 0,]

      df2 = ddply(d2,.(run_index, vector_length, threads_number), summarize, 
                  mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

      ggplot(d2) +
          geom_jitter(aes(x=factor(run_index), y=time_per_pixel, color=factor(load_overlap), shape=factor(temporary_size))) + 
          geom_errorbar(data=df2,aes(x=factor(run_index),y=mean, ymin=mean-err, ymax=mean+err)) +
          facet_grid(vector_length ~ threads_number, scales="free_y", labeller=label_both) 
    #+end_src

    #+RESULTS:

    We can see that the majority speedup due to the warmup effect is
    almost insignificant:
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      # d2 <- df[df$lws_y == 2 & df$elements_number == 1 & df$image_size_index == 0,]
      d2 <- df[df$image_size_index == 0,]
      warmup <- c()
      for(row in 1:nrow(d2)){
            warmup[row] <- d2[row - (row-1) %% 4,]$time_per_pixel / d2[row,]$time_per_pixel
      }

      d2$warmup <- warmup

      ggplot(d2[d2$run_index > 0 ,]) +
          aes(x=factor(run_index), y=warmup) +
          ggtitle("Speed up brought by the warmup effect on the first tested size of images") +
          geom_boxplot()
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-4778z0D/figure47784vQ.png]]

**** TODO Study of the search space
     #+begin_src sh :results output :exports both
       ruby ../scripts/clean_data.rb ../data/2016_04_25/bepo-HP-Z800-Workstation/17_01_58/Data17_01_58.yaml
     #+end_src

     #+RESULTS:

      Generate csv:
      #+begin_src sh :results output :exports both
        ruby ../scripts/format_data.rb ../data/2016_04_25/bepo-HP-Z800-Workstation/17_01_58/Data17_01_58_cleaned.yaml
      #+end_src

      #+RESULTS:

      #+begin_src R :results output :session :exports both
        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        summary(df)
      #+end_src

      #+RESULTS:
      #+begin_example
       elements_number  y_component_number vector_length    temporary_size 
       Min.   : 1.000   Min.   :1.000      Min.   : 1.000   Min.   :2.000  
       1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.000   1st Qu.:2.000  
       Median : 6.000   Median :3.000      Median : 4.000   Median :2.000  
       Mean   : 8.602   Mean   :3.441      Mean   : 5.721   Mean   :2.974  
       3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.000   3rd Qu.:4.000  
       Max.   :24.000   Max.   :6.000      Max.   :16.000   Max.   :4.000  
       vector_recompute load_overlap  threads_number       lws_y        
       true:23100       false:11380   Min.   :  32.0   Min.   :   1.00  
                        true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                      Median : 256.0   Median :  16.00  
                                      Mean   : 367.9   Mean   :  73.56  
                                      3rd Qu.: 512.0   3rd Qu.:  64.00  
                                      Max.   :1024.0   Max.   :1024.00  
       time_per_pixel     
       Min.   :9.540e-10  
       1st Qu.:3.171e-09  
       Median :5.036e-09  
       Mean   :5.627e-09  
       3rd Qu.:6.499e-09  
       Max.   :4.356e-08
#+end_example


      #+begin_src R :results output graphics :file img/20160425/bepo-HP-Z800-Workstation/factor_impact_mean_p.png :exports both :width 800 :height 600 :session
        library(ggplot2)
        library(grid)
        library(gridExtra)
        library(plyr)

         elem_err = ddply(df,c("elements_number"), summarize,
                     mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

         y_err = ddply(df,c("y_component_number"), summarize,
                     mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

         vec_err = ddply(df,c("vector_length"), summarize,
                     mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

         t_err = ddply(df,c("threads_number"), summarize,
                     mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

         l_err = ddply(df,c("lws_y"), summarize,
                     mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

        p1 <- qplot(df$elements_number, df$time_per_pixel) + 
            # scale_y_log10() + 
            geom_point(alpha=0.1) + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=elem_err,aes(x=(elements_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of elements number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p2 <- qplot(df$y_component_number, df$time_per_pixel) + 
            # scale_y_log10() + 
            geom_point(alpha=0.1) + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=y_err,aes(x=(y_component_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of y components number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p3 <- qplot(df$vector_length, df$time_per_pixel) + 
            # scale_y_log10() + 
            geom_point(alpha=0.1) + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=vec_err,aes(x=(vector_length),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of of the vector length") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p4 <- qplot(df$threads_number, df$time_per_pixel) + 
            # scale_y_log10() + 
            geom_point(alpha=0.1) + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=t_err,aes(x=(threads_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of of the threads number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p5 <- qplot(df$lws_y, df$time_per_pixel) + 
            # scale_y_log10() + 
            geom_point() + 
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=l_err,aes(x=(lws_y),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of of the lws_y") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        grid.arrange(p1, p2, p3, p4, p5, ncol=3, top=textGrob("Impact of factors")) 

      #+end_src

      #+RESULTS:
      [[file:img/20160425/bepo-HP-Z800-Workstation/factor_impact_mean_p.png]]

      #+begin_src R :results output graphics :file img/20160425/bepo-HP-Z800-Workstation/factor_impact_mean__zoom_p.png :exports both :width 800 :height 600 :session
        library(ggplot2)
        library(grid)
        library(gridExtra)
        library(plyr)

        elem_err = ddply(df,c("elements_number"), summarize,
                         mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

        y_err = ddply(df,c("y_component_number"), summarize,
                      mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

        vec_err = ddply(df,c("vector_length"), summarize,
                        mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

        t_err = ddply(df,c("threads_number"), summarize,
                      mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

        l_err = ddply(df,c("lws_y"), summarize,
                      mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

        p1 <- qplot(df$elements_number, df$time_per_pixel) + 
                                                # scale_y_log10() + 
            geom_point(alpha=0.1) + 
            coord_cartesian(ylim=c(0,1.5e-8)) +
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=elem_err,aes(x=(elements_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of elements number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p2 <- qplot(df$y_component_number, df$time_per_pixel) + 
                                                # scale_y_log10() + 
            geom_point(alpha=0.1) + 
            coord_cartesian(ylim=c(0,1e-8)) +
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=y_err,aes(x=(y_component_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of y components number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p3 <- qplot(df$vector_length, df$time_per_pixel) + 
                                                # scale_y_log10() + 
            geom_point(alpha=0.1) + 
            coord_cartesian(ylim=c(0,1e-8)) +
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=vec_err,aes(x=(vector_length),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of of the vector length") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p4 <- qplot(df$threads_number, df$time_per_pixel) + 
                                                # scale_y_log10() + 
            geom_point(alpha=0.1) + 
            coord_cartesian(ylim=c(0,7e-9)) +
            geom_hline(yintercept=min(df$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=t_err,aes(x=(threads_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of of the threads number") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        p5 <- qplot(df$lws_y, df$time_per_pixel) + 
                                                # scale_y_log10() + 
            geom_point() + 
            coord_cartesian(ylim=c(0,1.5e-8)) +
            geom_hline(yintercept=min(df2$time_per_pixel), color="red", linetype=2) +
            geom_errorbar(data=l_err,aes(x=(lws_y),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
            ggtitle("Impact of of the lws_y") +
            theme(axis.text=element_text(size=12),
                  axis.title=element_text(size=14,face="bold"))

        grid.arrange(p1, p2, p3, p4, p5, ncol=3, top=textGrob("Impact of factors")) 

       #+end_src

      #+RESULTS:
            [[file:img/20160425/bepo-HP-Z800-Workstation/factor_impact_mean__zoom_p.png]]

 

      #+begin_src R :results output :session :exports both
        df[df$time_per_pixel==min(df$time_per_pixel),]
      #+end_src

      #+RESULTS:
            :      elements_number y_component_number vector_length temporary_size
            : 3655              24                  6             4              4
            :      vector_recompute load_overlap threads_number lws_y time_per_pixel
            : 3655             true         true            128     1    9.53979e-10
            
      #+begin_src R :results output graphics :file img/20160425/bepo-HP-Z800-Workstation/factor_impact_mean_reduce1_p.png :exports both :width 800 :height 600 :session
              df2 <- df[df$lws_y==1,]
              library(ggplot2)
              library(grid)
              library(gridExtra)
              library(plyr)

               elem_err = ddply(df2,c("elements_number"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

               y_err = ddply(df2,c("y_component_number"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

               vec_err = ddply(df2,c("vector_length"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

               t_err = ddply(df2,c("threads_number"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

               l_err = ddply(df2,c("lws_y"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

              p1 <- qplot(df2$elements_number, df2$time_per_pixel) + 
                  # scale_y_log10() + 
                  geom_point(alpha=0.1) + 
                  coord_cartesian(ylim=c(0,1.5e-8)) +
                  geom_hline(yintercept=min(df2$time_per_pixel), color="red", linetype=2) +
                  geom_errorbar(data=elem_err,aes(x=(elements_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
                  ggtitle("Impact of elements number") +
                  theme(axis.text=element_text(size=12),
                        axis.title=element_text(size=14,face="bold"))

              p2 <- qplot(df2$y_component_number, df2$time_per_pixel) + 
                  # scale_y_log10() + 
                  geom_point(alpha=0.1) + 
                  coord_cartesian(ylim=c(0,1e-8)) +
                  geom_hline(yintercept=min(df2$time_per_pixel), color="red", linetype=2) +
                  geom_errorbar(data=y_err,aes(x=(y_component_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
                  ggtitle("Impact of y components number") +
                  theme(axis.text=element_text(size=12),
                        axis.title=element_text(size=14,face="bold"))

              p3 <- qplot(df2$vector_length, df2$time_per_pixel) + 
                  # scale_y_log10() + 
                  geom_point(alpha=0.1) + 
                  coord_cartesian(ylim=c(0,1e-8)) +
                  geom_hline(yintercept=min(df2$time_per_pixel), color="red", linetype=2) +
                  geom_errorbar(data=vec_err,aes(x=(vector_length),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
                  ggtitle("Impact of of the vector length") +
                  theme(axis.text=element_text(size=12),
                        axis.title=element_text(size=14,face="bold"))

              p4 <- qplot(df2$threads_number, df2$time_per_pixel) + 
                  # scale_y_log10() + 
                  geom_point(alpha=0.1) + 
                  coord_cartesian(ylim=c(0,7e-9)) +
                  geom_hline(yintercept=min(df2$time_per_pixel), color="red", linetype=2) +
                  geom_errorbar(data=t_err,aes(x=(threads_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
                  ggtitle("Impact of of the threads number") +
                  theme(axis.text=element_text(size=12),
                        axis.title=element_text(size=14,face="bold"))

              grid.arrange(p1, p2, p3, p4, ncol=2, top=textGrob("Impact of factors")) 
            #+end_src

      #+RESULTS:
            [[file:img/20160425/bepo-HP-Z800-Workstation/factor_impact_mean_reduce1_p.png]]

      #+begin_src R :results output graphics :file img/20160425/bepo-HP-Z800-Workstation/factor_impact_mean_reduce2_p.png :exports both :width 800 :height 600 :session
              df3 <- df2[df2$y_component_number==6,]
              library(ggplot2)
              library(grid)
              library(gridExtra)
              library(plyr)

               elem_err = ddply(df3,c("elements_number"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

               y_err = ddply(df3,c("y_component_number"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

               vec_err = ddply(df3,c("vector_length"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

               t_err = ddply(df3,c("threads_number"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

               l_err = ddply(df3,c("lws_y"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

              p1 <- qplot(df3$elements_number, df3$time_per_pixel) + 
                  # scale_y_log10() + 
                  geom_point(alpha=0.1) + 
                  coord_cartesian(ylim=c(0,1.5e-8)) +
                  geom_hline(yintercept=min(df3$time_per_pixel), color="red", linetype=2) +
                  geom_errorbar(data=elem_err,aes(x=(elements_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
                  ggtitle("Impact of elements number") +
                  theme(axis.text=element_text(size=12),
                        axis.title=element_text(size=14,face="bold"))

              p3 <- qplot(df3$vector_length, df3$time_per_pixel) + 
                  # scale_y_log10() + 
                  geom_point(alpha=0.1) + 
                  coord_cartesian(ylim=c(0,1e-8)) +
                  geom_hline(yintercept=min(df3$time_per_pixel), color="red", linetype=2) +
                  geom_errorbar(data=vec_err,aes(x=(vector_length),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
                  ggtitle("Impact of of the vector length") +
                  theme(axis.text=element_text(size=12),
                        axis.title=element_text(size=14,face="bold"))

              p4 <- qplot(df3$threads_number, df3$time_per_pixel) + 
                  # scale_y_log10() + 
                  geom_point(alpha=0.1) + 
                  coord_cartesian(ylim=c(0,7e-9)) +
                  geom_hline(yintercept=min(df3$time_per_pixel), color="red", linetype=2) +
                  geom_errorbar(data=t_err,aes(x=(threads_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
                  ggtitle("Impact of of the threads number") +
                  theme(axis.text=element_text(size=12),
                        axis.title=element_text(size=14,face="bold"))

              grid.arrange(p1, p3, p4, ncol=2, top=textGrob("Impact of factors")) 
            #+end_src

      #+RESULTS:
            [[file:img/20160425/bepo-HP-Z800-Workstation/factor_impact_mean_reduce2_p.png]]

      #+begin_src R :results output graphics :file img/20160425/bepo-HP-Z800-Workstation/factor_impact_mean_reduce3_p.png :exports both :width 600 :height 400 :session
              df4 <- df3[df3$elements_number==24,]
              library(ggplot2)
              library(grid)
              library(gridExtra)
              library(plyr)

               elem_err = ddply(df4,c("elements_number"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

               y_err = ddply(df4,c("y_component_number"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

               vec_err = ddply(df4,c("vector_length"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

               t_err = ddply(df4,c("threads_number"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

               l_err = ddply(df4,c("lws_y"), summarize,
                           mean = mean(time_per_pixel), err = 2*sd(time_per_pixel)/sqrt(length(time_per_pixel)))

              p3 <- qplot(df4$vector_length, df4$time_per_pixel) + 
                  # scale_y_log10() + 
                  geom_point(alpha=0.1) + 
                  coord_cartesian(ylim=c(0,1e-8)) +
                  geom_hline(yintercept=min(df4$time_per_pixel), color="red", linetype=2) +
                  geom_errorbar(data=vec_err,aes(x=(vector_length),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
                  ggtitle("Impact of of the vector length") +
                  theme(axis.text=element_text(size=12),
                        axis.title=element_text(size=14,face="bold"))

              p4 <- qplot(df4$threads_number, df4$time_per_pixel) + 
                  # scale_y_log10() + 
                  geom_point(alpha=0.1) + 
                  coord_cartesian(ylim=c(0,7e-9)) +
                  geom_hline(yintercept=min(df4$time_per_pixel), color="red", linetype=2) +
                  geom_errorbar(data=t_err,aes(x=(threads_number),y=mean, ymin=mean-err, ymax=mean+err, color="red")) +
                  ggtitle("Impact of of the threads number") +
                  theme(axis.text=element_text(size=12),
                        axis.title=element_text(size=14,face="bold"))

              grid.arrange(p3, p4, ncol=2, top=textGrob("Impact of factors")) 
            #+end_src

      #+RESULTS:
            [[file:img/20160425/bepo-HP-Z800-Workstation/factor_impact_mean_reduce3_p.png]]

      #+begin_src R :results output graphics :file img/20160425/bepo-HP-Z800-Workstation/factor_impact_mean_reduce3_th_nb_distrib_h.png :exports both :width 600 :height 500 :session
              ggplot(df4) +
                  aes(x=time_per_pixel)+
                  facet_grid(threads_number~.) +
                  geom_histogram()

            #+end_src

      #+RESULTS:
            [[file:img/20160425/bepo-HP-Z800-Workstation/factor_impact_mean_reduce3_th_nb_distrib_h.png]]
** 2016-05-11
*** Summary.rq backsolve error   
   Not sure it helps but it is the most advanced reponse I found: 
   http://stackoverflow.com/questions/18754324/improving-a-badly-conditioned-matrix/19716062#19716062
   Posted on stackoverflow:
   http://stackoverflow.com/questions/37165467/backsolve-error-with-summary-rq-on-heteroscedastic-data

   #+begin_src R :results output :session :exports both
     df <- read.csv("https://raw.githubusercontent.com/swhatelse/rq_problem/master/data.csv")
     fit_log <- rq(data=df,formula=I(log(time_per_pixel))~vector_length,tau=.05,method="fn")
     fit <- rq(data=df,formula=time_per_pixel~vector_length,tau=.05,method="fn")
     summary(fit,se="nid")
     fit
     exp(fit_log$coefficients)
   #+end_src

   #+RESULTS:
   #+begin_example
   Error in base::backsolve(r, x, k = k, upper.tri = upper.tri, transpose = transpose,  : 
     matrice singuliÃ¨re dans 'backsolve'. Premier zÃ©ro sur la diagonale [1]
   De plus : Warning message:
   In summary.rq(fit, se = "nid") : 14688 non-positive fis
   Call:
   rq(formula = time_per_pixel ~ vector_length, tau = 0.05, data = df, 
       method = "fn")

   Coefficients:
     (Intercept) vector_length 
    5.493212e-11  2.338409e-11 

   Degrees of freedom: 23120 total; 23118 residual
     (Intercept) vector_length 
    1.274531e-10  1.093925e+00
#+end_example

** 2016-05-12
*** TODO Check how many points we lose with constraints.
*** TODO Optim and constraints
** 2016-05-20
*** TODO Converage comparison LHS vs Uniform vs DOpt
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
     #+end_src

     #+RESULTS:

     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
     #+end_src

     #+RESULTS:

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      random_set <- df[sample(1:nrow(df), size = 100, replace = FALSE),]
      plot(random_set[,c(1,2,3,4,5,6,7,8)])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-31440xR/figure3144DDW.png]]

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      plot(lhs_set[,c(1,2,3,4,5,6,7,8)])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-6925pmC/figure6925geU.png]]

    #+begin_src R :results output :session :exports both
      library(DoE.wrapper)
      Dopt_set <- Dopt.design( 100 , data=df, formula="~elements_number  + y_component_number  + vector_length  + threads_number + lws_y  + temporary_size + load_overlap" , nRepeat= 20 ,randomize= TRUE)
    #+end_src

    #+RESULTS:
    #+begin_example
    Le chargement a nÃ©cessitÃ© le package : FrF2
    Le chargement a nÃ©cessitÃ© le package : DoE.base
    Le chargement a nÃ©cessitÃ© le package : grid
    Le chargement a nÃ©cessitÃ© le package : conf.design

    Attachement du package : âDoE.baseâ

    The following objects are masked from âpackage:statsâ:

        aov, lm

    The following object is masked from âpackage:graphicsâ:

        plot.design

    The following object is masked from âpackage:baseâ:

        lengths

    Le chargement a nÃ©cessitÃ© le package : rsm
   #+end_example

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      plot(Dopt_set[,c(1,2,3,4,5,6,7,8)])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-31440xR/figure3144ckD.png]]

    Only extremal points are chosen. Maybe it is not enough to find
    all relevant factors 
    #+begin_src R :results output :session :exports both
      library(DoE.wrapper)
      Dopt_set <- Dopt.design( 100 , data=df, formula="~(elements_number  + y_component_number  + vector_length  + threads_number + lws_y  + temporary_size + load_overlap)^2" , nRepeat= 20 ,randomize= TRUE)
    #+end_src

    #+RESULTS:

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      plot(Dopt_set[,c(1,2,3,4,5,6,7,8)])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-31440xR/figure3144QNc.png]]


*** TODO Evaluation prediction with DoE
**** LM
***** Independent lws y + elements number
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
     #+end_src

     #+RESULTS:

     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
     #+end_src

     #+RESULTS:

      #+begin_src R :results output :session :exports both
        random_set <- df[sample(1:nrow(df), size = 100, replace = FALSE),]
        model <- time_per_pixel ~ elements_number + y_component_number + vector_length + lws_y + threads_number 
        fit <- lm(data=random_set,formula=model)
        summary(fit)
      #+end_src

      #+RESULTS:
      #+begin_example

      Call:
      lm(formula = model, data = random_set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -3.571e-09 -8.662e-10 -2.850e-10  2.750e-10  1.071e-08 

      Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
      (Intercept)         1.727e-09  5.949e-10   2.903 0.004601 ** 
      elements_number    -3.813e-11  4.815e-11  -0.792 0.430380    
      y_component_number -1.805e-10  1.630e-10  -1.107 0.270933    
      vector_length       1.796e-10  3.956e-11   4.541 1.66e-05 ***
      lws_y               8.541e-12  1.262e-12   6.768 1.11e-09 ***
      threads_number     -2.203e-12  6.121e-13  -3.599 0.000512 ***
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 1.986e-09 on 94 degrees of freedom
      Multiple R-squared:  0.4511,	Adjusted R-squared:  0.4219 
      F-statistic: 15.45 on 5 and 94 DF,  p-value: 4.51e-11
#+end_example
     
      In fact we cannot not consider that we found the value for a
      factor if there remain only onbe point. We need to add points in
      order to make the regression and predict the value:
      #+begin_src R :results output :session :exports both
        f <- function(x) { x * (0.05 - 1 * (x < 0)) }
        g <- function(x) { f(x)/x^2 }
        h <- function(x) {pmin(g(x),1e15)}
        set.seed(1) 
        runs = 100
        speedup <- c()
        for(i in 1:runs){
            random_set <- df[sample(1:nrow(df), size = 100, replace = FALSE),]
            model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
                                      vector_length + 
                                      lws_y + I(1/lws_y) +
                                      threads_number + I(1/threads_number)

            fit <- lm(data=random_set,formula=formula(model))

            f <- function(x){
                as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                                  vector_length=x$vector_length, 
                                                  threads_number=x$threads_number,
                                                  lws_y=x$lws_y,
                                                  interval="none")))
            }
            
            best_base <- df[f(df[,c(2,3,7,8)]) == min(f(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]

            subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
            pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]

            ###########################################

            if(nrow(subset) < 5 ){
              subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
            }

            model <- time_per_pixel ~ lws_y + I(1/lws_y)
            
            fit <- lm(data=subset,formula=model)

            f <- function(x){
                as.numeric(predict(fit,data.frame(lws_y=x, interval="none")))
            }

            best_lws_y <- pruned_full_space[f(pruned_full_space$lws_y) == min(f(pruned_full_space$lws_y)),][1,]$lws_y

            subset <- subset[subset$lws_y == best_lws_y, ]
            pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]

            ###########################################

            if(nrow(subset) < 5 ){
              subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
            }

            model <- time_per_pixel ~ elements_number + I(elements_number^2)

            fit <- lm(data=subset,formula=model)
            
            f <- function(x){
                as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
            }

            best_elements_number <- pruned_full_space[f(pruned_full_space$elements_number) == min(f(pruned_full_space$elements_number)),][1,]$elements_number

            subset <- subset[subset$elements_number == best_elements_number, ]
            pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]

            ###########################################

            if(nrow(subset) < 5 ){
              subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),])
            }

            model <- time_per_pixel ~ load_overlap

            fit <- lm(data=subset,formula=model)
              
            f <- function(x){
                as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
            }

            best_load_overlap <- pruned_full_space[f(pruned_full_space$load_overlap) == min(f(pruned_full_space$load_overlap)),][1,]$load_overlap
            best_load_overlap_time <- pruned_full_space[f(pruned_full_space$load_overlap) == min(f(pruned_full_space$load_overlap)),][1,]$time_per_pixel

            model <- time_per_pixel ~ temporary_size

            fit <- lm(data=subset,formula=model)
               
            f <- function(x){
                as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
            }

            best_temporary_size <- pruned_full_space[f(pruned_full_space$temporary_size) == min(f(pruned_full_space$temporary_size)),][1,]$temporary_size
            best_temporary_size_time <- pruned_full_space[f(pruned_full_space$temporary_size) == min(f(pruned_full_space$temporary_size)),][1,]$time_per_pixel

            subset <- df[df$y_component_number == best_base$y_component_number & 
                         df$vector_length == best_base$vector_length & 
                         df$threads_number == best_base$threads_number & 
                         df$lws_y == best_lws_y & 
                         df$elements_number == best_elements_number & 
                         df$load_overlap == best_load_overlap & 
                         df$temporary_size == best_temporary_size,]

            if(nrow(subset) < 1){
              if(best_temporary_size_time < best_load_overlap_time){
                subset <- df[df$y_component_number == best_base$y_component_number & 
                         df$vector_length == best_base$vector_length & 
                         df$threads_number == best_base$threads_number & 
                         df$lws_y == best_lws_y & 
                         df$elements_number == best_elements_number & 
                         df$temporary_size == best_temporary_size,]
              } else {
                subset <- df[df$y_component_number == best_base$y_component_number & 
                         df$vector_length == best_base$vector_length & 
                         df$threads_number == best_base$threads_number & 
                         df$lws_y == best_lws_y & 
                         df$elements_number == best_elements_number & 
                         df$load_overlap == best_load_overlap,]
              }

              if(nrow(subset > 1)){

              }
            }
                      
            speedup[i] <- df[df$time_per_pixel == min(df$time_per_pixel),]$time_per_pixel / subset$time_per_pixel 
        }
        speedup
     #+end_src

      #+RESULTS:
      #+begin_example
       There were 26 warnings (use warnings() to see them)
        [1] 0.98602132 0.85284079 0.97373239 0.83496678 0.85318472 0.99029946
        [7] 0.85318472 0.43600186 0.97373239 0.92624162 0.92620143 0.85318472
       [13] 0.78263413 0.97000948 0.97373239 0.72523279 0.72341870 0.97373239
       [19] 0.72341870 0.03114044 0.93206436 0.94002078 0.78263413 0.94002078
       [25] 0.98602132 0.69895845 0.87657460 0.71026608 0.93206436 0.91022588
       [31] 0.99029946 0.92069881 0.99029946 0.98602132 0.98602132 0.92620143
       [37] 0.85318472 0.99029946 0.99029946 0.72675304 0.85318472 0.98533641
       [43] 0.92620143 0.87355566 0.99029946 0.99029946 0.85284079 0.99029946
       [49] 0.85318472 0.98533641 0.91022588 0.87355566 0.99029946 0.98533641
       [55] 0.92624162 0.70557478 0.99029946 0.48803524 0.99029946 0.91022588
       [61] 0.85318472 0.87355566 0.92624162 0.91022588 0.48447204 0.48447204
       [67] 0.97373239 0.65518295 0.71026608 0.85318472 0.85318472 0.59609907
       [73] 0.83496678 0.72523279 0.85284079 0.78263413 0.85284079 0.99029946
       [79] 0.85318472 0.92620143 0.98533641 0.99029946 0.92624162 0.83496678
       [85] 0.98533641 0.85318472 0.98602132 0.85284079 0.95074160 0.47443897
       [91] 0.85318472 0.72523279 0.98533641 0.90553007 0.99029946 0.98533641
       [97] 0.72523279 1.00000000 0.97373239 0.91022588
#+end_example

      
      Results seems pretty good expect that we able to get very bad
      ones. How is it possible? Maybe because the point choosen are
      random are not correctly chosen...
      #+begin_src R :results output graphics :file img/20160402/pilipili2/lm_bench_random_100.png :exports both :width 600 :height 400 :session
        hist(speedup)
      #+end_src
      
      #+RESULTS:
      [[file:img/20160402/pilipili2/lm_bench_random_100.png]]

     
**** Quantile regression
***** Rq
****** Independent lws y + elements number
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
     #+end_src

     #+RESULTS:

     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
     #+end_src

     #+RESULTS:

      #+begin_src R :results output :session :exports both
        f <- function(x) { x * (0.05 - 1 * (x < 0)) }
        g <- function(x) { f(x)/x^2 }
        h <- function(x) {pmin(g(x),1e15)}
       
        library(quantreg)
        
        set.seed(1) 
        runs = 100
        speedup <- c()
        for(i in 1:runs){
            random_set <- df[sample(1:nrow(df), size = 20, replace = FALSE),]
            model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
                                      vector_length + 
                                      lws_y + I(1/lws_y) +
                                      threads_number + I(1/threads_number)
        
            fit <- rq(data=random_set,formula=formula(model),tau=.05)
        
            f <- function(x){
                as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                                  vector_length=x$vector_length, 
                                                  threads_number=x$threads_number,
                                                  lws_y=x$lws_y,
                                                  interval="none")))
            }
        
            best_base <- df[f(df[,c(2,3,7,8)]) == min(f(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]
        
            subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
            pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
        
            ###########################################
        
            if(nrow(subset) < 5 ){
              subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 20, replace = FALSE),])
            }
        
            model <- time_per_pixel ~ lws_y + I(1/lws_y)
            
            fit <- rq(data=subset,formula=model,tau=.05)
        
            f <- function(x){
                as.numeric(predict(fit,data.frame(lws_y=x, interval="none")))
            }
        
            best_lws_y <- pruned_full_space[f(pruned_full_space$lws_y) == min(f(pruned_full_space$lws_y)),][1,]$lws_y
        
            subset <- subset[subset$lws_y == best_lws_y, ]
            pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]
        
            ###########################################
        
            if(nrow(subset) < 5 ){
              subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),])
            }
        
            model <- time_per_pixel ~ elements_number + I(elements_number^2)
        
            fit <- rq(data=subset,formula=model,tau=.05)
            
            f <- function(x){
                as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
            }
        
            best_elements_number <- pruned_full_space[f(pruned_full_space$elements_number) == min(f(pruned_full_space$elements_number)),][1,]$elements_number
        
            subset <- subset[subset$elements_number == best_elements_number, ]
            pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]
        
            ###########################################
        
            if(nrow(subset) < 5 ){
              subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),])
            }
        
            model <- time_per_pixel ~ load_overlap
        
            fit <- rq(data=subset,formula=model,tau=.05)
              
            f <- function(x){
                as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
            }
        
            best_load_overlap <- pruned_full_space[f(pruned_full_space$load_overlap) == min(f(pruned_full_space$load_overlap)),][1,]$load_overlap
            best_load_overlap_time <- pruned_full_space[f(pruned_full_space$load_overlap) == min(f(pruned_full_space$load_overlap)),][1,]$time_per_pixel
        
            model <- time_per_pixel ~ temporary_size
        
            fit <- rq(data=subset,formula=model,tau=.05)
               
            f <- function(x){
                as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
            }
        
            best_temporary_size <- pruned_full_space[f(pruned_full_space$temporary_size) == min(f(pruned_full_space$temporary_size)),][1,]$temporary_size
            best_temporary_size_time <- pruned_full_space[f(pruned_full_space$temporary_size) == min(f(pruned_full_space$temporary_size)),][1,]$time_per_pixel
        
            subset <- df[df$y_component_number == best_base$y_component_number & 
                         df$vector_length == best_base$vector_length & 
                         df$threads_number == best_base$threads_number & 
                         df$lws_y == best_lws_y & 
                         df$elements_number == best_elements_number & 
                         df$load_overlap == best_load_overlap & 
                         df$temporary_size == best_temporary_size,]
        
            if(nrow(subset) < 1){
              if(best_temporary_size_time < best_load_overlap_time){
                subset <- df[df$y_component_number == best_base$y_component_number & 
                         df$vector_length == best_base$vector_length & 
                         df$threads_number == best_base$threads_number & 
                         df$lws_y == best_lws_y & 
                         df$elements_number == best_elements_number & 
                         df$temporary_size == best_temporary_size,]
              } else {
                subset <- df[df$y_component_number == best_base$y_component_number & 
                         df$vector_length == best_base$vector_length & 
                         df$threads_number == best_base$threads_number & 
                         df$lws_y == best_lws_y & 
                         df$elements_number == best_elements_number & 
                         df$load_overlap == best_load_overlap,]
              }
        
              if(nrow(subset > 1)){
        
              }
            }
                      
            speedup[i] <- df[df$time_per_pixel == min(df$time_per_pixel),]$time_per_pixel / subset$time_per_pixel 
        }
        speedup
     #+end_src

      #+RESULTS:
      :  Error in `contrasts<-`(`*tmp*`, value = contr.funs[1 + isOF[nn]]) (from #69) : 
      :   contrasts can be applied only to factors with 2 or more levels
      :  [1] 0.8528408 0.9277830 0.9902995 0.5116873 0.8531847 0.9902995 0.9944684
      :  [8] 0.9320644 0.2125867 0.9902995 0.9521134 0.9902995 0.7252328 0.9902995
      : [15] 0.8531847 0.9311948 0.9320644 0.8531847 0.7443620 0.9277830


       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
       hist(speedup)xs
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-319821o/figure3198ryg.png]]

       It seems that it comes from that value are "binned" lots of
     observation for a factor... let's try to "jitter" them. But it is
     not the cause.
     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
     df$elements_number <- df$elements_number + rnorm(nrow(df),sd=.2)
     plot(df$elements_number,df$time_per_pixel)
     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-319821o/figure3198eoa.png]]

     
     Let's try put the process in a function. Maybe we need some
     meta-programming here
     #+begin_src R :results output :session :exports both
       gen_reduce <- function(factors){
           assign("reduce", eval(substitute(function(dat,model,factors){
               fit <- rq(data=dat,formula=model,tau=.05)
       
               f <- function(x){
                   as.numeric(predict(fit,data.frame(
                                              for( i in 1:length(factors)){
                                                     factors[i] = x[,factors[i]], 
                                                     factors[3] = x[,threads_number],
                                                     factors[4] = x[,lws_y],
                                                     interval="none")))
               }
       
               best_base <- random_set[f(random_set[,factors) == min(f(random_set[,factors])), factors][1,]
       
               subset1 <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
           })), envir=parent.frame())
       }
     #+end_src
     
     Trying to generate data frame dynamically:
     #+begin_src R :results output :session :exports both
       # gen_df <- function(columns){
       #     assign("bidule", eval(substitute(function(){

       #         for( i in 1:length(factors)){
       #             factors[i] = x[,factors[i]], 
       #         }
       #     })), envir=parent.frame())
       # }
       a <- c('a','b','c')
       b <- seq(1,3)
       mapping <- paste(a, "=", b)
       mapping <- paste(mapping,collapse=",")
       # df <- data.frame()
       # for(i in 1:length(mapping)){
       #   df <- eval(parse(text="rbind(df, data.frame(mapping[i]))" ))
       # }
       # df
       df <- data.frame( eval("a[1] = b[1]") )

       df

     #+end_src

     #+RESULTS:
     :   eval..a.1....b.1...
     : 1         a[1] = b[1]

***** Iterated
****** Independent lws y + elements number
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
     #+end_src

     #+RESULTS:

     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
     #+end_src

     #+RESULTS:

      #+begin_src R :results output :session :exports both
        random_set <- df[sample(1:nrow(df), size = 100, replace = FALSE),]
        model <- time_per_pixel ~ elements_number + y_component_number + vector_length + lws_y + threads_number 
        fit <- lm(data=random_set,formula=model)
        summary(fit)
      #+end_src

      #+RESULTS:
      #+begin_example

      Call:
      lm(formula = model, data = random_set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -6.485e-09 -2.150e-09 -4.486e-10  1.239e-09  2.211e-08 

      Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
      (Intercept)        -9.860e-10  1.163e-09  -0.848 0.398736    
      elements_number    -3.453e-10  9.541e-11  -3.619 0.000478 ***
      y_component_number  1.143e-09  3.122e-10   3.662 0.000414 ***
      vector_length       3.465e-10  7.865e-11   4.406 2.79e-05 ***
      lws_y               1.267e-11  2.537e-12   4.994 2.72e-06 ***
      threads_number     -2.589e-12  1.292e-12  -2.004 0.047941 *  
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 4.127e-09 on 94 degrees of freedom
      Multiple R-squared:  0.3874,	Adjusted R-squared:  0.3548 
      F-statistic: 11.89 on 5 and 94 DF,  p-value: 6.332e-09
#+end_example

     
      In fact we cannot not consider that we found the value for a
      factor if there remain only onbe point. We need to add points in
      order to make the regression and predict the value:
      #+begin_src R :results output :session :exports both
        f <- function(x) { x * (0.05 - 1 * (x < 0)) }
        g <- function(x) { f(x)/x^2 }
        h <- function(x) {pmin(g(x),1e15)}
        set.seed(1) 
        runs = 100

        for(i in 1:runs){
            random_set <- df[sample(1:nrow(df), size = 105, replace = FALSE),]
            model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
                                      vector_length + 
                                      lws_y + I(1/lws_y) +
                                      threads_number + I(1/threads_number)
        
            fit <- lm(data=random_set,formula=formula(model), na.action="na.exclude")
            for(j in 1:50){
                E <- residuals(fit)
                fit <- lm(data=random_set,formula=formula(model),weights=h(E), na.action="na.exclude")
            }
        
            pred <- function(x){
                as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                                  vector_length=x$vector_length, 
                                                  threads_number=x$threads_number,
                                                  lws_y=x$lws_y,
                                                  interval="none")))
            }
        
            best_base <- df[pred(df[,c(2,3,7,8)]) == min(pred(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]
        
            subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
            pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
        
            ###########################################
        
            if(nrow(subset) < 5 ){
              subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
            }
        
            model <- time_per_pixel ~ lws_y + I(1/lws_y)
            
            fit <- lm(data=subset,formula=model, na.action="na.exclude")
            for(j in 1:100){
                E <- residuals(fit)
                fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
            }
        
        
            pred <- function(x){
                as.numeric(predict(fit,data.frame(lws_y=x, interval="none")))
            }
        
            best_lws_y <- pruned_full_space[pred(pruned_full_space$lws_y) == min(pred(pruned_full_space$lws_y)),][1,]$lws_y
        
            subset <- subset[subset$lws_y == best_lws_y, ]
            pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]
        
            ###########################################
        
            if(nrow(subset) < 5 ){
              subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
            }
        
            model <- time_per_pixel ~ elements_number + I(elements_number^2)
        
            fit <- lm(data=subset,formula=model, na.action="na.exclude")
            for(j in 1:100){
                E <- residuals(fit)
                fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
            }
        
            pred <- function(x){
                as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
            }
        
            best_elements_number <- pruned_full_space[pred(pruned_full_space$elements_number) == min(pred(pruned_full_space$elements_number)),][1,]$elements_number
        
            subset <- subset[subset$elements_number == best_elements_number, ]
            pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]
        
            ###########################################
        
            if(nrow(subset) < 5 ){
              subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),])
            }
        
            model <- time_per_pixel ~ load_overlap
        
            fit <- lm(data=subset,formula=model, na.action="na.exclude")
            for(j in 1:10){
                E <- residuals(fit)
                fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
            }
            
            pred <- function(x){
                as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
            }
        
            best_load_overlap <- pruned_full_space[pred(pruned_full_space$load_overlap) == min(pred(pruned_full_space$load_overlap)),][1,]$load_overlap
            best_load_overlap_time <- pruned_full_space[pred(pruned_full_space$load_overlap) == min(pred(pruned_full_space$load_overlap)),][1,]$time_per_pixel
        
            model <- time_per_pixel ~ temporary_size
        
            fit <- lm(data=subset,formula=model, na.action="na.exclude")
            for(j in 1:10){
                E <- residuals(fit)
                fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
            }
             
            pred <- function(x){
                as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
            }
        
            best_temporary_size <- pruned_full_space[pred(pruned_full_space$temporary_size) == min(pred(pruned_full_space$temporary_size)),][1,]$temporary_size
            best_temporary_size_time <- pruned_full_space[pred(pruned_full_space$temporary_size) == min(pred(pruned_full_space$temporary_size)),][1,]$time_per_pixel
        
            subset <- df[df$y_component_number == best_base$y_component_number & 
                         df$vector_length == best_base$vector_length & 
                         df$threads_number == best_base$threads_number & 
                         df$lws_y == best_lws_y & 
                         df$elements_number == best_elements_number & 
                         df$load_overlap == best_load_overlap & 
                         df$temporary_size == best_temporary_size,]
        
            if(nrow(subset) < 1){
              if(best_temporary_size_time < best_load_overlap_time){
                subset <- df[df$y_component_number == best_base$y_component_number & 
                         df$vector_length == best_base$vector_length & 
                         df$threads_number == best_base$threads_number & 
                         df$lws_y == best_lws_y & 
                         df$elements_number == best_elements_number & 
                         df$temporary_size == best_temporary_size,]
              } else {
                subset <- df[df$y_component_number == best_base$y_component_number & 
                         df$vector_length == best_base$vector_length & 
                         df$threads_number == best_base$threads_number & 
                         df$lws_y == best_lws_y & 
                         df$elements_number == best_elements_number & 
                         df$load_overlap == best_load_overlap,]
              }
        
              if(nrow(subset > 1)){
        
              }
            }
            
                  
            speedup[i] <- df[df$time_per_pixel == min(df$time_per_pixel),]$time_per_pixel / subset$time_per_pixel 
        }
        speedup
     #+end_src

      #+RESULTS:
      #+begin_example
       Warning messages:
      1: In predict.lm(fit, data.frame(elements_number = x, interval = "none")) :
        prediction from a rank-deficient fit may be misleading
      2: In predict.lm(fit, data.frame(elements_number = x, interval = "none")) :
        prediction from a rank-deficient fit may be misleading
      3: In predict.lm(fit, data.frame(elements_number = x, interval = "none")) :
        prediction from a rank-deficient fit may be misleading
      4: In predict.lm(fit, data.frame(elements_number = x, interval = "none")) :
        prediction from a rank-deficient fit may be misleading
       [1] 0.9902995 0.8349668 0.9055301 0.9521134 0.9320644 0.9902995 0.8531847
       [8] 0.9102259 0.9320644 0.9902995
#+end_example
      
*** TODO Combining Design of experiments
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
     #+end_src

     #+RESULTS:

     #+begin_src R :results output :session :exports both
       f <- function(x) { x * (0.05 - 1 * (x < 0)) }
       g <- function(x) { f(x)/x^2 }
       h <- function(x) {pmin(g(x),1e10)}
     #+end_src
    
     #+RESULTS:

     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       summary(df)
     #+end_src

     #+RESULTS:
     #+begin_example
      elements_number  y_component_number vector_length   temporary_size 
      Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
      1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
      Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
      Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
      3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
      Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
      vector_recompute load_overlap  threads_number       lws_y        
      true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                       true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                     Median : 256.0   Median :  16.00  
                                     Mean   : 368.1   Mean   :  73.58  
                                     3rd Qu.: 512.0   3rd Qu.:  64.00  
                                     Max.   :1024.0   Max.   :1024.00  
      time_per_pixel     
      Min.   :1.165e-10  
      1st Qu.:3.028e-10  
      Median :7.125e-10  
      Mean   :2.013e-09  
      3rd Qu.:2.001e-09  
      Max.   :4.452e-08
#+end_example

     In our case the random sample is the most suited as a starting
     point. Let's see how much points we need:
     #+begin_src R :results output :session :exports both
       library(quantreg)
       elements_number_val = as.numeric(levels(as.factor(df$elements_number)))
       y_component_number_val = as.numeric(levels(as.factor(df$y_component_number)))
       vector_length_val = as.numeric(levels(as.factor(df$vector_length)))
       threads_number_val = as.numeric(levels(as.factor(df$threads_number)))
       lws_y_val = as.numeric(levels(as.factor(df$lws_y)))

       sum_elem_nb_100 <- c(rep(0,length(elements_number_val)))                      
       sum_y_comp_100 <- c(rep(0,length(y_component_number_val)))                      
       sum_v_len_100 <- c(rep(0,length(vector_length_val)))                      
       sum_th_nb_100 <- c(rep(0,length(threads_number_val)))                      
       sum_lws_y_100 <- c(rep(0,length(lws_y_val))) 

       sum_elem_nb_50 <- c(rep(0,length(elements_number_val)))                      
       sum_y_comp_50 <- c(rep(0,length(y_component_number_val)))                      
       sum_v_len_50 <- c(rep(0,length(vector_length_val)))                      
       sum_th_nb_50 <- c(rep(0,length(threads_number_val)))                      
       sum_lws_y_50 <- c(rep(0,length(lws_y_val))) 

       form_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
       form_y_comp <- time_per_pixel ~ y_component_number + I(1/y_component_number)
       form_v_len <- time_per_pixel ~ vector_length 
       form_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
       form_lws_y <- time_per_pixel ~ lws_y

       model_elem_nb <- lm(data=df,formula=form_elem_nb)
       model_y_comp <- lm(data=df,formula=form_y_comp)
       model_v_len <- lm(data=df,formula=form_v_len)
       model_th_nb <- lm(data=df,formula=form_th_nb)
       model_lws_y <- lm(data=df,formula=form_lws_y)
       # for(i in 1:200){
       #     E <- residuals(model_elem_nb)
       #     model_elem_nb <- lm(data=df,formula=form_elem_nb,weight=h(E))

       #     E <- residuals(model_y_comp)
       #     model_y_comp <- lm(data=df,formula=form_y_comp,weight=h(E))

       #     E <- residuals(model_v_len)
       #     model_v_len <- lm(data=df,formula=form_v_len,weight=h(E))

       #     E <- residuals(model_th_nb)
       #     model_th_nb <- lm(data=df,formula=form_th_nb,weight=h(E))

       #     E <- residuals(model_lws_y)
       #     model_lws_y <- lm(data=df,formula=form_lws_y,weight=h(E))

       # }

       model_elem_nb <- rq(data=df,formula=form_elem_nb,tau=.05)
       model_y_comp <- rq(data=df,formula=form_y_comp,tau=.05)
       model_v_len <- rq(data=df,formula=form_v_len,tau=.05)
       model_th_nb <- rq(data=df,formula=form_th_nb,tau=.05)
       model_lws_y <- rq(data=df,formula=form_lws_y,tau=.05)


       runs = 30   

       for(j in 1:runs){
           random_set_100 <- df[sample(1:nrow(df), size = 100, replace = FALSE),]
           model_subset_100_elem_nb <- lm(data=random_set_100,formula=form_elem_nb)
           model_subset_100_y_comp <- lm(data=random_set_100,formula=form_y_comp)
           model_subset_100_v_len <- lm(data=random_set_100,formula=form_v_len)
           model_subset_100_th_nb <- lm(data=random_set_100,formula=form_th_nb)
           model_subset_100_lws_y <- lm(data=random_set_100,formula=form_lws_y)

           random_set_50 <- df[sample(1:nrow(df), size = 20, replace = FALSE),]
           model_subset_50_elem_nb <- lm(data=random_set_50,formula=form_elem_nb)
           model_subset_50_y_comp <- lm(data=random_set_50,formula=form_y_comp)
           model_subset_50_v_len <- lm(data=random_set_50,formula=form_v_len)
           model_subset_50_th_nb <- lm(data=random_set_50,formula=form_th_nb)
           model_subset_50_lws_y <- lm(data=random_set_50,formula=form_lws_y)

           # for(i in 1:200){
           #     E <- residuals(model_subset_100_elem_nb)
           #     model_subset_100_elem_nb <- lm(data=random_set_100,formula=form_elem_nb,weight=h(E))
           #     E <- residuals(model_subset_100_y_comp)
           #     model_subset_100_y_comp <- lm(data=random_set_100,formula=form_y_comp,weight=h(E))
           #     E <- residuals(model_subset_100_v_len)
           #     model_subset_100_v_len <- lm(data=random_set_100,formula=form_v_len,weight=h(E))
           #     E <- residuals(model_subset_100_th_nb)
           #     model_subset_100_th_nb <- lm(data=random_set_100,formula=form_th_nb,weight=h(E))
           #     E <- residuals(model_subset_100_lws_y)
           #     model_subset_100_lws_y <- lm(data=random_set_100,formula=form_lws_y,weight=h(E))
           # }

           model_subset_100_elem_nb <- rq(data=random_set_100,formula=form_elem_nb,tau=.05)
           model_subset_100_y_comp <- rq(data=random_set_100,formula=form_y_comp,tau=.05)
           model_subset_100_v_len <- rq(data=random_set_100,formula=form_v_len,tau=.05)
           model_subset_100_th_nb <- rq(data=random_set_100,formula=form_th_nb,tau=.05)
           model_subset_100_lws_y <- rq(data=random_set_100,formula=form_lws_y,tau=.05)

           sum_elem_nb_100 <- sum_elem_nb_100 + predict(model_subset_100_elem_nb,data.frame(elements_number=elements_number_val),interval="none")
           sum_y_comp_100 <- sum_y_comp_100 + predict(model_subset_100_y_comp,data.frame(y_component_number=y_component_number_val),interval="none")
           sum_v_len_100 <- sum_v_len_100 + predict(model_subset_100_v_len,data.frame(vector_length=vector_length_val),interval="none")
           sum_th_nb_100 <- sum_th_nb_100 + predict(model_subset_100_th_nb,data.frame(threads_number=threads_number_val),interval="none")
           sum_lws_y_100 <- sum_lws_y_100 + predict(model_subset_100_lws_y,data.frame(lws_y=lws_y_val),interval="none")

           for(i in 1:20){
               E <- residuals(model_subset_50_elem_nb)
               model_subset_50_elem_nb <- lm(data=random_set_50,formula=form_elem_nb,weight=h(E))
               E <- residuals(model_subset_50_y_comp)
               model_subset_50_y_comp <- lm(data=random_set_50,formula=form_y_comp,weight=h(E))
               E <- residuals(model_subset_50_v_len)
               model_subset_50_v_len <- lm(data=random_set_50,formula=form_v_len,weight=h(E))
               E <- residuals(model_subset_50_th_nb)
               model_subset_50_th_nb <- lm(data=random_set_50,formula=form_th_nb,weight=h(E))
               E <- residuals(model_subset_50_lws_y)
               model_subset_50_lws_y <- lm(data=random_set_50,formula=form_lws_y,weight=h(E))
           }

           # model_subset_50_elem_nb <- rq(data=random_set_50,formula=form_elem_nb,tau=.05)
           # model_subset_50_y_comp <- rq(data=random_set_50,formula=form_y_comp,tau=.05)
           # model_subset_50_v_len <- rq(data=random_set_50,formula=form_v_len,tau=.05)
           # model_subset_50_th_nb <- rq(data=random_set_50,formula=form_th_nb,tau=.05)
           # model_subset_50_lws_y <- rq(data=random_set_50,formula=form_lws_y,tau=.05)

           sum_elem_nb_50 <- sum_elem_nb_50 + predict(model_subset_50_elem_nb,data.frame(elements_number=elements_number_val),interval="none")
           sum_y_comp_50 <- sum_y_comp_50 + predict(model_subset_50_y_comp,data.frame(y_component_number=y_component_number_val),interval="none")
           sum_v_len_50 <- sum_v_len_50 + predict(model_subset_50_v_len,data.frame(vector_length=vector_length_val),interval="none")
           sum_th_nb_50 <- sum_th_nb_50 + predict(model_subset_50_th_nb,data.frame(threads_number=threads_number_val),interval="none")
           sum_lws_y_50 <- sum_lws_y_50 + predict(model_subset_50_lws_y,data.frame(lws_y=lws_y_val),interval="none")
       }

       avg_elem_nb_100 <- sum_elem_nb_100 / runs
       avg_y_comp_100 <- sum_y_comp_100 / runs 
       avg_v_len_100 <- sum_v_len_100 / runs 
       avg_th_nb_100 <- sum_th_nb_100 / runs 
       avg_lws_y_100 <- sum_lws_y_100 / runs 

       avg_elem_nb_50 <- sum_elem_nb_50 / runs
       avg_y_comp_50 <- sum_y_comp_50 / runs 
       avg_v_len_50 <- sum_v_len_50 / runs 
       avg_th_nb_50 <- sum_th_nb_50 / runs 
       avg_lws_y_50 <- sum_lws_y_50 / runs 
           
     #+end_src

     #+RESULTS:
     :  Warning message:
     : In rq.fit.br(x, y, tau = tau, ...) : Solution may be nonunique

     Maybe starting with 20 points at random seems to be a good start:
     #+begin_src R :results output graphics :file img/20160402/pilipili2/random_nb_points_comparison.png :exports both :width 800 :height 600 :session
       library(grid)
       library(gridExtra)
       library(ggplot2)

       p1 <- qplot() +
           coord_cartesian(ylim=c(0,2e-9)) +
           geom_point(aes(x=df$elements_number,y=df$time_per_pixel),alpha=0.05) +
           geom_line( aes(x=elements_number_val, y=predict(model_elem_nb,data.frame(elements_number=elements_number_val),interval="none")),color="red") +
           geom_line(aes(x=elements_number_val,y=avg_elem_nb_100),color="green") + 
           geom_line(aes(x=elements_number_val,y=avg_elem_nb_50), color="blue") 

       p2 <- qplot() +
           coord_cartesian(ylim=c(0,2e-9)) +  
           geom_point(aes(x=df$y_component_number,y=df$time_per_pixel),alpha=0.05) +
           geom_line( aes(x=y_component_number_val, y=predict(model_y_comp,data.frame(y_component_number=y_component_number_val),interval="none")),color="red") +
           geom_line(aes(x=y_component_number_val,y=avg_y_comp_100),color="green") + 
           geom_line(aes(x=y_component_number_val,y=avg_y_comp_50), color="blue") 

       p3 <- qplot() +
           coord_cartesian(ylim=c(0,2e-9)) +  
           geom_point(aes(x=df$vector_length,y=df$time_per_pixel),alpha=0.05) +
           geom_line( aes(x=vector_length_val, y=predict(model_v_len,data.frame(vector_length=vector_length_val),interval="none")),color="red") +
           geom_line(aes(x=vector_length_val,y=avg_v_len_100),color="green") + 
           geom_line(aes(x=vector_length_val,y=avg_v_len_50), color="blue") 

       p4 <- qplot() +
           coord_cartesian(ylim=c(0,2e-9)) +  
           geom_point(aes(x=df$threads_number,y=df$time_per_pixel),alpha=0.05) +
           geom_line( aes(x=threads_number_val, y=predict(model_th_nb,data.frame(threads_number=threads_number_val),interval="none")),color="red") +
           geom_line(aes(x=threads_number_val,y=avg_th_nb_100),color="green") + 
           geom_line(aes(x=threads_number_val,y=avg_th_nb_50), color="blue") 

       p5 <- qplot() +
           coord_cartesian(ylim=c(0,1e-8)) +  
           geom_point(aes(x=df$lws_y,y=df$time_per_pixel),alpha=0.05) +
           geom_line( aes(x=lws_y_val, y=predict(model_lws_y,data.frame(lws_y=lws_y_val),interval="none")),color="red") +
           geom_line(aes(x=lws_y_val,y=avg_lws_y_100),color="green") + 
           geom_line(aes(x=lws_y_val,y=avg_lws_y_50), color="blue") 


       grid.arrange(p1, p2, p3, p4, p5,  ncol=3, top=textGrob("Regression comparison")) 

     #+end_src

     #+RESULTS:
     [[file:img/20160402/pilipili2/random_nb_points_comparison.png]]

     Let's try it and find the relevant factors:
     #+begin_src R :results output :session :exports both
     set.seed(18)
     random_set <- df[sample(1:nrow(df), size = 20, replace = FALSE),]
     model <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y + temporary_size + load_overlap
     fit <- lm(data=random_set,formula=model)
     for( i in 1:100 ){
       E <- residuals(fit)
       fit <- lm(data=random_set,formula=model,weights=h(E)) 
     }
     summary(fit)
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = model, data = random_set, weights = h(E))

     Weighted Residuals:
            Min         1Q     Median         3Q        Max 
     -2.047e-06 -4.181e-07  2.798e-06  5.647e-06  1.154e-05 

     Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
     (Intercept)         1.160e-10  2.085e-10   0.556   0.5882    
     elements_number    -7.540e-11  3.471e-11  -2.172   0.0506 .  
     y_component_number  1.175e-10  6.949e-11   1.691   0.1165    
     vector_length       9.704e-11  7.527e-12  12.892 2.17e-08 ***
     threads_number     -1.710e-12  2.818e-13  -6.068 5.60e-05 ***
     lws_y               8.519e-12  4.738e-13  17.980 4.82e-10 ***
     temporary_size      4.850e-11  3.666e-11   1.323   0.2105    
     load_overlaptrue   -2.115e-11  6.742e-11  -0.314   0.7591    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 6.124e-06 on 12 degrees of freedom
     Multiple R-squared:  0.9949,	Adjusted R-squared:  0.992 
     F-statistic: 336.9 on 7 and 12 DF,  p-value: 8.298e-13
#+end_example

     Now let's remove useless factors and look for interactions. It
     seems that only the interaction between threads number and lws y
     is relevant. Maybe vector length can interact with threads number
     because bigger vectors means more ressource used by a threads and
     thus the number of the thread in the work group (have to check in
     full space). But There is not reason why vector length would
     interact with the lws y. 
     #+begin_src R :results output :session :exports both
     model <- time_per_pixel ~ (vector_length + threads_number + lws_y)^2
     fit <- lm(data=random_set,formula=model)
     for( i in 1:100 ){
       E <- residuals(fit)
       fit <- lm(data=random_set,formula=model,weights=h(E)) 
     }
     summary(fit)
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = model, data = random_set, weights = h(E))

     Weighted Residuals:
            Min         1Q     Median         3Q        Max 
     -4.243e-06 -5.800e-08  2.546e-06  4.979e-06  1.065e-05 

     Coefficients:
                                    Estimate Std. Error t value Pr(>|t|)    
     (Intercept)                  -6.473e-10  1.425e-10  -4.542 0.000553 ***
     vector_length                 1.437e-10  1.209e-11  11.889 2.34e-08 ***
     threads_number                1.042e-12  1.445e-13   7.216 6.78e-06 ***
     lws_y                         1.388e-11  1.091e-12  12.729 1.03e-08 ***
     vector_length:threads_number -2.057e-13  1.604e-14 -12.820 9.42e-09 ***
     vector_length:lws_y           4.831e-14  3.155e-13   0.153 0.880653    
     threads_number:lws_y         -7.063e-15  1.771e-15  -3.987 0.001549 ** 
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 5.517e-06 on 13 degrees of freedom
     Multiple R-squared:  0.9951,	Adjusted R-squared:  0.9928 
     F-statistic: 436.3 on 6 and 13 DF,  p-value: 3.233e-14
#+end_example

     Let's try our hypothesis. But here again we can not trust the
     standard error or the R^2:
     #+begin_src R :results output :session :exports both
     model <- time_per_pixel ~ vector_length + 
                               lws_y + I(1/lws_y) +
                               threads_number + I(1/threads_number) +
                               threads_number:vector_length +
                               threads_number:lws_y

     fit <- lm(data=random_set,formula=model)
     for( i in 1:100 ){
       E <- residuals(fit)
       fit <- lm(data=random_set,formula=model,weights=h(E)) 
     }
     summary(fit)
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = model, data = random_set, weights = h(E))

     Weighted Residuals:
            Min         1Q     Median         3Q        Max 
     -2.814e-06 -1.830e-07  1.647e-06  3.878e-06  9.721e-06 

     Coefficients:
                                    Estimate Std. Error t value Pr(>|t|)    
     (Intercept)                  -4.726e-10  9.981e-11  -4.735 0.000484 ***
     vector_length                 1.081e-10  6.508e-12  16.608 1.21e-09 ***
     lws_y                         1.177e-11  1.031e-12  11.418 8.40e-08 ***
     I(1/lws_y)                   -2.046e-10  1.021e-10  -2.004 0.068129 .  
     threads_number                1.013e-12  1.156e-13   8.764 1.46e-06 ***
     I(1/threads_number)           2.571e-08  3.414e-09   7.532 6.93e-06 ***
     vector_length:threads_number -1.523e-13  1.228e-14 -12.404 3.34e-08 ***
     lws_y:threads_number         -5.232e-15  9.366e-16  -5.586 0.000119 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 5.015e-06 on 12 degrees of freedom
     Multiple R-squared:  0.9966,	Adjusted R-squared:  0.9946 
     F-statistic: 498.1 on 7 and 12 DF,  p-value: 8.056e-14
#+end_example

     #+begin_src R :results output :session :exports both
     model_vector_length <- time_per_pixel ~ vector_length
     model_lws_y <- time_per_pixel ~ lws_y + I(1/lws_y)
     model_threads_number <- time_per_pixel ~ threads_number + I(1/threads_number)

     fit_vector_length <- lm(data=random_set,formula=model_vector_length)
     fit_lws_y <- lm(data=random_set,formula=model_lws_y)
     fit_threads_number <- lm(data=random_set,formula=model_threads_number)

     for( i in 1:100 ){
       E <- residuals(fit_vector_length)
       fit_vector_length <- lm(data=random_set,formula=model_vector_length,weights=h(E)) 

       E <- residuals(fit_lws_y)
       fit_lws_y <- lm(data=random_set,formula=model_lws_y,weights=h(E)) 

       E <- residuals(fit_threads_number)
       fit_threads_number <- lm(data=random_set,formula=model_threads_number,weights=h(E)) 
     }
     #+end_src

     #+RESULTS:

     Ok It seems that we are good for this factors:
     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 400 :session
       library(ggplot2)
       library(grid)
       library(gridExtra)

       p1 <- qplot() +
           coord_cartesian(ylim=c(0,2e-9), xlim=c(1,20)) +  
           geom_point(aes(x=df$lws_y,y=df$time_per_pixel),alpha=0.05) +
           geom_line( aes(x=seq(1,1024), y=predict(fit_lws_y,data.frame(lws_y=seq(1,1024)),interval="none")),color="red")

       p2 <- qplot() +
           coord_cartesian(ylim=c(0,2e-9)) +  
           geom_point(aes(x=df$vector_length,y=df$time_per_pixel),alpha=0.05) +
           geom_line( aes(x=seq(1,16), y=predict(fit_vector_length,data.frame(vector_length=seq(1,16)),interval="none")),color="red")

       p3 <- qplot() +
           coord_cartesian(ylim=c(0,1e-8)) +  
           geom_point(aes(x=df$threads_number,y=df$time_per_pixel),alpha=0.05) +
           geom_line( aes(x=seq(32,1024), y=predict(fit_threads_number,data.frame(threads_number=seq(32,1024)),interval="none")),color="red")

       grid.arrange(p1,p2,p3,  ncol=3, top=textGrob("")) 
     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-6925pmC/figure692554N.png]]

     Maybe we need more points::
     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 400 :session
       library(ggplot2)
       library(grid)
       library(gridExtra)

       p1 <- qplot() +
           # coord_cartesian(ylim=c(0,2e-9)) +  
           geom_point(aes(x=random_set$lws_y,y=random_set$time_per_pixel),alpha=1) +
           geom_line( aes(x=seq(1,1024), y=predict(fit_lws_y,data.frame(lws_y=seq(1,1024)),interval="none")),color="red")

       p2 <- qplot() +
           # coord_cartesian(ylim=c(0,2e-9)) +  
           geom_point(aes(x=random_set$vector_length,y=random_set$time_per_pixel),alpha=1) +
           geom_line( aes(x=seq(1,16), y=predict(fit_vector_length,data.frame(vector_length=seq(1,16)),interval="none")),color="red")

       p3 <- qplot() +
           # coord_cartesian(ylim=c(0,1e-8)) +  
           geom_point(aes(x=random_set$threads_number,y=random_set$time_per_pixel),alpha=1) +
           geom_line( aes(x=seq(32,1024), y=predict(fit_threads_number,data.frame(threads_number=seq(32,1024)),interval="none")),color="red")

       grid.arrange(p1,p2,p3,  ncol=3, top=textGrob("")) 
     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-6925pmC/figure6925GDU.png]]

     Too bad I cannot augment my random set. I should try with lhs instead:
     #+begin_src R :results output :session :exports both
       library(DoE.wrapper)

       augemented_random_set <- Dopt.augment(random_set, 10, formula=model, candidates=df)
     #+end_src

     #+RESULTS:
     : Error in Dopt.augment(random_set, 10, formula = model, candidates = df) : 
     :   design must be of class design

     Lets's fix those parameters, but we end up with an empty set:
     #+begin_src R :results output :session :exports both
       get_lws_y <- function(x){
                 as.numeric(predict(fit_lws_y,data.frame(lws_y=x,interval="none")))
       }

       get_vector_length <- function(x){
                 as.numeric(predict(fit_vector_length,data.frame(vector_length=x,interval="none")))
       }

       get_threads_number <- function(x){
                 as.numeric(predict(fit_threads_number,data.frame(threads_number=x,interval="none")))
       }

       best_lws_y <- df[get_lws_y(df$lws_y) == min(get_lws_y(df$lws_y)),]$lws_y[1]
       best_vector_length <- df[get_vector_length(df$vector_length) == min(get_vector_length(df$vector_length)),]$vector_length[1]
       best_threads_number <- df[get_threads_number(df$threads_number) == min(get_threads_number(df$threads_number)),]$threads_number[1]

       best_lws_y 
       best_vector_length
       best_threads_number

       pruned_random_set <- random_set[random_set$lws_y == best_lws_y & random_set$vector_length == best_vector_length & random_set$threads_number == best_threads_number,]
       pruned_random_set
     #+end_src

     #+RESULTS:
     : [1] 8
     : [1] 1
     : [1] 512
     : [1] elements_number    y_component_number vector_length      temporary_size    
     : [5] vector_recompute   load_overlap       threads_number     lws_y             
     : [9] time_per_pixel    
     : <0 lignes> (ou 'row.names' de longueur nulle)

     
    We need to had new points but before let's look at what looks like elements number and y component number:
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 400 :session
       library(ggplot2)
       library(grid)
       library(gridExtra)

       p1 <- qplot() +
           # coord_cartesian(ylim=c(0,2e-9)) +  
           geom_point(aes(x=random_set$elements_number,y=random_set$time_per_pixel),alpha=1)

       p2 <- qplot() +
           # coord_cartesian(ylim=c(0,2e-9)) +  
           geom_point(aes(x=random_set$y_component_number,y=random_set$time_per_pixel),alpha=1)

       grid.arrange(p1,p2, ncol=2, top=textGrob("")) 
     #+end_src

    #+RESULTS:
    [[file:/tmp/babel-6925pmC/figure6925TGm.png]]

   We can guess a slight asymptotic shape for the elements number and
   maybe the same for y component number this would validate our hypothesis.
    #+begin_src R :results output :session :exports both
    library(DoE.wrapper)

    
    
    #+end_src

** 2016-05-23
*** TODO Plot error / prediction to see if we can use it to check model
     #+begin_src sh :results output :exports both
       ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
     #+end_src

     #+RESULTS:

     #+begin_src R :results output :session :exports both
       f <- function(x) { x * (0.05 - 1 * (x < 0)) }
       g <- function(x) { f(x)/x^2 }
       h <- function(x) {pmin(g(x),1e10)}
     #+end_src
    
     #+RESULTS:

     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       summary(df)
     #+end_src

     #+RESULTS:
     #+begin_example
      elements_number  y_component_number vector_length   temporary_size 
      Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
      1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
      Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
      Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
      3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
      Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
      vector_recompute load_overlap  threads_number       lws_y        
      true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                       true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                     Median : 256.0   Median :  16.00  
                                     Mean   : 368.1   Mean   :  73.58  
                                     3rd Qu.: 512.0   3rd Qu.:  64.00  
                                     Max.   :1024.0   Max.   :1024.00  
      time_per_pixel     
      Min.   :1.165e-10  
      1st Qu.:3.028e-10  
      Median :7.125e-10  
      Mean   :2.013e-09  
      3rd Qu.:2.001e-09  
      Max.   :4.452e-08
#+end_example

    #+begin_src R :results output :session :exports both
      form_complete <- time_per_pixel ~ elements_number + I(1/elements_number) + 
          I(1/y_component_number) + 
          vector_length + 
          threads_number + I(1/threads_number) + 
          lws_y + 
          elements_number:y_component_number +
          threads_number:lws_y +
          threads_number:elements_number

      model_complete <- lm(data=df,formula=form_complete)
      for(i in 1:200){
          E <- residuals(model_complete)
          model_complete <- lm(data=df,formula=form_complete,weight=g(E))
      }
      summary(model_complete)
    #+end_src

    #+RESULTS:

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      default <- par()
      par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
      plot(model_complete)
      par(default)    
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-4163dFq/figure4163XkA.png]]

    #+begin_src R :results output :session :exports both
      form_complete <- time_per_pixel ~ elements_number +
          y_component_number + 
          vector_length + 
          threads_number +
          lws_y + 
          elements_number:y_component_number 

      model_complete <- lm(data=df,formula=form_complete)
      for(i in 1:200){
          E <- residuals(model_complete)
          model_complete <- lm(data=df,formula=form_complete,weight=g(E))
      }
    #+end_src

    #+RESULTS:

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      default <- par()
      par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
      plot(model_complete)
      par(default)    
    #+end_src
 
   #+RESULTS:
    [[file:/tmp/babel-4163dFq/figure4163x4M.png]]

    
   #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
     plot(fitted(model_complete),residuals(model_complete)) # ylim=(c(-0.5e-9,1e-9))
     abline(0,0,lty=2)
   #+end_src

   #+RESULTS:
   [[file:/tmp/babel-4163dFq/figure4163Zfa.png]]

   #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
     plot(fitted(model_complete),fitted(model_complete) + residuals(model_complete), ylim=c(-0.5e-9,1e-9))
     abline(0,0,lty=2)
   #+end_src

   #+RESULTS:
   [[file:/tmp/babel-4163dFq/figure4163_KO.png]]

** 2016-05-26
*** TODO Function error object not found 
    #+begin_src sh :results output :exports both
          ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
    #+end_src

    #+RESULTS:

    #+begin_src R :results output :session :exports both
      df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
    #+end_src

    #+RESULTS:

    #+begin_src R :results output :session :exports both
      f <- function(x) { x * (0.05 - 1 * (x < 0)) }
      g <- function(x) { f(x)/x^2 }
      h <- function(x) {pmin(g(x),1e10)}

      iwr <- function(d, form) {
          form <- formula(form, env=.env) 
          fit <- lm(data=d,formula=form)
          for(i in 1:50){
              print(exists("fit"))
              residus <- residuals(fit)
              print(exists("residus"))
              fit <- lm( data=d, formula=form, weight=h(residus) )
              # fit <- lm( data=d, formula=form, weight=h(residuals(fit)) )
          }              
          print(exists("fit"))
          print(exists("residuals"))
          return(fit)
      }
      fit <- iwr(df,formula(time_per_pixel ~ elements_number))
      summary(fit)
    #+end_src

    #+RESULTS:
    #+begin_example
    [1] TRUE
    [1] TRUE
    Error in f(x) (from #1) : objet 'residus' introuvable

    Call:
    lm(formula = model, data = subset, weights = h(E))

    Residuals:
           Min         1Q     Median         3Q        Max 
    -8.823e-07 -5.479e-07 -2.599e-08  5.724e-07  1.067e-06 

    Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
    (Intercept)           6.505e-11  9.656e-12   6.737 1.39e-05 ***
    elements_number       1.318e-11  1.762e-12   7.481 4.63e-06 ***
    I(elements_number^2) -3.902e-13  6.937e-14  -5.626 8.26e-05 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 6.937e-07 on 13 degrees of freedom
    Multiple R-squared:  0.9219,	Adjusted R-squared:  0.9098 
    F-statistic: 76.68 on 2 and 13 DF,  p-value: 6.367e-08
#+end_example

** 2016-05-30
*** DONE LHS search  
** 2016-05-31
*** Change display width of R                                             :R:
   #+begin_src R :results output :session :exports both
     options(width=150)
   #+end_src
*** Take a look at: 
    - Analyse en composent principale / independent
    - Weka

* June
** 2016-06-01
*** DONE Preparing report experiment
**** Comparison
***** Run
****** Genetic Algo
******* Old                                                      :deprecated:
       #+begin_src sh :results output :exports none
         ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
       #+end_src

       #+RESULTS:

       # Load the full space first
       #+begin_src R :results output :session :exports none
         df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
       #+end_src

       #+RESULTS:

      #+begin_src sh :results output :exports none
        INPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"
        PARAM="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_parameters_v2.yaml"
        OUTPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_1000_g5_p20_m01_e1_tt.yaml"
        for i in `seq 1 1000`; do
            ruby ../boast/optimizer_benchmarks/bench_optimizer.rb $PARAM $INPUT -r $OUTPUT --generations_limit 5 --population_size 20 --mutation_rate 0.1 --elitism 1 --twin_removal true > /dev/null
        done
      #+end_src

      #+begin_src sh :results output :exports none
        ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_100_g5_p20_m01_e1_tt.yaml
      #+end_src
      
      #+RESULTS:

      #+begin_src R :results output :session :exports both
        df_gen <- read.csv("/tmp/test.csv", strip.white=T, header=T)
        df_gen <- cbind(df_gen, point_number=rep(120,100), method=rep("GA",nrow(df_gen)))
        write.csv(df_gen, "../data/2016_04_08/pilipili2/18_08_24/ga_search.csv", row.names=FALSE)
      #+end_src

      #+RESULTS:
 
******* New                                                          :Script:
       #+begin_src sh :results output :exports none
         ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
       #+end_src

       #+RESULTS:

       # Load the full space first
       #+begin_src R :results output :session :exports none
         df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
       #+end_src

       #+RESULTS:

      #+begin_src sh :results output :exports none
        INPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"
        PARAM="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_parameters_v2.yaml"
        OUTPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_1000_g5_p20_m01_e1_tt_200.yaml"
        ruby ../boast/optimizer_benchmarks/bench_gen.rb $PARAM $INPUT -r $OUTPUT --generations_limit 5 --population_size 20 --mutation_rate 0.1 --elitism 1 --twin_removal true
      #+end_src

      #+RESULTS:

      #+begin_src sh :results output :exports none
        ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_1000_g5_p20_m01_e1_tt_200.yaml
      #+end_src
      
      #+RESULTS:

      #+begin_src R :results output :session :exports both
        df_gen <- read.csv("/tmp/test.csv", strip.white=T, header=T)
        df_gen <- cbind(df_gen, point_number=rep(120,nrow(df_gen)), method=rep("GA",nrow(df_gen)))
        write.csv(df_gen, "../data/2016_04_08/pilipili2/18_08_24/ga_search_1000.csv", row.names=FALSE)
      #+end_src

      #+RESULTS:

****** Random                                                        :Script:
      Formating the full search space to csv:
      #+begin_src sh :results output :exports none
        ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
      #+end_src

      #+RESULTS:

      #+begin_src R :results output :session :exports none :tangle ../scripts/rs_bench.R
        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        df_uniform <- data.frame()
        for (i in 1:1000){
            s <- df[sample(1:nrow(df), size = 120, replace = FALSE),]
            df_uniform <- rbind(df_uniform, s[s$time_per_pixel==min(s$time_per_pixel) ,])
        }

        df_uniform <- cbind(df_uniform, point_number=rep(120,nrow(df_uniform)), method=rep("RS",nrow(df_uniform)))
        write.csv(df_uniform, "../data/2016_04_08/pilipili2/18_08_24/uniform_search_1000.csv", row.names=FALSE)
      #+end_src

      #+RESULTS:

****** Greedy search                                                 :Script:
******* Implementation
        #+begin_src R :results output :session :exports both                  
          kernel_size <- function(point) {
              vector_number <- ceiling((point$elements_number / point$y_component_number) / point$vector_length)
              
              tempload <- (1 - point$load_overlap) * (vector_number * point$vector_length) / point$vector_length * point$vector_length
              temp <-  point$load_overlap * 3 * vector_number * (point$y_component_number+2) * point$vector_length
              res <- vector_number * point$y_component_number * point$vector_length
              tempc <- 3 * vector_number * (point$y_component_number + 2) * point$temporary_size * point$vector_length
              out_vec = (1 - point$load_overlap) * tempc
              resc <- vector_number * point$y_component_number * point$temporary_size * point$vector_length
              
              tot <- (tempload + temp + res + tempc + out_vec + resc) * point$threads_number
          }

          check_constraint <- function(point){
              res <- if(point$load_overlap %in% 0:1 &
                        point$lws_y <= point$threads_number &
                        point$elements_number %% point$y_component_number == 0 &
                        point$elements_number %/% point$y_component_number <= 4 &
                        kernel_size(point) < kernel_size(data.frame(elements_number=6, y_component_number=6, vector_length=8, temporary_size=2, load_overlap=0, threads_number=1024))
                        ) T else F
          }

          point_equal <- function(p1,p2){
              res <- if(p1$elements_number == p2$elements_number &
                        p1$y_component_number == p2$y_component_number &
                        p1$vector_length == p2$vector_length &
                        p1$temporary_size == p2$temporary_size &
                        p1$load_overlap == p2$load_overlap &
                        p1$threads_number == p2$threads_number) T else F
          }

          gradient_descent <- function(point, limit=100){
              elements_number    <- c(1,0,0,0,0,0,0,-1,0,0,0,0,0,0)
              y_component_number <- c(0,1,0,0,0,0,0,0,-1,0,0,0,0,0)
              vector_length      <- c(0,0,1,0,0,0,0,0,0,-1,0,0,0,0)
              temporary_size     <- c(0,0,0,1,0,0,0,0,0,0,-1,0,0,0)
              load_overlap       <- c(0,0,0,0,1,0,0,0,0,0,0,-1,0,0)
              threads_number     <- c(0,0,0,0,0,1,0,0,0,0,0,0,-1,0)
              lws_y              <- c(0,0,0,0,0,0,1,0,0,0,0,0,0,-1)
              
              factors <- list(elements_number = as.numeric(levels(as.factor(df$elements_number))), 
                              y_component_number = as.numeric(levels(as.factor(df$y_component_number))), 
                              vector_length = as.numeric(levels(as.factor(df$vector_length))), 
                              temporary_size = as.numeric(levels(as.factor(df$temporary_size))), 
                              threads_number= as.numeric(levels(as.factor(df$threads_number))), 
                              lws_y= as.numeric(levels(as.factor(df$lws_y)))) 
              
              directions <- data.frame(elements_number, y_component_number, vector_length, temporary_size, load_overlap, threads_number, lws_y)
              count <- 0
              
              repeat{
                  old_point <- point
                  candidates <- data.frame()
                  
                  i <- 0
                  while( i <= nrow(directions) & count < limit){
                      i <- i + 1
                      idx_elements_number = match(point$elements_number, factors$elements_number) + directions[i,]$elements_number
                      idx_y_component_number = match(point$y_component_number, factors$y_component_number) + directions[i,]$y_component_number
                      idx_vector_length = match(point$vector_length, factors$vector_length) + directions[i,]$vector_length
                      idx_temporary_size = match(point$temporary_size, factors$temporary_size) + directions[i,]$temporary_size
                      idx_threads_number = match(point$threads_number, factors$threads_number) + directions[i,]$threads_number
                      idx_lws_y = match(point$lws_y, factors$lws_y) + directions[i,]$lws_y
                      
                      if(!(idx_elements_number %in% 1:length(levels(as.factor(df$elements_number))))) next
                      if(!(idx_y_component_number %in% 1:length(levels(as.factor(df$y_component_number))))) next
                      if(!(idx_vector_length %in% 1:length(levels(as.factor(df$vector_length))))) next
                      if(!(idx_temporary_size %in% 1:length(levels(as.factor(df$temporary_size))))) next
                      if(!(idx_threads_number %in% 1:length(levels(as.factor(df$threads_number))))) next
                      if(!(idx_lws_y %in% 1:length(levels(as.factor(df$lws_y))))) next
                      
                      p <- data.frame(elements_number = factors$elements_number[idx_elements_number],
                                      y_component_number = factors$y_component_number[idx_y_component_number],
                                      vector_length = factors$vector_length[idx_vector_length],
                                      temporary_size = factors$temporary_size[idx_temporary_size],
                                      load_overlap = if(point$load_overlap == "true") 1 + directions[i,]$load_overlap else 0 + directions[i,]$load_overlap,
                                      threads_number = factors$threads_number[idx_threads_number],
                                      lws_y = factors$lws_y[idx_lws_y]
                                      )

                      
                      
                      
                      
                      if(check_constraint(p) == T){
                          p <- df[df$elements_number == p$elements_number & 
                                  df$y_component_number == p$y_component_number & 
                                  df$vector_length == p$vector_length &
                                  df$temporary_size == p$temporary_size &
                                  df$load_overlap == (if (p$load_overlap == 0) "false" else "true") &
                                                  #df$load_overlap == "true" &
                                  df$threads_number == p$threads_number &
                                  df$lws_y == p$lws_y,]
                          candidates <- rbind(p, candidates)
                          count <- count + 1
                      }
                  }

                  if(nrow(candidates) > 0){
                      if(candidates[candidates$time_per_pixel == min(candidates$time_per_pixel),]$time_per_pixel < point$time_per_pixel){
                          point <- candidates[candidates$time_per_pixel == min(candidates$time_per_pixel),]
                      }
                  }
                  
                  if(count >= limit | point_equal(old_point,point) == T){
                      break
                  }
              }

              result <- list()
              # point <- cbind(point,point_number=count)
              result[[1]] <- point
              result[[2]] <- limit - count
              result
          }

          row_to_coordinate <- function(row){
              drops <- c("time_per_pixel", "vector_recompute")
              row[, !(names(row) %in% drops)]
          }
        #+end_src

        #+RESULTS:

******* Experiment
******** One descent
       #+begin_src sh :results output :exports none
         ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
       #+end_src  

       #+RESULTS:

       #+begin_src R :results output :session :exports none :tangle ../scripts/gr_bench.R
          kernel_size <- function(point) {
              vector_number <- ceiling((point$elements_number / point$y_component_number) / point$vector_length)
              
              tempload <- (1 - point$load_overlap) * (vector_number * point$vector_length) / point$vector_length * point$vector_length
              temp <-  point$load_overlap * 3 * vector_number * (point$y_component_number+2) * point$vector_length
              res <- vector_number * point$y_component_number * point$vector_length
              tempc <- 3 * vector_number * (point$y_component_number + 2) * point$temporary_size * point$vector_length
              out_vec = (1 - point$load_overlap) * tempc
              resc <- vector_number * point$y_component_number * point$temporary_size * point$vector_length
              
              tot <- (tempload + temp + res + tempc + out_vec + resc) * point$threads_number
          }

          check_constraint <- function(point){
              res <- if(point$load_overlap %in% 0:1 &
                        point$lws_y <= point$threads_number &
                        point$elements_number %% point$y_component_number == 0 &
                        point$elements_number %/% point$y_component_number <= 4 &
                        kernel_size(point) < kernel_size(data.frame(elements_number=6, y_component_number=6, vector_length=8, temporary_size=2, load_overlap=0, threads_number=1024))
                        ) T else F
          }

          point_equal <- function(p1,p2){
              res <- if(p1$elements_number == p2$elements_number &
                        p1$y_component_number == p2$y_component_number &
                        p1$vector_length == p2$vector_length &
                        p1$temporary_size == p2$temporary_size &
                        p1$load_overlap == p2$load_overlap &
                        p1$threads_number == p2$threads_number) T else F
          }

          gradient_descent <- function(point, limit=100){
              elements_number    <- c(1,0,0,0,0,0,0,-1,0,0,0,0,0,0)
              y_component_number <- c(0,1,0,0,0,0,0,0,-1,0,0,0,0,0)
              vector_length      <- c(0,0,1,0,0,0,0,0,0,-1,0,0,0,0)
              temporary_size     <- c(0,0,0,1,0,0,0,0,0,0,-1,0,0,0)
              load_overlap       <- c(0,0,0,0,1,0,0,0,0,0,0,-1,0,0)
              threads_number     <- c(0,0,0,0,0,1,0,0,0,0,0,0,-1,0)
              lws_y              <- c(0,0,0,0,0,0,1,0,0,0,0,0,0,-1)
              
              factors <- list(elements_number = as.numeric(levels(as.factor(df$elements_number))), 
                              y_component_number = as.numeric(levels(as.factor(df$y_component_number))), 
                              vector_length = as.numeric(levels(as.factor(df$vector_length))), 
                              temporary_size = as.numeric(levels(as.factor(df$temporary_size))), 
                              threads_number= as.numeric(levels(as.factor(df$threads_number))), 
                              lws_y= as.numeric(levels(as.factor(df$lws_y)))) 
              
              directions <- data.frame(elements_number, y_component_number, vector_length, temporary_size, load_overlap, threads_number, lws_y)
              count <- 0
              
              repeat{
                  old_point <- point
                  candidates <- data.frame()
                  
                  i <- 0
                  while( i <= nrow(directions) & count < limit){
                      i <- i + 1
                      idx_elements_number = match(point$elements_number, factors$elements_number) + directions[i,]$elements_number
                      idx_y_component_number = match(point$y_component_number, factors$y_component_number) + directions[i,]$y_component_number
                      idx_vector_length = match(point$vector_length, factors$vector_length) + directions[i,]$vector_length
                      idx_temporary_size = match(point$temporary_size, factors$temporary_size) + directions[i,]$temporary_size
                      idx_threads_number = match(point$threads_number, factors$threads_number) + directions[i,]$threads_number
                      idx_lws_y = match(point$lws_y, factors$lws_y) + directions[i,]$lws_y
                      
                      if(!(idx_elements_number %in% 1:length(levels(as.factor(df$elements_number))))) next
                      if(!(idx_y_component_number %in% 1:length(levels(as.factor(df$y_component_number))))) next
                      if(!(idx_vector_length %in% 1:length(levels(as.factor(df$vector_length))))) next
                      if(!(idx_temporary_size %in% 1:length(levels(as.factor(df$temporary_size))))) next
                      if(!(idx_threads_number %in% 1:length(levels(as.factor(df$threads_number))))) next
                      if(!(idx_lws_y %in% 1:length(levels(as.factor(df$lws_y))))) next
                      
                      p <- data.frame(elements_number = factors$elements_number[idx_elements_number],
                                      y_component_number = factors$y_component_number[idx_y_component_number],
                                      vector_length = factors$vector_length[idx_vector_length],
                                      temporary_size = factors$temporary_size[idx_temporary_size],
                                      load_overlap = if(point$load_overlap == "true") 1 + directions[i,]$load_overlap else 0 + directions[i,]$load_overlap,
                                      threads_number = factors$threads_number[idx_threads_number],
                                      lws_y = factors$lws_y[idx_lws_y]
                                      )

                      
                      
                      
                      
                      if(check_constraint(p) == T){
                          p <- df[df$elements_number == p$elements_number & 
                                  df$y_component_number == p$y_component_number & 
                                  df$vector_length == p$vector_length &
                                  df$temporary_size == p$temporary_size &
                                  df$load_overlap == (if (p$load_overlap == 0) "false" else "true") &
                                                  #df$load_overlap == "true" &
                                  df$threads_number == p$threads_number &
                                  df$lws_y == p$lws_y,]
                          candidates <- rbind(p, candidates)
                          count <- count + 1
                      }
                  }

                  if(nrow(candidates) > 0){
                      if(candidates[candidates$time_per_pixel == min(candidates$time_per_pixel),]$time_per_pixel < point$time_per_pixel){
                          point <- candidates[candidates$time_per_pixel == min(candidates$time_per_pixel),]
                      }
                  }
                  
                  if(count >= limit | point_equal(old_point,point) == T){
                      break
                  }
              }

              result <- list()
              # point <- cbind(point,point_number=count)
              result[[1]] <- point
              result[[2]] <- limit - count
              result
          }

          row_to_coordinate <- function(row){
              drops <- c("time_per_pixel", "vector_recompute")
              row[, !(names(row) %in% drops)]
         }

         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         df_greedy <- data.frame()
         df_greedy_start <- data.frame()
         for(k in 1:1000){
             budget <- 120

             p <- df[sample(1:nrow(df), size = 1, replace = FALSE),]
             budget <- budget - 1
             df_greedy_start <- rbind(df_greedy_start,p)
             res <- gradient_descent(p,budget)
             solution <- res[[1]]
             solution$point_number <- 120 - res[[2]]
             df_greedy <- rbind(df_greedy, solution)
         }
         df_greedy <- cbind(df_greedy, method=rep("GR",nrow(df_greedy))) 

         write.csv(df_greedy, "../data/2016_04_08/pilipili2/18_08_24/greedy_search_1000.csv", row.names=FALSE)
         write.csv(df_greedy_start, "../data/2016_04_08/pilipili2/18_08_24/greedy_search_start_1000.csv", row.names=FALSE)
       #+end_src

       #+RESULTS:
       :  Erreur : impossible de trouver la fonction "gradient_descent"

******** Multiple descents
        This techniques performs multiple greedy search to use as much
        point as the other methods.
       #+begin_src sh :results output :exports none
         ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
       #+end_src  

       #+RESULTS:

       #+begin_src R :results output :session :exports none :tangle ../scripts/grm_bench.R
          kernel_size <- function(point) {
              vector_number <- ceiling((point$elements_number / point$y_component_number) / point$vector_length)
              
              tempload <- (1 - point$load_overlap) * (vector_number * point$vector_length) / point$vector_length * point$vector_length
              temp <-  point$load_overlap * 3 * vector_number * (point$y_component_number+2) * point$vector_length
              res <- vector_number * point$y_component_number * point$vector_length
              tempc <- 3 * vector_number * (point$y_component_number + 2) * point$temporary_size * point$vector_length
              out_vec = (1 - point$load_overlap) * tempc
              resc <- vector_number * point$y_component_number * point$temporary_size * point$vector_length
              
              tot <- (tempload + temp + res + tempc + out_vec + resc) * point$threads_number
          }

          check_constraint <- function(point){
              res <- if(point$load_overlap %in% 0:1 &
                        point$lws_y <= point$threads_number &
                        point$elements_number %% point$y_component_number == 0 &
                        point$elements_number %/% point$y_component_number <= 4 &
                        kernel_size(point) < kernel_size(data.frame(elements_number=6, y_component_number=6, vector_length=8, temporary_size=2, load_overlap=0, threads_number=1024))
                        ) T else F
          }

          point_equal <- function(p1,p2){
              res <- if(p1$elements_number == p2$elements_number &
                        p1$y_component_number == p2$y_component_number &
                        p1$vector_length == p2$vector_length &
                        p1$temporary_size == p2$temporary_size &
                        p1$load_overlap == p2$load_overlap &
                        p1$threads_number == p2$threads_number) T else F
          }

          gradient_descent <- function(point, limit=100){
              elements_number    <- c(1,0,0,0,0,0,0,-1,0,0,0,0,0,0)
              y_component_number <- c(0,1,0,0,0,0,0,0,-1,0,0,0,0,0)
              vector_length      <- c(0,0,1,0,0,0,0,0,0,-1,0,0,0,0)
              temporary_size     <- c(0,0,0,1,0,0,0,0,0,0,-1,0,0,0)
              load_overlap       <- c(0,0,0,0,1,0,0,0,0,0,0,-1,0,0)
              threads_number     <- c(0,0,0,0,0,1,0,0,0,0,0,0,-1,0)
              lws_y              <- c(0,0,0,0,0,0,1,0,0,0,0,0,0,-1)
              
              factors <- list(elements_number = as.numeric(levels(as.factor(df$elements_number))), 
                              y_component_number = as.numeric(levels(as.factor(df$y_component_number))), 
                              vector_length = as.numeric(levels(as.factor(df$vector_length))), 
                              temporary_size = as.numeric(levels(as.factor(df$temporary_size))), 
                              threads_number= as.numeric(levels(as.factor(df$threads_number))), 
                              lws_y= as.numeric(levels(as.factor(df$lws_y)))) 
              
              directions <- data.frame(elements_number, y_component_number, vector_length, temporary_size, load_overlap, threads_number, lws_y)
              count <- 0
              
              repeat{
                  old_point <- point
                  candidates <- data.frame()
                  
                  i <- 0
                  while( i <= nrow(directions) & count < limit){
                      i <- i + 1
                      idx_elements_number = match(point$elements_number, factors$elements_number) + directions[i,]$elements_number
                      idx_y_component_number = match(point$y_component_number, factors$y_component_number) + directions[i,]$y_component_number
                      idx_vector_length = match(point$vector_length, factors$vector_length) + directions[i,]$vector_length
                      idx_temporary_size = match(point$temporary_size, factors$temporary_size) + directions[i,]$temporary_size
                      idx_threads_number = match(point$threads_number, factors$threads_number) + directions[i,]$threads_number
                      idx_lws_y = match(point$lws_y, factors$lws_y) + directions[i,]$lws_y
                      
                      if(!(idx_elements_number %in% 1:length(levels(as.factor(df$elements_number))))) next
                      if(!(idx_y_component_number %in% 1:length(levels(as.factor(df$y_component_number))))) next
                      if(!(idx_vector_length %in% 1:length(levels(as.factor(df$vector_length))))) next
                      if(!(idx_temporary_size %in% 1:length(levels(as.factor(df$temporary_size))))) next
                      if(!(idx_threads_number %in% 1:length(levels(as.factor(df$threads_number))))) next
                      if(!(idx_lws_y %in% 1:length(levels(as.factor(df$lws_y))))) next
                      
                      p <- data.frame(elements_number = factors$elements_number[idx_elements_number],
                                      y_component_number = factors$y_component_number[idx_y_component_number],
                                      vector_length = factors$vector_length[idx_vector_length],
                                      temporary_size = factors$temporary_size[idx_temporary_size],
                                      load_overlap = if(point$load_overlap == "true") 1 + directions[i,]$load_overlap else 0 + directions[i,]$load_overlap,
                                      threads_number = factors$threads_number[idx_threads_number],
                                      lws_y = factors$lws_y[idx_lws_y]
                                      )

                      
                      
                      
                      
                      if(check_constraint(p) == T){
                          p <- df[df$elements_number == p$elements_number & 
                                  df$y_component_number == p$y_component_number & 
                                  df$vector_length == p$vector_length &
                                  df$temporary_size == p$temporary_size &
                                  df$load_overlap == (if (p$load_overlap == 0) "false" else "true") &
                                                  #df$load_overlap == "true" &
                                  df$threads_number == p$threads_number &
                                  df$lws_y == p$lws_y,]
                          candidates <- rbind(p, candidates)
                          count <- count + 1
                      }
                  }

                  if(nrow(candidates) > 0){
                      if(candidates[candidates$time_per_pixel == min(candidates$time_per_pixel),]$time_per_pixel < point$time_per_pixel){
                          point <- candidates[candidates$time_per_pixel == min(candidates$time_per_pixel),]
                      }
                  }
                  
                  if(count >= limit | point_equal(old_point,point) == T){
                      break
                  }
              }

              result <- list()
              # point <- cbind(point,point_number=count)
              result[[1]] <- point
              result[[2]] <- limit - count
              result
          }

          row_to_coordinate <- function(row){
              drops <- c("time_per_pixel", "vector_recompute")
              row[, !(names(row) %in% drops)]
          }

         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         df_greedy <- data.frame()
         df_greedy_start <- data.frame()
         for(k in 1:1000){
             budget <- 120
             solutions <- data.frame()
             while(budget > 0){ 
                 p <- df[sample(1:nrow(df), size = 1, replace = FALSE),]
                 budget <- budget - 1
                 df_greedy_start <- rbind(df_greedy_start,p)
                 res <- gradient_descent(p,budget)
                     solutions <- rbind(solutions,res[[1]])
                 budget <- res[[2]]
             }
             sol <- solutions[solutions$time_per_pixel == min(solutions$time_per_pixel),][1,]
             sol$point_number <- 120 - budget
             df_greedy <- rbind(df_greedy, sol)
         }
         df_greedy <- cbind(df_greedy, method=rep("GRM",nrow(df_greedy))) 

         write.csv(df_greedy, "../data/2016_04_08/pilipili2/18_08_24/greedy_search_multiple_1000.csv", row.names=FALSE)
         write.csv(df_greedy_start, "../data/2016_04_08/pilipili2/18_08_24/greedy_search_start_multiple_1000.csv", row.names=FALSE)
       #+end_src

       #+RESULTS:

****** LHS                                                           :Script:
      #+begin_src sh :results output :exports none
        ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
      #+end_src

      #+RESULTS:

      #+begin_src R :results output :session :exports none :tangle ../scripts/lhs_bench.R
        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        library(DoE.base)
        library(DoE.wrapper)

        elements_number_val <- as.numeric(levels(as.factor(df$elements_number)))
        y_component_number_val <- as.numeric(levels(as.factor(df$y_component_number)))
        vector_length_val <- as.numeric(levels(as.factor(df$vector_length)))
        threads_number_val <- as.numeric(levels(as.factor(df$threads_number)))
        lws_y_val <- as.numeric(levels(as.factor(df$lws_y)))
        temporary_size_val <- as.numeric(levels(as.factor(df$temporary_size)))
        load_overlap_val <- levels(df$load_overlap)

        df_lhs <- data.frame()
        point_count <- c()
        runs = 1000  
        for(j in 1:runs){
            Design.1 <- lhs.design( type= "maximin" , nruns= 441 ,nfactors= 7, randomize=TRUE ,digits= NULL, factor.names=list(idx_elements_number = c(1,length(elements_number_val)), 
                                                                                                                               idx_y_component_number = c(1,length(y_component_number_val)),
                                                                                                                               idx_vector_length = c(1,length(vector_length_val)), 
                                                                                                                               idx_threads_number = c(1,length(threads_number_val)),
                                                                                                                               idx_temporary_size = c(1,length(temporary_size_val)), 
                                                                                                                               idx_lws_y = c(1,length(lws_y_val)), 
                                                                                                                               idx_load_overlap = c(1,length(load_overlap_val)) 
                                                                                                                               ) 
                                   )

            Design.1.rounded <- round(Design.1) 

            set <- data.frame()
            for(i in 1:nrow(Design.1.rounded)){
                set <- rbind(set, df[ df$elements_number == elements_number_val[Design.1.rounded$idx_elements_number[i]]
                                     & df$y_component_number == y_component_number_val[Design.1.rounded$idx_y_component_number[i]]
                                     & df$vector_length == vector_length_val[Design.1.rounded$idx_vector_length[i]]
                                     & df$threads_number == threads_number_val[Design.1.rounded$idx_threads_number[i]]
                                     & df$lws_y == lws_y_val[Design.1.rounded$idx_lws_y[i]]
                                     & df$temporary_size == temporary_size_val[Design.1.rounded$idx_temporary_size[i]]
                                     & df$load_overlap == load_overlap_val[Design.1.rounded$idx_load_overlap[i]], ])
            }
            point_count[j] <- nrow(set)
            df_lhs <- rbind(df_lhs, set[set$time_per_pixel==min(set$time_per_pixel) ,])
        }
        df_lhs <- cbind(df_lhs, point_number=point_count, method=rep("LHS",nrow(df_lhs)))
        write.csv(df_lhs, "../data/2016_04_08/pilipili2/18_08_24/lhs_search_1000.csv", row.names=FALSE)
      #+end_src

      #+RESULTS:

****** LM                                                            :Script:
******* Random
******** V1                                                      :deprecated:
         _WARNING Incorrect strategy:_
         - The point budget is not used wisely, too much points are
           attributed at the begining.
         - Models based on the models suited to the whole search space
           \to use of incorrect models as they don't suit the working
           set of points 
       #+begin_src sh :results output :exports none
         ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
       #+end_src
       
       #+RESULTS:

       #+begin_src R :results output :session :exports none
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports none
         set.seed(1) 
         runs = 100
         df_lm_random <- data.frame()
         point_count <- c()

         for(i in 1:runs){
             random_set <- df[sample(1:nrow(df), size = 105, replace = FALSE),]
             point_count[i] <- nrow(random_set)

             model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
                                       vector_length + 
                                       lws_y + I(1/lws_y) +
                                       threads_number + I(1/threads_number)

             fit <- lm(data=random_set,formula=formula(model))

             f <- function(x){
                 as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                                   vector_length=x$vector_length, 
                                                   threads_number=x$threads_number,
                                                   lws_y=x$lws_y,
                                                   interval="none")))
             }
             
             best_base <- df[f(df[,c(2,3,7,8)]) == min(f(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]

             subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
             pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]

             ###########################################

             if(nrow(subset) < 5 ){
               subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
               point_count[i] <- point_count[i] + 5
             }

             model <- time_per_pixel ~ lws_y + I(1/lws_y)
             
             fit <- lm(data=subset,formula=model)

             f <- function(x){
                 as.numeric(predict(fit,data.frame(lws_y=x, interval="none")))
             }

             best_lws_y <- pruned_full_space[f(pruned_full_space$lws_y) == min(f(pruned_full_space$lws_y)),][1,]$lws_y

             subset <- subset[subset$lws_y == best_lws_y, ]
             pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]

             ###########################################

             if(nrow(subset) < 5 ){
               subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
               point_count[i] <- point_count[i] + 5
             }

             model <- time_per_pixel ~ elements_number + I(elements_number^2)

             fit <- lm(data=subset,formula=model)
             
             f <- function(x){
                 as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
             }

             best_elements_number <- pruned_full_space[f(pruned_full_space$elements_number) == min(f(pruned_full_space$elements_number)),][1,]$elements_number

             subset <- subset[subset$elements_number == best_elements_number, ]
             pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]

             ###########################################

             if(nrow(subset) < 5 ){
               subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),])
               point_count[i] <- point_count[i] + nrow(pruned_full_space)
             }

             model <- time_per_pixel ~ load_overlap

             fit <- lm(data=subset,formula=model)
               
             f <- function(x){
                 as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
             }

             best_load_overlap <- pruned_full_space[f(pruned_full_space$load_overlap) == min(f(pruned_full_space$load_overlap)),][1,]$load_overlap
             best_load_overlap_time <- pruned_full_space[f(pruned_full_space$load_overlap) == min(f(pruned_full_space$load_overlap)),][1,]$time_per_pixel

             model <- time_per_pixel ~ temporary_size

             fit <- lm(data=subset,formula=model)
                
             f <- function(x){
                 as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
             }

             best_temporary_size <- pruned_full_space[f(pruned_full_space$temporary_size) == min(f(pruned_full_space$temporary_size)),][1,]$temporary_size
             best_temporary_size_time <- pruned_full_space[f(pruned_full_space$temporary_size) == min(f(pruned_full_space$temporary_size)),][1,]$time_per_pixel

             subset <- df[df$y_component_number == best_base$y_component_number & 
                          df$vector_length == best_base$vector_length & 
                          df$threads_number == best_base$threads_number & 
                          df$lws_y == best_lws_y & 
                          df$elements_number == best_elements_number & 
                          df$load_overlap == best_load_overlap & 
                          df$temporary_size == best_temporary_size,]

             if(nrow(subset) < 1){
               if(best_temporary_size_time < best_load_overlap_time){
                 subset <- df[df$y_component_number == best_base$y_component_number & 
                          df$vector_length == best_base$vector_length & 
                          df$threads_number == best_base$threads_number & 
                          df$lws_y == best_lws_y & 
                          df$elements_number == best_elements_number & 
                          df$temporary_size == best_temporary_size,]
               } else {
                 subset <- df[df$y_component_number == best_base$y_component_number & 
                          df$vector_length == best_base$vector_length & 
                          df$threads_number == best_base$threads_number & 
                          df$lws_y == best_lws_y & 
                          df$elements_number == best_elements_number & 
                          df$load_overlap == best_load_overlap,]
               }

               if(nrow(subset > 1)){

               }
             }
                       
             df_lm_random <- rbind(df_lm_random, subset)
         }

         df_lm_random <- cbind(df_lm_random, point_number=point_count, method=rep("LM",nrow(df_lm_random)))
         write.csv(df_lm_random, "../data/2016_04_08/pilipili2/18_08_24/lm_random.csv", row.names=FALSE)
     #+end_src

       #+RESULTS:
       :  There were 18 warnings (use warnings() to see them)

******** V2                                                      :deprecated:
         _WARNING Incorrect strategy:_
         - The point budget is still not used wisely
         - And The model are still based on the models of the full
           search space
          Take into account the budget repartition:
        #+begin_src R :results output :session :exports none
          objective_predict <- function(fit,x){
              names <- colnames(x)
              s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
              eval(parse(text=s))
              as.numeric(predict(fit, values, interval="none"))
          }

          objective_predict_one <- function(fit,x,colname){
              s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
              eval(parse(text=s))
              as.numeric(predict(fit, values, interval="none"))
          }

          find_best <- function(model,subset,full_set,colnames){
              fit <- lm(data=subset,formula=formula(model))
              if( length(colnames) > 1) {
                  return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
              }
              else{
                  return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
              }
          }

          set.seed(1) 
          runs = 100
          df_lm_random <- data.frame()
          point_count <- c()
          logs <- data.frame()
          additional_points <- data.frame()

          for(i in 1:runs){
              random_set <- df[sample(1:nrow(df), size = 90, replace = FALSE),]
              best_time <- min(random_set$time_per_pixel)
              tmp <- cbind(random_set, run=rep(i,nrow(random_set)))
              logs <- rbind(logs, tmp)
              point_count[i] <- nrow(random_set)
              
              model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
                  vector_length + 
                  lws_y + I(1/lws_y) +
                  threads_number + I(1/threads_number)
              
              best_base <- find_best(model, random_set, df, c("y_component_number", "vector_length", "lws_y", "threads_number")) 
              
              subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
              pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
              
          ###########################################
                                                  #
                                                  #               Step 1
                                                  #
          ###########################################      
              budget <- 20
              if(nrow(subset) < budget ){
                  if(nrow(pruned_full_space) <= budget) { 
                      budget <-  nrow(pruned_full_space) 
                  } 
                  tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = budget, replace = FALSE),]
                  subset <- rbind(subset,tmp2)
                  additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(1,nrow(tmp2))))
                  point_count[i] <- point_count[i] + budget
              }
              
              if(best_time > min(subset$time_per_pixel)){
                  best_time <- min(subset$time_per_pixel)
              }
              
              model <- time_per_pixel ~ lws_y + I(1/lws_y)
              
              best_lws_y <- find_best(model, subset, pruned_full_space, c("lws_y"))
              
              subset <- subset[subset$lws_y == best_lws_y, ]
              pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]
              
          ###########################################
                                                  #
                                                  #               Step 2
                                                  #
          ###########################################      
              
              if(nrow(subset) < 5 ){
                  if(nrow(pruned_full_space) <= 5) { 
                      budget <-  nrow(pruned_full_space) 
                  } 
                  else { 
                      budget <- 5 
                  }
                  tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = budget, replace = FALSE),]
                  additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(2,nrow(tmp2))))
                  subset <- rbind(subset,tmp2)
                  point_count[i] <- point_count[i] + budget
              }
              
              if(best_time > min(subset$time_per_pixel)){
                  best_time <- min(subset$time_per_pixel)
              }
              
              model <- time_per_pixel ~ elements_number + I(elements_number^2)
              
              best_elements_number <- find_best(model, subset, pruned_full_space, c("elements_number"))
              
              subset <- subset[subset$elements_number == best_elements_number, ]
              pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]
              
          ###########################################
                                                  #
                                                  #               Step 3
                                                  #
          ###########################################      
              
              if(nrow(subset) < 5 ){
                  tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),]
                  additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(3,nrow(tmp2))))
                  subset <- rbind(subset,tmp2)
                  point_count[i] <- point_count[i] + nrow(pruned_full_space)
              }
              
              if(best_time > min(subset$time_per_pixel)){
                  best_time <- min(subset$time_per_pixel)
              }
              
              model <- time_per_pixel ~ load_overlap
              
              fit <- lm(data=subset,formula=model)
              
              best_load_overlap <- pruned_full_space[objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap") == min(objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap")),][1,]$load_overlap
              best_load_overlap_time <- pruned_full_space[objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap") == min(objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap")),][1,]$time_per_pixel
              
              model <- time_per_pixel ~ temporary_size
              
              fit <- lm(data=subset,formula=model)
              
              best_temporary_size <- pruned_full_space[objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size") == min(objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size")),][1,]$temporary_size
              best_temporary_size_time <- pruned_full_space[objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size") == min(objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size")),][1,]$time_per_pixel
              
              subset <- df[df$y_component_number == best_base$y_component_number & 
                           df$vector_length == best_base$vector_length & 
                           df$threads_number == best_base$threads_number & 
                           df$lws_y == best_lws_y & 
                           df$elements_number == best_elements_number & 
                           df$load_overlap == best_load_overlap & 
                           df$temporary_size == best_temporary_size,]
              
              if(nrow(subset) < 1){
                  if(best_temporary_size_time < best_load_overlap_time){
                      subset <- df[df$y_component_number == best_base$y_component_number & 
                                   df$vector_length == best_base$vector_length & 
                                   df$threads_number == best_base$threads_number & 
                                   df$lws_y == best_lws_y & 
                                   df$elements_number == best_elements_number & 
                                   df$temporary_size == best_temporary_size,]
                  } else {
                      subset <- df[df$y_component_number == best_base$y_component_number & 
                                   df$vector_length == best_base$threads_number & 
                                   df$lws_y == best_lws_y & 
                                   df$elements_number == best_elements_number & 
                                   df$load_overlap == best_load_overlap,]
                  }
                  
                  if(nrow(subset > 1)){
                      subset <- subset[subset$time_per_pixel==min(subset$time_per_pixel),]
                  }
              }
              
              # subset$run <- i
              df_lm_random <- rbind(df_lm_random, subset)
          }

          df_lm_random <- cbind(df_lm_random, point_number=point_count, method=rep("LM",nrow(df_lm_random)))
          # df_lm_random$slowdown <- df_lm_random$time_per_pixel / min(df$time_per_pixel)
          write.csv(df_lm_random, "../data/2016_04_08/pilipili2/18_08_24/lm_random_improve_budget_2.csv", row.names=FALSE)
          write.csv(logs, "../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_budget.csv", row.names=FALSE)
          write.csv(additional_points, "../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_additional_points_budget.csv", row.names=FALSE)
          summary(df_lm_random)
        #+end_src    

        #+RESULTS:
        #+begin_example
         Warning messages:
        1: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        2: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        3: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        4: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        5: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        6: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
         elements_number y_component_number vector_length temporary_size
         Min.   : 1.00   Min.   :1.00       Min.   :1     Min.   :2.00  
         1st Qu.: 3.00   1st Qu.:3.00       1st Qu.:1     1st Qu.:2.00  
         Median : 4.00   Median :4.00       Median :1     Median :2.00  
         Mean   : 4.42   Mean   :4.24       Mean   :1     Mean   :2.64  
         3rd Qu.: 6.00   3rd Qu.:6.00       3rd Qu.:1     3rd Qu.:4.00  
         Max.   :24.00   Max.   :6.00       Max.   :1     Max.   :4.00  
         vector_recompute load_overlap threads_number     lws_y     
         true:100         false:48     Min.   : 512   Min.   : 4.0  
                          true :52     1st Qu.:1024   1st Qu.: 8.0  
                                       Median :1024   Median : 8.0  
                                       Mean   :1019   Mean   : 7.8  
                                       3rd Qu.:1024   3rd Qu.: 8.0  
                                       Max.   :1024   Max.   :16.0  
         time_per_pixel       point_number   method  
         Min.   :1.176e-10   Min.   :114.0   LM:100  
         1st Qu.:1.182e-10   1st Qu.:119.0           
         Median :1.258e-10   Median :119.0           
         Mean   :1.357e-10   Mean   :118.8           
         3rd Qu.:1.365e-10   3rd Qu.:119.0           
         Max.   :2.449e-10   Max.   :119.0
#+end_example

     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
       library(ggplot2)
       library(plyr)
       
       ggplot(df_lm_random, aes(slowdown)) + 
           geom_histogram(binwidth=.05,color="white", fill="gray1") +
           labs(y="Density", x="Percentage of the speedup of best combination") +
           ggtitle("") 
     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-5040GO8/figure5040D5k.png]]
******** V3
         #+begin_src R :results output :session :exports both :tangle ../scripts/LM_bench.R
           objective_predict <- function(fit,x){
               names <- colnames(x)
               s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
               eval(parse(text=s))
               as.numeric(predict(fit, values, interval="none"))
           }

           objective_predict_one <- function(fit,x,colname){
               s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
               eval(parse(text=s))
               as.numeric(predict(fit, values, interval="none"))
           }

           find_best <- function(model,subset,full_set,colnames){
               fit <- lm(data=subset,formula=formula(model))
               if( length(colnames) > 1) {
                   return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
               }
               else{
                   return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
               }
           }

           df_lm_random <- data.frame()
           df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

           runs <- 1000
           logs <- list()
           for(i in 1:runs){
               l <- list()
               
                                                   # Step 1
               working_set <- df[sample(1:nrow(df), size = 50, replace = FALSE),]
               l[["starting_set"]] <- working_set
               point_count <- 50
               
               model <- time_per_pixel ~ vector_length + lws_y 
               best1 <- find_best(model, working_set, df, c("vector_length", "lws_y")) 
               
                                                   # Pruning the working set and the search space
               subset1 <- working_set[working_set$vector_length == best1$vector_length & 
                                      working_set$lws_y == best1$lws_y,]
               
               pruned1 <- df[df$vector_length == best1$vector_length & 
                             df$lws_y == best1$lws_y,]
               
                                                   # Step 2          
                                                   # Adding new points
               added1 <- pruned1[sample(1:nrow(pruned1), size = 40, replace = FALSE),]
               l[["added1"]] <- added1
               subset1 <- subset1[, !names(working_set) %in% c("run") ] 
               subset1 <- rbind(subset1, added1)     
               point_count <- point_count + 40
               
               model <- time_per_pixel ~ y_component_number
               best2 <- data.frame()
               best2 <- find_best(model, subset1, pruned1, c("y_component_number")) 
               
               subset2 <- subset1[subset1$y_component_number == best2,]
               pruned2 <- pruned1[pruned1$y_component_number == best2,]
               
                                                   # Step 3
               added2 <- pruned2[sample(1:nrow(pruned2), size = 20, replace = FALSE),]
               l[["added2"]] <- added2
               subset2 <- rbind(subset2, added2)   
               point_count <- point_count + 20  
               
               model <- time_per_pixel ~ elements_number 
               best3 <- data.frame()
               best3 <- find_best(model, subset2, pruned2, c("elements_number")) 
               best3    
               
               subset3 <- subset2[subset2$elements_number == best3,]
               pruned3 <- pruned2[pruned2$elements_number == best3,]
               
                                                   # Step 4
               added3 <- pruned3[sample(1:nrow(pruned3), size = 5, replace = FALSE),]
               l[["added3"]] <- added3
               subset3 <- rbind(subset3, added3)     
               point_count <- point_count + 5  
               
               model <- time_per_pixel ~ threads_number + I(1/threads_number)
               best4 <- data.frame()
               best4 <- find_best(model, subset3, pruned3, c("threads_number")) 
               best4   
               
               subset4 <- subset3[subset3$threads_number == best4,]
               pruned4 <- pruned3[pruned3$threads_number == best4,]
               
               nrow(subset4)
               nrow(pruned4)
               min(pruned4$time_per_pixel) / min(df$time_per_pixel) 
               
               added4 <- pruned4[sample(1:nrow(pruned4), size = nrow(pruned4), replace = FALSE),]
               point_count <- point_count + nrow(pruned4)  
               l[["added4"]] <- added4
               subset4 <- rbind(subset4, added4)
               solution <- subset4[subset4$time_per_pixel == min(subset4$time_per_pixel),][1,]
               
               solution$point_number <- point_count 
               l[["solution"]] <- solution
               l[["slowdown"]] <- solution$time_per_pixel / min(df$time_per_pixel)
               logs[[i]] <- l    
               df_lm_random <- rbind(df_lm_random,solution)
           }

           df_lm_random <- cbind(df_lm_random, method=rep("LM",nrow(df_lm_random)))
           summary(df_lm_random)

           write.csv(df_lm_random, "../data/2016_04_08/pilipili2/18_08_24/lm_random_new_strat_1000.csv", row.names=FALSE)
           saveRDS(logs, "../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_new_strat_1000.rds")
           summary(df_lm_random)
         #+end_src
         
         #+RESULTS:
    #+begin_example
     elements_number y_component_number vector_length temporary_size
     Min.   :6       Min.   :6          Min.   :1     Min.   :2     
     1st Qu.:6       1st Qu.:6          1st Qu.:1     1st Qu.:2     
     Median :6       Median :6          Median :1     Median :2     
     Mean   :6       Mean   :6          Mean   :1     Mean   :2     
     3rd Qu.:6       3rd Qu.:6          3rd Qu.:1     3rd Qu.:2     
     Max.   :6       Max.   :6          Max.   :1     Max.   :2     
     vector_recompute load_overlap threads_number     lws_y   time_per_pixel     
     true:10          false: 0     Min.   :256    Min.   :1   Min.   :1.179e-10  
                      true :10     1st Qu.:256    1st Qu.:1   1st Qu.:1.179e-10  
                                   Median :256    Median :1   Median :1.179e-10  
                                   Mean   :256    Mean   :1   Mean   :1.179e-10  
                                   3rd Qu.:256    3rd Qu.:1   3rd Qu.:1.179e-10  
                                   Max.   :256    Max.   :1   Max.   :1.179e-10  
      point_number method 
     Min.   :119   LM:10  
     1st Qu.:119          
     Median :119          
     Mean   :119          
     3rd Qu.:119          
     Max.   :119
     elements_number y_component_number vector_length temporary_size
     Min.   :6       Min.   :6          Min.   :1     Min.   :2     
     1st Qu.:6       1st Qu.:6          1st Qu.:1     1st Qu.:2     
     Median :6       Median :6          Median :1     Median :2     
     Mean   :6       Mean   :6          Mean   :1     Mean   :2     
     3rd Qu.:6       3rd Qu.:6          3rd Qu.:1     3rd Qu.:2     
     Max.   :6       Max.   :6          Max.   :1     Max.   :2     
     vector_recompute load_overlap threads_number     lws_y   time_per_pixel     
     true:10          false: 0     Min.   :256    Min.   :1   Min.   :1.179e-10  
                      true :10     1st Qu.:256    1st Qu.:1   1st Qu.:1.179e-10  
                                   Median :256    Median :1   Median :1.179e-10  
                                   Mean   :256    Mean   :1   Mean   :1.179e-10  
                                   3rd Qu.:256    3rd Qu.:1   3rd Qu.:1.179e-10  
                                   Max.   :256    Max.   :1   Max.   :1.179e-10  
      point_number method 
     Min.   :119   LM:10  
     1st Qu.:119          
     Median :119          
     Mean   :119          
     3rd Qu.:119          
     Max.   :119
#+end_example

****** Rq                                                            :Script:
******* Random
******** V1                                                      :deprecated:
         _WARNING same thing as with LM_
   #+begin_src R :results output :session :exports both
     f <- function(x) { x * (0.05 - 1 * (x < 0)) }
     g <- function(x) { f(x)/x^2 }
     h <- function(x) {pmin(g(x),1e15)}
     set.seed(1) 
     runs = 100
     df_rq_random <- data.frame()
     point_count = c()
     for(i in 1:runs){
         point_count[i] = 105
         random_set <- df[sample(1:nrow(df), size = 105, replace = FALSE),]
         model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
             vector_length + 
             lws_y + I(1/lws_y) +
             threads_number + I(1/threads_number)
     
         fit <- lm(data=random_set,formula=formula(model), na.action="na.exclude")
         for(j in 1:100){
             E <- residuals(fit)
             fit <- lm(data=random_set,formula=formula(model),weights=h(E), na.action="na.exclude")
         }
     
         pred <- function(x){
             as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                               vector_length=x$vector_length, 
                                               threads_number=x$threads_number,
                                               lws_y=x$lws_y,
                                               interval="none")))
         }
     
         best_base <- df[pred(df[,c(2,3,7,8)]) == min(pred(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]
     
         subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
         pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
     
     ###########################################
     
         if(nrow(subset) < 5 ){
             point_count[i] = point_count[i] + 5
             subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
         }
     
         model <- time_per_pixel ~ lws_y + I(1/lws_y)
         
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:100){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
     
     
         pred <- function(x){
             as.numeric(predict(fit,data.frame(lws_y=x, interval="none")))
         }
     
         best_lws_y <- pruned_full_space[pred(pruned_full_space$lws_y) == min(pred(pruned_full_space$lws_y)),][1,]$lws_y
     
         subset <- subset[subset$lws_y == best_lws_y, ]
         pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]
     
     ###########################################
     
         if(nrow(subset) < 5 ){
             point_count[i] = point_count[i] + 5
             subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
         }
     
         model <- time_per_pixel ~ elements_number + I(elements_number^2)
     
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:100){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
     
         pred <- function(x){
             as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
         }
     
         best_elements_number <- pruned_full_space[pred(pruned_full_space$elements_number) == min(pred(pruned_full_space$elements_number)),][1,]$elements_number
     
         subset <- subset[subset$elements_number == best_elements_number, ]
         pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]
     
     ###########################################
     
         if(nrow(subset) < 5 ){
             point_count[i] = point_count[i] + nrow(pruned_full_space)
             subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),])
         }
     
         model <- time_per_pixel ~ load_overlap
     
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:10){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
         
         pred <- function(x){
             as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
         }
     
         best_load_overlap <- pruned_full_space[pred(pruned_full_space$load_overlap) == min(pred(pruned_full_space$load_overlap)),][1,]$load_overlap
         best_load_overlap_time <- pruned_full_space[pred(pruned_full_space$load_overlap) == min(pred(pruned_full_space$load_overlap)),][1,]$time_per_pixel
     
         model <- time_per_pixel ~ temporary_size
     
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:10){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
         
         pred <- function(x){
             as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
         }
     
         best_temporary_size <- pruned_full_space[pred(pruned_full_space$temporary_size) == min(pred(pruned_full_space$temporary_size)),][1,]$temporary_size
         best_temporary_size_time <- pruned_full_space[pred(pruned_full_space$temporary_size) == min(pred(pruned_full_space$temporary_size)),][1,]$time_per_pixel
     
         subset <- df[df$y_component_number == best_base$y_component_number & 
                      df$vector_length == best_base$vector_length & 
                      df$threads_number == best_base$threads_number & 
                      df$lws_y == best_lws_y & 
                      df$elements_number == best_elements_number & 
                      df$load_overlap == best_load_overlap & 
                      df$temporary_size == best_temporary_size,]
     
         if(nrow(subset) < 1){
             if(best_temporary_size_time < best_load_overlap_time){
                 subset <- df[df$y_component_number == best_base$y_component_number & 
                              df$vector_length == best_base$vector_length & 
                              df$threads_number == best_base$threads_number & 
                              df$lws_y == best_lws_y & 
                              df$elements_number == best_elements_number & 
                              df$temporary_size == best_temporary_size,]
             } else {
                 subset <- df[df$y_component_number == best_base$y_component_number & 
                              df$vector_length == best_base$vector_length & 
                              df$threads_number == best_base$threads_number & 
                              df$lws_y == best_lws_y & 
                              df$elements_number == best_elements_number & 
                              df$load_overlap == best_load_overlap,]
             }
     
             if(nrow(subset > 1)){
     
             }
         }
     
         df_rq_random <- rbind(df_rq_random, subset)
     }
     
     df_rq_random <- cbind(df_rq_random, point_number=point_count, method=rep("RQ",nrow(df_rq_random)))
     write.csv(df_rq_random, "../data/2016_04_08/pilipili2/18_08_24/rq_random.csv", row.names=FALSE)
     #+end_src

   #+RESULTS:
   :  There were 50 or more warnings (use warnings() to see the first 50)

******** V2                                                      :deprecated:
          _WARNING same thing as with LM_
    #+begin_src R :results output :session :exports both
     f <- function(x) { x * (0.05 - 1 * (x < 0)) }
     g <- function(x) { f(x)/x^2 }
     h <- function(x) {pmin(g(x),1e15)}
     set.seed(1) 
     runs = 100
     df_rq_random <- data.frame()
     point_count = c()
     for(i in 1:runs){
         budget <- 90
         point_count[i] = budget
         random_set <- df[sample(1:nrow(df), size = budget, replace = FALSE),]
         model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
             vector_length + 
             lws_y + I(1/lws_y) +
             threads_number + I(1/threads_number)
     
         fit <- lm(data=random_set,formula=formula(model), na.action="na.exclude")
         for(j in 1:100){
             E <- residuals(fit)
             fit <- lm(data=random_set,formula=formula(model),weights=h(E), na.action="na.exclude")
         }
     
         pred <- function(x){
             as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                               vector_length=x$vector_length, 
                                               threads_number=x$threads_number,
                                               lws_y=x$lws_y,
                                               interval="none")))
         }
     
         best_base <- df[pred(df[,c(2,3,7,8)]) == min(pred(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]
     
         subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
         pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
     
     ###########################################
     
         if(nrow(subset) < 20 ){
             budget <- 20
             point_count[i] = point_count[i] + budget
             subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = budget, replace = FALSE),])
         }
     
         model <- time_per_pixel ~ lws_y + I(1/lws_y)
         
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:100){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
     
     
         pred <- function(x){
             as.numeric(predict(fit,data.frame(lws_y=x, interval="none")))
         }
     
         best_lws_y <- pruned_full_space[pred(pruned_full_space$lws_y) == min(pred(pruned_full_space$lws_y)),][1,]$lws_y
     
         subset <- subset[subset$lws_y == best_lws_y, ]
         pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]
     
     ###########################################
     
         if(nrow(subset) < 5 ){
             point_count[i] = point_count[i] + 5
             subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
         }
     
         model <- time_per_pixel ~ elements_number + I(elements_number^2)
     
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:100){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
     
         pred <- function(x){
             as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
         }
     
         best_elements_number <- pruned_full_space[pred(pruned_full_space$elements_number) == min(pred(pruned_full_space$elements_number)),][1,]$elements_number
     
         subset <- subset[subset$elements_number == best_elements_number, ]
         pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]
     
     ###########################################
     
         if(nrow(subset) < 5 ){
             point_count[i] = point_count[i] + nrow(pruned_full_space)
             subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),])
         }
     
         model <- time_per_pixel ~ load_overlap
     
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:10){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
         
         pred <- function(x){
             as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
         }
     
         best_load_overlap <- pruned_full_space[pred(pruned_full_space$load_overlap) == min(pred(pruned_full_space$load_overlap)),][1,]$load_overlap
         best_load_overlap_time <- pruned_full_space[pred(pruned_full_space$load_overlap) == min(pred(pruned_full_space$load_overlap)),][1,]$time_per_pixel
     
         model <- time_per_pixel ~ temporary_size
     
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:10){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
         
         pred <- function(x){
             as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
         }
     
         best_temporary_size <- pruned_full_space[pred(pruned_full_space$temporary_size) == min(pred(pruned_full_space$temporary_size)),][1,]$temporary_size
         best_temporary_size_time <- pruned_full_space[pred(pruned_full_space$temporary_size) == min(pred(pruned_full_space$temporary_size)),][1,]$time_per_pixel
     
         subset <- df[df$y_component_number == best_base$y_component_number & 
                      df$vector_length == best_base$vector_length & 
                      df$threads_number == best_base$threads_number & 
                      df$lws_y == best_lws_y & 
                      df$elements_number == best_elements_number & 
                      df$load_overlap == best_load_overlap & 
                      df$temporary_size == best_temporary_size,]
     
         if(nrow(subset) < 1){
             if(best_temporary_size_time < best_load_overlap_time){
                 subset <- df[df$y_component_number == best_base$y_component_number & 
                              df$vector_length == best_base$vector_length & 
                              df$threads_number == best_base$threads_number & 
                              df$lws_y == best_lws_y & 
                              df$elements_number == best_elements_number & 
                              df$temporary_size == best_temporary_size,]
             } else {
                 subset <- df[df$y_component_number == best_base$y_component_number & 
                              df$vector_length == best_base$vector_length & 
                              df$threads_number == best_base$threads_number & 
                              df$lws_y == best_lws_y & 
                              df$elements_number == best_elements_number & 
                              df$load_overlap == best_load_overlap,]
             }
     
             if(nrow(subset > 1)){
     
             }
         }
     
         df_rq_random <- rbind(df_rq_random, subset)
     }
     
     df_rq_random <- cbind(df_rq_random, point_number=point_count, method=rep("RQ",nrow(df_rq_random)))
     write.csv(df_rq_random, "../data/2016_04_08/pilipili2/18_08_24/rq_random_budget_2.csv", row.names=FALSE)
     summary(df_rq_random)
     #+end_src

    #+RESULTS:
    #+begin_example
     There were 36 warnings (use warnings() to see them)
     elements_number y_component_number vector_length temporary_size
     Min.   : 3.00   Min.   :3.00       Min.   :1     Min.   :2.0   
     1st Qu.: 4.00   1st Qu.:4.00       1st Qu.:1     1st Qu.:2.0   
     Median : 6.00   Median :6.00       Median :1     Median :2.0   
     Mean   : 6.33   Mean   :5.13       Mean   :1     Mean   :2.5   
     3rd Qu.: 6.00   3rd Qu.:6.00       3rd Qu.:1     3rd Qu.:2.5   
     Max.   :24.00   Max.   :6.00       Max.   :1     Max.   :4.0   
     vector_recompute load_overlap threads_number       lws_y      
     true:100         false:60     Min.   :  32.0   Min.   : 1.00  
                      true :40     1st Qu.:1024.0   1st Qu.: 8.00  
                                   Median :1024.0   Median : 8.00  
                                   Mean   : 983.7   Mean   : 7.39  
                                   3rd Qu.:1024.0   3rd Qu.: 8.00  
                                   Max.   :1024.0   Max.   :16.00  
     time_per_pixel       point_number method  
     Min.   :1.176e-10   Min.   :114   RQ:100  
     1st Qu.:1.176e-10   1st Qu.:119           
     Median :1.178e-10   Median :119           
     Mean   :1.275e-10   Mean   :119           
     3rd Qu.:1.258e-10   3rd Qu.:119           
     Max.   :2.103e-10   Max.   :119
#+end_example

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
       library(ggplot2)
       library(plyr)
       df_rq_random$slowdown <- df_rq_random$time_per_pixel / min(df$time_per_pixel)
       ggplot(df_rq_random ) + 
          aes(slowdown)+
           geom_histogram(binwidth=.05,color="white", fill="gray1") +
            geom_vline(xintercept = median(df_rq_random$slowdown), color="darkgreen", linetype=2) +
            geom_vline(xintercept = mean(df_rq_random$slowdown), color="red", linetype=2) +
           labs(y="Density", x="Percentage of the speedup of best combination") +
           ggtitle("") 
     #+end_src

    #+RESULTS:
    [[file:/tmp/babel-5040GO8/figure50402ue.png]]

******** V3
    #+begin_src R :results output :session :exports both :tangle ../scripts/rq_bench.R
      f <- function(x) { x * (0.05 - 1 * (x < 0)) }
      g <- function(x) { f(x)/x^2 }
      h <- function(x) {pmin(g(x),1e15)}

       objective_predict <- function(fit,x){
           names <- colnames(x)
           s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
           eval(parse(text=s))
           as.numeric(predict(fit, values, interval="none"))
       }

       objective_predict_one <- function(fit,x,colname){
           s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
           eval(parse(text=s))
           as.numeric(predict(fit, values, interval="none"))
       }

       find_best <- function(fit,full_set,colnames){         
           if( length(colnames) > 1) {
               return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
           }
           else{
               return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
           }
       }

       df_rq_random <- data.frame()
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

       runs <- 1000
       logs <- list()
       for(i in 1:runs){
           l <- list()

           # Step 1
           working_set <- df[sample(1:nrow(df), size = 50, replace = FALSE),]
           l[["starting_set"]] <- working_set
           point_count <- 50

          model <- time_per_pixel ~ vector_length + lws_y 
          fit <- lm(data=working_set,formula=formula(model), na.action="na.exclude")
          for(j in 1:100){
              E <- residuals(fit)
              fit <- lm(data=working_set,formula=formula(model),weights=h(E), na.action="na.exclude")
          }
          best1 <- find_best(fit, df, c("vector_length", "lws_y")) 

           # Pruning the working set and the search space
           subset1 <- working_set[working_set$vector_length == best1$vector_length & 
                                  working_set$lws_y == best1$lws_y,]

           pruned1 <- df[df$vector_length == best1$vector_length & 
                         df$lws_y == best1$lws_y,]

           # Step 2          
           # Adding new points
           added1 <- pruned1[sample(1:nrow(pruned1), size = 40, replace = FALSE),]
           l[["added1"]] <- added1
           subset1 <- subset1[, !names(working_set) %in% c("run") ] 
           subset1 <- rbind(subset1, added1)     
           point_count <- point_count + 40

           model <- time_per_pixel ~ y_component_number
          fit <- lm(data=subset1,formula=formula(model), na.action="na.exclude")
          for(j in 1:100){
              E <- residuals(fit)
              fit <- lm(data=subset1,formula=formula(model),weights=h(E), na.action="na.exclude")
          }
           best2 <- data.frame()
           best2 <- find_best(fit, pruned1, c("y_component_number")) 

           subset2 <- subset1[subset1$y_component_number == best2,]
           pruned2 <- pruned1[pruned1$y_component_number == best2,]

           # Step 3
           added2 <- pruned2[sample(1:nrow(pruned2), size = 20, replace = FALSE),]
           l[["added2"]] <- added2
           subset2 <- rbind(subset2, added2)   
           point_count <- point_count + 20  

           model <- time_per_pixel ~ elements_number 
           fit <- lm(data=subset2,formula=formula(model), na.action="na.exclude")
           for(j in 1:100){
              E <- residuals(fit)
              fit <- lm(data=subset2,formula=formula(model),weights=h(E), na.action="na.exclude")
           }
           best3 <- data.frame()
           best3 <- find_best(fit, pruned2, c("elements_number")) 
           best3    

           subset3 <- subset2[subset2$elements_number == best3,]
           pruned3 <- pruned2[pruned2$elements_number == best3,]

           # Step 4
           added3 <- pruned3[sample(1:nrow(pruned3), size = 5, replace = FALSE),]
           l[["added3"]] <- added3
           subset3 <- rbind(subset3, added3)     
           point_count <- point_count + 5  

           model <- time_per_pixel ~ threads_number + I(1/threads_number)
           fit <- lm(data=subset3,formula=formula(model), na.action="na.exclude")
           for(j in 1:50){
              E <- residuals(fit)
              fit <- lm(data=subset3,formula=formula(model),weights=h(E), na.action="na.exclude")
           }
           best4 <- data.frame()
           best4 <- find_best(fit, pruned3, c("threads_number")) 
           best4   

           subset4 <- subset3[subset3$threads_number == best4,]
           pruned4 <- pruned3[pruned3$threads_number == best4,]

           nrow(subset4)
           nrow(pruned4)
           min(pruned4$time_per_pixel) / min(df$time_per_pixel) 

           added4 <- pruned4[sample(1:nrow(pruned4), size = nrow(pruned4), replace = FALSE),]
           point_count <- point_count + nrow(pruned4)  
           l[["added4"]] <- added4
           subset4 <- rbind(subset4, added4)
           solution <- subset4[subset4$time_per_pixel == min(subset4$time_per_pixel),][1,]
           solution$time_per_pixel / min(df$time_per_pixel)
           solution$point_number <- point_count 

           l[["solution"]] <- solution
           l[["slowdown"]] <- solution$time_per_pixel / min(df$time_per_pixel)
           logs[[i]] <- l    

           df_rq_random <- rbind(df_rq_random,solution)
       }

       df_rq_random <- cbind(df_rq_random, method=rep("RQ",nrow(df_rq_random)))
       summary(df_rq_random)

       write.csv(df_rq_random, "../data/2016_04_08/pilipili2/18_08_24/rq_random_new_strat_1000.csv", row.names=FALSE)
       saveRDS(logs, "../data/2016_04_08/pilipili2/18_08_24/rq_random_logs_new_strat_1000.rds")
       summary(df_rq_random)
    #+end_src

    #+RESULTS:
    #+begin_example
     elements_number y_component_number vector_length temporary_size
     Min.   :6       Min.   :6          Min.   :1     Min.   :2     
     1st Qu.:6       1st Qu.:6          1st Qu.:1     1st Qu.:2     
     Median :6       Median :6          Median :1     Median :2     
     Mean   :6       Mean   :6          Mean   :1     Mean   :2     
     3rd Qu.:6       3rd Qu.:6          3rd Qu.:1     3rd Qu.:2     
     Max.   :6       Max.   :6          Max.   :1     Max.   :2     
     vector_recompute load_overlap threads_number      lws_y   time_per_pixel     
     true:100         false: 1     Min.   :128.0   Min.   :1   Min.   :1.179e-10  
                      true :99     1st Qu.:256.0   1st Qu.:1   1st Qu.:1.179e-10  
                                   Median :256.0   Median :1   Median :1.179e-10  
                                   Mean   :257.3   Mean   :1   Mean   :1.179e-10  
                                   3rd Qu.:256.0   3rd Qu.:1   3rd Qu.:1.179e-10  
                                   Max.   :512.0   Max.   :1   Max.   :1.190e-10  
      point_number method  
     Min.   :119   RQ:100  
     1st Qu.:119           
     Median :119           
     Mean   :119           
     3rd Qu.:119           
     Max.   :119
     elements_number y_component_number vector_length temporary_size
     Min.   :6       Min.   :6          Min.   :1     Min.   :2     
     1st Qu.:6       1st Qu.:6          1st Qu.:1     1st Qu.:2     
     Median :6       Median :6          Median :1     Median :2     
     Mean   :6       Mean   :6          Mean   :1     Mean   :2     
     3rd Qu.:6       3rd Qu.:6          3rd Qu.:1     3rd Qu.:2     
     Max.   :6       Max.   :6          Max.   :1     Max.   :2     
     vector_recompute load_overlap threads_number      lws_y   time_per_pixel     
     true:100         false: 1     Min.   :128.0   Min.   :1   Min.   :1.179e-10  
                      true :99     1st Qu.:256.0   1st Qu.:1   1st Qu.:1.179e-10  
                                   Median :256.0   Median :1   Median :1.179e-10  
                                   Mean   :257.3   Mean   :1   Mean   :1.179e-10  
                                   3rd Qu.:256.0   3rd Qu.:1   3rd Qu.:1.179e-10  
                                   Max.   :512.0   Max.   :1   Max.   :1.190e-10  
      point_number method  
     Min.   :119   RQ:100  
     1st Qu.:119           
     Median :119           
     Mean   :119           
     3rd Qu.:119           
     Max.   :119
#+end_example
****** Merging                                                       :Script:
******* V1                                                       :deprecated:
      Merging data frame and computing speedup
      #+begin_src R :results output :session :exports both
        df_gen <- read.csv("../data/2016_04_08/pilipili2/18_08_24/ga_search.csv", strip.white=T, header=T)
        df_uniform <- read.csv("../data/2016_04_08/pilipili2/18_08_24/uniform_search.csv", strip.white=T, header=T)
        df_greedy <- read.csv("../data/2016_04_08/pilipili2/18_08_24/greedy_search.csv", strip.white=T, header=T)
        df_greedy_multiple <- read.csv("../data/2016_04_08/pilipili2/18_08_24/greedy_search_multiple.csv", strip.white=T, header=T)
        df_lhs <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lhs_search.csv", strip.white=T, header=T)
        # df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random.csv", strip.white=T, header=T)
        df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_new_strat.csv", strip.white=T, header=T)
        # df_rq_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/rq_random.csv", strip.white=T, header=T)
        df_rq_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/rq_random_new_strat.csv", strip.white=T, header=T)

        # df_merged <- rbind(df_gen, df_uniform, df_greedy, df_lhs, df_lm_random[,c(1,2,3,4,5,6,7,8,9,12,13)], df_rq_random)
        df_merged <- rbind(df_gen, df_uniform, df_greedy, df_lhs, df_lm_random, df_rq_random, df_greedy_multiple)
        df_merged <- cbind(df_merged,slowdown = df_merged$time_per_pixel / min(df$time_per_pixel) )
        # write.csv(df_merged, "../data/2016_04_08/pilipili2/18_08_24/all_search.csv", row.names=FALSE)
        write.csv(df_merged, "../data/2016_04_08/pilipili2/18_08_24/all_search_3.csv", row.names=FALSE)
      #+end_src

      #+RESULTS:

******* Experiences with 1000 runs:                                  :Script:
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:
    
    Merging 1000 runs:
    #+begin_src R :results output :session :exports both
      df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
      df_gen <- read.csv("../data/2016_04_08/pilipili2/18_08_24/ga_search_1000.csv", strip.white=T, header=T)
      df_uniform <- read.csv("../data/2016_04_08/pilipili2/18_08_24/uniform_search_1000.csv", strip.white=T, header=T)
      df_greedy <- read.csv("../data/2016_04_08/pilipili2/18_08_24/greedy_search_1000.csv", strip.white=T, header=T)
      df_greedy_multiple <- read.csv("../data/2016_04_08/pilipili2/18_08_24/greedy_search_multiple_1000.csv", strip.white=T, header=T)
      df_lhs <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lhs_search_1000.csv", strip.white=T, header=T)
      df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_new_strat_1000.csv", strip.white=T, header=T)
      df_rq_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/rq_random_new_strat_1000.csv", strip.white=T, header=T)

      df_greedy$method <- "GS" 
      df_greedy_multiple$method <- "GSR" 

      df_merged <- rbind(df_gen, df_uniform, df_greedy, df_lhs, df_lm_random, df_rq_random, df_greedy_multiple)
      # df_merged <- rbind(df_uniform, df_lm_random, df_rq_random)
      df_merged <- cbind(df_merged,slowdown = df_merged$time_per_pixel / min(df$time_per_pixel) )

      write.csv(df_merged, "../data/2016_04_08/pilipili2/18_08_24/all_search_1000.csv", row.names=FALSE)
      #+end_src

    #+RESULTS:

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 800 :session
      library(ggplot2)
      library(plyr)

      df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
      df_all_methods <- read.csv("../data/2016_04_08/pilipili2/18_08_24/all_search_1000.csv", strip.white=T, header=T)  

      df_mean = ddply(df_all_methods,.(method), summarize, 
                      mean = mean(slowdown))

      df_median = ddply(df_all_methods,.(method), summarize, 
                        median = median(slowdown))

      df_max = ddply(df_all_methods,.(method), summarize, max = max(slowdown))

      df_err = ddply(df_all_methods,.(method), summarize,
                     mean = mean(slowdown), err = 2*sd(slowdown)/sqrt(length(slowdown)))

      attach(df_all_methods)
      ggplot(df_all_methods) + 
          # aes(df_all_methods$slowdown) +
          facet_grid(method~.) +
          theme_bw() +
          aes(df_all_methods$slowdown) +
          stat_bin(binwidth=.05, fill="gray48") +
          # stat_bin(binwidth=.05, geom="text", aes(label=..count..)) +
          # geom_rect(data = df_err, aes(xmin=mean-err, xmax=mean+err, ymin=0, ymax=1000, fill="red"), alpha=0.3) +
          # geom_vline( aes(xintercept = median), df_median, color="darkgreen", linetype=2 ) +
          # geom_vline( aes(xintercept = mean), df_mean, color="red", linetype=2 ) +
          # geom_text( aes(x=max), df_max, color="red" ) +
          # geom_segment( aes(x=max,y=rep(1,nrow(df_max))) ,data=df_max) +
          geom_curve(data=df_max, aes(x=3, y=500, xend=max, yend=5), arrow = arrow(length = unit(0.03, "npc")), curvature=0.3, linetype=2) +
          geom_text( aes(x=max+.2,y=550,label="max"),data=df_max ) +
          labs(y="Density", x="Slowdown compared best combination of the entire search space") +
          scale_fill_discrete(name="",breaks=c("red"), labels=c("Mean error")) +
          ggtitle("") + 
          theme(legend.position="top") +
          coord_cartesian(xlim=c(.9,4), ylim=c(0,1000))
      #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3796G5P/figure3796P60.png]]

***** Visualilzation
      #+begin_src sh :results output :exports none
        ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
      #+end_src

      #+RESULTS:

      
      # Load the full space first
      #+begin_src R :results output :session :exports none
        df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
      #+end_src

      #+RESULTS:

****** Genetic algo
      #+begin_src sh :results output :exports none
        ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_gen_100_g5_p20_m01_e1_tt.yaml
      #+end_src
       
      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports results :width 600 :height 400 :session
        library(ggplot2)
        df_gen <- read.csv("/tmp/test.csv", strip.white=T, header=T)

        speedup <- c()
        for (i in 1:nrow(df_gen)){
            speedup[i] <- min(df$time_per_pixel) / df_gen[i,]$time_per_pixel * 100
        }
        data <- data.frame(speedup)
        ggplot(data) +
            aes(speedup) +
            coord_cartesian(xlim=c(0,100),ylim=c(0,0.3)) +
            geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
            geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
            geom_histogram(binwidth=1, color="white", fill="gray1", aes(y=..density.. * 1)) +
            labs(y="Density", x="Percentage of the maximal speedup achieved") +
            ggtitle("Genetic algorithm")    
      #+end_src

      #+RESULTS:
      [[file:/tmp/babel-3564RBo/figure3564vWh.png]]

****** Random
      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports results :width 600 :height 400 :session
        df_uniform <- read.csv("../data/2016_04_08/pilipili2/18_08_24/uniform_search.csv", strip.white=T, header=T)
        library(ggplot2)
        speedup <- c()
        for (i in 1:nrow(df_uniform)){
            speedup[i] <- min(df$time_per_pixel) / df_uniform[i,]$time_per_pixel * 100
        }
        data <- data.frame(speedup)
        ggplot(data) +
            aes(speedup) +
            coord_cartesian(xlim=c(0,100),ylim=c(0,0.3)) +
            geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
            geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
            geom_histogram(binwidth=1, color="white", fill="gray1", aes(y=..density.. * 1)) +
            labs(y="Density", x="Percentage of the maximal speedup achieved") +
            ggtitle("Random uniform")     
      #+end_src

      #+RESULTS:
      [[file:/tmp/babel-3564RBo/figure35648gn.png]]

****** Greedy search
      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports results :width 600 :height 400 :session
        df_greedy <- read.csv("../data/2016_04_08/pilipili2/18_08_24/greedy_search.csv", strip.white=T, header=T)
        library(ggplot2)
        speedup <- c()
        for (i in 1:nrow(df_greedy)){
            speedup[i] <- min(df$time_per_pixel) / df_greedy[i,]$time_per_pixel * 100
        }
        data <- data.frame(speedup)
        ggplot(data) +
            aes(speedup) +
            coord_cartesian(xlim=c(0,100),ylim=c(0,0.3)) +
            geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
            geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
            geom_histogram(binwidth=1, color="white", fill="gray1", aes(y=..density.. * 1)) +
            labs(y="Density", x="Percentage of the maximal speedup achieved") +
            ggtitle("Greedy")     
      #+end_src

      #+RESULTS:
      [[file:/tmp/babel-3564RBo/figure3564Jrt.png]]

****** LHS search
      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports results :width 600 :height 400 :session
        df_lhs <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lhs_search.csv", strip.white=T, header=T)
        library(ggplot2)
        speedup <- c()
        for (i in 1:nrow(df_lhs)){
            speedup[i] <- min(df$time_per_pixel) / df_lhs[i,]$time_per_pixel * 100
        }
        data <- data.frame(speedup)
        ggplot(data) +
            aes(speedup) +
            coord_cartesian(xlim=c(0,100),ylim=c(0,0.3)) +
            geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
            geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
            geom_histogram(binwidth=1, color="white", fill="gray1", aes(y=..density.. * 1)) +
            labs(y="Density", x="Percentage of the maximal speedup achieved") +
            ggtitle("LHS")     
      #+end_src

      #+RESULTS:
      [[file:/tmp/babel-3564RBo/figure3564W1z.png]]

****** LM
      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports results :width 600 :height 400 :session
        df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random.csv", strip.white=T, header=T)
        library(ggplot2)
        speedup <- c()
        for (i in 1:nrow(df_lm_random)){
            speedup[i] <- min(df$time_per_pixel) / df_lm_random[i,]$time_per_pixel * 100
        }
        data <- data.frame(speedup)
        ggplot(data) +
            aes(speedup) +
            coord_cartesian(xlim=c(0,100),ylim=c(0,0.3)) +
            geom_vline(xintercept = median(data$speedup), color="darkgreen", linetype=2) +
            geom_vline(xintercept = mean(data$speedup), color="red", linetype=2) +
            geom_histogram(binwidth=1, color="white", fill="gray1", aes(y=..density.. * 1)) +
            labs(y="Density", x="Percentage of the maximal speedup achieved") +
            ggtitle("LM + Random sample")     
      #+end_src

      #+RESULTS:
      [[file:/tmp/babel-3564RBo/figure3564I_C.png]]

****** All
      #+begin_src R :results output :session :exports both
        df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
        df_all_methods <- read.csv("../data/2016_04_08/pilipili2/18_08_24/all_search_3.csv", strip.white=T, header=T)  
      #+end_src

      #+RESULTS:

      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
        library(ggplot2)

        ggplot() +
            coord_cartesian() +
            stat_ecdf(aes(df_all_methods[df_all_methods$method=="GA",]$speedup),color="green") + 
            # stat_ecdf(aes(df_all_methods[df_all_methods$method=="RS",]$speedup),color="blue") + 
            # stat_ecdf(aes(df_all_methods[df_all_methods$method=="GR",]$speedup),color="red") + 
            # stat_ecdf(aes(df_all_methods[df_all_methods$method=="LHS",]$speedup),color="yellow") + 
            stat_ecdf(aes(df_all_methods[df_all_methods$method=="LM",]$speedup),color="darkviolet") + 
            stat_ecdf(aes(df_all_methods[df_all_methods$method=="RQ",]$speedup),color="black") + 
            labs(y="Cumulative distribution", x="Percentage of the maximal speedup achieved") +
            ggtitle("LM + Random sample")     
      #+end_src
       
      #+RESULTS:
      [[file:/tmp/babel-6458re_/figure6458gMk.png]]

      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 600 :session
        library(ggplot2)
        library(plyr)

        df_mean = ddply(df_all_methods,.(method), summarize, 
                        mean = mean(slowdown))

        df_median = ddply(df_all_methods,.(method), summarize, 
                          median = median(slowdown))

        df_err = ddply(df_all_methods,.(method), summarize,
                      mean = mean(slowdown), err = 2*sd(slowdown)/sqrt(length(slowdown)))

        ggplot(df_all_methods) + 
            facet_grid(method~.) +
            theme_bw() +
            geom_histogram(aes(slowdown),binwidth=.05,color="white", fill="gray48") +
            geom_rect(data = df_err, aes(xmin=mean-err, xmax=mean+err, ymin=0, ymax=60, fill="red"), alpha=0.3) +
            geom_vline( aes(xintercept = median), df_median, color="darkgreen", linetype=2 ) +
            geom_vline( aes(xintercept = mean), df_mean, color="red", linetype=2 ) +
            labs(y="Density", x="Slowdown compared best combination of the entire search space") +
            scale_fill_discrete(name="",breaks=c("red"), labels=c("Mean error")) +
            ggtitle("") + 
            theme(legend.position="top") +
            coord_cartesian(xlim=c(.9,3), ylim=c(0,100))
      #+end_src

      #+RESULTS:
      [[file:/tmp/babel-4627fyl/figure4627pDl.png]]

      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
        ggplot() + 
            aes(df_all_methods[df_all_methods$method=="LM",]$speedup) +
            geom_histogram(binwidth=1, color="white", fill="gray1", aes(y=..density.. * 1)) +
            labs(y="Density", x="Percentage of the maximal speedup achieved") +
            ggtitle("")     

      #+end_src

      #+RESULTS:
      [[file:/tmp/babel-3564RBo/figure3564YFq.png]]
      
**** Study of the convergence of the distribution
     _Suspended for the moment_
***** GA
****** Old version  
      #+begin_src sh :results output :exports none 
        INPUT="$1"
        PARAM="$2"
        OUTPUT="$3"
        for i in `seq 1 100`; do
            ruby ../boast/optimizer_benchmarks/bench_optimizer.rb $PARAM $INPUT -r $OUTPUT --generations_limit 5 --population_size 20 --mutation_rate 0.1 --elitism 1 --twin_removal true > /dev/null
        done
      #+end_src
      
      #+begin_src sh :results output :exports both 
        DAY=`date +%Y_%m_%d`
        DIR="../data/$DAY"
        mkdir -p $DIR
        DIR="$DIR/pilipili2"
        mkdir -p $DIR
        DIR="$DIR/algos"
        mkdir -p $DIR
        DIR="$DIR/GA"
        mkdir -p $DIR
        INPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"
        PARAM="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_parameters_v2.yaml"

        for i in `seq 1 100`; do 
          ../scripts/GA_experiment.sh $INPUT $PARAM ${DIR}/"$i.yaml" &
        done
      #+end_src

      #+RESULTS:
      : 1179
****** New version
    #+begin_src sh :results output :exports both :tangle ../scripts/GA_run.sh
      DAY=`date +%Y_%m_%d`
      DIR="$PWD/../data/$DAY"
      mkdir -p $DIR
      DIR="$DIR/pilipili2"
      mkdir -p $DIR
      DIR="$DIR/algos"
      mkdir -p $DIR
      DIR="$DIR/GA"
      mkdir -p $DIR
      INPUT="$PWD/../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"
      PARAM="$PWD/../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_parameters_v2.yaml"
      
      for i in `seq 1 100`; do 
          ruby ../boast/optimizer_benchmarks/bench_gen.rb $PARAM $INPUT -r ${DIR}/"$i.yaml" --generations_limit 5 --population_size 20 --mutation_rate 0.1 --elitism 1 --twin_removal true > /dev/null &
      done
    #+end_src
    
    #+RESULTS:
    
***** Random
      #+begin_src R :results output :session :exports both :tangle ../scripts/RS_experiment.R
        #!/usr/bin/env Rscript
        args = commandArgs(trailingOnly=TRUE)
        output = args[1]

        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        df_uniform <- data.frame()
        for (i in 1:100){
            s <- df[sample(1:nrow(df), size = 120, replace = FALSE),]
            df_uniform <- rbind(df_uniform, s[s$time_per_pixel==min(s$time_per_pixel) ,])
        }

        df_uniform <- cbind(df_uniform, point_number=rep(120,100), method=rep("RS",nrow(df_uniform)))
        df_uniform$slowdown <- df_uniform$time_per_pixel / min(df$time_per_pixel)
        write.csv(df_uniform, output, row.names=FALSE)
      #+end_src

      #+begin_src sh :results output :exports both :tangle ../scripts/RS_run.sh
        DAY=`date +%Y_%m_%d`
        DIR="../data/$DAY"
        mkdir -p $DIR
        DIR="$DIR/pilipili2"
        mkdir -p $DIR
        DIR="$DIR/algos"
        mkdir -p $DIR
        DIR="$DIR/RS"
        mkdir -p $DIR
        INPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"

        ruby ../scripts/format_data.rb $INPUT

        for i in `seq 1 100`; do 
          Rscript ../scripts/RS_experiment.R ${DIR}/"$i.csv" &
        done
      #+end_src
      
      #+RESULTS:
      #+begin_example
            elements_number y_component_number vector_length temporary_size
      20540               4                  4             1              4
      12314               6                  6             1              4
      11070               5                  5             1              2
      10280               5                  5             1              2
      4353                3                  3             1              4
      12450               5                  5             1              2
            vector_recompute load_overlap threads_number lws_y time_per_pixel
      20540             true         true           1024     2   1.267757e-10
      12314             true         true            512     2   1.201387e-10
      11070             true         true           1024     2   1.230414e-10
      10280             true        false            128     4   1.186349e-10
      4353              true         true            128     2   1.365384e-10
      12450             true         true            512     4   1.180929e-10
            point_number method slowdown
      20540          120     RS 1.088191
      12314          120     RS 1.031222
      11070          120     RS 1.056138
      10280          120     RS 1.018313
      4353           120     RS 1.171990
      12450          120     RS 1.013662
#+end_example

***** Greedy
      #+begin_src R :results output :session :exports none :tangle ../scripts/Greedy_experiment.R
        #!/usr/bin/env Rscript
        kernel_size <- function(point) {
            vector_number <- ceiling((point$elements_number / point$y_component_number) / point$vector_length)
            
            tempload <- (1 - point$load_overlap) * (vector_number * point$vector_length) / point$vector_length * point$vector_length
            temp <-  point$load_overlap * 3 * vector_number * (point$y_component_number+2) * point$vector_length
            res <- vector_number * point$y_component_number * point$vector_length
            tempc <- 3 * vector_number * (point$y_component_number + 2) * point$temporary_size * point$vector_length
            out_vec = (1 - point$load_overlap) * tempc
            resc <- vector_number * point$y_component_number * point$temporary_size * point$vector_length
            
            tot <- (tempload + temp + res + tempc + out_vec + resc) * point$threads_number
        }

        check_constraint <- function(point){
            res <- if(point$load_overlap %in% 0:1 &
                      point$lws_y <= point$threads_number &
                      point$elements_number %% point$y_component_number == 0 &
                      point$elements_number %/% point$y_component_number <= 4 &
                      kernel_size(point) < kernel_size(data.frame(elements_number=6, y_component_number=6, vector_length=8, temporary_size=2, load_overlap=0, threads_number=1024))
                      ) T else F
        }

        point_equal <- function(p1,p2){
            res <- if(p1$elements_number == p2$elements_number &
                      p1$y_component_number == p2$y_component_number &
                      p1$vector_length == p2$vector_length &
                      p1$temporary_size == p2$temporary_size &
                      p1$load_overlap == p2$load_overlap &
                      p1$threads_number == p2$threads_number) T else F
        }

        gradient_descent <- function(point, limit=100){
            elements_number    <- c(1,0,0,0,0,0,0,-1,0,0,0,0,0,0)
            y_component_number <- c(0,1,0,0,0,0,0,0,-1,0,0,0,0,0)
            vector_length      <- c(0,0,1,0,0,0,0,0,0,-1,0,0,0,0)
            temporary_size     <- c(0,0,0,1,0,0,0,0,0,0,-1,0,0,0)
            load_overlap       <- c(0,0,0,0,1,0,0,0,0,0,0,-1,0,0)
            threads_number     <- c(0,0,0,0,0,1,0,0,0,0,0,0,-1,0)
            lws_y              <- c(0,0,0,0,0,0,1,0,0,0,0,0,0,-1)
            
            factors <- list(elements_number = as.numeric(levels(as.factor(df$elements_number))), 
                            y_component_number = as.numeric(levels(as.factor(df$y_component_number))), 
                            vector_length = as.numeric(levels(as.factor(df$vector_length))), 
                            temporary_size = as.numeric(levels(as.factor(df$temporary_size))), 
                            threads_number= as.numeric(levels(as.factor(df$threads_number))), 
                            lws_y= as.numeric(levels(as.factor(df$lws_y)))) 
            
            directions <- data.frame(elements_number, y_component_number, vector_length, temporary_size, load_overlap, threads_number, lws_y)
            count <- 0
            
            repeat{
                old_point <- point
                candidates <- data.frame()
                
                for(i in 1:nrow(directions)){
                    idx_elements_number = match(point$elements_number, factors$elements_number) + directions[i,]$elements_number
                    idx_y_component_number = match(point$y_component_number, factors$y_component_number) + directions[i,]$y_component_number
                    idx_vector_length = match(point$vector_length, factors$vector_length) + directions[i,]$vector_length
                    idx_temporary_size = match(point$temporary_size, factors$temporary_size) + directions[i,]$temporary_size
                    idx_threads_number = match(point$threads_number, factors$threads_number) + directions[i,]$threads_number
                    idx_lws_y = match(point$lws_y, factors$lws_y) + directions[i,]$lws_y
                    
                    if(!(idx_elements_number %in% 1:length(levels(as.factor(df$elements_number))))) next
                    if(!(idx_y_component_number %in% 1:length(levels(as.factor(df$y_component_number))))) next
                    if(!(idx_vector_length %in% 1:length(levels(as.factor(df$vector_length))))) next
                    if(!(idx_temporary_size %in% 1:length(levels(as.factor(df$temporary_size))))) next
                    if(!(idx_threads_number %in% 1:length(levels(as.factor(df$threads_number))))) next
                    if(!(idx_lws_y %in% 1:length(levels(as.factor(df$lws_y))))) next
                    
                    p <- data.frame(elements_number = factors$elements_number[idx_elements_number],
                                    y_component_number = factors$y_component_number[idx_y_component_number],
                                    vector_length = factors$vector_length[idx_vector_length],
                                    temporary_size = factors$temporary_size[idx_temporary_size],
                                    load_overlap = if(point$load_overlap == "true") 1 + directions[i,]$load_overlap else 0 + directions[i,]$load_overlap,
                                    threads_number = factors$threads_number[idx_threads_number],
                                    lws_y = factors$lws_y[idx_lws_y]
                                    )
                    
                    if(check_constraint(p) == T){
                        p <- df[df$elements_number == p$elements_number & 
                                df$y_component_number == p$y_component_number & 
                                df$vector_length == p$vector_length &
                                df$temporary_size == p$temporary_size &
                                df$load_overlap == (if (p$load_overlap == 0) "false" else "true") &
                                                #df$load_overlap == "true" &
                                df$threads_number == p$threads_number &
                                df$lws_y == p$lws_y,]
                        candidates <- rbind(p, candidates)
                    }
                }
                
                if(candidates[candidates$time_per_pixel == min(candidates$time_per_pixel),]$time_per_pixel < point$time_per_pixel){
                    point <- candidates[candidates$time_per_pixel == min(candidates$time_per_pixel),]
                }
                
                count <- count + 1
                if(count >= limit | point_equal(old_point,point) == T){
                    break
                }
            }
            
            point <- cbind(point,point_number=count)
            point
        }

        row_to_coordinate <- function(row){
            drops <- c("time_per_pixel", "vector_recompute")
            row[, !(names(row) %in% drops)]
        }

        args = commandArgs(trailingOnly=TRUE)
        output = args[1]
        
        df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
        df_greedy <- data.frame()
        for(i in 1:100){
            p <- df[sample(1:nrow(df), size = 1, replace = FALSE),]
            df_greedy <- rbind(df_greedy,gradient_descent(p,1e5))
        }
        df_greedy <- cbind(df_greedy, method=rep("GR",nrow(df_greedy))) 
        df_greedy$slow_down <- df_greedy$time_per_pixel / min(df$time_per_pixel) 

        write.csv(df_greedy, output, row.names=FALSE)
      #+end_src

      #+begin_src sh :results output :exports both :tangle ../scripts/Greedy_run.sh
        DAY=`date +%Y_%m_%d`
        DIR="../data/$DAY"
        mkdir -p $DIR
        DIR="$DIR/pilipili2"
        mkdir -p $DIR
        DIR="$DIR/algos"
        mkdir -p $DIR
        DIR="$DIR/GR"
        mkdir -p $DIR
        INPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"

        ruby ../scripts/format_data.rb $INPUT
        for i in `seq 1 100`; do 
            Rscript ../scripts/Greedy_experiment.R ${DIR}/"$i.csv" &
        done
      #+end_src

***** LHS
      #+begin_src R :results output :session :exports none :tangle ../scripts/LHS_experiment.R
        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
   
        library(DoE.base)
        library(DoE.wrapper)

        args = commandArgs(trailingOnly=TRUE)
        output = args[1]

        elements_number_val <- as.numeric(levels(as.factor(df$elements_number)))
        y_component_number_val <- as.numeric(levels(as.factor(df$y_component_number)))
        vector_length_val <- as.numeric(levels(as.factor(df$vector_length)))
        threads_number_val <- as.numeric(levels(as.factor(df$threads_number)))
        lws_y_val <- as.numeric(levels(as.factor(df$lws_y)))
        temporary_size_val <- as.numeric(levels(as.factor(df$temporary_size)))
        load_overlap_val <- levels(df$load_overlap)

        df_lhs <- data.frame()
        point_count <- c()
        runs = 100  
        for(j in 1:runs){
            Design.1 <- lhs.design( type= "maximin" , nruns= 441 ,nfactors= 7, randomize=TRUE ,digits= NULL, factor.names=list(idx_elements_number = c(1,length(elements_number_val)), 
                                                                                                                               idx_y_component_number = c(1,length(y_component_number_val)),
                                                                                                                               idx_vector_length = c(1,length(vector_length_val)), 
                                                                                                                               idx_threads_number = c(1,length(threads_number_val)),
                                                                                                                               idx_temporary_size = c(1,length(temporary_size_val)), 
                                                                                                                               idx_lws_y = c(1,length(lws_y_val)), 
                                                                                                                               idx_load_overlap = c(1,length(load_overlap_val)) 
                                                                                                                               ) 
                                   )

            Design.1.rounded <- round(Design.1) 

            set <- data.frame()
            for(i in 1:nrow(Design.1.rounded)){
                set <- rbind(set, df[ df$elements_number == elements_number_val[Design.1.rounded$idx_elements_number[i]]
                                     & df$y_component_number == y_component_number_val[Design.1.rounded$idx_y_component_number[i]]
                                     & df$vector_length == vector_length_val[Design.1.rounded$idx_vector_length[i]]
                                     & df$threads_number == threads_number_val[Design.1.rounded$idx_threads_number[i]]
                                     & df$lws_y == lws_y_val[Design.1.rounded$idx_lws_y[i]]
                                     & df$temporary_size == temporary_size_val[Design.1.rounded$idx_temporary_size[i]]
                                     & df$load_overlap == load_overlap_val[Design.1.rounded$idx_load_overlap[i]], ])
            }
            point_count[j] <- nrow(set)
            df_lhs <- rbind(df_lhs, set[set$time_per_pixel==min(set$time_per_pixel) ,])
        }
        df_lhs <- cbind(df_lhs, point_number=point_count, method=rep("LHS",nrow(df_lhs)))
        df_lhs$slowdown <- df_lhs$time_per_pixel / min(df$time_per_pixel) 
        write.csv(df_lhs, output, row.names=FALSE)
      #+end_src
      
      #+begin_src sh :results output :exports both :tangle ../scripts/LHS_run.sh
        DAY=`date +%Y_%m_%d`
        DIR="../data/$DAY"
        mkdir -p $DIR
        DIR="$DIR/pilipili2"
        mkdir -p $DIR
        DIR="$DIR/algos"
        mkdir -p $DIR
        DIR="$DIR/LHS"
        mkdir -p $DIR
        INPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"

        ruby ../scripts/format_data.rb $INPUT

        for i in `seq 1 100`; do 
            Rscript ../scripts/LHS_experiment.R ${DIR}/"$i.csv" &
        done
      #+end_src

***** LM
      #+begin_src R :results output :session :exports none :tangle ../scripts/LM_experiment.R
        args = commandArgs(trailingOnly=TRUE)
        output = args[1]
        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        runs = 100
        df_lm_random <- data.frame()
        point_count <- c()

        for(i in 1:runs){
            random_set <- df[sample(1:nrow(df), size = 105, replace = FALSE),]
            point_count[i] <- nrow(random_set)
            
            model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
                vector_length + 
                lws_y + I(1/lws_y) +
                threads_number + I(1/threads_number)
            
            fit <- lm(data=random_set,formula=formula(model))
            
            f <- function(x){
                as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                                  vector_length=x$vector_length, 
                                                  threads_number=x$threads_number,
                                                  lws_y=x$lws_y,
                                                  interval="none")))
            }
            
            best_base <- df[f(df[,c(2,3,7,8)]) == min(f(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]
            
            subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
            pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
            
        ###########################################
            
            if(nrow(subset) < 5 ){
                subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
                point_count[i] <- point_count[i] + 5
            }
            
            model <- time_per_pixel ~ lws_y + I(1/lws_y)
            
            fit <- lm(data=subset,formula=model)
            
            f <- function(x){
                as.numeric(predict(fit,data.frame(lws_y=x, interval="none")))
            }
            
            best_lws_y <- pruned_full_space[f(pruned_full_space$lws_y) == min(f(pruned_full_space$lws_y)),][1,]$lws_y
            
            subset <- subset[subset$lws_y == best_lws_y, ]
            pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]
            
        ###########################################
            
            if(nrow(subset) < 5 ){
                subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
                point_count[i] <- point_count[i] + 5
            }
            
            model <- time_per_pixel ~ elements_number + I(elements_number^2)
            
            fit <- lm(data=subset,formula=model)
            
            f <- function(x){
                as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
            }
            
            best_elements_number <- pruned_full_space[f(pruned_full_space$elements_number) == min(f(pruned_full_space$elements_number)),][1,]$elements_number
            
            subset <- subset[subset$elements_number == best_elements_number, ]
            pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]
            
        ###########################################
            
            if(nrow(subset) < 5 ){
                subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),])
                point_count[i] <- point_count[i] + nrow(pruned_full_space)
            }
            
            model <- time_per_pixel ~ load_overlap
            
            fit <- lm(data=subset,formula=model)
            
            f <- function(x){
                as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
            }
            
            best_load_overlap <- pruned_full_space[f(pruned_full_space$load_overlap) == min(f(pruned_full_space$load_overlap)),][1,]$load_overlap
            best_load_overlap_time <- pruned_full_space[f(pruned_full_space$load_overlap) == min(f(pruned_full_space$load_overlap)),][1,]$time_per_pixel
            
            model <- time_per_pixel ~ temporary_size
            
            fit <- lm(data=subset,formula=model)
            
            f <- function(x){
                as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
            }
            
            best_temporary_size <- pruned_full_space[f(pruned_full_space$temporary_size) == min(f(pruned_full_space$temporary_size)),][1,]$temporary_size
            best_temporary_size_time <- pruned_full_space[f(pruned_full_space$temporary_size) == min(f(pruned_full_space$temporary_size)),][1,]$time_per_pixel
            
            subset <- df[df$y_component_number == best_base$y_component_number & 
                         df$vector_length == best_base$vector_length & 
                         df$threads_number == best_base$threads_number & 
                         df$lws_y == best_lws_y & 
                         df$elements_number == best_elements_number & 
                         df$load_overlap == best_load_overlap & 
                         df$temporary_size == best_temporary_size,]
            
            if(nrow(subset) < 1){
                if(best_temporary_size_time < best_load_overlap_time){
                    subset <- df[df$y_component_number == best_base$y_component_number & 
                                 df$vector_length == best_base$vector_length & 
                                 df$threads_number == best_base$threads_number & 
                                 df$lws_y == best_lws_y & 
                                 df$elements_number == best_elements_number & 
                                 df$temporary_size == best_temporary_size,]
                } else {
                    subset <- df[df$y_component_number == best_base$y_component_number & 
                                 df$vector_length == best_base$vector_length & 
                                 df$threads_number == best_base$threads_number & 
                                 df$lws_y == best_lws_y & 
                                 df$elements_number == best_elements_number & 
                                 df$load_overlap == best_load_overlap,]
                }
                
                if(nrow(subset > 1)){
                    
                }
            }
            
            df_lm_random <- rbind(df_lm_random, subset)
        }

        df_lm_random <- cbind(df_lm_random, point_number=point_count, method=rep("LM",nrow(df_lm_random)))
        df_lm_random$slowdown = df_lm_random$time_per_pixel / min(df$time_per_pixel)
 
        write.csv(df_lm_random, output, row.names=FALSE)
      #+end_src

      #+begin_src sh :results output :exports both :tangle ../scripts/LM_run.sh
        DAY=`date +%Y_%m_%d`
        DIR="../data/$DAY"
        mkdir -p $DIR
        DIR="$DIR/pilipili2"
        mkdir -p $DIR
        DIR="$DIR/algos"
        mkdir -p $DIR
        DIR="$DIR/LM"
        mkdir -p $DIR
        INPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"

        ruby ../scripts/format_data.rb $INPUT

        for i in `seq 1 100`; do 
            Rscript ../scripts/LM_experiment.R ${DIR}/"$i.csv" &
        done
      #+end_src
***** RQ
      #+begin_src R :results output :session :exports both :tangle ../scripts/RQ_experiment.R
        args = commandArgs(trailingOnly=TRUE)
        output = args[1]
        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
        f <- function(x) { x * (0.05 - 1 * (x < 0)) }
        g <- function(x) { f(x)/x^2 }
        h <- function(x) {pmin(g(x),1e15)}
        runs = 100
        df_rq_random <- data.frame()
        point_count = c()
        for(i in 1:runs){
            point_count[i] = 105
            random_set <- df[sample(1:nrow(df), size = 105, replace = FALSE),]
            model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
                vector_length + 
                lws_y + I(1/lws_y) +
                threads_number + I(1/threads_number)
            
            fit <- lm(data=random_set,formula=formula(model), na.action="na.exclude")
            for(j in 1:100){
                E <- residuals(fit)
                fit <- lm(data=random_set,formula=formula(model),weights=h(E), na.action="na.exclude")
            }
            
            pred <- function(x){
                as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                                  vector_length=x$vector_length, 
                                                  threads_number=x$threads_number,
                                                  lws_y=x$lws_y,
                                                  interval="none")))
            }
            
            best_base <- df[pred(df[,c(2,3,7,8)]) == min(pred(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]
            
            subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
            pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
            
        ###########################################
            
            if(nrow(subset) < 5 ){
                point_count[i] = point_count[i] + 5
                subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
            }
            
            model <- time_per_pixel ~ lws_y + I(1/lws_y)
            
            fit <- lm(data=subset,formula=model, na.action="na.exclude")
            for(j in 1:100){
                E <- residuals(fit)
                fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
            }
            
            
            pred <- function(x){
                as.numeric(predict(fit,data.frame(lws_y=x, interval="none")))
            }
            
            best_lws_y <- pruned_full_space[pred(pruned_full_space$lws_y) == min(pred(pruned_full_space$lws_y)),][1,]$lws_y
            
            subset <- subset[subset$lws_y == best_lws_y, ]
            pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]
            
        ###########################################
            
            if(nrow(subset) < 5 ){
                point_count[i] = point_count[i] + 5
                subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
            }
            
            model <- time_per_pixel ~ elements_number + I(elements_number^2)
            
            fit <- lm(data=subset,formula=model, na.action="na.exclude")
            for(j in 1:100){
                E <- residuals(fit)
                fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
            }
            
            pred <- function(x){
                as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
            }
            
            best_elements_number <- pruned_full_space[pred(pruned_full_space$elements_number) == min(pred(pruned_full_space$elements_number)),][1,]$elements_number
            
            subset <- subset[subset$elements_number == best_elements_number, ]
            pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]
            
        ###########################################
            
            if(nrow(subset) < 5 ){
                point_count[i] = point_count[i] + nrow(pruned_full_space)
                subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),])
            }
            
            model <- time_per_pixel ~ load_overlap
            
            fit <- lm(data=subset,formula=model, na.action="na.exclude")
            for(j in 1:10){
                E <- residuals(fit)
                fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
            }
            
            pred <- function(x){
                as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
            }
            
            best_load_overlap <- pruned_full_space[pred(pruned_full_space$load_overlap) == min(pred(pruned_full_space$load_overlap)),][1,]$load_overlap
            best_load_overlap_time <- pruned_full_space[pred(pruned_full_space$load_overlap) == min(pred(pruned_full_space$load_overlap)),][1,]$time_per_pixel
            
            model <- time_per_pixel ~ temporary_size
            
            fit <- lm(data=subset,formula=model, na.action="na.exclude")
            for(j in 1:10){
                E <- residuals(fit)
                fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
            }
            
            pred <- function(x){
                as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
            }
            
            best_temporary_size <- pruned_full_space[pred(pruned_full_space$temporary_size) == min(pred(pruned_full_space$temporary_size)),][1,]$temporary_size
            best_temporary_size_time <- pruned_full_space[pred(pruned_full_space$temporary_size) == min(pred(pruned_full_space$temporary_size)),][1,]$time_per_pixel
            
            subset <- df[df$y_component_number == best_base$y_component_number & 
                         df$vector_length == best_base$vector_length & 
                         df$threads_number == best_base$threads_number & 
                         df$lws_y == best_lws_y & 
                         df$elements_number == best_elements_number & 
                         df$load_overlap == best_load_overlap & 
                         df$temporary_size == best_temporary_size,]
            
            if(nrow(subset) < 1){
                if(best_temporary_size_time < best_load_overlap_time){
                    subset <- df[df$y_component_number == best_base$y_component_number & 
                                 df$vector_length == best_base$vector_length & 
                                 df$threads_number == best_base$threads_number & 
                                 df$lws_y == best_lws_y & 
                                 df$elements_number == best_elements_number & 
                                 df$temporary_size == best_temporary_size,]
                } else {
                    subset <- df[df$y_component_number == best_base$y_component_number & 
                                 df$vector_length == best_base$vector_length & 
                                 df$threads_number == best_base$threads_number & 
                                 df$lws_y == best_lws_y & 
                                 df$elements_number == best_elements_number & 
                                 df$load_overlap == best_load_overlap,]
                }
                
                if(nrow(subset > 1)){
                    
                }
            }
            
            df_rq_random <- rbind(df_rq_random, subset)
        }

        df_rq_random <- cbind(df_rq_random, point_number=point_count, method=rep("RQ",nrow(df_rq_random)))
        df_rq_random$slowdown <- df_rq_random$time_per_pixel / min(df$time_per_pixel) 
        write.csv(df_rq_random, output, row.names=FALSE)
     #+end_src

      #+begin_src sh :results output :exports both :tangle ../scripts/RQ_run.sh
        DAY=`date +%Y_%m_%d`
        DIR="../data/$DAY"
        mkdir -p $DIR
        DIR="$DIR/pilipili2"
        mkdir -p $DIR
        DIR="$DIR/algos"
        mkdir -p $DIR
        DIR="$DIR/RQ"
        mkdir -p $DIR
        INPUT="../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml"

        ruby ../scripts/format_data.rb $INPUT

        for i in `seq 1 100`; do 
            Rscript ../scripts/RQ_experiment.R ${DIR}/"$i.csv" &
        done
      #+end_src
*** DONE Investigating iterated regression error
    #+begin_src R :results output :session :exports both
      df1 <- read.csv("../data/2016_04_08/pilipili2/18_08_24/debug_iwr.csv")
    #+end_src

    #+RESULTS:

      
    That is strange because is the random set that failed earlier but
    here it works...
    #+begin_src R :results output :session :exports both
      f <- function(x) { x * (0.05 - 1 * (x < 0)) }
      g <- function(x) { f(x)/x^2 }
      h <- function(x) {pmin(g(x),1e15)}
      set.seed(1) 

      for (i in 1:10){
          model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
              vector_length + 
              lws_y + I(1/lws_y) +
              threads_number + I(1/threads_number)
          
          print("Before lm")
          fit <- lm(data=df1,formula=formula(model))
          for(j in 1:100){
              E <- residuals(fit)
              fit <- lm(data=df1,formula=formula(model),weights=h(E))
          }
          print("After lm")
      }
    #+end_src

    #+RESULTS:
    #+begin_example
    [1] "Before lm"
    [1] "After lm"
    [1] "Before lm"
    [1] "After lm"
    [1] "Before lm"
    [1] "After lm"
    [1] "Before lm"
    [1] "After lm"
    [1] "Before lm"
    [1] "After lm"
    [1] "Before lm"
    [1] "After lm"
    [1] "Before lm"
    [1] "After lm"
    [1] "Before lm"
    [1] "After lm"
    [1] "Before lm"
    [1] "After lm"
    [1] "Before lm"
    [1] "After lm"
#+end_example

    Let's try to generate random_set with the same seed... And it does
    not fail yet...
    #+begin_src R :results output :session :exports both
      f <- function(x) { x * (0.05 - 1 * (x < 0)) }
      g <- function(x) { f(x)/x^2 }
      h <- function(x) {pmin(g(x),1e15)}
      set.seed(1) 

      for (i in 1:10){
          random_set <- df[sample(1:nrow(df), size = 105, replace = FALSE),]
          model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
              vector_length + 
              lws_y + I(1/lws_y) +
              threads_number + I(1/threads_number)

          fit <- lm(data=random_set,formula=formula(model))
          for(j in 1:100){
              E <- residuals(fit)
              fit <- lm(data=random_set,formula=formula(model),weights=h(E))
          }
      }

    #+end_src

    #+RESULTS:
    
    Oh crap! I did not noticed the a two functions with the same name.
    #+begin_src R :results output :session :exports both
      f <- function(x) { x * (0.05 - 1 * (x < 0)) }
      g <- function(x) { f(x)/x^2 }
      h <- function(x) {pmin(g(x),1e15)}
      set.seed(1) 

      for (i in 1:10){
          model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
              vector_length + 
              lws_y + I(1/lws_y) +
              threads_number + I(1/threads_number)
          
          print("Before lm")
          fit <- lm(data=df1,formula=formula(model))
          for(j in 1:100){
              E <- residuals(fit)
              fit <- lm(data=df1,formula=formula(model),weights=h(E))
          }
          print("After lm")
          
          pred <- function(x){
              as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                                vector_length=x$vector_length, 
                                                threads_number=x$threads_number,
                                                lws_y=x$lws_y,
                                                interval="none")))
          }
          
          print("Before search")
          best_base <- df1[pred(df1[,c(2,3,7,8)]) == min(pred(df1[,c(2,3,7,8)])), c(2,3,7,8)][1,]
          print("After search")
      }
    #+end_src

        #+RESULTS:
        #+begin_example
        [1] "Before lm"
        [1] "After lm"
        [1] "Before search"
        [1] "After search"
        [1] "Before lm"
        [1] "After lm"
        [1] "Before search"
        [1] "After search"
        [1] "Before lm"
        [1] "After lm"
        [1] "Before search"
        [1] "After search"
        [1] "Before lm"
        [1] "After lm"
        [1] "Before search"
        [1] "After search"
        [1] "Before lm"
        [1] "After lm"
        [1] "Before search"
        [1] "After search"
        [1] "Before lm"
        [1] "After lm"
        [1] "Before search"
        [1] "After search"
        [1] "Before lm"
        [1] "After lm"
        [1] "Before search"
        [1] "After search"
        [1] "Before lm"
        [1] "After lm"
        [1] "Before search"
        [1] "After search"
        [1] "Before lm"
        [1] "After lm"
        [1] "Before search"
        [1] "After search"
        [1] "Before lm"
        [1] "After lm"
        [1] "Before search"
        [1] "After search"
#+end_example

** 2016-06-02
*** DONE Impact of na.action="na.exclude"
    - *Conclusion:* This seems to have no negative effect in the
      estimate of the quantile.
      This avoid to have some errors.
    #+begin_src sh :results output :exports both
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
    #+end_src
    
    #+begin_src R :results output :session :exports both
      df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
      random_set <- df[sample(1:nrow(df), size = 5, replace = FALSE),]

      model <- time_per_pixel ~ elements_number + I(1/elements_number) + I(elements_number^2)
      f <- function(x) { x * (0.05 - 1 * (x < 0)) }
      g <- function(x) { f(x)/x^2 }
      h <- function(x) {pmin(g(x),1e15)}

      fit1 <- lm(data=random_set,formula=formula(model))
      for(j in 1:200){
          E <- residuals(fit1)
          fit1 <- lm(data=random_set,formula=formula(model),weights=g(E))
      }
      summary(fit1)

      fit2 <- lm(data=random_set,formula=formula(model),na.action="na.exclude")
      for(j in 1:200){
          E <- residuals(fit2)
          fit2 <- lm(data=random_set,formula=formula(model),weights=g(E),na.action="na.exclude")
      }
      summary(fit2)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = formula(model), data = random_set, weights = g(E))

    Weighted Residuals:
         17372       2202      19598      10510      11140 
     1.873e-05  1.407e-07 -3.149e-08  1.471e-05 -3.712e-15 

    Coefficients: (2 not defined because of singularities)
                           Estimate Std. Error t value Pr(>|t|)    
    (Intercept)          -4.693e-10  1.009e-11  -46.52 2.19e-05 ***
    elements_number       2.284e-10  8.406e-13  271.66 1.10e-07 ***
    I(1/elements_number)         NA         NA      NA       NA    
    I(elements_number^2)         NA         NA      NA       NA    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 1.375e-05 on 3 degrees of freedom
    Multiple R-squared:      1,	Adjusted R-squared:  0.9999 
    F-statistic: 7.38e+04 on 1 and 3 DF,  p-value: 1.1e-07

    Call:
    lm(formula = formula(model), data = random_set, weights = g(E), 
        na.action = "na.exclude")

    Weighted Residuals:
         17372       2202      19598      10510      11140 
     1.873e-05  1.407e-07 -3.149e-08  1.471e-05 -3.712e-15 

    Coefficients: (2 not defined because of singularities)
                           Estimate Std. Error t value Pr(>|t|)    
    (Intercept)          -4.693e-10  1.009e-11  -46.52 2.19e-05 ***
    elements_number       2.284e-10  8.406e-13  271.66 1.10e-07 ***
    I(1/elements_number)         NA         NA      NA       NA    
    I(elements_number^2)         NA         NA      NA       NA    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 1.375e-05 on 3 degrees of freedom
    Multiple R-squared:      1,	Adjusted R-squared:  0.9999 
    F-statistic: 7.38e+04 on 1 and 3 DF,  p-value: 1.1e-07
    #+end_example

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
    plot(random_set$elements_number, random_set$time_per_pixel)
    lines(seq(1,12,0.1),as.numeric(predict(fit2,data.frame(elements_number=seq(1,12,0.1)),interval="none")),col="red")
    lines(seq(1,12,0.1),as.numeric(predict(fit1,data.frame(elements_number=seq(1,12,0.1)),interval="none")),col="green")
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-6458re_/figure6458sjL.png]]
*** Meta-Programming                                                      :R:
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:
    
    #+begin_src R :results output :session :exports none
      df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
    #+end_src

    #+RESULTS:

    Generate dynamically a data frame:
    #+begin_src R :results output :session :exports both
      names <- colnames(df)
      s <- paste("df2 <-data.frame(", paste(paste(names,names,sep="=df$"),collapse=","), ")")
      s
      eval(parse(text=s))
      summary(df2)
    #+end_src

    #+RESULTS:
    #+begin_example
    [1] "df2 <-data.frame( elements_number=df$elements_number,y_component_number=df$y_component_number,vector_length=df$vector_length,temporary_size=df$temporary_size,vector_recompute=df$vector_recompute,load_overlap=df$load_overlap,threads_number=df$threads_number,lws_y=df$lws_y,time_per_pixel=df$time_per_pixel )"
     elements_number  y_component_number vector_length   temporary_size 
     Min.   : 1.000   Min.   :1.000      Min.   : 1.00   Min.   :2.000  
     1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.00   1st Qu.:2.000  
     Median : 6.000   Median :3.000      Median : 4.00   Median :2.000  
     Mean   : 8.598   Mean   :3.441      Mean   : 5.73   Mean   :2.975  
     3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.00   3rd Qu.:4.000  
     Max.   :24.000   Max.   :6.000      Max.   :16.00   Max.   :4.000  
     vector_recompute load_overlap  threads_number       lws_y        
     true:23120       false:11400   Min.   :  32.0   Min.   :   1.00  
                      true :11720   1st Qu.:  64.0   1st Qu.:   4.00  
                                    Median : 256.0   Median :  16.00  
                                    Mean   : 368.1   Mean   :  73.58  
                                    3rd Qu.: 512.0   3rd Qu.:  64.00  
                                    Max.   :1024.0   Max.   :1024.00  
     time_per_pixel     
     Min.   :1.165e-10  
     1st Qu.:3.028e-10  
     Median :7.125e-10  
     Mean   :2.013e-09  
     3rd Qu.:2.001e-09  
     Max.   :4.452e-08
#+end_example

** 2016-06-03
*** TODO Check distribution convergence
    Run 1000 experiments compute the histogram for each

*** TODO Dynamic automatization 
    Dynamization of the analysis process in order to automatize it

    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

    #+begin_src R :results output :session :exports none
      df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
    #+end_src

    #+RESULTS:

    #+begin_src R :results output :session :exports both
      objective_predict <- function(fit,x){
          names <- colnames(x)
          s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
          eval(parse(text=s))
          as.numeric(predict(fit, values, interval="none"))
      }

          machin <- function(data,model){
            fit <- lm(formula(model),data)
            p <- coef(summary(fit))[,4] 
          }
          
    #+end_src


**** Extract p-values                                                     :R:
     #+begin_src R :results output :session :exports both
       fit <- lm(data=df,formula=time_per_pixel ~ elements_number + vector_length + lws_y + temporary_size)
       summary(fit)
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = time_per_pixel ~ elements_number + vector_length + 
         lws_y + temporary_size, data = df)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -7.085e-09 -1.222e-09 -4.750e-10  5.230e-10  3.818e-08 

     Coefficients:
                       Estimate Std. Error t value Pr(>|t|)    
     (Intercept)      8.219e-10  7.543e-11   10.90   <2e-16 ***
     elements_number -1.130e-10  3.352e-12  -33.71   <2e-16 ***
     vector_length    2.396e-10  3.921e-12   61.10   <2e-16 ***
     lws_y            9.453e-12  1.239e-13   76.27   <2e-16 ***
     temporary_size   3.167e-11  2.029e-11    1.56    0.119    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 3.083e-09 on 23115 degrees of freedom
     Multiple R-squared:  0.3115,	Adjusted R-squared:  0.3114 
     F-statistic:  2615 on 4 and 23115 DF,  p-value: < 2.2e-16
     #+end_example

     We can either compute p-values like this:
     #+begin_src R :results output :session :exports both
       (tstats <- coef(fit) / sqrt(diag(vcov(fit))))
       2 * pt(abs(tstats), df = df.residual(fit), lower.tail = FALSE)
     #+end_src

     #+RESULTS:
     :     (Intercept) elements_number   vector_length           lws_y  temporary_size 
     :       10.896324      -33.711880       61.096237       76.266326        1.560315
     :     (Intercept) elements_number   vector_length           lws_y  temporary_size 
     :    1.400579e-27   2.974186e-243    0.000000e+00    0.000000e+00    1.186992e-01

     Or retrieve it from summary like this:     
     #+begin_src R :results output :session :exports both
     coef(summary(fit))[,4]
     #+end_src

     #+RESULTS:
     :     (Intercept) elements_number   vector_length           lws_y  temporary_size 
     :    1.400579e-27   2.974186e-243    0.000000e+00    0.000000e+00    1.186992e-01

** 2016-06-04
*** DONE Improving worst solution                                :deprecated:
    _Analysis based on an incorrect strategy_
**** Generating the logs
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

    #+begin_src R :results output :session :exports none
      df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
    #+end_src

    #+RESULTS:

    
    #+begin_src R :results output :session :exports none
      objective_predict <- function(fit,x){
          names <- colnames(x)
          s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
          eval(parse(text=s))
          as.numeric(predict(fit, values, interval="none"))
      }

      objective_predict_one <- function(fit,x,colname){
          s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
          eval(parse(text=s))
          as.numeric(predict(fit, values, interval="none"))
      }

      find_best <- function(model,subset,full_set,colnames){
          fit <- lm(data=subset,formula=formula(model))
          if( length(colnames) > 1) {
              return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
          }
          else{
              return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
          }
      }

      set.seed(1) 
      runs = 100
      df_lm_random <- data.frame()
      point_count <- c()
      logs <- data.frame()
      additional_points <- data.frame()

      for(i in 1:runs){
          random_set <- df[sample(1:nrow(df), size = 105, replace = FALSE),]
          best_time <- min(random_set$time_per_pixel)
          tmp <- cbind(random_set, run=rep(i,nrow(random_set)))
          logs <- rbind(logs, tmp)
          point_count[i] <- nrow(random_set)
          
          model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
              vector_length + 
              lws_y + I(1/lws_y) +
              threads_number + I(1/threads_number)
          
          best_base <- find_best(model, random_set, df, c("y_component_number", "vector_length", "lws_y", "threads_number")) 

          subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
          pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
          
      ###########################################
      #
      #               Step 1
      #
      ###########################################      
          
          if(nrow(subset) < 5 ){
              tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),]
              subset <- rbind(subset,tmp2)
              additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(1,nrow(tmp2))))
              point_count[i] <- point_count[i] + 5
          }
          
          if(best_time > min(subset$time_per_pixel)){
            best_time <- min(subset$time_per_pixel)
          }

          model <- time_per_pixel ~ lws_y + I(1/lws_y)
          
          best_lws_y <- find_best(model, subset, pruned_full_space, c("lws_y"))
          
          subset <- subset[subset$lws_y == best_lws_y, ]
          pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]
          
      ###########################################
      #
      #               Step 2
      #
      ###########################################      

          if(nrow(subset) < 5 ){
              tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),]
              additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(2,nrow(tmp2))))
              subset <- rbind(subset,tmp2)
              point_count[i] <- point_count[i] + 5
          }

          if(best_time > min(subset$time_per_pixel)){
            best_time <- min(subset$time_per_pixel)
          }
          
          model <- time_per_pixel ~ elements_number + I(elements_number^2)
          
          best_elements_number <- find_best(model, subset, pruned_full_space, c("elements_number"))

          subset <- subset[subset$elements_number == best_elements_number, ]
          pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]
          
      ###########################################
      #
      #               Step 3
      #
      ###########################################      

          if(nrow(subset) < 5 ){
              tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),]
              additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(3,nrow(tmp2))))
              subset <- rbind(subset,tmp2)
              point_count[i] <- point_count[i] + nrow(pruned_full_space)
          }

          if(best_time > min(subset$time_per_pixel)){
            best_time <- min(subset$time_per_pixel)
          }

          model <- time_per_pixel ~ load_overlap
          
          fit <- lm(data=subset,formula=model)
          
          best_load_overlap <- pruned_full_space[objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap") == min(objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap")),][1,]$load_overlap
          best_load_overlap_time <- pruned_full_space[objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap") == min(objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap")),][1,]$time_per_pixel
          
          model <- time_per_pixel ~ temporary_size
          
          fit <- lm(data=subset,formula=model)
          
          best_temporary_size <- pruned_full_space[objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size") == min(objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size")),][1,]$temporary_size
          best_temporary_size_time <- pruned_full_space[objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size") == min(objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size")),][1,]$time_per_pixel
          
          subset <- df[df$y_component_number == best_base$y_component_number & 
                       df$vector_length == best_base$vector_length & 
                       df$threads_number == best_base$threads_number & 
                       df$lws_y == best_lws_y & 
                       df$elements_number == best_elements_number & 
                       df$load_overlap == best_load_overlap & 
                       df$temporary_size == best_temporary_size,]
          
          if(nrow(subset) < 1){
              if(best_temporary_size_time < best_load_overlap_time){
                  subset <- df[df$y_component_number == best_base$y_component_number & 
                               df$vector_length == best_base$vector_length & 
                               df$threads_number == best_base$threads_number & 
                               df$lws_y == best_lws_y & 
                               df$elements_number == best_elements_number & 
                               df$temporary_size == best_temporary_size,]
              } else {
                  subset <- df[df$y_component_number == best_base$y_component_number & 
                               df$vector_length == best_base$threads_number & 
                                   df$lws_y == best_lws_y & 
                                   df$elements_number == best_elements_number & 
                                   df$load_overlap == best_load_overlap,]
              }
              
              if(nrow(subset > 1)){
                  subset <- subset[subset$time_per_pixel==min(subset$time_per_pixel),]
              }
          }
          
          subset$run <- i
          df_lm_random <- rbind(df_lm_random, cbind(subset, best=best_time))
      }

      df_lm_random <- cbind(df_lm_random, point_number=point_count, method=rep("LM",nrow(df_lm_random)))
      df_lm_random$slowdown <- df_lm_random$time_per_pixel / min(df$time_per_pixel)
      write.csv(df_lm_random, "../data/2016_04_08/pilipili2/18_08_24/lm_random_improve_trial.csv", row.names=FALSE)
      write.csv(logs, "../data/2016_04_08/pilipili2/18_08_24/lm_random_logs.csv", row.names=FALSE)
      write.csv(additional_points, "../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_additional_points.csv", row.names=FALSE)
    #+end_src

    #+RESULTS:
    :  There were 18 warnings (use warnings() to see them)

     #+begin_src R :results output :session :exports both
       library(ggplot2)
       library(plyr)
       
       # ggplot(df_lm_random, aes(best/min(df$time_per_pixel))) + 
       ggplot(df_lm_random, aes(slowdown)) + 
           geom_histogram(binwidth=.05,color="white", fill="gray1") +
           labs(y="Density", x="Percentage of the speedup of best combination") +
           ggtitle("") 
     #+end_src

     #+RESULTS:

**** Analysis
***** Why did it failed
      #+begin_src R :results output :session :exports both
        logs <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_logs.csv",strip.white=T,header=T)
        df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_improve_trial.csv",strip.white=T,header=T)
        working_set <- logs[logs$run == df_lm_random[df_lm_random$slowdown==max(df_lm_random$slowdown),]$run,]
      #+end_src
      
      One of the reason it failed is because we fixed y component
      number and threads number and they are not relevant yet and the
      standard error is too high for y component number:
      #+begin_src R :results output :session :exports both
        model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
            vector_length + 
            lws_y + I(1/lws_y) +
            threads_number + I(1/threads_number)
        
        fit <- lm(data=working_set,formula=formula(model))
        summary(fit)                
      #+end_src

      #+RESULTS:
      #+begin_example

      Call:
      lm(formula = formula(model), data = working_set)

      Residuals:
             Min         1Q     Median         3Q        Max 
      -4.225e-09 -9.116e-10 -3.265e-10  5.105e-10  1.990e-08 

      Coefficients:
                                Estimate Std. Error t value Pr(>|t|)   
      (Intercept)              1.261e-09  2.177e-09   0.579  0.56388   
      y_component_number      -1.679e-10  3.463e-10  -0.485  0.62893   
      I(1/y_component_number) -3.274e-10  2.030e-09  -0.161  0.87222   
      vector_length            1.570e-10  5.241e-11   2.996  0.00347 **
      lws_y                    4.143e-12  1.470e-12   2.819  0.00584 **
      I(1/lws_y)              -2.190e-09  9.247e-10  -2.369  0.01983 * 
      threads_number          -5.232e-13  1.179e-12  -0.444  0.65820   
      I(1/threads_number)      8.948e-08  4.006e-08   2.233  0.02782 * 
      ---
      Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

      Residual standard error: 2.787e-09 on 97 degrees of freedom
      Multiple R-squared:  0.2925,	Adjusted R-squared:  0.2414 
      F-statistic: 5.728 on 7 and 97 DF,  p-value: 1.453e-05
      #+end_example

      #+begin_src R :results output :session :exports both
       objective_predict <- function(x){
            as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                              vector_length=x$vector_length, 
                                              threads_number=x$threads_number,
                                              lws_y=x$lws_y,
                                              interval="none")))
        }
        
        best_base <- df[objective_predict(df[,c(2,3,7,8)]) == min(objective_predict(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]
        
        subset <- working_set[working_set$y_component_number == best_base$y_component_number & working_set$vector_length == best_base$vector_length & working_set$threads_number == best_base$threads_number, ]
        pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
        best_base
      #+end_src

      #+RESULTS:
      :      y_component_number vector_length threads_number lws_y
      : 7103                  6             1           1024     1

      What would be the potential solution? I guess it due to luck but
      we get the right values! It failed somewhere else.
      #+begin_src R :results output :session :exports both
        pruned_full_space[pruned_full_space$time_per_pixel == min(pruned_full_space$time_per_pixel),]$time_per_pixel / min(df$time_per_pixel)
      #+end_src

      #+RESULTS:
      : [1] 1

      #+begin_src R :results output :session :exports both
       nrow(subset)
      #+end_src

      #+RESULTS:
      : [1] 1

      #+begin_src R :results output :session :exports both
        subset <- rbind(subset[,seq(1,9)], pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
      #+end_src

      #+RESULTS:

      #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
        plot(subset[,c(1,4,6,8,9)])
      #+end_src
      
      #+RESULTS:
      [[file:/tmp/babel-2560wTm/figure2560JAN.png]]

***** Lets improve it
****** Taking into account the information to redine the model
    #+begin_src R :results output :session :exports both
      logs <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_logs.csv",strip.white=T,header=T)
      df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_improve_trial.csv",strip.white=T,header=T)
    #+end_src

    The worst case happen at the 25th runs:
    #+begin_src R :results output :session :exports both
      df_lm_random[df_lm_random$slowdown==max(df_lm_random$slowdown),]
    #+end_src

    #+RESULTS:
    :      elements_number y_component_number vector_length temporary_size
    : 6861              24                  6             1              2
    :      vector_recompute load_overlap threads_number lws_y time_per_pixel run
    : 6861             true         true           1024  1024   3.735084e-09  25
    :      point_number method slowdown
    : 6861          119     LM 32.06044

    Lets study it and try to improve the result:
    #+begin_src R :results output :session :exports both
      working_set <- logs[logs$run == df_lm_random[df_lm_random$slowdown==max(df_lm_random$slowdown),]$run,]
      summary(working_set)
    #+end_src

    #+RESULTS:
    #+begin_example
     elements_number  y_component_number vector_length    temporary_size 
     Min.   : 1.000   Min.   :1.000      Min.   : 1.000   Min.   :2.000  
     1st Qu.: 3.000   1st Qu.:2.000      1st Qu.: 2.000   1st Qu.:2.000  
     Median : 6.000   Median :4.000      Median : 4.000   Median :2.000  
     Mean   : 9.257   Mean   :3.638      Mean   : 6.152   Mean   :2.952  
     3rd Qu.:15.000   3rd Qu.:5.000      3rd Qu.: 8.000   3rd Qu.:4.000  
     Max.   :24.000   Max.   :6.000      Max.   :16.000   Max.   :4.000  
     vector_recompute load_overlap threads_number       lws_y        
     true:105         false:48     Min.   :  32.0   Min.   :   1.00  
                      true :57     1st Qu.: 128.0   1st Qu.:   4.00  
                                   Median : 256.0   Median :   8.00  
                                   Mean   : 396.2   Mean   :  87.55  
                                   3rd Qu.: 512.0   3rd Qu.:  64.00  
                                   Max.   :1024.0   Max.   :1024.00  
     time_per_pixel           run    
     Min.   :1.193e-10   Min.   :25  
     1st Qu.:3.256e-10   1st Qu.:25  
     Median :7.412e-10   Median :25  
     Mean   :1.824e-09   Mean   :25  
     3rd Qu.:2.245e-09   3rd Qu.:25  
     Max.   :2.590e-08   Max.   :25
#+end_example

    The space covering seems similar between the best and the worst: 
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      plot(working_set[,c(1,2,3,4,6,7,8)])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-2560wTm/figure2560iMe.png]]

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      plot(logs[logs$run == df_lm_random[df_lm_random$slowdown==min(df_lm_random$slowdown),]$run,c(1,2,3,4,6,7,8)])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-2560wTm/figure2560Jrw.png]]

    What are the parameters that have the biggest impact:
    #+begin_src R :results output :session :exports both
    fit <- lm(time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y + load_overlap + temporary_size, working_set)
    summary(fit) 
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = time_per_pixel ~ elements_number + y_component_number + 
        vector_length + threads_number + lws_y + load_overlap + temporary_size, 
        data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -3.565e-09 -1.150e-09 -3.410e-10  6.425e-10  2.056e-08 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)         8.921e-10  1.248e-09   0.715 0.476539    
    elements_number    -1.802e-10  6.259e-11  -2.879 0.004904 ** 
    y_component_number  3.823e-10  2.313e-10   1.652 0.101698    
    vector_length       1.929e-10  5.084e-11   3.794 0.000258 ***
    threads_number     -2.696e-12  8.913e-13  -3.025 0.003187 ** 
    lws_y               6.459e-12  1.424e-12   4.536 1.64e-05 ***
    load_overlaptrue    4.466e-10  5.630e-10   0.793 0.429547    
    temporary_size      9.575e-11  2.777e-10   0.345 0.730943    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.786e-09 on 97 degrees of freedom
    Multiple R-squared:  0.2927,	Adjusted R-squared:  0.2417 
    F-statistic: 5.736 on 7 and 97 DF,  p-value: 1.43e-05
    #+end_example
    
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      plot(working_set[,c(1,2,3,4,6,7,8,9)])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-2560wTm/figure2560I_F.png]]

    We remove useless parameters and look for interactions. It seems
    that the parameters that should by fixed first are the
    vector_length and lws_y:
    #+begin_src R :results output :session :exports both
      fit <- lm(time_per_pixel ~ (elements_number + vector_length + threads_number + lws_y)^2, working_set)
      summary(fit) 
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = time_per_pixel ~ (elements_number + vector_length + 
        threads_number + lws_y)^2, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -5.498e-09 -9.213e-10 -2.091e-10  3.434e-10  1.734e-08 

    Coefficients:
                                     Estimate Std. Error t value Pr(>|t|)    
    (Intercept)                    -3.416e-10  9.290e-10  -0.368 0.713938    
    elements_number                -7.343e-13  7.200e-11  -0.010 0.991885    
    vector_length                   5.689e-10  1.067e-10   5.334 6.61e-07 ***
    threads_number                  1.212e-12  1.804e-12   0.672 0.503412    
    lws_y                           2.189e-11  7.116e-12   3.076 0.002747 ** 
    elements_number:vector_length  -2.043e-11  6.772e-12  -3.017 0.003283 ** 
    elements_number:threads_number -1.067e-14  1.303e-13  -0.082 0.934944    
    elements_number:lws_y          -3.876e-14  2.144e-13  -0.181 0.856923    
    vector_length:threads_number   -6.421e-13  1.823e-13  -3.522 0.000663 ***
    vector_length:lws_y             7.868e-13  3.682e-13   2.137 0.035177 *  
    threads_number:lws_y           -1.932e-14  6.745e-15  -2.864 0.005153 ** 
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.547e-09 on 94 degrees of freedom
    Multiple R-squared:  0.4274,	Adjusted R-squared:  0.3665 
    F-statistic: 7.017 on 10 and 94 DF,  p-value: 3.885e-08
    #+end_example

    #+begin_src R :results output :session :exports both
    
    #+end_src

    Lets test a model. We now that there is no vector support on
    Nvidia so the impact of vector_length should be simple. Lws_y is
    likely to have a quadratic or asymptotic:
    #+begin_src R :results output :session :exports both
      fit <- lm(time_per_pixel ~ vector_length + lws_y + elements_number:vector_length + vector_length:threads_number + threads_number:lws_y , working_set)
      summary(fit) 
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = time_per_pixel ~ vector_length + lws_y + elements_number:vector_length + 
        vector_length:threads_number + threads_number:lws_y, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -5.299e-09 -9.808e-10 -1.145e-10  3.193e-10  1.784e-08 

    Coefficients:
                                    Estimate Std. Error t value Pr(>|t|)    
    (Intercept)                   -1.463e-10  4.150e-10  -0.353 0.725172    
    vector_length                  5.397e-10  8.041e-11   6.712 1.22e-09 ***
    lws_y                          2.330e-11  6.567e-12   3.547 0.000597 ***
    vector_length:elements_number -1.918e-11  4.486e-12  -4.275 4.40e-05 ***
    vector_length:threads_number  -4.626e-13  1.105e-13  -4.186 6.16e-05 ***
    lws_y:threads_number          -1.789e-14  6.530e-15  -2.740 0.007292 ** 
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.546e-09 on 99 degrees of freedom
    Multiple R-squared:  0.3974,	Adjusted R-squared:  0.367 
    F-statistic: 13.06 on 5 and 99 DF,  p-value: 9.184e-10
#+end_example

    So what is the best values for vector_length and lws_y?
    #+begin_src R :results output :session :exports both
      objective_predict <- function(x){
          as.numeric(predict(fit,data.frame(vector_length=x$vector_length, 
                                            lws_y=x$lws_y,
                                            elements_number=x$elements_number,
                                            threads_number=x$threads_number,
                                            interval="none")))
      }
      
      best_base <- df[objective_predict(df[,c("vector_length","lws_y","threads_number","elements_number")]) == min(objective_predict(df[,c("vector_length","lws_y","threads_number","elements_number")])), c("vector_length","lws_y","threads_number","elements_number")][1,]
      best_base
    #+end_src

    #+RESULTS:
    :       vector_length lws_y threads_number elements_number
    : 21807             8     1           1024              24

    If we prune the search space now the best solution we can get
    brings a speed up of:
    #+begin_src R :results output :session :exports both
      min(df[df$vector_length == 8 & df$lws_y == 1 & df$threads_number == 1024 & df$elements_number ==24 ,]$time_per_pixel) / df[df$time_per_pixel == min(df$time_per_pixel),]$time_per_pixel
    #+end_src

    #+RESULTS:
    : [1] 2.622652

    Obviously we are not supposed to fix those parameters now but the
    potential solution is a lot more better than the solution we had
    from the automated process. What is the potential solution by
    fixing only vector length and lws y?
    #+begin_src R :results output :session :exports both
      min(df[df$vector_length == 8 & df$lws_y == 1,]$time_per_pixel) / df[df$time_per_pixel == min(df$time_per_pixel),]$time_per_pixel
    #+end_src

    #+RESULTS:
    : [1] 1.812576

    And what if we only fix vector_length? It is very close.
    #+begin_src R :results output :session :exports both
      min(df[df$vector_length == 8,]$time_per_pixel) / df[df$time_per_pixel == min(df$time_per_pixel),]$time_per_pixel
    #+end_src

    #+RESULTS:
    : [1] 1.812557

    Lets assume we fix them both:
    #+begin_src R :results output :session :exports both
      pruned_working_set <- working_set[working_set$vector_length == 8 & working_set$lws_y == 1,]
      pruned_df <- df[df$vector_length == 8 & df$lws_y == 1,] 
      nrow(pruned_working_set)
    #+end_src

    #+RESULTS:
    : [1] 4

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      plot(pruned_working_set[,c(1,2,4,6,7,9)])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-2560wTm/figure25608ne.png]]

    Lets add more point:
    #+begin_src R :results output :session :exports both
      pruned_working_set <- pruned_working_set[,seq(1,9)]
      pruned_working_set <- rbind(pruned_working_set, pruned_df[sample(1:nrow(pruned_df), size = 5, replace = FALSE),])
    #+end_src

    #+RESULTS:

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      plot(pruned_working_set[,c(1,2,4,6,7,9)])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-2560wTm/figure2560vkM.png]]


    #+begin_src R :results output :session :exports both
      fit <- lm(time_per_pixel ~ (elements_number + I(1/elements_number) + y_component_number + threads_number + temporary_size + load_overlap), pruned_working_set)
      summary(fit) 
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = time_per_pixel ~ (elements_number + I(1/elements_number) + 
        y_component_number + threads_number + temporary_size + load_overlap), 
        data = pruned_working_set)

    Residuals:
         22852      92331     184281       4009      22713       3988      15393 
     1.236e-11 -3.921e-12 -5.659e-12 -2.951e-12  8.610e-12 -2.344e-11  6.395e-12 
         15404      20310 
     6.741e-12  1.869e-12 

    Coefficients:
                           Estimate Std. Error t value Pr(>|t|)   
    (Intercept)          -9.847e-11  9.823e-11  -1.002  0.42171   
    elements_number      -9.422e-12  7.182e-12  -1.312  0.31989   
    I(1/elements_number)  1.581e-09  7.317e-11  21.611  0.00213 **
    y_component_number    8.324e-11  1.114e-11   7.474  0.01743 * 
    threads_number        4.555e-14  3.827e-14   1.190  0.35611   
    temporary_size        2.214e-11  1.731e-11   1.279  0.32917   
    load_overlaptrue      2.363e-12  2.364e-11   0.100  0.92950   
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.147e-11 on 2 degrees of freedom
    Multiple R-squared:  0.9993,	Adjusted R-squared:  0.9974 
    F-statistic: 508.2 on 6 and 2 DF,  p-value: 0.001965
#+end_example

    Maybe we need a little more points
    #+begin_src R :results output :session :exports both
      pruned_working_set2 <- rbind(pruned_working_set, pruned_df[sample(1:nrow(pruned_df), size = 5, replace = FALSE),])
    #+end_src

    #+RESULTS:

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      plot(pruned_working_set2[,c(1,2,4,6,7,9)])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-2560wTm/figure2560jNl.png]]

    Adding more point is not use full:
    #+begin_src R :results output :session :exports both
      fit <- lm(time_per_pixel ~ (elements_number + I(1/elements_number) + y_component_number + I(1/y_component_number) + threads_number + I(1/threads_number) + temporary_size + load_overlap), pruned_working_set2)
      summary(fit) 
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = time_per_pixel ~ (elements_number + I(1/elements_number) + 
        y_component_number + I(1/y_component_number) + threads_number + 
        I(1/threads_number) + temporary_size + load_overlap), data = pruned_working_set2)

    Residuals:
         22852      92331     184281       4009      22713       3988      15393 
    -1.943e-11  5.348e-11  2.174e-11 -5.258e-12  1.613e-12 -2.679e-11  1.605e-12 
         15404      20310       2716       7803       9548       7970       5991 
    -7.413e-12  1.696e-11  2.352e-11 -6.555e-11  2.362e-11 -4.955e-11  3.145e-11 

    Coefficients:
                              Estimate Std. Error t value Pr(>|t|)    
    (Intercept)             -1.154e-11  1.842e-10  -0.063 0.952483    
    elements_number         -1.682e-11  9.863e-12  -1.705 0.148889    
    I(1/elements_number)     1.313e-09  1.774e-10   7.401 0.000709 ***
    y_component_number       7.009e-11  3.548e-11   1.976 0.105144    
    I(1/y_component_number) -1.863e-11  3.068e-10  -0.061 0.953935    
    threads_number           2.103e-13  2.143e-13   0.981 0.371595    
    I(1/threads_number)      7.537e-09  5.751e-09   1.311 0.246974    
    temporary_size           1.335e-11  2.488e-11   0.537 0.614553    
    load_overlaptrue        -1.278e-11  4.313e-11  -0.296 0.778908    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 5.226e-11 on 5 degrees of freedom
    Multiple R-squared:  0.9914,	Adjusted R-squared:  0.9778 
    F-statistic: 72.44 on 8 and 5 DF,  p-value: 9.591e-05
#+end_example

    If we remove load_overlap and temporary the other parameters
    appears to be relevant:
    #+begin_src R :results output :session :exports both
      fit <- lm(time_per_pixel ~ elements_number + I(1/elements_number) + y_component_number + threads_number, pruned_working_set)
      summary(fit) 
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = time_per_pixel ~ elements_number + I(1/elements_number) + 
        y_component_number + threads_number, data = pruned_working_set)

    Residuals:
         22852      92331     184281       4009      22713       3988      15393 
     1.036e-11  1.363e-11 -1.344e-11 -1.896e-12  2.329e-11 -2.434e-11 -3.969e-12 
         15404      20310 
     5.553e-12 -9.194e-12 

    Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
    (Intercept)           1.497e-11  3.705e-11   0.404 0.706784    
    elements_number      -1.712e-11  2.975e-12  -5.756 0.004518 ** 
    I(1/elements_number)  1.510e-09  4.222e-11  35.767 3.65e-06 ***
    y_component_number    9.107e-11  6.874e-12  13.248 0.000188 ***
    threads_number        6.759e-14  2.393e-14   2.825 0.047587 *  
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.088e-11 on 4 degrees of freedom
    Multiple R-squared:  0.9988,	Adjusted R-squared:  0.9975 
    F-statistic: 805.8 on 4 and 4 DF,  p-value: 4.605e-06
#+end_example

    Lets fix elements_number and y_component_number:
    #+begin_src R :results output :session :exports both
      fit <- lm(time_per_pixel ~ elements_number + I(1/elements_number) + y_component_number, pruned_working_set)
      summary(fit) 
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = time_per_pixel ~ elements_number + I(1/elements_number) + 
        y_component_number, data = pruned_working_set)

    Residuals:
         22852      92331     184281       4009      22713       3988      15393 
     4.882e-11  3.565e-11 -1.807e-11 -1.567e-11 -1.399e-12 -2.204e-11 -1.873e-11 
         15404      20310 
    -1.205e-11  3.484e-12 

    Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
    (Intercept)           6.753e-11  4.959e-11   1.362   0.2315    
    elements_number      -1.790e-11  4.585e-12  -3.905   0.0114 *  
    I(1/elements_number)  1.479e-09  6.309e-11  23.444 2.63e-06 ***
    y_component_number    8.640e-11  1.033e-11   8.365   0.0004 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 3.232e-11 on 5 degrees of freedom
    Multiple R-squared:  0.9963,	Adjusted R-squared:  0.9941 
    F-statistic: 447.3 on 3 and 5 DF,  p-value: 1.709e-06
#+end_example

    #+begin_src R :results output :session :exports both
      objective_predict <- function(x){
          as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number,
                                            elements_number=x$elements_number,
                                            interval="none")))
      }
      best_elm_ycomp <- pruned_df[objective_predict(pruned_df[,c("elements_number","y_component_number")]) == min(objective_predict(pruned_df[,c("elements_number","y_component_number")])), c("elements_number","y_component_number")][1,]
      best_elm_ycomp
    #+end_src

    #+RESULTS:
    :      elements_number y_component_number
    : 6446              20                  5

    #+begin_src R :results output :session :exports both
      pruned_working_set <- pruned_working_set[pruned_working_set$elements_number == 20 & pruned_working_set$y_component_number == 5,]
      pruned_df <- pruned_df[pruned_df$elements_number == 20 & pruned_df$y_component_number == 5,]
      nrow(pruned_working_set)
      nrow(pruned_df)
    #+end_src

    #+RESULTS:
    : [1] 0
    : [1] 22

    At this step what is the best potential solution? It is a little
    worse than previously...
    #+begin_src R :results output :session :exports both
      min(pruned_df$time_per_pixel) / min(df$time_per_pixel)
    #+end_src

    #+RESULTS:
    : [1] 1.872369
    
    Lets add a few more points:
    #+begin_src R :results output :session :exports both
      pruned_working_set <- rbind(pruned_working_set, pruned_df[sample(1:nrow(pruned_df), size = 5, replace = FALSE),])    
    #+end_src

    #+RESULTS:

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      plot(pruned_working_set[,c(4,6,7,9)])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-2560wTm/figure25609hx.png]]

    #+begin_src R :results output :session :exports both
      pruned_working_set2 <- rbind(pruned_working_set, pruned_df[sample(1:nrow(pruned_df), size = 5, replace = FALSE),])    
    #+end_src

    #+RESULTS:

    It is better with few more points:
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      plot(pruned_working_set2[,c(4,6,7,9)])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-2560wTm/figure2560vrA.png]]


    But first lets try with the first set. We can see the impact of
    threads number on the plot below but it does not appear in the summary:
    #+begin_src R :results output :session :exports both
      fit <- lm(time_per_pixel ~ threads_number + load_overlap + temporary_size, pruned_working_set)
      summary(fit) 
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = time_per_pixel ~ threads_number + load_overlap + 
        temporary_size, data = pruned_working_set)

    Residuals:
         16031      18037      20529      21771      15460 
    -1.925e-12 -1.925e-12  1.925e-12  1.925e-12  1.515e-27 

    Coefficients:
                       Estimate Std. Error t value Pr(>|t|)  
    (Intercept)       2.607e-10  1.262e-11  20.663   0.0308 *
    threads_number    7.940e-14  9.949e-15   7.980   0.0794 .
    load_overlaptrue -4.197e-12  3.851e-12  -1.090   0.4726  
    temporary_size   -1.177e-11  3.184e-12  -3.697   0.1682  
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 3.851e-12 on 1 degrees of freedom
    Multiple R-squared:  0.9977,	Adjusted R-squared:  0.9907 
    F-statistic: 143.3 on 3 and 1 DF,  p-value: 0.06131
    #+end_example

    So lets consider only threads_number:
    #+begin_src R :results output :session :exports both
      fit <- lm(time_per_pixel ~ threads_number, pruned_working_set)
      summary(fit)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = time_per_pixel ~ threads_number, data = pruned_working_set)

    Residuals:
         16031      18037      20529      21771      15460 
    -4.668e-12  4.448e-12 -5.014e-12  1.250e-11 -7.261e-12 

    Coefficients:
                    Estimate Std. Error t value Pr(>|t|)    
    (Intercept)    2.130e-10  7.364e-12  28.917 9.08e-05 ***
    threads_number 1.060e-13  1.300e-14   8.159  0.00385 ** 
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 9.584e-12 on 3 degrees of freedom
    Multiple R-squared:  0.9569,	Adjusted R-squared:  0.9425 
    F-statistic: 66.57 on 1 and 3 DF,  p-value: 0.003851
#+end_example

    We look for the best value:
    #+begin_src R :results output :session :exports both
      objective_predict <- function(x){
          as.numeric(predict(fit,data.frame(threads_number=x,
                                            interval="none")))
      }
      best_th_nb <- pruned_df[objective_predict(pruned_df[,c("threads_number")]) == min(objective_predict(pruned_df[,c("threads_number")])), c("threads_number")][1]
      best_th_nb
    #+end_src

    #+RESULTS:
    : [1] 32

    Lets fix threads number:
    #+begin_src R :results output :session :exports both
      pruned_working_set <- pruned_working_set[pruned_working_set$threads_number == 32,]
      pruned_df <- pruned_df[pruned_df$threads_number == 32,]
      nrow(pruned_working_set)
      nrow(pruned_df)      
    #+end_src

    #+RESULTS:
    : [1] 0
    : [1] 4

    As it remains only for point and we still have the budget we can
    take the minimum:
    #+begin_src R :results output :session :exports both
      pruned_df[pruned_df$time_per_pixel==min(pruned_df$time_per_pixel),]
    #+end_src

    #+RESULTS:
    :      elements_number y_component_number vector_length temporary_size
    : 6608              20                  5             8              4
    :      vector_recompute load_overlap threads_number lws_y time_per_pixel
    : 6608             true        false             32     1   2.532311e-10

    Which has a slowdown of which is a lot better than x32:
    #+begin_src R :results output :session :exports both
      pruned_df[pruned_df$time_per_pixel==min(pruned_df$time_per_pixel),]$time_per_pixel / min(df$time_per_pixel)
    #+end_src

    #+RESULTS:
    : [1] 2.173633

    Now what if we try with the other set:
    #+begin_src R :results output :session :exports both
      fit <- lm(time_per_pixel ~ threads_number + I(threads_number^2), pruned_working_set2)
      summary(fit)     
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = time_per_pixel ~ threads_number + I(threads_number^2), 
        data = pruned_working_set2)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -5.932e-12 -2.973e-12 -8.344e-13  3.271e-12  7.918e-12 

    Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
    (Intercept)          2.002e-10  3.567e-12  56.138 1.49e-10 ***
    threads_number       1.808e-13  1.893e-14   9.549 2.90e-05 ***
    I(threads_number^2) -6.691e-17  1.784e-17  -3.750  0.00717 ** 
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 4.892e-12 on 7 degrees of freedom
    Multiple R-squared:  0.9847,	Adjusted R-squared:  0.9803 
    F-statistic: 224.7 on 2 and 7 DF,  p-value: 4.47e-07
#+end_example

    We look for the best value. And we end up with the same value for threads_number:
    #+begin_src R :results output :session :exports both
      objective_predict <- function(x){
          as.numeric(predict(fit,data.frame(threads_number=x,
                                            interval="none")))
      }
      best_th_nb <- pruned_df[objective_predict(pruned_df[,c("threads_number")]) == min(objective_predict(pruned_df[,c("threads_number")])), c("threads_number")][1]
      best_th_nb

    #+end_src

    #+RESULTS:
    : [1] 32

    What was the best one is the working set at the beginning? ... To
    bad we had a very good solution in our random set and we did worse:
    #+begin_src R :results output :session :exports both
      working_set[working_set$time_per_pixel == min(working_set$time_per_pixel),]$time_per_pixel / min(df$time_per_pixel)
    #+end_src

    #+RESULTS:
    : [1] 1.023715

******  Allocation of points

        #+begin_src R :results output :session :exports none
          objective_predict <- function(fit,x){
              names <- colnames(x)
              s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
              eval(parse(text=s))
              as.numeric(predict(fit, values, interval="none"))
          }

          objective_predict_one <- function(fit,x,colname){
              s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
              eval(parse(text=s))
              as.numeric(predict(fit, values, interval="none"))
          }

          find_best <- function(model,subset,full_set,colnames){
              fit <- lm(data=subset,formula=formula(model))
              if( length(colnames) > 1) {
                  return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
              }
              else{
                  return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
              }
          }

          set.seed(1) 
          runs = 100
          df_lm_random <- data.frame()
          point_count <- c()
          logs <- data.frame()
          additional_points <- data.frame()

          for(i in 1:runs){
              random_set <- df[sample(1:nrow(df), size = 90, replace = FALSE),]
              best_time <- min(random_set$time_per_pixel)
              tmp <- cbind(random_set, run=rep(i,nrow(random_set)))
              logs <- rbind(logs, tmp)
              point_count[i] <- nrow(random_set)
              
              model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
                  vector_length + 
                  lws_y + I(1/lws_y) +
                  threads_number + I(1/threads_number)
              
              best_base <- find_best(model, random_set, df, c("y_component_number", "vector_length", "lws_y", "threads_number")) 
              
              subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
              pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
              
          ###########################################
                                                  #
                                                  #               Step 1
                                                  #
          ###########################################      
              budget <- 30
              if(nrow(subset) < budget ){
                  if(nrow(pruned_full_space) <= budget) { 
                      budget <-  nrow(pruned_full_space) 
                  } 
                  tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = budget, replace = FALSE),]
                  subset <- rbind(subset,tmp2)
                  additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(1,nrow(tmp2))))
                  point_count[i] <- point_count[i] + budget
              }
              
              if(best_time > min(subset$time_per_pixel)){
                  best_time <- min(subset$time_per_pixel)
              }
              
              model <- time_per_pixel ~ lws_y + I(1/lws_y)
              
              best_lws_y <- find_best(model, subset, pruned_full_space, c("lws_y"))
              
              subset <- subset[subset$lws_y == best_lws_y, ]
              pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]
              
          ###########################################
                                                  #
                                                  #               Step 2
                                                  #
          ###########################################      
              
              if(nrow(subset) < 5 ){
                  if(nrow(pruned_full_space) <= 5) { 
                      budget <-  nrow(pruned_full_space) 
                  } 
                  else { 
                      budget <- 5 
                  }
                  tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = budget, replace = FALSE),]
                  additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(2,nrow(tmp2))))
                  subset <- rbind(subset,tmp2)
                  point_count[i] <- point_count[i] + budget
              }
              
              if(best_time > min(subset$time_per_pixel)){
                  best_time <- min(subset$time_per_pixel)
              }
              
              model <- time_per_pixel ~ elements_number + I(elements_number^2)
              
              best_elements_number <- find_best(model, subset, pruned_full_space, c("elements_number"))
              
              subset <- subset[subset$elements_number == best_elements_number, ]
              pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]
              
          ###########################################
                                                  #
                                                  #               Step 3
                                                  #
          ###########################################      
              
              if(nrow(subset) < 5 ){
                  tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),]
                  additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(3,nrow(tmp2))))
                  subset <- rbind(subset,tmp2)
                  point_count[i] <- point_count[i] + nrow(pruned_full_space)
              }
              
              if(best_time > min(subset$time_per_pixel)){
                  best_time <- min(subset$time_per_pixel)
              }
              
              model <- time_per_pixel ~ load_overlap
              
              fit <- lm(data=subset,formula=model)
              
              best_load_overlap <- pruned_full_space[objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap") == min(objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap")),][1,]$load_overlap
              best_load_overlap_time <- pruned_full_space[objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap") == min(objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap")),][1,]$time_per_pixel
              
              model <- time_per_pixel ~ temporary_size
              
              fit <- lm(data=subset,formula=model)
              
              best_temporary_size <- pruned_full_space[objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size") == min(objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size")),][1,]$temporary_size
              best_temporary_size_time <- pruned_full_space[objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size") == min(objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size")),][1,]$time_per_pixel
              
              subset <- df[df$y_component_number == best_base$y_component_number & 
                           df$vector_length == best_base$vector_length & 
                           df$threads_number == best_base$threads_number & 
                           df$lws_y == best_lws_y & 
                           df$elements_number == best_elements_number & 
                           df$load_overlap == best_load_overlap & 
                           df$temporary_size == best_temporary_size,]
              
              if(nrow(subset) < 1){
                  if(best_temporary_size_time < best_load_overlap_time){
                      subset <- df[df$y_component_number == best_base$y_component_number & 
                                   df$vector_length == best_base$vector_length & 
                                   df$threads_number == best_base$threads_number & 
                                   df$lws_y == best_lws_y & 
                                   df$elements_number == best_elements_number & 
                                   df$temporary_size == best_temporary_size,]
                  } else {
                      subset <- df[df$y_component_number == best_base$y_component_number & 
                                   df$vector_length == best_base$threads_number & 
                                   df$lws_y == best_lws_y & 
                                   df$elements_number == best_elements_number & 
                                   df$load_overlap == best_load_overlap,]
                  }
                  
                  if(nrow(subset > 1)){
                      subset <- subset[subset$time_per_pixel==min(subset$time_per_pixel),]
                  }
              }
              
              subset$run <- i
              df_lm_random <- rbind(df_lm_random, cbind(subset, best=best_time))
          }

          df_lm_random <- cbind(df_lm_random, point_number=point_count, method=rep("LM",nrow(df_lm_random)))
          df_lm_random$slowdown <- df_lm_random$time_per_pixel / min(df$time_per_pixel)
          write.csv(df_lm_random, "../data/2016_04_08/pilipili2/18_08_24/lm_random_improve_budget_2.csv", row.names=FALSE)
          write.csv(logs, "../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_budget.csv", row.names=FALSE)
          write.csv(additional_points, "../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_additional_points_budget.csv", row.names=FALSE)
          summary(df_lm_random)
        #+end_src    

        #+RESULTS:
        #+begin_example
         Warning messages:
        1: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        2: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        3: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        4: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        5: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        6: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        7: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        8: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        9: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
        10: In predict.lm(fit, values, interval = "none") :
          prediction from a rank-deficient fit may be misleading
         elements_number y_component_number vector_length temporary_size
         Min.   : 1.00   Min.   :1.00       Min.   :1     Min.   :2.00  
         1st Qu.: 3.00   1st Qu.:3.00       1st Qu.:1     1st Qu.:2.00  
         Median : 6.00   Median :5.50       Median :1     Median :2.00  
         Mean   : 4.82   Mean   :4.55       Mean   :1     Mean   :2.34  
         3rd Qu.: 6.00   3rd Qu.:6.00       3rd Qu.:1     3rd Qu.:2.00  
         Max.   :24.00   Max.   :6.00       Max.   :1     Max.   :4.00  
         vector_recompute load_overlap threads_number     lws_y      
         true:100         false:42     Min.   : 512   Min.   : 4.00  
                          true :58     1st Qu.:1024   1st Qu.: 8.00  
                                       Median :1024   Median : 8.00  
                                       Mean   :1014   Mean   : 7.84  
                                       3rd Qu.:1024   3rd Qu.: 8.00  
                                       Max.   :1024   Max.   :16.00  
         time_per_pixel         slowdown          run              best          
         Min.   :1.176e-10   Min.   :1.010   Min.   :  1.00   Min.   :1.165e-10  
         1st Qu.:1.176e-10   1st Qu.:1.010   1st Qu.: 25.75   1st Qu.:1.176e-10  
         Median :1.232e-10   Median :1.058   Median : 50.50   Median :1.177e-10  
         Mean   :1.316e-10   Mean   :1.129   Mean   : 50.50   Mean   :1.220e-10  
         3rd Qu.:1.365e-10   3rd Qu.:1.172   3rd Qu.: 75.25   3rd Qu.:1.244e-10  
         Max.   :2.449e-10   Max.   :2.102   Max.   :100.00   Max.   :1.444e-10  
          point_number   method  
         Min.   :124.0   LM:100  
         1st Qu.:129.0           
         Median :129.0           
         Mean   :128.2           
         3rd Qu.:129.0           
         Max.   :129.0
#+end_example

     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
       library(ggplot2)
       library(plyr)
       
       ggplot(df_lm_random, aes(slowdown)) + 
           geom_histogram(binwidth=.05,color="white", fill="gray1") +
           labs(y="Density", x="Percentage of the speedup of best combination") +
           ggtitle("") 
     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-5040GO8/figure5040D5k.png]]
****** Combining points allocation and pruning strategy
       We consider the worst run. We have several with the same results:
       #+begin_src R :results output :session :exports both
       df_lm_random[df_lm_random$slowdown == max(df_lm_random$slowdown),]$run
       #+end_src

       #+RESULTS:
       : [1]  36  40  68  78  81  86 100

       Let's focus on the first:
       #+begin_src R :results output :session :exports both
         logs <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_budget.csv",strip.white=T,header=T)
         df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_improve_budget.csv",strip.white=T,header=T)
         working_set <- logs[logs$run == df_lm_random[df_lm_random$slowdown == max(df_lm_random$slowdown),]$run[1],]
         summary(working_set)
       #+end_src

       #+RESULTS:
       #+begin_example
        elements_number y_component_number vector_length   temporary_size
        Min.   : 1.00   Min.   :1.0        Min.   : 1.00   Min.   :2.00  
        1st Qu.: 4.25   1st Qu.:2.0        1st Qu.: 1.25   1st Qu.:2.00  
        Median : 8.00   Median :4.0        Median : 3.00   Median :4.00  
        Mean   : 9.18   Mean   :3.7        Mean   : 6.02   Mean   :3.12  
        3rd Qu.:12.00   3rd Qu.:5.0        3rd Qu.: 8.00   3rd Qu.:4.00  
        Max.   :24.00   Max.   :6.0        Max.   :16.00   Max.   :4.00  
        vector_recompute load_overlap threads_number       lws_y       
        true:50          false:28     Min.   :  32.0   Min.   :  1.00  
                         true :22     1st Qu.:  64.0   1st Qu.:  4.00  
                                      Median : 256.0   Median : 16.00  
                                      Mean   : 356.5   Mean   : 46.16  
                                      3rd Qu.: 512.0   3rd Qu.: 64.00  
                                      Max.   :1024.0   Max.   :512.00  
        time_per_pixel           run    
        Min.   :1.280e-10   Min.   :36  
        1st Qu.:2.560e-10   1st Qu.:36  
        Median :4.623e-10   Median :36  
        Mean   :2.316e-09   Mean   :36  
        3rd Qu.:1.832e-09   3rd Qu.:36  
        Max.   :2.993e-08   Max.   :36
       #+end_example

       #+begin_src R :results output :session :exports both
          objective_predict <- function(fit,x){
              names <- colnames(x)
              s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
              eval(parse(text=s))
              as.numeric(predict(fit, values, interval="none"))
          }

          objective_predict_one <- function(fit,x,colname){
              s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
              eval(parse(text=s))
              as.numeric(predict(fit, values, interval="none"))
          }

          find_best <- function(model,subset,full_set,colnames){
              fit <- lm(data=subset,formula=formula(model))
              if( length(colnames) > 1) {
                  return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
              }
              else{
                  return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
              }
          }
       #+end_src

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
       plot(working_set[,c(1,2,3,4,6,7,8,9)])
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-5110xkR/figure5110v7k.png]]

       Relevant factors
       #+begin_src R :results output :session :exports both
       fit <- lm(time_per_pixel ~ elements_number + y_component_number + vector_length + load_overlap + threads_number + lws_y + temporary_size, working_set)
       summary(fit)
       fit <- lm(time_per_pixel ~ elements_number + vector_length + lws_y , working_set)
       summary(fit)
       fit <- lm(time_per_pixel ~ elements_number + vector_length + lws_y + I(lws_y^2), working_set)
       summary(fit)
       fit <- lm(time_per_pixel ~ (elements_number + vector_length + lws_y + I(lws_y^2))^2 , working_set)
       summary(fit)

       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = time_per_pixel ~ elements_number + y_component_number + 
           vector_length + load_overlap + threads_number + lws_y + temporary_size, 
           data = working_set)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -7.520e-09 -1.181e-09 -2.007e-10  5.968e-10  1.582e-08 

       Coefficients:
                            Estimate Std. Error t value Pr(>|t|)    
       (Intercept)        -5.933e-10  2.185e-09  -0.272  0.78728    
       elements_number    -3.560e-10  1.160e-10  -3.068  0.00376 ** 
       y_component_number  7.529e-10  3.925e-10   1.918  0.06187 .  
       vector_length       3.718e-10  9.259e-11   4.016  0.00024 ***
       load_overlaptrue   -1.337e-09  1.033e-09  -1.294  0.20271    
       threads_number     -3.098e-12  1.570e-12  -1.974  0.05503 .  
       lws_y               2.192e-11  6.386e-12   3.432  0.00136 ** 
       temporary_size      5.880e-10  5.175e-10   1.136  0.26231    
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 3.438e-09 on 42 degrees of freedom
       Multiple R-squared:  0.5469,	Adjusted R-squared:  0.4714 
       F-statistic: 7.242 on 7 and 42 DF,  p-value: 1.088e-05

       Call:
       lm(formula = time_per_pixel ~ elements_number + vector_length + 
           lws_y, data = working_set)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -7.758e-09 -1.144e-09 -1.978e-10  9.778e-10  1.855e-08 

       Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
       (Intercept)      4.446e-10  1.068e-09   0.416  0.67910    
       elements_number -1.725e-10  8.775e-11  -1.965  0.05543 .  
       vector_length    4.329e-10  9.067e-11   4.774 1.87e-05 ***
       lws_y            1.839e-11  6.274e-12   2.931  0.00525 ** 
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 3.65e-09 on 46 degrees of freedom
       Multiple R-squared:  0.4407,	Adjusted R-squared:  0.4042 
       F-statistic: 12.08 on 3 and 46 DF,  p-value: 5.88e-06

       Call:
       lm(formula = time_per_pixel ~ elements_number + vector_length + 
           lws_y + I(lws_y^2), data = working_set)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -5.414e-09 -2.050e-09  8.380e-11  1.203e-09  1.632e-08 

       Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
       (Intercept)     -4.379e-10  1.060e-09  -0.413 0.681572    
       elements_number -1.462e-10  8.322e-11  -1.757 0.085653 .  
       vector_length    3.842e-10  8.737e-11   4.397 6.63e-05 ***
       lws_y            5.600e-11  1.550e-11   3.612 0.000761 ***
       I(lws_y^2)      -8.925e-14  3.401e-14  -2.624 0.011814 *  
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 3.437e-09 on 45 degrees of freedom
       Multiple R-squared:  0.5149,	Adjusted R-squared:  0.4718 
       F-statistic: 11.94 on 4 and 45 DF,  p-value: 1.072e-06

       Call:
       lm(formula = time_per_pixel ~ (elements_number + vector_length + 
           lws_y + I(lws_y^2))^2, data = working_set)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -3.658e-09 -5.606e-10 -6.350e-11  3.663e-10  7.065e-09 

       Coefficients:
                                       Estimate Std. Error t value Pr(>|t|)  
       (Intercept)                    5.657e-11  1.119e-09   0.051   0.9600  
       elements_number               -3.849e-11  9.496e-11  -0.405   0.6874  
       vector_length                  2.897e-10  1.145e-10   2.530   0.0156 *
       lws_y                         -9.618e-12  4.831e-11  -0.199   0.8432  
       I(lws_y^2)                     3.278e-14  4.389e-13   0.075   0.9409  
       elements_number:vector_length -1.136e-11  8.252e-12  -1.377   0.1765  
       elements_number:lws_y          7.129e-12  3.909e-12   1.824   0.0758 .
       elements_number:I(lws_y^2)    -6.811e-14  2.822e-14  -2.413   0.0206 *
       vector_length:lws_y            1.687e-12  3.435e-12   0.491   0.6261  
       vector_length:I(lws_y^2)       1.009e-14  2.137e-14   0.472   0.6394  
       lws_y:I(lws_y^2)               1.150e-15  5.318e-16   2.162   0.0368 *
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 1.921e-09 on 39 degrees of freedom
       Multiple R-squared:  0.8687,	Adjusted R-squared:  0.835 
       F-statistic:  25.8 on 10 and 39 DF,  p-value: 3.652e-14
#+end_example

       Interaction seems negligible:
       #+begin_src R :results output :session :exports both
       model <- time_per_pixel ~ elements_number + vector_length + lws_y #+ I(lws_y^2)
       best <- find_best(model,working_set,df,c("elements_number","vector_length","lws_y"))
       best
       #+end_src

       #+RESULTS:
       :      elements_number vector_length lws_y
       : 6428              24             1     1

       Now let's prune the search space. It remains only 24 points so
       we can try them all and we get a slowdown of 1.21
       #+begin_src R :results output :session :exports both
       pruned_df <- df[df$elements_number == best$elements_number & df$vector_length == best$vector_length & df$lws_y == best$lws_y ,]
       subset <- working_set[working_set$elements_number == best$ements_number & working_set$vector_length == best$vector_length & working_set$lws_y == best$lws_y ,]
       pruned_df[pruned_df$time_per_pixel==min(pruned_df$time_per_pixel),]
       pruned_df[pruned_df$time_per_pixel==min(pruned_df$time_per_pixel),]$time_per_pixel / min(df$time_per_pixel)
       nrow(pruned_df)             
       max(df_lm_random$slowdown)
       #+end_src

       #+RESULTS:
       :       elements_number y_component_number vector_length temporary_size
       : 10638              24                  6             1              4
       :       vector_recompute load_overlap threads_number lws_y time_per_pixel
       : 10638             true         true            128     1   1.414908e-10
       : [1] 1.214499
       : [1] 24
       : [1] 2.064103

** 2016-06-06
*** Another strategy                                             :deprecated:
    _WARNING Incorrect models_
    On average what are the most relevant factors:
    #+begin_src R :results output :session :exports both
      runs <- 1000
      for(i in 1:runs){
          p <- data.frame(elements_number=0, y_component_number=0, vector_length=0, threads_number=0, lws_y=0)
          random_set <- df[sample(1:nrow(df), size = 50, replace = FALSE),]
          fit <- lm(time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y, random_set)
          p <- p + coef(summary(fit))[,4] 
      }        
      p / 1000
    #+end_src
    

    #+RESULTS:
    :   elements_number y_component_number vector_length threads_number        lws_y
    : 1    0.0001412678       0.0004098395  0.0009285872   2.113797e-05 0.0001211008

        #+begin_src R :results output :session :exports none
          objective_predict <- function(fit,x){
              names <- colnames(x)
              s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
              eval(parse(text=s))
              as.numeric(predict(fit, values, interval="none"))
          }

          objective_predict_one <- function(fit,x,colname){
              s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
              eval(parse(text=s))
              as.numeric(predict(fit, values, interval="none"))
          }

          find_best <- function(model,subset,full_set,colnames){
              fit <- lm(data=subset,formula=formula(model))
              if( length(colnames) > 1) {
                  return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
              }
              else{
                  return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
              }
          }

          set.seed(1) 
          runs = 100
          df_lm_random <- data.frame()
          point_count <- c()
          logs <- data.frame()
          additional_points <- data.frame()

          for(i in 1:runs){
              random_set <- df[sample(1:nrow(df), size = 50, replace = FALSE),]
              best_time <- min(random_set$time_per_pixel)
              tmp <- cbind(random_set, run=rep(i,nrow(random_set)))
              logs <- rbind(logs, tmp)
              point_count[i] <- nrow(random_set)
              
              model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
                  vector_length + 
                  lws_y + I(1/lws_y) +
                  threads_number + I(1/threads_number)
              
              best_base <- find_best(model, random_set, df, c("y_component_number", "vector_length", "lws_y", "threads_number")) 
              
              subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
              pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
              
          ###########################################
                                                  #
                                                  #               Step 1
                                                  #
          ###########################################      
              budget <- 30
              if(nrow(subset) < budget ){
                  if(nrow(pruned_full_space) <= budget) { 
                      budget <-  nrow(pruned_full_space) 
                  } 
                  tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = budget, replace = FALSE),]
                  subset <- rbind(subset,tmp2)
                  additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(1,nrow(tmp2))))
                  point_count[i] <- point_count[i] + budget
              }
              
              if(best_time > min(subset$time_per_pixel)){
                  best_time <- min(subset$time_per_pixel)
              }
              
              model <- time_per_pixel ~ lws_y + I(1/lws_y)
              
              best_lws_y <- find_best(model, subset, pruned_full_space, c("lws_y"))
              
              subset <- subset[subset$lws_y == best_lws_y, ]
              pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]
              
          ###########################################
                                                  #
                                                  #               Step 2
                                                  #
          ###########################################      
              
              if(nrow(subset) < 5 ){
                  if(nrow(pruned_full_space) <= 5) { 
                      budget <-  nrow(pruned_full_space) 
                  } 
                  else { 
                      budget <- 5 
                  }
                  tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = budget, replace = FALSE),]
                  additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(2,nrow(tmp2))))
                  subset <- rbind(subset,tmp2)
                  point_count[i] <- point_count[i] + budget
              }
              
              if(best_time > min(subset$time_per_pixel)){
                  best_time <- min(subset$time_per_pixel)
              }
              
              model <- time_per_pixel ~ elements_number + I(elements_number^2)
              
              best_elements_number <- find_best(model, subset, pruned_full_space, c("elements_number"))
              
              subset <- subset[subset$elements_number == best_elements_number, ]
              pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]
              
          ###########################################
                                                  #
                                                  #               Step 3
                                                  #
          ###########################################      
              
              if(nrow(subset) < 5 ){
                  tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),]
                  additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(3,nrow(tmp2))))
                  subset <- rbind(subset,tmp2)
                  point_count[i] <- point_count[i] + nrow(pruned_full_space)
              }
              
              if(best_time > min(subset$time_per_pixel)){
                  best_time <- min(subset$time_per_pixel)
              }
              
              model <- time_per_pixel ~ load_overlap
              
              fit <- lm(data=subset,formula=model)
              
              best_load_overlap <- pruned_full_space[objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap") == min(objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap")),][1,]$load_overlap
              best_load_overlap_time <- pruned_full_space[objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap") == min(objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap")),][1,]$time_per_pixel
              
              model <- time_per_pixel ~ temporary_size
              
              fit <- lm(data=subset,formula=model)
              
              best_temporary_size <- pruned_full_space[objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size") == min(objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size")),][1,]$temporary_size
              best_temporary_size_time <- pruned_full_space[objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size") == min(objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size")),][1,]$time_per_pixel
              
              subset <- df[df$y_component_number == best_base$y_component_number & 
                           df$vector_length == best_base$vector_length & 
                           df$threads_number == best_base$threads_number & 
                           df$lws_y == best_lws_y & 
                           df$elements_number == best_elements_number & 
                           df$load_overlap == best_load_overlap & 
                           df$temporary_size == best_temporary_size,]
              
              if(nrow(subset) < 1){
                  if(best_temporary_size_time < best_load_overlap_time){
                      subset <- df[df$y_component_number == best_base$y_component_number & 
                                   df$vector_length == best_base$vector_length & 
                                   df$threads_number == best_base$threads_number & 
                                   df$lws_y == best_lws_y & 
                                   df$elements_number == best_elements_number & 
                                   df$temporary_size == best_temporary_size,]
                  } else {
                      subset <- df[df$y_component_number == best_base$y_component_number & 
                                   df$vector_length == best_base$threads_number & 
                                   df$lws_y == best_lws_y & 
                                   df$elements_number == best_elements_number & 
                                   df$load_overlap == best_load_overlap,]
                  }
                  
                  if(nrow(subset > 1)){
                      subset <- subset[subset$time_per_pixel==min(subset$time_per_pixel),]
                  }
              }
              
              subset$run <- i
              df_lm_random <- rbind(df_lm_random, cbind(subset, best=best_time))
          }

          df_lm_random <- cbind(df_lm_random, point_number=point_count, method=rep("LM",nrow(df_lm_random)))
          df_lm_random$slowdown <- df_lm_random$time_per_pixel / min(df$time_per_pixel)
          write.csv(df_lm_random, "../data/2016_04_08/pilipili2/18_08_24/lm_random_improve_budget.csv", row.names=FALSE)
          write.csv(logs, "../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_budget.csv", row.names=FALSE)
          write.csv(additional_points, "../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_additional_points_budget.csv", row.names=FALSE)
          summary(df_lm_random)
        #+end_src    
    #+begin_src R :results output :session :exports both
    
    #+end_src

*** Rq point budget                                              :deprecated:
    _WARNING incorrect strategy_: Too much points and bad models
    #+begin_src R :results output :session :exports both
     f <- function(x) { x * (0.05 - 1 * (x < 0)) }
     g <- function(x) { f(x)/x^2 }
     h <- function(x) {pmin(g(x),1e15)}
     set.seed(1) 
     runs = 100
     df_rq_random <- data.frame()
     point_count = c()
     for(i in 1:runs){
         budget <- 90
         point_count[i] = budget
         random_set <- df[sample(1:nrow(df), size = budget, replace = FALSE),]
         model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
             vector_length + 
             lws_y + I(1/lws_y) +
             threads_number + I(1/threads_number)
     
         fit <- lm(data=random_set,formula=formula(model), na.action="na.exclude")
         for(j in 1:100){
             E <- residuals(fit)
             fit <- lm(data=random_set,formula=formula(model),weights=h(E), na.action="na.exclude")
         }
     
         pred <- function(x){
             as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                               vector_length=x$vector_length, 
                                               threads_number=x$threads_number,
                                               lws_y=x$lws_y,
                                               interval="none")))
         }
     
         best_base <- df[pred(df[,c(2,3,7,8)]) == min(pred(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]
     
         subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
         pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
     
     ###########################################
     
         if(nrow(subset) < 20 ){
             budget <- 20
             point_count[i] = point_count[i] + budget
             subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = budget, replace = FALSE),])
         }
     
         model <- time_per_pixel ~ lws_y + I(1/lws_y)
         
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:100){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
     
     
         pred <- function(x){
             as.numeric(predict(fit,data.frame(lws_y=x, interval="none")))
         }
     
         best_lws_y <- pruned_full_space[pred(pruned_full_space$lws_y) == min(pred(pruned_full_space$lws_y)),][1,]$lws_y
     
         subset <- subset[subset$lws_y == best_lws_y, ]
         pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]
     
     ###########################################
     
         if(nrow(subset) < 5 ){
             point_count[i] = point_count[i] + 5
             subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
         }
     
         model <- time_per_pixel ~ elements_number + I(elements_number^2)
     
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:100){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
     
         pred <- function(x){
             as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
         }
     
         best_elements_number <- pruned_full_space[pred(pruned_full_space$elements_number) == min(pred(pruned_full_space$elements_number)),][1,]$elements_number
     
         subset <- subset[subset$elements_number == best_elements_number, ]
         pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]
     
     ###########################################
     
         if(nrow(subset) < 5 ){
             point_count[i] = point_count[i] + nrow(pruned_full_space)
             subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),])
         }
     
         model <- time_per_pixel ~ load_overlap
     
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:10){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
         
         pred <- function(x){
             as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
         }
     
         best_load_overlap <- pruned_full_space[pred(pruned_full_space$load_overlap) == min(pred(pruned_full_space$load_overlap)),][1,]$load_overlap
         best_load_overlap_time <- pruned_full_space[pred(pruned_full_space$load_overlap) == min(pred(pruned_full_space$load_overlap)),][1,]$time_per_pixel
     
         model <- time_per_pixel ~ temporary_size
     
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:10){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
         
         pred <- function(x){
             as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
         }
     
         best_temporary_size <- pruned_full_space[pred(pruned_full_space$temporary_size) == min(pred(pruned_full_space$temporary_size)),][1,]$temporary_size
         best_temporary_size_time <- pruned_full_space[pred(pruned_full_space$temporary_size) == min(pred(pruned_full_space$temporary_size)),][1,]$time_per_pixel
     
         subset <- df[df$y_component_number == best_base$y_component_number & 
                      df$vector_length == best_base$vector_length & 
                      df$threads_number == best_base$threads_number & 
                      df$lws_y == best_lws_y & 
                      df$elements_number == best_elements_number & 
                      df$load_overlap == best_load_overlap & 
                      df$temporary_size == best_temporary_size,]
     
         if(nrow(subset) < 1){
             if(best_temporary_size_time < best_load_overlap_time){
                 subset <- df[df$y_component_number == best_base$y_component_number & 
                              df$vector_length == best_base$vector_length & 
                              df$threads_number == best_base$threads_number & 
                              df$lws_y == best_lws_y & 
                              df$elements_number == best_elements_number & 
                              df$temporary_size == best_temporary_size,]
             } else {
                 subset <- df[df$y_component_number == best_base$y_component_number & 
                              df$vector_length == best_base$vector_length & 
                              df$threads_number == best_base$threads_number & 
                              df$lws_y == best_lws_y & 
                              df$elements_number == best_elements_number & 
                              df$load_overlap == best_load_overlap,]
             }
     
             if(nrow(subset > 1)){
     
             }
         }
     
         df_rq_random <- rbind(df_rq_random, subset)
     }
     
     df_rq_random <- cbind(df_rq_random, point_number=point_count, method=rep("RQ",nrow(df_rq_random)))
     write.csv(df_rq_random, "../data/2016_04_08/pilipili2/18_08_24/rq_random_budget_2.csv", row.names=FALSE)
     summary(df_rq_random)
     #+end_src

    #+RESULTS:
    #+begin_example
     There were 36 warnings (use warnings() to see them)
     elements_number y_component_number vector_length temporary_size
     Min.   : 3.00   Min.   :3.00       Min.   :1     Min.   :2.0   
     1st Qu.: 4.00   1st Qu.:4.00       1st Qu.:1     1st Qu.:2.0   
     Median : 6.00   Median :6.00       Median :1     Median :2.0   
     Mean   : 6.33   Mean   :5.13       Mean   :1     Mean   :2.5   
     3rd Qu.: 6.00   3rd Qu.:6.00       3rd Qu.:1     3rd Qu.:2.5   
     Max.   :24.00   Max.   :6.00       Max.   :1     Max.   :4.0   
     vector_recompute load_overlap threads_number       lws_y      
     true:100         false:60     Min.   :  32.0   Min.   : 1.00  
                      true :40     1st Qu.:1024.0   1st Qu.: 8.00  
                                   Median :1024.0   Median : 8.00  
                                   Mean   : 983.7   Mean   : 7.39  
                                   3rd Qu.:1024.0   3rd Qu.: 8.00  
                                   Max.   :1024.0   Max.   :16.00  
     time_per_pixel         slowdown      point_number method  
     Min.   :1.176e-10   Min.   :1.010   Min.   :114   RQ:100  
     1st Qu.:1.176e-10   1st Qu.:1.010   1st Qu.:119           
     Median :1.178e-10   Median :1.012   Median :119           
     Mean   :1.275e-10   Mean   :1.094   Mean   :119           
     3rd Qu.:1.258e-10   3rd Qu.:1.080   3rd Qu.:119           
     Max.   :2.103e-10   Max.   :1.805   Max.   :119
#+end_example

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
       library(ggplot2)
       library(plyr)
       df_rq_random$slowdown <- df_rq_random$time_per_pixel / min(df$time_per_pixel)
       ggplot(df_rq_random ) + 
          aes(slowdown)+
           geom_histogram(binwidth=.05,color="white", fill="gray1") +
            geom_vline(xintercept = median(df_rq_random$slowdown), color="darkgreen", linetype=2) +
            geom_vline(xintercept = mean(df_rq_random$slowdown), color="red", linetype=2) +
           labs(y="Density", x="Percentage of the speedup of best combination") +
           ggtitle("") 
     #+end_src

    #+RESULTS:
    [[file:/tmp/babel-5040GO8/figure50402ue.png]]

** 2016-06-08
*** DONE Refining worst rq
   _Stuck because of the p-values standard err, etc..._
   We need to be able to compute these information correctly.
**** Logs
      #+begin_src R :results output :session :exports both
     f <- function(x) { x * (0.05 - 1 * (x < 0)) }
     g <- function(x) { f(x)/x^2 }
     h <- function(x) {pmin(g(x),1e15)}
     set.seed(1) 
     runs = 100
     df_rq_random <- data.frame()
     point_count = c()
     logs <- data.frame()
     for(i in 1:runs){
         budget <- 90
         point_count[i] = budget
         random_set <- df[sample(1:nrow(df), size = budget, replace = FALSE),]
         tmp <- cbind(random_set, run=rep(i,nrow(random_set)))
         logs <- rbind(logs, tmp)

         model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
             vector_length + 
             lws_y + I(1/lws_y) +
             threads_number + I(1/threads_number)
     
         fit <- lm(data=random_set,formula=formula(model), na.action="na.exclude")
         for(j in 1:100){
             E <- residuals(fit)
             fit <- lm(data=random_set,formula=formula(model),weights=h(E), na.action="na.exclude")
         }
     
         pred <- function(x){
             as.numeric(predict(fit,data.frame(y_component_number=x$y_component_number, 
                                               vector_length=x$vector_length, 
                                               threads_number=x$threads_number,
                                               lws_y=x$lws_y,
                                               interval="none")))
         }
     
         best_base <- df[pred(df[,c(2,3,7,8)]) == min(pred(df[,c(2,3,7,8)])), c(2,3,7,8)][1,]
     
         subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
         pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
     
     ###########################################
     
         if(nrow(subset) < 20 ){
             budget <- 20
             point_count[i] = point_count[i] + budget
             subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = budget, replace = FALSE),])
         }
     
         model <- time_per_pixel ~ lws_y + I(1/lws_y)
         
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:100){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
     
     
         pred <- function(x){
             as.numeric(predict(fit,data.frame(lws_y=x, interval="none")))
         }
     
         best_lws_y <- pruned_full_space[pred(pruned_full_space$lws_y) == min(pred(pruned_full_space$lws_y)),][1,]$lws_y
     
         subset <- subset[subset$lws_y == best_lws_y, ]
         pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]
     
     ###########################################
     
         if(nrow(subset) < 5 ){
             point_count[i] = point_count[i] + 5
             subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),])
         }
     
         model <- time_per_pixel ~ elements_number + I(elements_number^2)
     
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:100){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
     
         pred <- function(x){
             as.numeric(predict(fit,data.frame(elements_number=x, interval="none")))
         }
     
         best_elements_number <- pruned_full_space[pred(pruned_full_space$elements_number) == min(pred(pruned_full_space$elements_number)),][1,]$elements_number
     
         subset <- subset[subset$elements_number == best_elements_number, ]
         pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]
     
     ###########################################
     
         if(nrow(subset) < 5 ){
             point_count[i] = point_count[i] + nrow(pruned_full_space)
             subset <- rbind(subset,pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),])
         }
     
         model <- time_per_pixel ~ load_overlap
     
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:10){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
         
         pred <- function(x){
             as.numeric(predict(fit,data.frame(load_overlap=x, interval="none")))
         }
     
         best_load_overlap <- pruned_full_space[pred(pruned_full_space$load_overlap) == min(pred(pruned_full_space$load_overlap)),][1,]$load_overlap
         best_load_overlap_time <- pruned_full_space[pred(pruned_full_space$load_overlap) == min(pred(pruned_full_space$load_overlap)),][1,]$time_per_pixel
     
         model <- time_per_pixel ~ temporary_size
     
         fit <- lm(data=subset,formula=model, na.action="na.exclude")
         for(j in 1:10){
             E <- residuals(fit)
             fit <- lm(data=subset,formula=model,weights=h(E), na.action="na.exclude")
         }
         
         pred <- function(x){
             as.numeric(predict(fit,data.frame(temporary_size=x, interval="none")))
         }
     
         best_temporary_size <- pruned_full_space[pred(pruned_full_space$temporary_size) == min(pred(pruned_full_space$temporary_size)),][1,]$temporary_size
         best_temporary_size_time <- pruned_full_space[pred(pruned_full_space$temporary_size) == min(pred(pruned_full_space$temporary_size)),][1,]$time_per_pixel
     
         subset <- df[df$y_component_number == best_base$y_component_number & 
                      df$vector_length == best_base$vector_length & 
                      df$threads_number == best_base$threads_number & 
                      df$lws_y == best_lws_y & 
                      df$elements_number == best_elements_number & 
                      df$load_overlap == best_load_overlap & 
                      df$temporary_size == best_temporary_size,]
     
         if(nrow(subset) < 1){
             if(best_temporary_size_time < best_load_overlap_time){
                 subset <- df[df$y_component_number == best_base$y_component_number & 
                              df$vector_length == best_base$vector_length & 
                              df$threads_number == best_base$threads_number & 
                              df$lws_y == best_lws_y & 
                              df$elements_number == best_elements_number & 
                              df$temporary_size == best_temporary_size,]
             } else {
                 subset <- df[df$y_component_number == best_base$y_component_number & 
                              df$vector_length == best_base$vector_length & 
                              df$threads_number == best_base$threads_number & 
                              df$lws_y == best_lws_y & 
                              df$elements_number == best_elements_number & 
                              df$load_overlap == best_load_overlap,]
             }
     
             if(nrow(subset > 1)){
     
             }
         }
         subset$run <- i
         df_rq_random <- rbind(df_rq_random, subset)
     }
     
     df_rq_random <- cbind(df_rq_random, point_number=point_count, method=rep("RQ",nrow(df_rq_random)))
     write.csv(df_rq_random, "../data/2016_04_08/pilipili2/18_08_24/rq_random_budget_2_trial.csv", row.names=FALSE)
     write.csv(logs, "../data/2016_04_08/pilipili2/18_08_24/rq_random_logs.csv", row.names=FALSE)
     summary(df_rq_random)
     #+end_src
     
**** Lets improve this
     #+begin_src R :results output :session :exports both
       logs <- read.csv("../data/2016_04_08/pilipili2/18_08_24/rq_random_logs.csv",strip.white=T,header=T)
       df_rq_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/rq_random_budget_2_trial.csv",strip.white=T,header=T)
       working_set <- logs[logs$run == df_rq_random[df_rq_random$time_per_pixel == max(df_rq_random$time_per_pixel),]$run,]
       summary(working_set)
     #+end_src

     #+RESULTS:
     #+begin_example
      elements_number  y_component_number vector_length    temporary_size 
      Min.   : 1.000   Min.   :1.000      Min.   : 1.000   Min.   :2.000  
      1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 1.000   1st Qu.:2.000  
      Median : 6.000   Median :3.000      Median : 2.000   Median :4.000  
      Mean   : 8.433   Mean   :3.456      Mean   : 5.333   Mean   :3.044  
      3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.000   3rd Qu.:4.000  
      Max.   :24.000   Max.   :6.000      Max.   :16.000   Max.   :4.000  
      vector_recompute load_overlap threads_number       lws_y    
      true:90          false:50     Min.   :  32.0   Min.   :  1  
                       true :40     1st Qu.: 128.0   1st Qu.:  2  
                                    Median : 256.0   Median :  8  
                                    Mean   : 371.6   Mean   : 52  
                                    3rd Qu.: 512.0   3rd Qu.: 32  
                                    Max.   :1024.0   Max.   :512  
      time_per_pixel           run    
      Min.   :1.320e-10   Min.   :26  
      1st Qu.:2.595e-10   1st Qu.:26  
      Median :7.111e-10   Median :26  
      Mean   :1.699e-09   Mean   :26  
      3rd Qu.:1.353e-09   3rd Qu.:26  
      Max.   :1.795e-08   Max.   :26
#+end_example

     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
       plot(working_set[, !names(working_set) %in% c("run", "vector_recompute") ])
     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-5040GO8/figure5040qer.png]]

     Finding relevant factors. But we are stuck here because we
     cannot identify relevant parameters, they are all relevant and
     the fit is perfect...:
     #+begin_src R :results output :session :exports both
       f <- function(x) { x * (0.05 - 1 * (x < 0)) }
       g <- function(x) { f(x)/x^2 }
       h <- function(x) {pmin(g(x),1e15)}

       model <-time_per_pixel ~  (elements_number + y_component_number + vector_length + threads_number + lws_y + load_overlap + temporary_size)

       fit <- lm(data=working_set,formula=formula(model), na.action="na.exclude")
       for(j in 1:100){
           E <- residuals(fit)
           fit <- lm(data=working_set,formula=formula(model),weights=h(E), na.action="na.exclude")
       }
       summary(fit)
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = formula(model), data = working_set, weights = h(E), 
         na.action = "na.exclude")

     Weighted Residuals:
            Min         1Q     Median         3Q        Max 
     -6.338e-06  2.405e-06  3.804e-06  6.570e-06  2.800e-05 

     Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
     (Intercept)         2.842e-10  1.057e-12  269.00   <2e-16 ***
     elements_number    -1.202e-11  1.713e-13  -70.20   <2e-16 ***
     y_component_number -2.562e-11  1.751e-13 -146.27   <2e-16 ***
     vector_length       3.057e-11  2.698e-14 1132.79   <2e-16 ***
     threads_number     -1.609e-13  8.898e-16 -180.79   <2e-16 ***
     lws_y               3.590e-12  5.061e-15  709.33   <2e-16 ***
     load_overlaptrue    9.164e-11  8.045e-13  113.90   <2e-16 ***
     temporary_size     -4.944e-12  2.895e-13  -17.08   <2e-16 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 8.443e-06 on 82 degrees of freedom
     Multiple R-squared:      1,	Adjusted R-squared:      1 
     F-statistic: 3.921e+06 on 7 and 82 DF,  p-value: < 2.2e-16
#+end_example

*** Study of lm results                                          :deprecated:
    _WARNING Analysis based on an incorrect strategy_
**** DONE Generating the logs
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

    #+begin_src R :results output :session :exports none
      df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
    #+end_src

    #+RESULTS:

    
    #+begin_src R :results output :session :exports none
      objective_predict <- function(fit,x){
          names <- colnames(x)
          s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
          eval(parse(text=s))
          as.numeric(predict(fit, values, interval="none"))
      }

      objective_predict_one <- function(fit,x,colname){
          s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
          eval(parse(text=s))
          as.numeric(predict(fit, values, interval="none"))
      }

      find_best <- function(model,subset,full_set,colnames){
          fit <- lm(data=subset,formula=formula(model))
          if( length(colnames) > 1) {
              return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
          }
          else{
              return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
          }
      }

      set.seed(1) 
      runs = 100
      df_lm_random <- data.frame()
      point_count <- c()
      logs <- data.frame()
      additional_points <- data.frame()

      for(i in 1:runs){
          random_set <- df[sample(1:nrow(df), size = 90, replace = FALSE),]
          best_time <- min(random_set$time_per_pixel)
          tmp <- cbind(random_set, run=rep(i,nrow(random_set)))
          logs <- rbind(logs, tmp)
          point_count[i] <- nrow(random_set)
          
          model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
              vector_length + 
              lws_y + I(1/lws_y) +
              threads_number + I(1/threads_number)
          
          best_base <- find_best(model, random_set, df, c("y_component_number", "vector_length", "lws_y", "threads_number")) 

          subset <- random_set[random_set$y_component_number == best_base$y_component_number & random_set$vector_length == best_base$vector_length & random_set$threads_number == best_base$threads_number, ]
          pruned_full_space <- df[df$y_component_number == best_base$y_component_number & df$vector_length == best_base$vector_length & df$threads_number == best_base$threads_number, ]
          
      ###########################################
      #
      #               Step 1
      #
      ###########################################      
         
          budget <- 20
          if(nrow(subset) < budget ){
              if(nrow(pruned_full_space) <= budget) { 
                  budget <-  nrow(pruned_full_space) 
              } 
              tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = budget, replace = FALSE),]
              subset <- rbind(subset,tmp2)
              additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(1,nrow(tmp2))))
              point_count[i] <- point_count[i] + budget
          }
              
          if(best_time > min(subset$time_per_pixel)){
            best_time <- min(subset$time_per_pixel)
          }

          model <- time_per_pixel ~ lws_y + I(1/lws_y)
          
          best_lws_y <- find_best(model, subset, pruned_full_space, c("lws_y"))
          
          subset <- subset[subset$lws_y == best_lws_y, ]
          pruned_full_space <- pruned_full_space[pruned_full_space$lws_y == best_lws_y, ]
          
      ###########################################
      #
      #               Step 2
      #
      ###########################################      

          if(nrow(subset) < 5 ){
              tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),]
              additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(2,nrow(tmp2))))
              subset <- rbind(subset,tmp2)
              point_count[i] <- point_count[i] + 5
          }

          if(best_time > min(subset$time_per_pixel)){
            best_time <- min(subset$time_per_pixel)
          }
          
          model <- time_per_pixel ~ elements_number + I(elements_number^2)
          
          best_elements_number <- find_best(model, subset, pruned_full_space, c("elements_number"))

          subset <- subset[subset$elements_number == best_elements_number, ]
          pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best_elements_number, ]
          
      ###########################################
      #
      #               Step 3
      #
      ###########################################      

          if(nrow(subset) < 5 ){
              tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),]
              additional_points <- rbind(additional_points,cbind(tmp2, run=rep(i,nrow(tmp2)), step=rep(3,nrow(tmp2))))
              subset <- rbind(subset,tmp2)
              point_count[i] <- point_count[i] + nrow(pruned_full_space)
          }

          if(best_time > min(subset$time_per_pixel)){
            best_time <- min(subset$time_per_pixel)
          }

          model <- time_per_pixel ~ load_overlap
          
          fit <- lm(data=subset,formula=model)
          
          best_load_overlap <- pruned_full_space[objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap") == min(objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap")),][1,]$load_overlap
          best_load_overlap_time <- pruned_full_space[objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap") == min(objective_predict_one(fit,pruned_full_space$load_overlap,"load_overlap")),][1,]$time_per_pixel
          
          model <- time_per_pixel ~ temporary_size
          
          fit <- lm(data=subset,formula=model)
          
          best_temporary_size <- pruned_full_space[objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size") == min(objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size")),][1,]$temporary_size
          best_temporary_size_time <- pruned_full_space[objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size") == min(objective_predict_one(fit,pruned_full_space$temporary_size,"temporary_size")),][1,]$time_per_pixel
          
          subset <- df[df$y_component_number == best_base$y_component_number & 
                       df$vector_length == best_base$vector_length & 
                       df$threads_number == best_base$threads_number & 
                       df$lws_y == best_lws_y & 
                       df$elements_number == best_elements_number & 
                       df$load_overlap == best_load_overlap & 
                       df$temporary_size == best_temporary_size,]
          
          if(nrow(subset) < 1){
              if(best_temporary_size_time < best_load_overlap_time){
                  subset <- df[df$y_component_number == best_base$y_component_number & 
                               df$vector_length == best_base$vector_length & 
                               df$threads_number == best_base$threads_number & 
                               df$lws_y == best_lws_y & 
                               df$elements_number == best_elements_number & 
                               df$temporary_size == best_temporary_size,]
              } else {
                  subset <- df[df$y_component_number == best_base$y_component_number & 
                               df$vector_length == best_base$threads_number & 
                                   df$lws_y == best_lws_y & 
                                   df$elements_number == best_elements_number & 
                                   df$load_overlap == best_load_overlap,]
              }
              
              if(nrow(subset > 1)){
                  subset <- subset[subset$time_per_pixel==min(subset$time_per_pixel),]
              }
          }
          
          subset$run <- i
          df_lm_random <- rbind(df_lm_random, cbind(subset, best=best_time))
      }

      df_lm_random <- cbind(df_lm_random, point_number=point_count, method=rep("LM",nrow(df_lm_random)))
      df_lm_random$slowdown <- df_lm_random$time_per_pixel / min(df$time_per_pixel)
      write.csv(df_lm_random, "../data/2016_04_08/pilipili2/18_08_24/lm_random_improve_trial_2.csv", row.names=FALSE)
      write.csv(logs, "../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_2.csv", row.names=FALSE)
      write.csv(additional_points, "../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_additional_points_2.csv", row.names=FALSE)
    #+end_src

    #+RESULTS:
    #+begin_example
     Warning messages:
    1: In predict.lm(fit, values, interval = "none") :
      prediction from a rank-deficient fit may be misleading
    2: In predict.lm(fit, values, interval = "none") :
      prediction from a rank-deficient fit may be misleading
    3: In predict.lm(fit, values, interval = "none") :
      prediction from a rank-deficient fit may be misleading
    4: In predict.lm(fit, values, interval = "none") :
      prediction from a rank-deficient fit may be misleading
    5: In predict.lm(fit, values, interval = "none") :
      prediction from a rank-deficient fit may be misleading
    6: In predict.lm(fit, values, interval = "none") :
      prediction from a rank-deficient fit may be misleading
#+end_example

**** Lets improve this
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

     #+begin_src R :results output :session :exports both
      objective_predict <- function(fit,x){
           names <- colnames(x)
           s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
           eval(parse(text=s))
           as.numeric(predict(fit, values, interval="none"))
       }

       objective_predict_one <- function(fit,x,colname){
           s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
           eval(parse(text=s))
           as.numeric(predict(fit, values, interval="none"))
       }

       find_best <- function(model,subset,full_set,colnames){
           fit <- lm(data=subset,formula=formula(model))
           if( length(colnames) > 1) {
               return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
           }
           else{
               return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
           }
       }

     #+end_src

     #+RESULTS:

     #+begin_src R :results output :session :exports both
       logs <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_2.csv",strip.white=T,header=T)
       df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_improve_trial_2.csv",strip.white=T,header=T)
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       working_set <- logs[logs$run == df_lm_random[df_lm_random$time_per_pixel == max(df_lm_random$time_per_pixel),]$run,]
       df_lm_random[df_lm_random$time_per_pixel == max(df_lm_random$time_per_pixel),]
       summary(working_set)
       set.set(1)
     #+end_src

     #+RESULTS:
     #+begin_example
        elements_number y_component_number vector_length temporary_size
     48               1                  1             1              4
        vector_recompute load_overlap threads_number lws_y time_per_pixel run
     48             true        false           1024     8   2.448912e-10  48
               best point_number method slowdown
     48 1.40112e-10          115     LM 2.102047
      elements_number y_component_number vector_length  temporary_size 
      Min.   : 1.0    Min.   :1.000      Min.   : 1.0   Min.   :2.000  
      1st Qu.: 4.0    1st Qu.:2.000      1st Qu.: 2.0   1st Qu.:2.000  
      Median : 6.0    Median :4.000      Median : 4.0   Median :2.000  
      Mean   : 8.2    Mean   :3.489      Mean   : 5.9   Mean   :2.867  
      3rd Qu.:12.0    3rd Qu.:5.000      3rd Qu.: 8.0   3rd Qu.:4.000  
      Max.   :24.0    Max.   :6.000      Max.   :16.0   Max.   :4.000  
      vector_recompute load_overlap threads_number       lws_y       
      true:90          false:41     Min.   :  32.0   Min.   :   1.0  
                       true :49     1st Qu.: 128.0   1st Qu.:   4.0  
                                    Median : 256.0   Median :  16.0  
                                    Mean   : 375.5   Mean   :  65.5  
                                    3rd Qu.: 512.0   3rd Qu.:  64.0  
                                    Max.   :1024.0   Max.   :1024.0  
      time_per_pixel           run    
      Min.   :1.401e-10   Min.   :48  
      1st Qu.:3.101e-10   1st Qu.:48  
      Median :9.106e-10   Median :48  
      Mean   :2.083e-09   Mean   :48  
      3rd Qu.:2.495e-09   3rd Qu.:48  
      Max.   :2.794e-08   Max.   :48
     Erreur : impossible de trouver la fonction "set.set"
#+end_example

     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
       plot(working_set[, !names(working_set) %in% c("run", "vector_recompute") ])
     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-5040GO8/figure5040REy.png]]

     Looking for relevant factors
     #+begin_src R :results output :session :exports both
       model <-time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y + load_overlap + temporary_size
       fit <- lm(model,working_set)
       summary(fit)
       model <-time_per_pixel ~ elements_number + vector_length + threads_number + lws_y
       fit <- lm(model,working_set)
       summary(fit)
       model <-time_per_pixel ~ vector_length + threads_number + lws_y
       fit <- lm(model,working_set)
       summary(fit)
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = model, data = working_set)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -6.232e-09 -1.239e-09 -6.730e-11  6.137e-10  2.105e-08 

     Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
     (Intercept)        -4.497e-10  1.481e-09  -0.304  0.76219    
     elements_number    -2.269e-10  7.762e-11  -2.924  0.00447 ** 
     y_component_number  6.975e-10  2.679e-10   2.604  0.01094 *  
     vector_length       1.945e-10  5.991e-11   3.246  0.00170 ** 
     threads_number     -2.706e-12  1.015e-12  -2.667  0.00922 ** 
     lws_y               1.221e-11  2.569e-12   4.751 8.49e-06 ***
     load_overlaptrue    7.050e-10  6.887e-10   1.024  0.30901    
     temporary_size      2.251e-10  3.375e-10   0.667  0.50661    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 3.102e-09 on 82 degrees of freedom
     Multiple R-squared:  0.3564,	Adjusted R-squared:  0.3015 
     F-statistic: 6.488 on 7 and 82 DF,  p-value: 4.317e-06

     Call:
     lm(formula = model, data = working_set)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -6.820e-09 -1.457e-09 -4.633e-10  6.700e-10  2.195e-08 

     Coefficients:
                       Estimate Std. Error t value Pr(>|t|)    
     (Intercept)      2.060e-09  8.016e-10   2.570  0.01191 *  
     elements_number -9.060e-11  5.935e-11  -1.527  0.13058    
     vector_length    1.897e-10  6.097e-11   3.112  0.00253 ** 
     threads_number  -3.062e-12  1.007e-12  -3.041  0.00313 ** 
     lws_y            1.215e-11  2.622e-12   4.632 1.29e-05 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 3.181e-09 on 85 degrees of freedom
     Multiple R-squared:  0.2987,	Adjusted R-squared:  0.2657 
     F-statistic:  9.05 on 4 and 85 DF,  p-value: 3.87e-06

     Call:
     lm(formula = model, data = working_set)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -6.206e-09 -1.405e-09 -5.497e-10  5.942e-10  2.238e-08 

     Coefficients:
                      Estimate Std. Error t value Pr(>|t|)    
     (Intercept)     1.278e-09  6.212e-10   2.057  0.04270 *  
     vector_length   1.998e-10  6.107e-11   3.272  0.00154 ** 
     threads_number -2.996e-12  1.014e-12  -2.956  0.00403 ** 
     lws_y           1.146e-11  2.603e-12   4.402 3.07e-05 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 3.205e-09 on 86 degrees of freedom
     Multiple R-squared:  0.2795,	Adjusted R-squared:  0.2543 
     F-statistic: 11.12 on 3 and 86 DF,  p-value: 3.073e-06
#+end_example

***** DONE Strategy 1
     Looking for any interactions:
     #+begin_src R :results output :session :exports both
     model <-time_per_pixel ~ (vector_length + threads_number + lws_y)^2
       fit <- lm(model,working_set)
       summary(fit)
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = model, data = working_set)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -7.661e-09 -6.073e-10 -2.756e-10  1.825e-10  1.610e-08 

     Coefficients:
                                    Estimate Std. Error t value Pr(>|t|)    
     (Intercept)                  -1.056e-10  6.041e-10  -0.175   0.8617    
     vector_length                 2.053e-10  8.140e-11   2.522   0.0136 *  
     threads_number                1.092e-12  1.097e-12   0.996   0.3221    
     lws_y                         2.486e-11  5.458e-12   4.554 1.79e-05 ***
     vector_length:threads_number -3.344e-13  1.501e-13  -2.228   0.0286 *  
     vector_length:lws_y           3.296e-12  5.951e-13   5.538 3.51e-07 ***
     threads_number:lws_y         -4.427e-14  6.252e-15  -7.080 4.26e-10 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 2.401e-09 on 83 degrees of freedom
     Multiple R-squared:  0.6098,	Adjusted R-squared:  0.5815 
     F-statistic: 21.61 on 6 and 83 DF,  p-value: 3.889e-15
#+end_example

     
     Maybe it can be usefull to fix only lws_y first:
     #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ lws_y 
      
      best_lws_y <- find_best(model, random_set, df, c("lws_y"))
      best_lws_y
      
      subset <- working_set[working_set$lws_y == best_lws_y,]
      pruned_full_space <- df[df$lws_y == best_lws_y,]
      nrow(pruned_full_space)
      nrow(subset)
     #+end_src

     #+RESULTS:
     : [1] 1
     : [1] 2754
     : [1] 9

     The best potential solution is thus
     #+begin_src R :results output :session :exports both
       min(pruned_full_space$time_per_pixel) / min(df$time_per_pixel)
     #+end_src

     #+RESULTS:
     : [1] 1.012177

     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
       plot(subset[, !names(working_set) %in% c("run", "vector_recompute", "lws_y") ])
     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-5040GO8/figure5040dbZ.png]]
     
     Adding more points:
     #+begin_src R :results output :session :exports both
      tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = 20, replace = FALSE),]
      subset <- subset[, !names(working_set) %in% c("run") ] 
      subset <- rbind(subset, tmp2)
     #+end_src

     #+RESULTS:

     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
       plot(subset[, !names(working_set) %in% c("run", "vector_recompute", "lws_y") ])     
     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-5040GO8/figure5040E6r.png]]

     Fiding relevant parameters:
     #+begin_src R :results output :session :exports both
       model <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number
       fit <- lm(model, subset)
       summary(fit)
       model <- time_per_pixel ~ (elements_number + y_component_number + vector_length + threads_number)^2
       fit <- lm(model, subset)
       summary(fit)
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = model, data = subset)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -3.209e-10 -1.730e-10 -8.937e-11  1.682e-10  1.083e-09 

     Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
     (Intercept)         4.812e-10  1.791e-10   2.687   0.0129 *  
     elements_number    -2.223e-11  1.278e-11  -1.740   0.0947 .  
     y_component_number -2.691e-11  4.690e-11  -0.574   0.5715    
     vector_length       5.628e-11  8.637e-12   6.516 9.71e-07 ***
     threads_number     -8.361e-15  1.907e-13  -0.044   0.9654    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 3.04e-10 on 24 degrees of freedom
     Multiple R-squared:  0.7323,	Adjusted R-squared:  0.6877 
     F-statistic: 16.42 on 4 and 24 DF,  p-value: 1.324e-06

     Call:
     lm(formula = model, data = subset)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -4.211e-10 -1.200e-10  5.990e-12  1.041e-10  7.912e-10 

     Coefficients:
                                          Estimate Std. Error t value Pr(>|t|)  
     (Intercept)                         5.671e-10  4.561e-10   1.244   0.2296  
     elements_number                    -6.365e-11  3.822e-11  -1.665   0.1132  
     y_component_number                 -8.017e-11  1.028e-10  -0.780   0.4457  
     vector_length                       7.482e-11  2.904e-11   2.577   0.0190 *
     threads_number                     -4.765e-14  6.004e-13  -0.079   0.9376  
     elements_number:y_component_number  1.121e-11  6.102e-12   1.836   0.0829 .
     elements_number:vector_length      -3.682e-12  1.729e-12  -2.130   0.0472 *
     elements_number:threads_number      4.474e-14  8.569e-14   0.522   0.6079  
     y_component_number:vector_length    3.478e-12  7.585e-12   0.459   0.6520  
     y_component_number:threads_number  -1.171e-13  2.700e-13  -0.434   0.6696  
     vector_length:threads_number       -3.104e-17  3.492e-14  -0.001   0.9993  
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 2.691e-10 on 18 degrees of freedom
     Multiple R-squared:  0.8427,	Adjusted R-squared:  0.7553 
     F-statistic: 9.643 on 10 and 18 DF,  p-value: 2.293e-05
     #+end_example

     Lets fix vector_length:
     #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ vector_length
      
      best_vector_length <- find_best(model, random_set, df, c("vector_length"))
      best_vector_length
      
      subset <- subset[subset$vector_length == best_vector_length,]
      pruned_full_space <- pruned_full_space[pruned_full_space$vector_length == best_vector_length,]
      nrow(pruned_full_space)
      nrow(subset)
     #+end_src

     #+RESULTS:
     : [1] 1
     : [1] 576
     : [1] 7

     The best potential solution is:
     #+begin_src R :results output :session :exports both
       min(pruned_full_space$time_per_pixel) / min(df$time_per_pixel)
     #+end_src

     #+RESULTS:
     : [1] 1.012177

     Adding more points
     #+begin_src R :results output :session :exports both
      tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),]
      subset <- subset[, !names(working_set) %in% c("run") ] 
      subset <- rbind(subset, tmp2)
     #+end_src

     #+RESULTS:

     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
       plot(subset[, !names(working_set) %in% c("run", "vector_recompute", "lws_y", "vector_length") ])     
     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-5040GO8/figure5040DOB.png]]

     Looking for relevant factors:
     #+begin_src R :results output :session :exports both
     model <- time_per_pixel ~ elements_number + y_component_number + threads_number 
     fit <- lm(model,subset)
     summary(fit)
     model <- time_per_pixel ~ (elements_number + y_component_number + I(y_component_number^2) + threads_number )
     fit <- lm(model,subset)
     summary(fit)
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = model, data = subset)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -3.869e-11 -2.099e-11 -1.357e-11  1.396e-11  6.834e-11 

     Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
     (Intercept)         2.980e-10  3.546e-11   8.405 3.06e-05 ***
     elements_number     4.872e-12  3.196e-12   1.525  0.16586    
     y_component_number -4.378e-11  1.165e-11  -3.757  0.00556 ** 
     threads_number      1.700e-14  4.525e-14   0.376  0.71696    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 4.038e-11 on 8 degrees of freedom
     Multiple R-squared:  0.6974,	Adjusted R-squared:  0.584 
     F-statistic: 6.146 on 3 and 8 DF,  p-value: 0.01795

     Call:
     lm(formula = model, data = subset)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -2.601e-11 -4.996e-12  8.151e-13  8.126e-12  2.632e-11 

     Coefficients:
                               Estimate Std. Error t value Pr(>|t|)    
     (Intercept)              4.094e-10  2.509e-11  16.318 7.91e-07 ***
     elements_number          3.173e-12  1.461e-12   2.171 0.066504 .  
     y_component_number      -1.272e-10  1.545e-11  -8.231 7.60e-05 ***
     I(y_component_number^2)  1.349e-11  2.353e-12   5.735 0.000709 ***
     threads_number           1.618e-14  2.027e-14   0.798 0.450998    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 1.808e-11 on 7 degrees of freedom
     Multiple R-squared:  0.9469,	Adjusted R-squared:  0.9166 
     F-statistic: 31.21 on 4 and 7 DF,  p-value: 0.0001488
#+end_example

     Lets fix y_component_number:
     #+begin_src R :results output :session :exports both
         model <- time_per_pixel ~ y_component_number + I(y_component_number^2)
      
      best_y_component_number <- find_best(model, random_set, df, c("y_component_number"))
      best_y_component_number
      
      subset <- subset[subset$y_component_number == best_y_component_number,]
      pruned_full_space <- pruned_full_space[pruned_full_space$y_component_number == best_y_component_number,]
      nrow(pruned_full_space)
      nrow(subset)
     #+end_src

     #+RESULTS:
     : [1] 6
     : [1] 96
     : [1] 1
     
     Best potential optimum:
     #+begin_src R :results output :session :exports both
       min(pruned_full_space$time_per_pixel) / min(df$time_per_pixel) 
     #+end_src

     #+RESULTS:
     : [1] 1.012177
     
     Lets add more points:
     #+begin_src R :results output :session :exports both
      tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = 5, replace = FALSE),]
      subset <- subset[, !names(working_set) %in% c("run") ] 
      subset <- rbind(subset, tmp2)
     #+end_src

     #+RESULTS:

     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
     plot(subset[, !names(working_set) %in% c("run", "vector_recompute", "lws_y", "vector_length", "y_component_number") ])     
     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-5040GO8/figure5040QYH.png]]

     Looking for relevant factors:
     #+begin_src R :results output :session :exports both
       model <- time_per_pixel ~  threads_number  + elements_number + I(1/elements_number)
       fit <- lm(model,subset)
       summary(fit)
       model <- time_per_pixel ~  ( threads_number  + elements_number ) ^2 
       fit <- lm(model,subset)
       summary(fit)
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = model, data = subset)

     Residuals:
          17777       9680      10638      20355       8697      16588 
      1.212e-27 -6.513e-13 -8.857e-28  2.855e-12  1.427e-12 -3.631e-12 

     Coefficients:
                            Estimate Std. Error t value Pr(>|t|)   
     (Intercept)           5.267e-10  3.521e-11  14.959  0.00444 **
     threads_number       -2.680e-14  2.473e-14  -1.084  0.39172   
     elements_number      -1.251e-11  1.303e-12  -9.597  0.01068 * 
     I(1/elements_number) -1.958e-09  1.756e-10 -11.150  0.00795 **
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 3.45e-12 on 2 degrees of freedom
     Multiple R-squared:  0.9941,	Adjusted R-squared:  0.9853 
     F-statistic: 112.5 on 3 and 2 DF,  p-value: 0.008825

     Call:
     lm(formula = model, data = subset)

     Residuals:
          17777       9680      10638      20355       8697      16588 
     -2.019e-28 -6.513e-13  9.292e-29  2.855e-12  1.427e-12 -3.631e-12 

     Coefficients:
                                      Estimate Std. Error t value Pr(>|t|)   
     (Intercept)                     8.253e-11  6.435e-12   12.82  0.00602 **
     threads_number                  2.565e-13  4.362e-14    5.88  0.02773 * 
     elements_number                 7.133e-12  5.165e-13   13.81  0.00520 **
     threads_number:elements_number -4.722e-14  4.235e-15  -11.15  0.00795 **
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 3.45e-12 on 2 degrees of freedom
     Multiple R-squared:  0.9941,	Adjusted R-squared:  0.9853 
     F-statistic: 112.5 on 3 and 2 DF,  p-value: 0.008825
     #+end_example

     Lets try to fix threads number and elements number by considering
     their interactions:
     #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ ( threads_number  + elements_number ) ^2 
      
      best_th_elm <- find_best(model, random_set, df, c("threads_number","elements_number"))
      best_th_elm
      
      subset <- subset[subset$threads_number == best_th_elm$threads_number & subset$elements_number == best_th_elm$elements_number,]
      pruned_full_space <- pruned_full_space[pruned_full_space$threads_number == best_th_elm$threads_number & pruned_full_space$elements_number == best_th_elm$elements_number,]
      nrow(pruned_full_space)
      nrow(subset)     
     #+end_src

     #+RESULTS:
     :      threads_number elements_number
     : 6428             32              24
     : [1] 4
     : [1] 0

     Best potential solution is reached with an extra cost of 4
     #+begin_src R :results output :session :exports both
       min(pruned_full_space$time_per_pixel) / min(df$time_per_pixel) 
     #+end_src

     #+RESULTS:
     : [1] 1.397591

***** DONE Strategy 2
     What if at the begining we fixed 
     #+begin_src R :results output :session :exports both
       model <-time_per_pixel ~ vector_length + threads_number + lws_y 
       fit <- lm(model,working_set)
       summary(fit)
       model <-time_per_pixel ~ (vector_length + threads_number + lws_y )^2
       fit <- lm(model,working_set)
       summary(fit)
       model <-time_per_pixel ~ lws_y + lws_y:vector_length + threads_number:lws_y
       fit <- lm(model,working_set)
       summary(fit)
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = model, data = working_set)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -6.206e-09 -1.405e-09 -5.497e-10  5.942e-10  2.238e-08 

     Coefficients:
                      Estimate Std. Error t value Pr(>|t|)    
     (Intercept)     1.278e-09  6.212e-10   2.057  0.04270 *  
     vector_length   1.998e-10  6.107e-11   3.272  0.00154 ** 
     threads_number -2.996e-12  1.014e-12  -2.956  0.00403 ** 
     lws_y           1.146e-11  2.603e-12   4.402 3.07e-05 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 3.205e-09 on 86 degrees of freedom
     Multiple R-squared:  0.2795,	Adjusted R-squared:  0.2543 
     F-statistic: 11.12 on 3 and 86 DF,  p-value: 3.073e-06

     Call:
     lm(formula = model, data = working_set)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -7.661e-09 -6.073e-10 -2.756e-10  1.825e-10  1.610e-08 

     Coefficients:
                                    Estimate Std. Error t value Pr(>|t|)    
     (Intercept)                  -1.056e-10  6.041e-10  -0.175   0.8617    
     vector_length                 2.053e-10  8.140e-11   2.522   0.0136 *  
     threads_number                1.092e-12  1.097e-12   0.996   0.3221    
     lws_y                         2.486e-11  5.458e-12   4.554 1.79e-05 ***
     vector_length:threads_number -3.344e-13  1.501e-13  -2.228   0.0286 *  
     vector_length:lws_y           3.296e-12  5.951e-13   5.538 3.51e-07 ***
     threads_number:lws_y         -4.427e-14  6.252e-15  -7.080 4.26e-10 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 2.401e-09 on 83 degrees of freedom
     Multiple R-squared:  0.6098,	Adjusted R-squared:  0.5815 
     F-statistic: 21.61 on 6 and 83 DF,  p-value: 3.889e-15

     Call:
     lm(formula = model, data = working_set)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -7.930e-09 -6.576e-10 -4.075e-10  3.044e-10  1.711e-08 

     Coefficients:
                            Estimate Std. Error t value Pr(>|t|)    
     (Intercept)           7.623e-10  3.066e-10   2.486   0.0148 *  
     lws_y                 2.411e-11  5.331e-12   4.523 1.94e-05 ***
     lws_y:vector_length   3.793e-12  5.270e-13   7.199 2.14e-10 ***
     lws_y:threads_number -4.811e-14  5.788e-15  -8.312 1.24e-12 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 2.454e-09 on 86 degrees of freedom
     Multiple R-squared:  0.5776,	Adjusted R-squared:  0.5629 
     F-statistic:  39.2 on 3 and 86 DF,  p-value: 4.599e-16
#+end_example

     Looking at prediction. It is unlikely that vector_length and lws_y
     have an interaction. If we consider this as an interaction the
     value of lws_y is seems absurd...
     #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ (vector_length + threads_number + lws_y )^2
      best1 <- find_best(model, working_set, df, c("threads_number","vector_length","lws_y"))
      best1

      model <- time_per_pixel ~ vector_length + threads_number + lws_y + lws_y:threads_number
      best1 <- find_best(model, working_set, df, c("threads_number","vector_length","lws_y"))
      best1

      model <-time_per_pixel ~ threads_number+ vector_length+lws_y + lws_y:vector_length + threads_number:lws_y
      best1 <- find_best(model, working_set, df, c("threads_number","vector_length","lws_y"))
      best1

      model <- time_per_pixel ~ (vector_length + threads_number + lws_y )      
      best1 <- find_best(model, working_set, df, c("threads_number","vector_length","lws_y"))
      best1

     #+end_src

     #+RESULTS:
     :      threads_number vector_length lws_y
     : 6662           1024             1  1024
     :      threads_number vector_length lws_y
     : 6467           1024             1     1
     :      threads_number vector_length lws_y
     : 6662           1024             1  1024
     :      threads_number vector_length lws_y
     : 6467           1024             1     1

     #+begin_src R :results output graphics :file img/20160402/pilipili2/lm_model1_plot.png :exports both :width 600 :height 400 :session
       default <- par()
       par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
       model <-time_per_pixel ~ (vector_length + threads_number + lws_y )^2
       fit <- lm(model,working_set)
       plot(fit)
       par(default)    
     #+end_src

     #+RESULTS:
     [[file:img/20160402/pilipili2/lm_model1_plot.png]]

     #+begin_src R :results output graphics :file img/20160402/pilipili2/lm_model2_plot.png :exports both :width 600 :height 400 :session
       default <- par()
       par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
       model <-time_per_pixel ~ vector_length + threads_number + lws_y
       fit <- lm(model,working_set)
       plot(fit)
       par(default)    
     #+end_src

     #+RESULTS:
     [[file:img/20160402/pilipili2/lm_model2_plot.png]]

     #+begin_src R :results output graphics :file img/20160402/pilipili2/lm_model3_plot.png :exports both :width 600 :height 400 :session
       default <- par()
       par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
       model <-time_per_pixel ~ threads_number+ vector_length+lws_y + lws_y:vector_length + threads_number:lws_y
       fit <- lm(model,working_set)
       plot(fit)
       par(default)    
     #+end_src

     #+RESULTS:
     [[file:img/20160402/pilipili2/lm_model3_plot.png]]

    #+begin_src R :results output graphics :file img/20160402/pilipili2/lm_model4_plot.png :exports both :width 600 :height 400 :session
       default <- par()
       par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
       model <-time_per_pixel ~ threads_number + vector_length + lws_y + threads_number:lws_y
       fit <- lm(model,working_set)
       plot(fit)
       par(default)    
     #+end_src

    #+RESULTS:
    [[file:img/20160402/pilipili2/lm_model4_plot.png]]

     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
       model1 <-time_per_pixel ~ (vector_length + threads_number + lws_y )^2
       fit1 <- lm(model1,working_set)
       model2 <-time_per_pixel ~ vector_length + threads_number + lws_y
       fit2 <- lm(model2,working_set)
       model3 <-time_per_pixel ~ threads_number+ vector_length+lws_y + lws_y:vector_length + threads_number:lws_y
       fit3 <- lm(model3,working_set)

       model4 <- time_per_pixel ~ vector_length + threads_number + lws_y + lws_y:threads_number
       fit4 <- lm(model4,working_set)

       default <- par()
       par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))

       plot(fitted(fit1),residuals(fit1))
       abline(0,0,lty=2)       

       plot(fitted(fit2),residuals(fit2))
       abline(0,0,lty=2)       

       plot(fitted(fit3),residuals(fit3))
       abline(0,0,lty=2)       

       plot(fitted(fit4),residuals(fit4))
       abline(0,0,lty=2)       

       par(default)    

     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-3507TqQ/figure3507d7P.png]]


     #+begin_src R :results output graphics :file img/20160402/pilipili2/model_comparison_fitted_vs_predict.png :exports both :width 800 :height 600 :session
       model1 <-time_per_pixel ~ (vector_length + threads_number + lws_y )^2
       fit1 <- lm(model1,working_set)
       model2 <-time_per_pixel ~ vector_length + threads_number + lws_y
       fit2 <- lm(model2,working_set)
       model3 <-time_per_pixel ~ threads_number+ vector_length+lws_y + lws_y:vector_length + threads_number:lws_y
       fit3 <- lm(model3,working_set)
       model4 <- time_per_pixel ~ vector_length + threads_number + lws_y + lws_y:threads_number
       fit4 <- lm(model4,working_set)

       default <- par()
       par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))

       plot(fitted(fit1),residuals(fit1) + fitted(fit1))
       abline(0,0,lty=2)       

       plot(fitted(fit2),residuals(fit2) + fitted(fit2))
       abline(0,0,lty=2)       

       plot(fitted(fit3),residuals(fit3) + fitted(fit3))
       abline(0,0,lty=2)       

       plot(fitted(fit4),residuals(fit4) + fitted(fit4))
       abline(0,0,lty=2)       

       par(default)    

     #+end_src

     #+RESULTS:
     [[file:img/20160402/pilipili2/model_comparison_fitted_vs_predict.png]]

     Fixing param:
     #+begin_src R :results output :session :exports both
       subset <- working_set[working_set$threads_number == best1$threads_number & 
                             working_set$vector_length == best1$vector_length & 
                             working_set$lws_y == best1$lws_y,]

       pruned_full_space <- df[df$threads_number == best1$threads_number & 
                            df$vector_length == best1$vector_length & 
                            df$lws_y == best1$lws_y,]

       nrow(subset)
       nrow(pruned_full_space)
     #+end_src

     #+RESULTS:
     : [1] 0
     : [1] 96

     Best potential solution:
     #+begin_src R :results output :session :exports both
       min(pruned_full_space$time_per_pixel) / min(df$time_per_pixel)
     #+end_src

     #+RESULTS:
     : [1] 1.076159


     Adding points
     #+begin_src R :results output :session :exports both
      tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = 20, replace = FALSE),]
      subset <- subset[, !names(working_set) %in% c("run") ] 
      subset <- rbind(subset, tmp2)     
     #+end_src

     #+RESULTS:

     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      plot(subset[, !names(working_set) %in% c("run", "vector_recompute", "threads_number", "vector_length", "lws_y") ])     
     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-3507TqQ/figure3507DZb.png]]

     Looking for relevant parameters:
     #+begin_src R :results output :session :exports both
     model <- time_per_pixel ~ elements_number + y_component_number + temporary_size + load_overlap
     fit <- lm(model,subset)
     summary(fit)
     model <- time_per_pixel ~ elements_number + y_component_number 
     fit <- lm(model,subset)
     summary(fit)
     model <- time_per_pixel ~ elements_number + I(elements_number^2) + y_component_number 
     fit <- lm(model,subset)
     summary(fit)
     model <- time_per_pixel ~ (elements_number + y_component_number)^2
     fit <- lm(model,subset)
     summary(fit)
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = model, data = subset)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -3.905e-11 -1.801e-11  2.190e-13  1.678e-11  4.553e-11 

     Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
     (Intercept)         2.788e-10  3.233e-11   8.625 3.37e-07 ***
     elements_number     7.202e-12  1.704e-12   4.227 0.000732 ***
     y_component_number -3.592e-11  4.770e-12  -7.531 1.80e-06 ***
     temporary_size     -1.573e-12  6.670e-12  -0.236 0.816700    
     load_overlaptrue   -8.568e-13  1.278e-11  -0.067 0.947416    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 2.639e-11 on 15 degrees of freedom
     Multiple R-squared:  0.7933,	Adjusted R-squared:  0.7381 
     F-statistic: 14.39 on 4 and 15 DF,  p-value: 5.101e-05

     Call:
     lm(formula = model, data = subset)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -3.994e-11 -1.757e-11  1.049e-12  1.747e-11  4.469e-11 

     Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
     (Intercept)         2.722e-10  1.445e-11  18.843 7.91e-13 ***
     elements_number     7.332e-12  1.517e-12   4.835 0.000155 ***
     y_component_number -3.587e-11  4.470e-12  -8.024 3.51e-07 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 2.483e-11 on 17 degrees of freedom
     Multiple R-squared:  0.7925,	Adjusted R-squared:  0.7681 
     F-statistic: 32.46 on 2 and 17 DF,  p-value: 1.566e-06

     Call:
     lm(formula = model, data = subset)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -3.646e-11 -1.908e-11 -2.238e-12  1.957e-11  4.778e-11 

     Coefficients:
                            Estimate Std. Error t value Pr(>|t|)    
     (Intercept)           2.639e-10  1.993e-11  13.238 4.90e-10 ***
     elements_number       1.064e-11  5.555e-12   1.915   0.0736 .  
     I(elements_number^2) -1.947e-13  3.143e-13  -0.619   0.5444    
     y_component_number   -3.646e-11  4.654e-12  -7.835 7.26e-07 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 2.53e-11 on 16 degrees of freedom
     Multiple R-squared:  0.7973,	Adjusted R-squared:  0.7594 
     F-statistic: 20.98 on 3 and 16 DF,  p-value: 8.598e-06

     Call:
     lm(formula = model, data = subset)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -4.576e-11 -8.914e-12  2.112e-12  1.092e-11  3.256e-11 

     Coefficients:
                                          Estimate Std. Error t value Pr(>|t|)    
     (Intercept)                         3.042e-10  2.339e-11  13.007 6.35e-10 ***
     elements_number                     1.777e-12  3.589e-12   0.495    0.627    
     y_component_number                 -4.663e-11  7.654e-12  -6.092 1.56e-05 ***
     elements_number:y_component_number  1.610e-12  9.529e-13   1.689    0.111    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 2.358e-11 on 16 degrees of freedom
     Multiple R-squared:  0.8239,	Adjusted R-squared:  0.7909 
     F-statistic: 24.95 on 3 and 16 DF,  p-value: 2.836e-06
#+end_example

     Lets fix elements_number and y_component_number:
     #+begin_src R :results output :session :exports both
       model <- time_per_pixel ~ elements_number + y_component_number      
       best2 <- find_best(model, subset, pruned_full_space, c("elements_number","y_component_number"))
       best2
     #+end_src

     #+RESULTS:
     :       elements_number y_component_number
     : 14403               6                  6

     #+begin_src R :results output :session :exports both
       subset <- working_set[working_set$elements_number == best2$elements_number & 
                             working_set$y_component_number == best2$y_component_number,]

       pruned_full_space <- pruned_full_space[pruned_full_space$elements_number == best2$elements_number & 
                               pruned_full_space$y_component_number == best2$y_component_number,]

       nrow(subset)
       nrow(pruned_full_space)
     #+end_src

     #+RESULTS:
     : [1] 4
     : [1] 4

     Adding points:
     #+begin_src R :results output :session :exports both
      tmp2 <- pruned_full_space[sample(1:nrow(pruned_full_space), size = nrow(pruned_full_space), replace = FALSE),]
      subset <- subset[, !names(working_set) %in% c("run") ] 
      subset <- rbind(subset, tmp2)     
     #+end_src

     #+RESULTS:

     The solution is:
     #+begin_src R :results output :session :exports both
     min(subset$time_per_pixel) / min(df$time_per_pixel)
     #+end_src

     #+RESULTS:
     : [1] 1.076159

     Improvement:
     #+begin_src R :results output :session :exports both
     df_lm_random[df_lm_random$time_per_pixel == max(df_lm_random$time_per_pixel),]$slowdown /(min(subset$time_per_pixel) / min(df$time_per_pixel))
     #+end_src

     #+RESULTS:
     : [1] 1.953286

**** Understanding worst case
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

     #+begin_src R :results output :session :exports both
      objective_predict <- function(fit,x){
           names <- colnames(x)
           s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
           eval(parse(text=s))
           as.numeric(predict(fit, values, interval="none"))
       }

       objective_predict_one <- function(fit,x,colname){
           s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
           eval(parse(text=s))
           as.numeric(predict(fit, values, interval="none"))
       }

       find_best <- function(model,subset,full_set,colnames){
           fit <- lm(data=subset,formula=formula(model))
           if( length(colnames) > 1) {
               return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
           }
           else{
               return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
           }
       }

     #+end_src

     #+RESULTS:

     #+begin_src R :results output :session :exports both
       logs <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_2.csv",strip.white=T,header=T)
       df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_improve_trial_2.csv",strip.white=T,header=T)
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       working_set <- logs[logs$run == df_lm_random[df_lm_random$time_per_pixel == max(df_lm_random$time_per_pixel),]$run,]
       df_lm_random[df_lm_random$time_per_pixel == max(df_lm_random$time_per_pixel),]
       summary(working_set)
       set.set(1)
     #+end_src

**** Understaing best case
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

     #+begin_src R :results output :session :exports both
      objective_predict <- function(fit,x){
           names <- colnames(x)
           s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
           eval(parse(text=s))
           as.numeric(predict(fit, values, interval="none"))
       }

       objective_predict_one <- function(fit,x,colname){
           s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
           eval(parse(text=s))
           as.numeric(predict(fit, values, interval="none"))
       }

       find_best <- function(model,subset,full_set,colnames){
           fit <- lm(data=subset,formula=formula(model))
           if( length(colnames) > 1) {
               return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
           }
           else{
               return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
           }
       }

     #+end_src

     #+RESULTS:

     #+begin_src R :results output :session :exports both
       logs <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_2.csv",strip.white=T,header=T)
       df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_improve_trial_2.csv",strip.white=T,header=T)
       additional_points <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_additional_points_2.csv",strip.white=T,header=T) 
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       set <- logs[logs$run == df_lm_random[df_lm_random$time_per_pixel == min(df_lm_random$time_per_pixel),]$run[1],]
       df_lm_random[df_lm_random$time_per_pixel == min(df_lm_random$time_per_pixel),]
       working_set <- set[,!names(set) %in% c("run", "best", "point_number", "method", "slowdown")]
       summary(working_set)
       set.seed(1)
     #+end_src

     #+RESULTS:
     #+begin_example
        elements_number y_component_number vector_length temporary_size
     4                6                  6             1              2
     11               6                  6             1              2
     12               6                  6             1              2
     15               6                  6             1              2
     20               6                  6             1              2
     24               6                  6             1              2
     33               6                  6             1              2
     41               6                  6             1              2
     42               6                  6             1              2
     50               6                  6             1              2
     55               6                  6             1              2
     60               6                  6             1              2
     64               6                  6             1              2
     71               6                  6             1              2
     75               6                  6             1              2
     80               6                  6             1              2
     82               6                  6             1              2
     85               6                  6             1              2
     86               6                  6             1              2
     87               6                  6             1              2
     90               6                  6             1              2
     93               6                  6             1              2
     96               6                  6             1              2
     98               6                  6             1              2
        vector_recompute load_overlap threads_number lws_y time_per_pixel run
     4              true        false           1024     8   1.176425e-10   4
     11             true        false           1024     8   1.176425e-10  11
     12             true        false           1024     8   1.176425e-10  12
     15             true        false           1024     8   1.176425e-10  15
     20             true        false           1024     8   1.176425e-10  20
     24             true        false           1024     8   1.176425e-10  24
     33             true        false           1024     8   1.176425e-10  33
     41             true        false           1024     8   1.176425e-10  41
     42             true        false           1024     8   1.176425e-10  42
     50             true        false           1024     8   1.176425e-10  50
     55             true        false           1024     8   1.176425e-10  55
     60             true        false           1024     8   1.176425e-10  60
     64             true        false           1024     8   1.176425e-10  64
     71             true        false           1024     8   1.176425e-10  71
     75             true        false           1024     8   1.176425e-10  75
     80             true        false           1024     8   1.176425e-10  80
     82             true        false           1024     8   1.176425e-10  82
     85             true        false           1024     8   1.176425e-10  85
     86             true        false           1024     8   1.176425e-10  86
     87             true        false           1024     8   1.176425e-10  87
     90             true        false           1024     8   1.176425e-10  90
     93             true        false           1024     8   1.176425e-10  93
     96             true        false           1024     8   1.176425e-10  96
     98             true        false           1024     8   1.176425e-10  98
                best point_number method slowdown
     4  1.176425e-10          119     LM 1.009796
     11 1.176425e-10          119     LM 1.009796
     12 1.176425e-10          119     LM 1.009796
     15 1.176425e-10          119     LM 1.009796
     20 1.176425e-10          119     LM 1.009796
     24 1.176425e-10          119     LM 1.009796
     33 1.176425e-10          119     LM 1.009796
     41 1.176425e-10          119     LM 1.009796
     42 1.176425e-10          119     LM 1.009796
     50 1.176425e-10          119     LM 1.009796
     55 1.176425e-10          119     LM 1.009796
     60 1.176425e-10          119     LM 1.009796
     64 1.176425e-10          119     LM 1.009796
     71 1.176425e-10          119     LM 1.009796
     75 1.176425e-10          119     LM 1.009796
     80 1.176425e-10          119     LM 1.009796
     82 1.176425e-10          119     LM 1.009796
     85 1.176425e-10          119     LM 1.009796
     86 1.176425e-10          119     LM 1.009796
     87 1.176425e-10          119     LM 1.009796
     90 1.176425e-10          119     LM 1.009796
     93 1.165013e-10          119     LM 1.009796
     96 1.176425e-10          119     LM 1.009796
     98 1.171493e-10          119     LM 1.009796
      elements_number  y_component_number vector_length    temporary_size 
      Min.   : 1.000   Min.   :1.000      Min.   : 1.000   Min.   :2.000  
      1st Qu.: 4.000   1st Qu.:2.000      1st Qu.: 2.000   1st Qu.:2.000  
      Median : 6.000   Median :4.000      Median : 4.000   Median :2.000  
      Mean   : 8.822   Mean   :3.456      Mean   : 6.522   Mean   :2.867  
      3rd Qu.:12.000   3rd Qu.:5.000      3rd Qu.: 8.000   3rd Qu.:4.000  
      Max.   :24.000   Max.   :6.000      Max.   :16.000   Max.   :4.000  
      vector_recompute load_overlap threads_number       lws_y       
      true:90          false:43     Min.   :  32.0   Min.   :   1.0  
                       true :47     1st Qu.: 128.0   1st Qu.:   4.0  
                                    Median : 256.0   Median :  32.0  
                                    Mean   : 402.5   Mean   : 106.2  
                                    3rd Qu.: 512.0   3rd Qu.: 128.0  
                                    Max.   :1024.0   Max.   :1024.0  
      time_per_pixel     
      Min.   :1.380e-10  
      1st Qu.:3.452e-10  
      Median :1.132e-09  
      Mean   :2.483e-09  
      3rd Qu.:3.247e-09  
      Max.   :3.214e-08
#+end_example

     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
       plot(working_set[,!names(working_set) %in% c("run","vector_recompute")])
     #+end_src

     #+RESULTS:
     [[file:/tmp/babel-4627fyl/figure46270Ld.png]]

     WE keep the model vector length + lws_y even if the R-squared is
     low because the std. error is ok:
     #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ y_component_number + I(1/y_component_number) + 
                  vector_length + 
                  lws_y + I(1/lws_y) +
                  threads_number + I(1/threads_number)

      fit <- lm(model,working_set)
      summary(fit)

      model <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y + temporary_size + load_overlap
      fit <- lm(model,working_set)
      summary(fit)

      model <- time_per_pixel ~ vector_length + lws_y 
      fit <- lm(model,working_set)
      summary(fit)

      model <- time_per_pixel ~ (vector_length + lws_y )^2
      fit <- lm(model,working_set)
      summary(fit)
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = model, data = working_set)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -4.738e-09 -1.850e-09 -2.534e-10  8.050e-10  2.245e-08 

     Coefficients:
                               Estimate Std. Error t value Pr(>|t|)    
     (Intercept)              4.822e-09  3.358e-09   1.436 0.154882    
     y_component_number      -7.391e-10  5.491e-10  -1.346 0.182058    
     I(1/y_component_number) -3.203e-09  3.079e-09  -1.041 0.301156    
     vector_length            2.764e-10  7.624e-11   3.626 0.000499 ***
     lws_y                    8.941e-12  2.334e-12   3.831 0.000249 ***
     I(1/lws_y)              -2.263e-09  1.455e-09  -1.555 0.123690    
     threads_number          -2.114e-12  1.680e-12  -1.258 0.211919    
     I(1/threads_number)      1.833e-08  6.553e-08   0.280 0.780449    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 3.973e-09 on 82 degrees of freedom
     Multiple R-squared:  0.3042,	Adjusted R-squared:  0.2448 
     F-statistic: 5.121 on 7 and 82 DF,  p-value: 7.332e-05

     Call:
     lm(formula = model, data = working_set)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -5.811e-09 -1.652e-09 -2.304e-10  9.729e-10  2.113e-08 

     Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
     (Intercept)         4.036e-09  1.750e-09   2.306 0.023651 *  
     elements_number    -1.682e-10  9.007e-11  -1.867 0.065407 .  
     y_component_number  3.011e-10  3.406e-10   0.884 0.379257    
     vector_length       2.765e-10  7.431e-11   3.720 0.000363 ***
     threads_number     -2.724e-12  1.215e-12  -2.242 0.027632 *  
     lws_y               1.103e-11  2.181e-12   5.057 2.55e-06 ***
     temporary_size     -9.819e-10  4.229e-10  -2.322 0.022731 *  
     load_overlaptrue   -3.316e-10  8.563e-10  -0.387 0.699622    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 3.858e-09 on 82 degrees of freedom
     Multiple R-squared:  0.3437,	Adjusted R-squared:  0.2877 
     F-statistic: 6.135 on 7 and 82 DF,  p-value: 8.84e-06

     Call:
     lm(formula = model, data = working_set)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -5.573e-09 -1.516e-09 -4.444e-10  6.605e-10  2.317e-08 

     Coefficients:
                     Estimate Std. Error t value Pr(>|t|)    
     (Intercept)   -4.134e-10  7.375e-10  -0.561 0.576522    
     vector_length  2.962e-10  7.720e-11   3.836 0.000236 ***
     lws_y          9.081e-12  2.129e-12   4.266 5.04e-05 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 4.05e-09 on 87 degrees of freedom
     Multiple R-squared:  0.2326,	Adjusted R-squared:  0.215 
     F-statistic: 13.19 on 2 and 87 DF,  p-value: 9.949e-06

     Call:
     lm(formula = model, data = working_set)

     Residuals:
            Min         1Q     Median         3Q        Max 
     -6.378e-09 -9.001e-10 -5.044e-10  6.221e-10  1.849e-08 

     Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
     (Intercept)          6.185e-10  4.782e-10   1.294    0.199    
     vector_length        5.084e-11  5.369e-11   0.947    0.346    
     lws_y               -1.562e-13  1.581e-12  -0.099    0.922    
     vector_length:lws_y  3.909e-12  3.445e-13  11.346   <2e-16 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

     Residual standard error: 2.578e-09 on 86 degrees of freedom
     Multiple R-squared:  0.6927,	Adjusted R-squared:  0.6819 
     F-statistic: 64.61 on 3 and 86 DF,  p-value: < 2.2e-16
     #+end_example

     #+begin_src R :results output :session :exports both
       model <- time_per_pixel ~ vector_length + lws_y 
       find_best(model, working_set, df, c("vector_length", "lws_y")) 
     #+end_src

     #+RESULTS:
     :   vector_length lws_y
     : 2             1     1

     #+begin_src R :results output :session :exports both
     
     #+end_src
     
** 2016-06-09
*** TODO DoE for LM
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

    Logging the fit of model with different sampling techniques to
    find which allow us to retrieve the most information
**** Random
     #+begin_src R :results output :session :exports both
        f <- function(x) { x * (0.05 - 1 * (x < 0)) }
        g <- function(x) { f(x)/x^2 }
        h <- function(x) {pmin(g(x),1e15)}

       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

       elements_number_val = as.numeric(levels(as.factor(df$elements_number)))
       y_component_number_val = as.numeric(levels(as.factor(df$y_component_number)))
       vector_length_val = as.numeric(levels(as.factor(df$vector_length)))
       threads_number_val = as.numeric(levels(as.factor(df$threads_number)))
       lws_y_val = as.numeric(levels(as.factor(df$lws_y)))

       form_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
       form_y_comp <- time_per_pixel ~ y_component_number + I(1/y_component_number)
       form_v_len <- time_per_pixel ~ vector_length 
       form_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
       form_lws_y <- time_per_pixel ~ lws_y

       runs = 100 

       fits = list()  

       for(j in 1:runs){
           random_set <- df[sample(1:nrow(df), size = 100, replace = FALSE),]
           model_subset_elem_nb <- lm(data=random_set,formula=form_elem_nb)
           model_subset_y_comp <- lm(data=random_set,formula=form_y_comp)
           model_subset_v_len <- lm(data=random_set,formula=form_v_len)
           model_subset_th_nb <- lm(data=random_set,formula=form_th_nb)
           model_subset_lws_y <- lm(data=random_set,formula=form_lws_y)
           for(i in 1:200){
               E <- residuals(model_subset_elem_nb)
               model_subset_elem_nb <- lm(data=random_set,formula=form_elem_nb,weight=h(E))
               
               E <- residuals(model_subset_y_comp)
               model_subset_y_comp <- lm(data=random_set,formula=form_y_comp,weight=h(E))
               
               E <- residuals(model_subset_v_len)
               model_subset_v_len <- lm(data=random_set,formula=form_v_len,weight=h(E))
               
               E <- residuals(model_subset_th_nb)
               model_subset_th_nb <- lm(data=random_set,formula=form_th_nb,weight=h(E))
               
               E <- residuals(model_subset_lws_y)
               model_subset_lws_y <- lm(data=random_set,formula=form_lws_y,weight=h(E))
               
           }
           l <- list()
           l[["elements_number"]] <- model_subset_elem_nb
           l[["y_component_number"]] <- model_subset_y_comp
           l[["vector_length"]] <- model_subset_v_len
           l[["threads_number"]] <- model_subset_th_nb
           l[["lws_y"]] <- model_subset_lws_y
         
           fits[[j]] <- l
       }

       saveRDS(fits, "../data/2016_04_08/pilipili2/18_08_24/random_fits.rds")
    #+end_src

     #+RESULTS:

**** LHS
    #+begin_src R :results output :session :exports both
      library(DoE.base)
      library(DoE.wrapper)
      
      f <- function(x) { x * (0.05 - 1 * (x < 0)) }
      g <- function(x) { f(x)/x^2 }
      h <- function(x) {pmin(g(x),1e15)}
      
      df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
      
      elements_number_val <- as.numeric(levels(as.factor(df$elements_number)))
      y_component_number_val <- as.numeric(levels(as.factor(df$y_component_number)))
      vector_length_val <- as.numeric(levels(as.factor(df$vector_length)))
      threads_number_val <- as.numeric(levels(as.factor(df$threads_number)))
      lws_y_val <- as.numeric(levels(as.factor(df$lws_y)))
      temporary_size_val <- as.numeric(levels(as.factor(df$temporary_size)))
      load_overlap_val <- levels(df$load_overlap)
      
      form_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
      form_y_comp <- time_per_pixel ~ y_component_number + I(1/y_component_number)
      form_v_len <- time_per_pixel ~ vector_length 
      form_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
      form_lws_y <- time_per_pixel ~ lws_y
      
      model_elem_nb <- lm(data=df,formula=form_elem_nb)
      model_y_comp <- lm(data=df,formula=form_y_comp)
      model_v_len <- lm(data=df,formula=form_v_len)
      model_th_nb <- lm(data=df,formula=form_th_nb)
      model_lws_y <- lm(data=df,formula=form_lws_y)
      for(i in 1:200){
          E <- residuals(model_elem_nb)
          model_elem_nb <- lm(data=df,formula=form_elem_nb,weight=h(E))
      
          E <- residuals(model_y_comp)
          model_y_comp <- lm(data=df,formula=form_y_comp,weight=h(E))
      
          E <- residuals(model_v_len)
          model_v_len <- lm(data=df,formula=form_v_len,weight=h(E))
      
          E <- residuals(model_th_nb)
          model_th_nb <- lm(data=df,formula=form_th_nb,weight=h(E))
      
          E <- residuals(model_lws_y)
          model_lws_y <- lm(data=df,formula=form_lws_y,weight=h(E))
      
      }
      
      fits = list()  
      runs = 100   
      
      for(j in 1:runs){
          Design.1 <- lhs.design( type= "maximin" , nruns= 441 ,nfactors= 7, randomize=TRUE ,digits= NULL, factor.names=list(idx_elements_number = c(1,length(elements_number_val)), 
                                                                                                                             idx_y_component_number = c(1,length(y_component_number_val)),
                                                                                                                             idx_vector_length = c(1,length(vector_length_val)), 
                                                                                                                             idx_threads_number = c(1,length(threads_number_val)),
                                                                                                                             idx_temporary_size = c(1,length(temporary_size_val)), 
                                                                                                                             idx_lws_y = c(1,length(lws_y_val)), 
                                                                                                                             idx_load_overlap = c(1,length(load_overlap_val)) 
                                                                                                                             ) 
                                 )
      
          Design.1.rounded <- round(Design.1) 
      
          set <- data.frame()
          for(i in 1:nrow(Design.1)){
              set <- rbind(set, df[ df$elements_number == elements_number_val[Design.1$idx_elements_number[i]]
                                   & df$y_component_number == y_component_number_val[Design.1$idx_y_component_number[i]]
                                   & df$vector_length == vector_length_val[Design.1$idx_vector_length[i]]
                                   & df$threads_number == threads_number_val[Design.1$idx_threads_number[i]]
                                   & df$lws_y == lws_y_val[Design.1$idx_lws_y[i]]
                                   & df$temporary_size == temporary_size_val[Design.1$idx_temporary_size[i]]
                                   & df$load_overlap == load_overlap_val[Design.1$idx_load_overlap[i]], ])
          }
      
          model_subset_elem_nb <- lm(data=set,formula=form_elem_nb)
          model_subset_y_comp <- lm(data=set,formula=form_y_comp)
          model_subset_v_len <- lm(data=set,formula=form_v_len)
          model_subset_th_nb <- lm(data=set,formula=form_th_nb)
          model_subset_lws_y <- lm(data=set,formula=form_lws_y)
          for(i in 1:200){
              E <- residuals(model_subset_elem_nb)
              model_subset_elem_nb <- lm(data=set,formula=form_elem_nb,weight=h(E))
      
              E <- residuals(model_subset_y_comp)
              model_subset_y_comp <- lm(data=set,formula=form_y_comp,weight=h(E))
      
              E <- residuals(model_subset_v_len)
              model_subset_v_len <- lm(data=set,formula=form_v_len,weight=h(E))
      
              E <- residuals(model_subset_th_nb)
              model_subset_th_nb <- lm(data=set,formula=form_th_nb,weight=h(E))
      
              E <- residuals(model_subset_lws_y)
              model_subset_lws_y <- lm(data=set,formula=form_lws_y,weight=h(E))
      
          }
          l <- list()
          l[["elements_number"]] <- model_subset_elem_nb
          l[["y_component_number"]] <- model_subset_y_comp
          l[["vector_length"]] <- model_subset_v_len
          l[["threads_number"]] <- model_subset_th_nb
          l[["lws_y"]] <- model_subset_lws_y
          fits[[j]] <- l
      }
      saveRDS(fits, "../data/2016_04_08/pilipili2/18_08_24/lhs_fits.rds")
    #+end_src

    #+RESULTS:
    :  Error in model.frame.default(formula = form_v_len, data = set, weights = h(E),  (from #38) : 
    :   variable lengths differ (found for '(weights)')

   
**** D-Optimal
***** Linear 
      #+begin_src R :results output :session :exports both
        library(DoE.base)
        library(DoE.wrapper)

        f <- function(x) { x * (0.05 - 1 * (x < 0)) }
        g <- function(x) { f(x)/x^2 }
        h <- function(x) {pmin(g(x),1e10)}

        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

        elements_number_val <- as.numeric(levels(as.factor(df$elements_number)))
        y_component_number_val <- as.numeric(levels(as.factor(df$y_component_number)))
        vector_length_val <- as.numeric(levels(as.factor(df$vector_length)))
        threads_number_val <- as.numeric(levels(as.factor(df$threads_number)))
        lws_y_val <- as.numeric(levels(as.factor(df$lws_y)))
        temporary_size_val <- as.numeric(levels(as.factor(df$temporary_size)))
        load_overlap_val <- levels(df$load_overlap)

        form_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
        form_y_comp <- time_per_pixel ~ y_component_number + I(1/y_component_number)
        form_v_len <- time_per_pixel ~ vector_length 
        form_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
        form_lws_y <- time_per_pixel ~ lws_y

        runs = 100   
        fits <- list()
        for(j in 1:runs){
            set <- Dopt.design( 100 , data=df, formula="~(elements_number  + y_component_number  + vector_length  + threads_number + lws_y  + temporary_size + load_overlap)" , nRepeat= 20 ,randomize= TRUE)
            model_subset_elem_nb <- lm(data=set,formula=form_elem_nb)
            model_subset_y_comp <- lm(data=set,formula=form_y_comp)
            model_subset_v_len <- lm(data=set,formula=form_v_len)
            model_subset_th_nb <- lm(data=set,formula=form_th_nb)
            model_subset_lws_y <- lm(data=set,formula=form_lws_y)
            for(i in 1:200){
                E <- residuals(model_subset_elem_nb)
                model_subset_elem_nb <- lm(data=set,formula=form_elem_nb,weight=h(E))

                E <- residuals(model_subset_y_comp)
                model_subset_y_comp <- lm(data=set,formula=form_y_comp,weight=h(E))

                E <- residuals(model_subset_v_len)
                model_subset_v_len <- lm(data=set,formula=form_v_len,weight=h(E))

                E <- residuals(model_subset_th_nb)
                model_subset_th_nb <- lm(data=set,formula=form_th_nb,weight=h(E))

                E <- residuals(model_subset_lws_y)
                model_subset_lws_y <- lm(data=set,formula=form_lws_y,weight=h(E))

            }
            l <- list()
            l[["elements_number"]] <- model_subset_elem_nb
            l[["y_component_number"]] <- model_subset_y_comp
            l[["vector_length"]] <- model_subset_v_len
            l[["threads_number"]] <- model_subset_th_nb
            l[["lws_y"]] <- model_subset_lws_y
            
            fits[[j]] <- l
        }
        saveRDS(fits, "../data/2016_04_08/pilipili2/18_08_24/Dopt_lin_fits.rds")
         #+end_src

      #+RESULTS:

     
***** Interactions 
      #+begin_src R :results output :session :exports both
        library(DoE.base)
        library(DoE.wrapper)

        f <- function(x) { x * (0.05 - 1 * (x < 0)) }
        g <- function(x) { f(x)/x^2 }
        h <- function(x) {pmin(g(x),1e10)}

        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

        elements_number_val <- as.numeric(levels(as.factor(df$elements_number)))
        y_component_number_val <- as.numeric(levels(as.factor(df$y_component_number)))
        vector_length_val <- as.numeric(levels(as.factor(df$vector_length)))
        threads_number_val <- as.numeric(levels(as.factor(df$threads_number)))
        lws_y_val <- as.numeric(levels(as.factor(df$lws_y)))
        temporary_size_val <- as.numeric(levels(as.factor(df$temporary_size)))
        load_overlap_val <- levels(df$load_overlap)

        form_elem_nb <- time_per_pixel ~ elements_number + I(1/elements_number)
        form_y_comp <- time_per_pixel ~ y_component_number + I(1/y_component_number)
        form_v_len <- time_per_pixel ~ vector_length 
        form_th_nb <- time_per_pixel ~ threads_number + I(1/threads_number)
        form_lws_y <- time_per_pixel ~ lws_y

        runs = 100   
        fits <- list()
        for(j in 1:runs){
            set <- Dopt.design( 100 , data=df, formula="~(elements_number  + y_component_number  + vector_length  + threads_number + lws_y  + temporary_size + load_overlap)^2" , nRepeat= 20 ,randomize= TRUE)
            model_subset_elem_nb <- lm(data=set,formula=form_elem_nb)
            model_subset_y_comp <- lm(data=set,formula=form_y_comp)
            model_subset_v_len <- lm(data=set,formula=form_v_len)
            model_subset_th_nb <- lm(data=set,formula=form_th_nb)
            model_subset_lws_y <- lm(data=set,formula=form_lws_y)
            for(i in 1:200){
                E <- residuals(model_subset_elem_nb)
                model_subset_elem_nb <- lm(data=set,formula=form_elem_nb,weight=h(E))

                E <- residuals(model_subset_y_comp)
                model_subset_y_comp <- lm(data=set,formula=form_y_comp,weight=h(E))

                E <- residuals(model_subset_v_len)
                model_subset_v_len <- lm(data=set,formula=form_v_len,weight=h(E))

                E <- residuals(model_subset_th_nb)
                model_subset_th_nb <- lm(data=set,formula=form_th_nb,weight=h(E))

                E <- residuals(model_subset_lws_y)
                model_subset_lws_y <- lm(data=set,formula=form_lws_y,weight=h(E))

            }
            l <- list()
            l[["elements_number"]] <- model_subset_elem_nb
            l[["y_component_number"]] <- model_subset_y_comp
            l[["vector_length"]] <- model_subset_v_len
            l[["threads_number"]] <- model_subset_th_nb
            l[["lws_y"]] <- model_subset_lws_y
            
            fits[[j]] <- l
        }
        saveRDS(fits, "../data/2016_04_08/pilipili2/18_08_24/Dopt_interact_fits.rds")
         #+end_src

      #+RESULTS:

***** Absurd
      #+begin_src R :results output :session :exports both
        library(DoE.base)
        library(DoE.wrapper)

        f <- function(x) { x * (0.05 - 1 * (x < 0)) }
        g <- function(x) { f(x)/x^2 }
        h <- function(x) {pmin(g(x),1e10)}

        df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

        elements_number_val <- as.numeric(levels(as.factor(df$elements_number)))
        y_component_number_val <- as.numeric(levels(as.factor(df$y_component_number)))
        vector_length_val <- as.numeric(levels(as.factor(df$vector_length)))
        threads_number_val <- as.numeric(levels(as.factor(df$threads_number)))
        lws_y_val <- as.numeric(levels(as.factor(df$lws_y)))
        temporary_size_val <- as.numeric(levels(as.factor(df$temporary_size)))
        load_overlap_val <- levels(df$load_overlap)

        form_elem_nb <- time_per_pixel ~ elements_number + I(elements_number^2) + I(elements_number^3)
        form_y_comp <- time_per_pixel ~ y_component_number + I(y_component_number^2) + I(y_component_number^3)
        form_v_len <- time_per_pixel ~ vector_length + I(vector_length^2) + I(vector_length^3)
        form_th_nb <- time_per_pixel ~ threads_number + I(threads_number^2) + I(threads_number^3)
        form_lws_y <- time_per_pixel ~ lws_y + I(lws_y^2) + I(lws_y^3)

        runs = 100   
        fits <- list()
        for(j in 1:runs){
            set <- Dopt.design( 100 , data=df, formula="~ elements_number + I(elements_number^2) + I(elements_number^3) +
                                             y_component_number + I(y_component_number^2) + I(y_component_number^3) +
                                             vector_length + I(vector_length^2) + I(vector_length^3) +
                                             threads_number + I(threads_number^2) + I(threads_number^3) +
                                             lws_y + I(lws_y^2) + I(lws_y^3)", nRepeat= 20 ,randomize= TRUE)
            model_subset_elem_nb <- lm(data=set,formula=form_elem_nb)
            model_subset_y_comp <- lm(data=set,formula=form_y_comp)
            model_subset_v_len <- lm(data=set,formula=form_v_len)
            model_subset_th_nb <- lm(data=set,formula=form_th_nb)
            model_subset_lws_y <- lm(data=set,formula=form_lws_y)
            for(i in 1:200){
                E <- residuals(model_subset_elem_nb)
                model_subset_elem_nb <- lm(data=set,formula=form_elem_nb,weight=h(E))

                E <- residuals(model_subset_y_comp)
                model_subset_y_comp <- lm(data=set,formula=form_y_comp,weight=h(E))

                E <- residuals(model_subset_v_len)
                model_subset_v_len <- lm(data=set,formula=form_v_len,weight=h(E))

                E <- residuals(model_subset_th_nb)
                model_subset_th_nb <- lm(data=set,formula=form_th_nb,weight=h(E))

                E <- residuals(model_subset_lws_y)
                model_subset_lws_y <- lm(data=set,formula=form_lws_y,weight=h(E))

            }
            l <- list()
            l[["elements_number"]] <- model_subset_elem_nb
            l[["y_component_number"]] <- model_subset_y_comp
            l[["vector_length"]] <- model_subset_v_len
            l[["threads_number"]] <- model_subset_th_nb
            l[["lws_y"]] <- model_subset_lws_y
            
            fits[[j]] <- l
        }
        saveRDS(fits, "../data/2016_04_08/pilipili2/18_08_24/Dopt_absurd_fits.rds")
         #+end_src
** 2016-06-10
*** Proba 
   #+begin_src R :results output :session :exports both
     p=0.01
     x=1:100
     1-(1-p)**x
     plot(1-(1-p)**x)
     x=1:1000
     plot(1-(1-p)**x)
     p=0.001
     plot(1-(1-p)**x)
     log(0.1)/log(1-p)
   #+end_src

   #+RESULTS:
   #+begin_example
     [1] 0.01000000 0.01990000 0.02970100 0.03940399 0.04900995 0.05851985
     [7] 0.06793465 0.07725531 0.08648275 0.09561792 0.10466175 0.11361513
    [13] 0.12247898 0.13125419 0.13994165 0.14854223 0.15705681 0.16548624
    [19] 0.17383138 0.18209306 0.19027213 0.19836941 0.20638572 0.21432186
    [25] 0.22217864 0.22995685 0.23765729 0.24528071 0.25282791 0.26029963
    [31] 0.26769663 0.27501966 0.28226947 0.28944677 0.29655231 0.30358678
    [37] 0.31055091 0.31744540 0.32427095 0.33102824 0.33771796 0.34434078
    [43] 0.35089737 0.35738840 0.36381451 0.37017637 0.37647461 0.38270986
    [49] 0.38888276 0.39499393 0.40104399 0.40703355 0.41296322 0.41883359
    [55] 0.42464525 0.43039880 0.43609481 0.44173386 0.44731652 0.45284336
    [61] 0.45831492 0.46373177 0.46909446 0.47440351 0.47965948 0.48486288
    [67] 0.49001425 0.49511411 0.50016297 0.50516134 0.51010973 0.51500863
    [73] 0.51985854 0.52465996 0.52941336 0.53411922 0.53877803 0.54339025
    [79] 0.54795635 0.55247679 0.55695202 0.56138250 0.56576867 0.57011099
    [85] 0.57440988 0.57866578 0.58287912 0.58705033 0.59117983 0.59526803
    [91] 0.59931535 0.60332219 0.60728897 0.61121608 0.61510392 0.61895288
    [97] 0.62276335 0.62653572 0.63027036 0.63396766
   [1] 2301.434
#+end_example

*** DONE Refining the lm strategy
**** Summary
     In this strategy we take into the information give by working set
     of point in order to find relevant parameters and correct
     models. This solution is more efficient by using blindly models
     that are suited to the entire search space.
**** Testing
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

     #+begin_src R :results output :session :exports both
      objective_predict <- function(fit,x){
           names <- colnames(x)
           s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
           eval(parse(text=s))
           as.numeric(predict(fit, values, interval="none"))
       }

       objective_predict_one <- function(fit,x,colname){
           s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
           eval(parse(text=s))
           as.numeric(predict(fit, values, interval="none"))
       }

       find_best <- function(model,subset,full_set,colnames){
           fit <- lm(data=subset,formula=formula(model))
           if( length(colnames) > 1) {
               return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
           }
           else{
               return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
           }
       }

     #+end_src

     #+RESULTS:

    #+begin_src R :results output :session :exports both
      df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
      working_set <- df[sample(1:nrow(df), size = 50, replace = FALSE),]
    #+end_src

    #+RESULTS:

      The model vector_length + lws_y seems the more correct even if the
      R-squared is low we have the std err is not to big:
    #+begin_src R :results output :session :exports both
      plot(working_set[,!names(working_set) %in% c("vector_recompute")])

      model <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y + load_overlap + temporary_size
      fit <- lm(model,working_set)
      summary(fit)

      model <- time_per_pixel ~ elements_number + vector_length + lws_y 
      fit <- lm(model,working_set)
      summary(fit)

      model <- time_per_pixel ~ vector_length + lws_y
      fit <- lm(model,working_set)
      summary(fit)

      model <- time_per_pixel ~ (vector_length + lws_y)^2
      fit <- lm(model,working_set)
      summary(fit)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -3.962e-09 -1.145e-09 -1.693e-10  9.226e-10  5.329e-09 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)        -8.575e-10  1.473e-09  -0.582   0.5636    
    elements_number    -7.702e-11  8.906e-11  -0.865   0.3921    
    y_component_number  4.420e-10  3.025e-10   1.461   0.1514    
    vector_length       3.467e-10  6.054e-11   5.726 9.83e-07 ***
    threads_number     -2.626e-12  1.145e-12  -2.294   0.0269 *  
    lws_y               9.843e-12  2.044e-12   4.815 1.94e-05 ***
    load_overlaptrue   -1.232e-09  5.783e-10  -2.130   0.0391 *  
    temporary_size      3.222e-10  3.140e-10   1.026   0.3107    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 1.969e-09 on 42 degrees of freedom
    Multiple R-squared:  0.5918,	Adjusted R-squared:  0.5238 
    F-statistic:   8.7 on 7 and 42 DF,  p-value: 1.454e-06

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -4.019e-09 -1.054e-09 -3.040e-11  6.739e-10  7.885e-09 

    Coefficients:
                      Estimate Std. Error t value Pr(>|t|)    
    (Intercept)     -6.746e-10  6.798e-10  -0.992 0.326260    
    elements_number  4.604e-11  5.436e-11   0.847 0.401406    
    vector_length    3.267e-10  6.308e-11   5.179 4.81e-06 ***
    lws_y            6.856e-12  1.895e-12   3.617 0.000737 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.183e-09 on 46 degrees of freedom
    Multiple R-squared:  0.4502,	Adjusted R-squared:  0.4144 
    F-statistic: 12.56 on 3 and 46 DF,  p-value: 3.996e-06

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -4.077e-09 -1.198e-09 -8.720e-11  5.466e-10  7.827e-09 

    Coefficients:
                    Estimate Std. Error t value Pr(>|t|)    
    (Intercept)   -2.805e-10  4.942e-10  -0.568 0.572979    
    vector_length  3.172e-10  6.189e-11   5.126  5.5e-06 ***
    lws_y          6.862e-12  1.890e-12   3.631 0.000695 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.177e-09 on 47 degrees of freedom
    Multiple R-squared:  0.4417,	Adjusted R-squared:  0.4179 
    F-statistic: 18.59 on 2 and 47 DF,  p-value: 1.127e-06

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -3.418e-09 -7.088e-10 -2.899e-10  2.332e-10  8.381e-09 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)         2.970e-10  4.323e-10   0.687   0.4955    
    vector_length       1.460e-10  6.382e-11   2.288   0.0268 *  
    lws_y               1.824e-12  1.925e-12   0.947   0.3484    
    vector_length:lws_y 1.885e-12  4.104e-13   4.593 3.39e-05 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 1.822e-09 on 46 degrees of freedom
    Multiple R-squared:  0.6172,	Adjusted R-squared:  0.5923 
    F-statistic: 24.73 on 3 and 46 DF,  p-value: 1.118e-09
#+end_example

    #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ vector_length + lws_y 
      best1 <- find_best(model, working_set, df, c("vector_length", "lws_y")) 
      best1
    #+end_src

    #+RESULTS:
    :   vector_length lws_y
    : 2             1     1

    Fixing parameters
    #+begin_src R :results output :session :exports both
      subset1 <- working_set[working_set$vector_length == best1$vector_length & 
                            working_set$lws_y == best1$lws_y,]

      pruned1 <- df[df$vector_length == best1$vector_length & 
                                             df$lws_y == best1$lws_y,]

      nrow(subset1)
      nrow(pruned1)
    #+end_src

    #+RESULTS:
    : [1] 1
    : [1] 576

    Best potential solution:
    #+begin_src R :results output :session :exports both
      min(pruned1$time_per_pixel) / min(df$time_per_pixel)
    #+end_src

    #+RESULTS:
    : [1] 1.012177

    Adding points:
    #+begin_src R :results output :session :exports both
      added1 <- pruned1[sample(1:nrow(pruned1), size = 20, replace = FALSE),]
      subset1 <- subset1[, !names(working_set) %in% c("run") ] 
      subset1 <- rbind(subset1, added1)     
    #+end_src

    #+RESULTS:

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      plot(subset1[,!names(subset1) %in% c("vector_recompute","lws_y","vector_length")])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-4627fyl/figure4627a-E.png]]

    
    It is difficult to make conclusion y_component is not significant enough:
    #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ elements_number + y_component_number + threads_number + load_overlap + temporary_size
      fit <- lm(model,subset1)
      summary(fit)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = model, data = subset1)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -8.127e-11 -2.609e-11 -2.660e-13  1.671e-11  1.107e-10 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)         3.622e-10  4.671e-11   7.753 1.26e-06 ***
    elements_number     2.297e-13  3.211e-12   0.072   0.9439    
    y_component_number -2.981e-11  1.384e-11  -2.155   0.0479 *  
    threads_number     -2.345e-14  4.944e-14  -0.474   0.6422    
    load_overlaptrue    1.435e-11  2.450e-11   0.586   0.5667    
    temporary_size     -2.280e-11  1.201e-11  -1.899   0.0770 .  
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 5.06e-11 on 15 degrees of freedom
    Multiple R-squared:  0.5413,	Adjusted R-squared:  0.3884 
    F-statistic:  3.54 on 5 and 15 DF,  p-value: 0.02592
#+end_example

    #+begin_src R :results output :session :exports both
      added1_2 <- pruned1[sample(1:nrow(pruned1), size = 20, replace = FALSE),]
      subset1_2 <- subset1[, !names(working_set) %in% c("run") ] 
      subset1_2 <- rbind(subset1_2, added1_2)     
    #+end_src

    #+RESULTS:

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      plot(subset2[,!names(subset2) %in% c("vector_recompute","lws_y","vector_length")])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-4627fyl/figure46271Mk.png]]

    #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ elements_number + y_component_number + threads_number + load_overlap + temporary_size
      fit <- lm(model,subset1_2)
      summary(fit)

      model <- time_per_pixel ~ y_component_number 
      fit <- lm(model,subset1_2)
      summary(fit)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = model, data = subset1_2)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -6.818e-11 -3.673e-11  5.940e-13  2.742e-11  1.314e-10 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)         3.462e-10  3.353e-11  10.324 3.66e-12 ***
    elements_number     1.503e-12  1.925e-12   0.781    0.440    
    y_component_number -3.841e-11  7.459e-12  -5.150 1.02e-05 ***
    threads_number      3.734e-14  2.657e-14   1.405    0.169    
    load_overlaptrue   -4.620e-12  1.580e-11  -0.292    0.772    
    temporary_size     -1.358e-11  8.300e-12  -1.636    0.111    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 4.861e-11 on 35 degrees of freedom
    Multiple R-squared:  0.5789,	Adjusted R-squared:  0.5188 
    F-statistic: 9.625 on 5 and 35 DF,  p-value: 7.605e-06

    Call:
    lm(formula = model, data = subset1_2)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -8.046e-11 -4.017e-11 -4.824e-12  4.059e-11  1.373e-10 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)         3.045e-10  1.614e-11  18.869  < 2e-16 ***
    y_component_number -3.027e-11  4.721e-12  -6.412 1.39e-07 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 4.951e-11 on 39 degrees of freedom
    Multiple R-squared:  0.5132,	Adjusted R-squared:  0.5007 
    F-statistic: 41.12 on 1 and 39 DF,  p-value: 1.386e-07
#+end_example

    #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ y_component_number
      best2 <- data.frame()
      best2 <- find_best(model, subset1_2, pruned1, c("y_component_number")) 
      best2
    #+end_src

    #+RESULTS:
    : [1] 6

    Fixing parameters:
    #+begin_src R :results output :session :exports both
      subset2 <- subset1_2[subset1_2$y_component_number == best2,]

      pruned2 <- pruned1[pruned1$y_component_number == best2,]

      nrow(subset2)
      nrow(pruned2)
    #+end_src

    #+RESULTS:
    : [1] 6
    : [1] 96

    Best potential solution:
    #+begin_src R :results output :session :exports both
    min(pruned2$time_per_pixel) / min(df$time_per_pixel)
    #+end_src

    #+RESULTS:
    : [1] 1.012177

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      plot(subset2[,!names(subset2) %in% c("vector_recompute","lws_y","vector_length","y_component_number")])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-4627fyl/figure4627cr2.png]]

    Adding more points 
    #+begin_src R :results output :session :exports both
      added2 <- pruned2[sample(1:nrow(pruned2), size = 20, replace = FALSE),]
      subset2 <- rbind(subset2, added2)     
    #+end_src

    #+RESULTS:

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      plot(subset2[,!names(subset2) %in% c("vector_recompute","lws_y","vector_length","y_component_number")])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-4627fyl/figure4627Pok.png]]

    #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ elements_number + threads_number + load_overlap + temporary_size
      fit <- lm(model,subset2)
      summary(fit)

      model <- time_per_pixel ~ elements_number + threads_number
      fit <- lm(model,subset2)
      summary(fit)

      model <- time_per_pixel ~ (elements_number + threads_number)^2
      fit <- lm(model,subset2)
      summary(fit)

      model <- time_per_pixel ~ elements_number 
      fit <- lm(model,subset2)
      summary(fit)

    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = model, data = subset2)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -2.797e-11 -1.265e-11 -2.522e-12  5.248e-12  5.605e-11 

    Coefficients:
                      Estimate Std. Error t value Pr(>|t|)    
    (Intercept)      9.456e-11  1.587e-11   5.959 6.49e-06 ***
    elements_number  2.004e-12  5.634e-13   3.558  0.00186 ** 
    threads_number   2.394e-14  1.145e-14   2.090  0.04894 *  
    load_overlaptrue 5.510e-12  8.006e-12   0.688  0.49883    
    temporary_size   6.222e-12  4.050e-12   1.536  0.13944    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 1.958e-11 on 21 degrees of freedom
    Multiple R-squared:  0.4659,	Adjusted R-squared:  0.3641 
    F-statistic: 4.579 on 4 and 21 DF,  p-value: 0.008136

    Call:
    lm(formula = model, data = subset2)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -2.111e-11 -1.481e-11 -1.973e-12  8.355e-12  6.595e-11 

    Coefficients:
                     Estimate Std. Error t value Pr(>|t|)    
    (Intercept)     1.157e-10  1.008e-11  11.470 5.41e-11 ***
    elements_number 1.913e-12  5.715e-13   3.348  0.00279 ** 
    threads_number  2.211e-14  1.135e-14   1.948  0.06377 .  
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 1.996e-11 on 23 degrees of freedom
    Multiple R-squared:  0.3923,	Adjusted R-squared:  0.3394 
    F-statistic: 7.422 on 2 and 23 DF,  p-value: 0.003257

    Call:
    lm(formula = model, data = subset2)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -1.800e-11 -1.453e-11 -3.111e-12  9.880e-12  5.640e-11 

    Coefficients:
                                     Estimate Std. Error t value Pr(>|t|)    
    (Intercept)                     1.336e-10  1.266e-11  10.554 4.49e-10 ***
    elements_number                 6.751e-13  7.920e-13   0.852   0.4032    
    threads_number                 -2.729e-14  2.567e-14  -1.063   0.2992    
    elements_number:threads_number  3.443e-15  1.630e-15   2.113   0.0462 *  
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 1.861e-11 on 22 degrees of freedom
    Multiple R-squared:  0.4948,	Adjusted R-squared:  0.4259 
    F-statistic: 7.181 on 3 and 22 DF,  p-value: 0.001551

    Call:
    lm(formula = model, data = subset2)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -2.681e-11 -1.610e-11 -5.935e-12  8.904e-12  5.768e-11 

    Coefficients:
                     Estimate Std. Error t value Pr(>|t|)    
    (Intercept)     1.247e-10  9.453e-12  13.195 1.71e-12 ***
    elements_number 1.900e-12  6.038e-13   3.146  0.00437 ** 
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.109e-11 on 24 degrees of freedom
    Multiple R-squared:  0.292,	Adjusted R-squared:  0.2625 
    F-statistic: 9.899 on 1 and 24 DF,  p-value: 0.004372
#+end_example

    #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ elements_number 
      best3 <- data.frame()
      best3 <- find_best(model, subset2, pruned2, c("elements_number")) 
      best3    
    #+end_src

    #+RESULTS:
    : [1] 6

    #+begin_src R :results output :session :exports both
      subset3 <- subset2[subset2$elements_number == best3,]

      pruned3 <- pruned2[pruned2$elements_number == best3,]

      nrow(subset3)
      nrow(pruned3)
      min(pruned3$time_per_pixel) / min(df$time_per_pixel)
    #+end_src

    #+RESULTS:
    : [1] 8
    : [1] 24
    : [1] 1.012177

    #+begin_src R :results output :session :exports both
      added3 <- pruned3[sample(1:nrow(pruned3), size = 5, replace = FALSE),]
      subset3 <- rbind(subset3, added3)     
    #+end_src

    #+RESULTS:

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      plot(subset3[,!names(subset3) %in% c("vector_recompute","lws_y","vector_length","y_component_number","elements_number")])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-4627fyl/figure4627cyq.png]]


    #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ threads_number + I(1/threads_number) + load_overlap + temporary_size
      fit <- lm(model,subset3)
      summary(fit)

      model <- time_per_pixel ~ threads_number + I(1/threads_number)
      fit <- lm(model,subset3)
      summary(fit)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = model, data = subset3)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -1.453e-11 -1.771e-12  1.370e-12  4.943e-12  8.559e-12 

    Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
    (Intercept)          8.715e-11  7.925e-12  10.997 4.16e-06 ***
    threads_number       3.380e-14  9.637e-15   3.507    0.008 ** 
    I(1/threads_number)  2.995e-09  2.981e-10  10.049 8.19e-06 ***
    load_overlaptrue    -1.915e-12  4.928e-12  -0.388    0.708    
    temporary_size       2.877e-12  2.737e-12   1.051    0.324    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 8.162e-12 on 8 degrees of freedom
    Multiple R-squared:  0.9413,	Adjusted R-squared:  0.9119 
    F-statistic: 32.06 on 4 and 8 DF,  p-value: 5.665e-05

    Call:
    lm(formula = model, data = subset3)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -1.505e-11 -2.799e-12  2.204e-12  4.600e-12  7.258e-12 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)         9.242e-11  5.708e-12   16.19 1.67e-08 ***
    threads_number      3.620e-14  8.829e-15    4.10  0.00214 ** 
    I(1/threads_number) 3.050e-09  2.786e-10   10.95 6.89e-07 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 7.788e-12 on 10 degrees of freedom
    Multiple R-squared:  0.9332,	Adjusted R-squared:  0.9198 
    F-statistic: 69.82 on 2 and 10 DF,  p-value: 1.333e-06
    #+end_example

    #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ threads_number + I(1/threads_number)
      best4 <- data.frame()
      best4 <- find_best(model, subset3, pruned3, c("threads_number")) 
      best4   

      subset4 <- subset3[subset3$threads_number == best4,]

      pruned4 <- pruned3[pruned3$threads_number == best4,]

      nrow(subset4)
      nrow(pruned4)
      min(pruned4$time_per_pixel) / min(df$time_per_pixel) 
    #+end_src

    #+RESULTS:
    : [1] 256
    : [1] 3
    : [1] 4
    : [1] 1.012177

    Add points
    #+begin_src R :results output :session :exports both
      added4 <- pruned4[sample(1:nrow(pruned4), size = nrow(pruned4), replace = FALSE),]
      subset4 <- rbind(subset4, added4)
      subset4[subset4$time_per_pixel == min(subset4$time_per_pixel),]
      min(subset4$time_per_pixel) / min(df$time_per_pixel)     
    #+end_src

    #+RESULTS:
    :        elements_number y_component_number vector_length temporary_size
    : 17258                6                  6             1              2
    :        vector_recompute load_overlap threads_number lws_y time_per_pixel
    : 17258              true         true            256     1     1.1792e-10
    : [1] 1.012177
** 2016-06-11
*** Local search with our starting point                           :Analysis:
    It does not make any progress because it is a local optimum:
    #+begin_src R :results output :session :exports none :tangle ../scripts/gr_bench.R
      kernel_size <- function(point) {
          vector_number <- ceiling((point$elements_number / point$y_component_number) / point$vector_length)
          
          tempload <- (1 - point$load_overlap) * (vector_number * point$vector_length) / point$vector_length * point$vector_length
          temp <-  point$load_overlap * 3 * vector_number * (point$y_component_number+2) * point$vector_length
          res <- vector_number * point$y_component_number * point$vector_length
          tempc <- 3 * vector_number * (point$y_component_number + 2) * point$temporary_size * point$vector_length
          out_vec = (1 - point$load_overlap) * tempc
          resc <- vector_number * point$y_component_number * point$temporary_size * point$vector_length
          
          tot <- (tempload + temp + res + tempc + out_vec + resc) * point$threads_number
      }

      check_constraint <- function(point){
          res <- if(point$load_overlap %in% 0:1 &
                    point$lws_y <= point$threads_number &
                    point$elements_number %% point$y_component_number == 0 &
                    point$elements_number %/% point$y_component_number <= 4 &
                    kernel_size(point) < kernel_size(data.frame(elements_number=6, y_component_number=6, vector_length=8, temporary_size=2, load_overlap=0, threads_number=1024))
                    ) T else F
      }

      point_equal <- function(p1,p2){
          res <- if(p1$elements_number == p2$elements_number &
                    p1$y_component_number == p2$y_component_number &
                    p1$vector_length == p2$vector_length &
                    p1$temporary_size == p2$temporary_size &
                    p1$load_overlap == p2$load_overlap &
                    p1$threads_number == p2$threads_number) T else F
      }

      gradient_descent <- function(point, limit=100){
          elements_number    <- c(1,0,0,0,0,0,0,-1,0,0,0,0,0,0)
          y_component_number <- c(0,1,0,0,0,0,0,0,-1,0,0,0,0,0)
          vector_length      <- c(0,0,1,0,0,0,0,0,0,-1,0,0,0,0)
          temporary_size     <- c(0,0,0,1,0,0,0,0,0,0,-1,0,0,0)
          load_overlap       <- c(0,0,0,0,1,0,0,0,0,0,0,-1,0,0)
          threads_number     <- c(0,0,0,0,0,1,0,0,0,0,0,0,-1,0)
          lws_y              <- c(0,0,0,0,0,0,1,0,0,0,0,0,0,-1)
          
          factors <- list(elements_number = as.numeric(levels(as.factor(df$elements_number))), 
                          y_component_number = as.numeric(levels(as.factor(df$y_component_number))), 
                          vector_length = as.numeric(levels(as.factor(df$vector_length))), 
                          temporary_size = as.numeric(levels(as.factor(df$temporary_size))), 
                          threads_number= as.numeric(levels(as.factor(df$threads_number))), 
                          lws_y= as.numeric(levels(as.factor(df$lws_y)))) 
          
          directions <- data.frame(elements_number, y_component_number, vector_length, temporary_size, load_overlap, threads_number, lws_y)
          count <- 0
          
          repeat{
              old_point <- point
              candidates <- data.frame()
              
              i <- 0
              while( i <= nrow(directions) & count < limit){
                  i <- i + 1
                  idx_elements_number = match(point$elements_number, factors$elements_number) + directions[i,]$elements_number
                  idx_y_component_number = match(point$y_component_number, factors$y_component_number) + directions[i,]$y_component_number
                  idx_vector_length = match(point$vector_length, factors$vector_length) + directions[i,]$vector_length
                  idx_temporary_size = match(point$temporary_size, factors$temporary_size) + directions[i,]$temporary_size
                  idx_threads_number = match(point$threads_number, factors$threads_number) + directions[i,]$threads_number
                  idx_lws_y = match(point$lws_y, factors$lws_y) + directions[i,]$lws_y
                  
                  if(!(idx_elements_number %in% 1:length(levels(as.factor(df$elements_number))))) next
                  if(!(idx_y_component_number %in% 1:length(levels(as.factor(df$y_component_number))))) next
                  if(!(idx_vector_length %in% 1:length(levels(as.factor(df$vector_length))))) next
                  if(!(idx_temporary_size %in% 1:length(levels(as.factor(df$temporary_size))))) next
                  if(!(idx_threads_number %in% 1:length(levels(as.factor(df$threads_number))))) next
                  if(!(idx_lws_y %in% 1:length(levels(as.factor(df$lws_y))))) next
                  
                  p <- data.frame(elements_number = factors$elements_number[idx_elements_number],
                                  y_component_number = factors$y_component_number[idx_y_component_number],
                                  vector_length = factors$vector_length[idx_vector_length],
                                  temporary_size = factors$temporary_size[idx_temporary_size],
                                  load_overlap = if(point$load_overlap == "true") 1 + directions[i,]$load_overlap else 0 + directions[i,]$load_overlap,
                                  threads_number = factors$threads_number[idx_threads_number],
                                  lws_y = factors$lws_y[idx_lws_y]
                                  )
                  
                  
                  
                  
                  
                  if(check_constraint(p) == T){
                      p <- df[df$elements_number == p$elements_number & 
                              df$y_component_number == p$y_component_number & 
                              df$vector_length == p$vector_length &
                              df$temporary_size == p$temporary_size &
                              df$load_overlap == (if (p$load_overlap == 0) "false" else "true") &
                                              #df$load_overlap == "true" &
                              df$threads_number == p$threads_number &
                              df$lws_y == p$lws_y,]
                      candidates <- rbind(p, candidates)
                      count <- count + 1
                  }
              }
              
              if(nrow(candidates) > 0){
                  if(candidates[candidates$time_per_pixel == min(candidates$time_per_pixel),]$time_per_pixel < point$time_per_pixel){
                      point <- candidates[candidates$time_per_pixel == min(candidates$time_per_pixel),]
                  }
              }
              
              if(count >= limit | point_equal(old_point,point) == T){
                  break
              }
          }
          
          result <- list()
                                              # point <- cbind(point,point_number=count)
          result[[1]] <- point
          result[[2]] <- limit - count
          result
      }

      row_to_coordinate <- function(row){
          drops <- c("time_per_pixel", "vector_recompute")
          row[, !(names(row) %in% drops)]
      }

      df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
      df_greedy <- data.frame()
      df_greedy_start <- data.frame()

      p <-  df[df$elements_number == 6 & df$y_component_number == 6 & df$vector_length == 1 & df$threads_number == 256 & df$lws_y == 1 & df$temporary_size == 2 & df$load_overlap == "true", ]

      for(k in 1:10){
          budget <- 120
          solutions <- data.frame()
          
          budget <- budget - 1
          df_greedy_start <- rbind(df_greedy_start,p)
          res <- gradient_descent(p,budget)
          solutions <- rbind(solutions,res[[1]])
          
          df_greedy <- rbind(df_greedy, solutions[solutions$time_per_pixel == min(solutions$time_per_pixel),])
      }
      p
      df_greedy <- cbind(df_greedy, method=rep("GR",nrow(df_greedy))) 
      df_greedy
      # write.csv(df_greedy, "../data/2016_04_08/pilipili2/18_08_24/greedy_search_1000.csv", row.names=FALSE)
      # write.csv(df_greedy_start, "../data/2016_04_08/pilipili2/18_08_24/greedy_search_start_1000.csv", row.names=FALSE)
       #+end_src

    #+RESULTS:
    #+begin_example
          elements_number y_component_number vector_length temporary_size
    17258               6                  6             1              2
          vector_recompute load_overlap threads_number lws_y time_per_pixel
    17258             true         true            256     1     1.1792e-10
           elements_number y_component_number vector_length temporary_size
    17258                6                  6             1              2
    172581               6                  6             1              2
    172582               6                  6             1              2
    172583               6                  6             1              2
    172584               6                  6             1              2
    172585               6                  6             1              2
    172586               6                  6             1              2
    172587               6                  6             1              2
    172588               6                  6             1              2
    172589               6                  6             1              2
           vector_recompute load_overlap threads_number lws_y time_per_pixel method
    17258              true         true            256     1     1.1792e-10     GR
    172581             true         true            256     1     1.1792e-10     GR
    172582             true         true            256     1     1.1792e-10     GR
    172583             true         true            256     1     1.1792e-10     GR
    172584             true         true            256     1     1.1792e-10     GR
    172585             true         true            256     1     1.1792e-10     GR
    172586             true         true            256     1     1.1792e-10     GR
    172587             true         true            256     1     1.1792e-10     GR
    172588             true         true            256     1     1.1792e-10     GR
    172589             true         true            256     1     1.1792e-10     GR
#+end_example

*** LM worst case                                                  :Analysis:
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

    #+begin_src R :results output :session :exports both
      df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
      logs <- readRDS("../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_new_strat_1000.rds")
      df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_new_strat_1000.csv", strip.white=T, header=T)
      df_lm_random[df_lm_random$time_per_pixel == max(df_lm_random$time_per_pixel),][1,]
      df_lm_random[df_lm_random$time_per_pixel == max(df_lm_random$time_per_pixel),][1,]$time_per_pixel / min(df$time_per_pixel)
      logs[[544]]$slowdown
    #+end_src

    #+RESULTS:
    :     elements_number y_component_number vector_length temporary_size
    : 544              24                  6            16              2
    :     vector_recompute load_overlap threads_number lws_y time_per_pixel
    : 544             true        false             64     1   4.393478e-10
    :     point_number method
    : 544          119     LM
    : [1] 3.771183
    : [1] 3.771183

    One of the worst case is at the run 544
    #+begin_src R :results output :session :exports both
      working_set <- logs[[544]]$starting_set
      summary(working_set)
    #+end_src

    #+RESULTS:
    #+begin_example
     elements_number y_component_number vector_length   temporary_size
     Min.   : 1.00   Min.   :1.00       Min.   : 1.00   Min.   :2.00  
     1st Qu.: 2.25   1st Qu.:2.00       1st Qu.: 2.00   1st Qu.:2.00  
     Median : 6.00   Median :3.00       Median : 4.00   Median :2.00  
     Mean   : 7.90   Mean   :3.12       Mean   : 7.14   Mean   :2.84  
     3rd Qu.:12.00   3rd Qu.:4.75       3rd Qu.:14.00   3rd Qu.:4.00  
     Max.   :24.00   Max.   :6.00       Max.   :16.00   Max.   :4.00  
     vector_recompute load_overlap threads_number       lws_y        
     true:50          false:25     Min.   :  32.0   Min.   :   1.00  
                      true :25     1st Qu.:  64.0   1st Qu.:   2.00  
                                   Median : 192.0   Median :   8.00  
                                   Mean   : 307.2   Mean   :  78.94  
                                   3rd Qu.: 512.0   3rd Qu.:  64.00  
                                   Max.   :1024.0   Max.   :1024.00  
     time_per_pixel     
     Min.   :1.272e-10  
     1st Qu.:4.326e-10  
     Median :7.162e-10  
     Mean   :1.868e-09  
     3rd Qu.:1.609e-09  
     Max.   :1.079e-08
    #+end_example

    
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
     plot(working_set[,!names(working_set) %in% c("vector_recompute")])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3912W-5/figure3912VqF.png]]

    It fails to set the correct value for vector_length because was not
    detected as significant and has a to big standard error:
    #+begin_src R :results output :session :exports both
    model <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y + load_overlap + temporary_size
    fit <- lm(model,working_set)
    summary(fit)

    model <- time_per_pixel ~ vector_length  + lws_y 
    fit <- lm(model,working_set)
    summary(fit)

    model <- time_per_pixel ~ vector_length
    fit <- lm(model,working_set)
    summary(fit)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -5.854e-09 -1.467e-09 -3.838e-10  9.082e-10  1.101e-08 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)         2.449e-09  1.615e-09   1.516  0.13704    
    elements_number    -2.064e-10  9.844e-11  -2.097  0.04207 *  
    y_component_number  4.549e-10  3.544e-10   1.284  0.20631    
    vector_length       1.358e-10  8.473e-11   1.602  0.11659    
    threads_number     -3.475e-12  1.207e-12  -2.879  0.00626 ** 
    lws_y               1.947e-11  4.420e-12   4.404 7.18e-05 ***
    load_overlaptrue   -1.295e-10  8.729e-10  -0.148  0.88276    
    temporary_size     -2.260e-10  4.246e-10  -0.532  0.59745    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.908e-09 on 42 degrees of freedom
    Multiple R-squared:  0.4031,	Adjusted R-squared:  0.3036 
    F-statistic: 4.051 on 7 and 42 DF,  p-value: 0.001787

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -6.610e-09 -1.287e-09 -6.651e-10  9.950e-11  1.290e-08 

    Coefficients:
                   Estimate Std. Error t value Pr(>|t|)   
    (Intercept)   5.685e-10  8.229e-10   0.691  0.49310   
    vector_length 1.438e-10  8.941e-11   1.608  0.11453   
    lws_y         1.507e-11  4.596e-12   3.278  0.00197 **
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 3.181e-09 on 47 degrees of freedom
    Multiple R-squared:  0.2005,	Adjusted R-squared:  0.1665 
    F-statistic: 5.894 on 2 and 47 DF,  p-value: 0.005202

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -2.750e-09 -1.739e-09 -1.275e-09  2.824e-10  1.567e-08 

    Coefficients:
                   Estimate Std. Error t value Pr(>|t|)  
    (Intercept)   1.865e-09  7.915e-10   2.356   0.0226 *
    vector_length 8.977e-11  9.639e-11   0.931   0.3563  
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 3.489e-09 on 48 degrees of freedom
    Multiple R-squared:  0.01775,	Adjusted R-squared:  -0.002714 
    F-statistic: 0.8674 on 1 and 48 DF,  p-value: 0.3563
#+end_example

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      library(ggplot2)
      ggplot(working_set[working_set$vector_length > 3,]) +
          aes(x=vector_length,y=time_per_pixel) +
          geom_point() +
          geom_smooth(method="lm", formula=y~x)
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3912W-5/figure3912kEC.png]]

    We can see lot of good predicted value that are bad indeed:
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 600 :session
      plot(fitted(fit), fitted(fit) + residuals(fit), xlim=c(0,1e-8))
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3912W-5/figure39128PM.png]]

*** LM best case                                                   :Analysis:
**** The very good case
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

    #+begin_src R :results output :session :exports both
      df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
      logs <- readRDS("../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_new_strat_1000.rds")
      df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_new_strat_1000.csv", strip.white=T, header=T)
      df_lm_random[df_lm_random$time_per_pixel == min(df_lm_random$time_per_pixel),][1,]
      df_lm_random[df_lm_random$time_per_pixel == min(df_lm_random$time_per_pixel),][1,]$time_per_pixel / min(df$time_per_pixel)
      logs[[2]]$slowdown
    #+end_src    

    #+RESULTS:
    :   elements_number y_component_number vector_length temporary_size
    : 1               6                  6             1              2
    :   vector_recompute load_overlap threads_number lws_y time_per_pixel
    : 1             true         true            256     1     1.1792e-10
    :   point_number method
    : 1          119     LM
    : [1] 1.012177
    : [1] 1.012177

    One of the worst case is at the run 1
    #+begin_src R :results output :session :exports both
      working_set <- logs[[2]]$starting_set
      summary(working_set)
    #+end_src

    #+RESULTS:
    #+begin_example
     elements_number y_component_number vector_length   temporary_size
     Min.   : 1.00   Min.   :1.00       Min.   : 1.00   Min.   :2.00  
     1st Qu.: 6.00   1st Qu.:2.25       1st Qu.: 2.00   1st Qu.:2.00  
     Median : 9.50   Median :4.00       Median : 4.00   Median :2.00  
     Mean   :10.44   Mean   :3.76       Mean   : 5.18   Mean   :2.84  
     3rd Qu.:15.00   3rd Qu.:5.00       3rd Qu.: 8.00   3rd Qu.:4.00  
     Max.   :24.00   Max.   :6.00       Max.   :16.00   Max.   :4.00  
     vector_recompute load_overlap threads_number       lws_y       
     true:50          false:25     Min.   :  32.0   Min.   :  1.00  
                      true :25     1st Qu.: 128.0   1st Qu.:  4.00  
                                   Median : 256.0   Median :  8.00  
                                   Mean   : 331.5   Mean   : 30.18  
                                   3rd Qu.: 512.0   3rd Qu.: 32.00  
                                   Max.   :1024.0   Max.   :256.00  
     time_per_pixel     
     Min.   :1.506e-10  
     1st Qu.:2.959e-10  
     Median :4.866e-10  
     Mean   :1.050e-09  
     3rd Qu.:1.283e-09  
     Max.   :8.016e-09
#+end_example

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      plot(working_set[,!names(working_set) %in% c("vector_recompute")])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3912W-5/figure3912WkY.png]]

    #+begin_src R :results output :session :exports both
    model <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y + load_overlap + temporary_size
    fit <- lm(model,working_set)
    summary(fit)

    model <- time_per_pixel ~ vector_length  + lws_y 
    fit <- lm(model,working_set)
    summary(fit)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -1.645e-09 -5.478e-10  2.865e-11  3.668e-10  2.740e-09 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)         1.639e-10  5.474e-10   0.299 0.766055    
    elements_number    -5.686e-11  3.474e-11  -1.637 0.109131    
    y_component_number  1.140e-10  1.190e-10   0.958 0.343666    
    vector_length       1.155e-10  2.969e-11   3.892 0.000349 ***
    threads_number     -1.142e-12  4.340e-13  -2.631 0.011863 *  
    lws_y               2.064e-11  2.777e-12   7.434  3.5e-09 ***
    load_overlaptrue   -4.200e-10  2.744e-10  -1.531 0.133360    
    temporary_size      1.474e-10  1.409e-10   1.046 0.301436    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 8.996e-10 on 42 degrees of freedom
    Multiple R-squared:  0.6713,	Adjusted R-squared:  0.6166 
    F-statistic: 12.26 on 7 and 42 DF,  p-value: 2.059e-08

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -1.537e-09 -5.136e-10 -4.230e-11  1.875e-10  3.356e-09 

    Coefficients:
                    Estimate Std. Error t value Pr(>|t|)    
    (Intercept)   -4.712e-12  2.211e-10  -0.021  0.98308    
    vector_length  8.794e-11  3.025e-11   2.907  0.00555 ** 
    lws_y          1.987e-11  2.882e-12   6.894 1.18e-08 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 9.821e-10 on 47 degrees of freedom
    Multiple R-squared:  0.5617,	Adjusted R-squared:  0.5431 
    F-statistic: 30.12 on 2 and 47 DF,  p-value: 3.812e-09
   #+end_example

    Here we have a not that bad correlation:
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 600 :session
      plot(fitted(fit), fitted(fit) + residuals(fit), xlim=c(0,1e-8))
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3912W-5/figure3912jue.png]]

**** The lucky case
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

    #+begin_src R :results output :session :exports both
      df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
      logs <- readRDS("../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_new_strat_1000.rds")
      df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_new_strat_1000.csv", strip.white=T, header=T)
      df_lm_random[df_lm_random$time_per_pixel == min(df_lm_random$time_per_pixel),][1,]
      df_lm_random[df_lm_random$time_per_pixel == min(df_lm_random$time_per_pixel),][1,]$time_per_pixel / min(df$time_per_pixel)
      logs[[1]]$slowdown
    #+end_src    

    #+RESULTS:
    :   elements_number y_component_number vector_length temporary_size
    : 1               6                  6             1              2
    :   vector_recompute load_overlap threads_number lws_y time_per_pixel
    : 1             true         true            256     1     1.1792e-10
    :   point_number method
    : 1          119     LM
    : [1] 1.012177
    : [1] 1.012177

    One of the worst case is at the run 1
    #+begin_src R :results output :session :exports both
      working_set <- logs[[1]]$starting_set
      summary(working_set)
    #+end_src

    #+RESULTS:
    #+begin_example
     elements_number y_component_number vector_length   temporary_size
     Min.   : 1.00   Min.   :1.0        Min.   : 1.00   Min.   :2     
     1st Qu.: 3.00   1st Qu.:2.0        1st Qu.: 2.00   1st Qu.:2     
     Median : 6.00   Median :3.0        Median : 4.00   Median :3     
     Mean   : 7.98   Mean   :3.3        Mean   : 6.42   Mean   :3     
     3rd Qu.:10.00   3rd Qu.:5.0        3rd Qu.: 8.00   3rd Qu.:4     
     Max.   :24.00   Max.   :6.0        Max.   :16.00   Max.   :4     
     vector_recompute load_overlap threads_number       lws_y       
     true:50          false:23     Min.   :  32.0   Min.   :  1.00  
                      true :27     1st Qu.:  64.0   1st Qu.:  8.00  
                                   Median : 128.0   Median : 16.00  
                                   Mean   : 348.8   Mean   : 63.04  
                                   3rd Qu.: 512.0   3rd Qu.: 56.00  
                                   Max.   :1024.0   Max.   :512.00  
     time_per_pixel     
     Min.   :1.758e-10  
     1st Qu.:4.227e-10  
     Median :1.287e-09  
     Mean   :2.441e-09  
     3rd Qu.:2.719e-09  
     Max.   :1.790e-08
#+end_example

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
    plot(working_set[,!names(working_set) %in% c("vector_recompute")])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3912W-5/figure39128WA.png]]

    Here woud should have fixed threads_number instead:
    #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ elements_number + y_component_number + vector_length + threads_number + lws_y + load_overlap + temporary_size
      fit <- lm(model,working_set)
      summary(fit)

      model <- time_per_pixel ~ vector_length  + lws_y 
      fit <- lm(model,working_set)
      summary(fit)

      model <- time_per_pixel ~ threads_number  + lws_y 
      fit <- lm(model,working_set)
      summary(fit)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -5.854e-09 -1.467e-09 -3.838e-10  9.082e-10  1.101e-08 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)         2.449e-09  1.615e-09   1.516  0.13704    
    elements_number    -2.064e-10  9.844e-11  -2.097  0.04207 *  
    y_component_number  4.549e-10  3.544e-10   1.284  0.20631    
    vector_length       1.358e-10  8.473e-11   1.602  0.11659    
    threads_number     -3.475e-12  1.207e-12  -2.879  0.00626 ** 
    lws_y               1.947e-11  4.420e-12   4.404 7.18e-05 ***
    load_overlaptrue   -1.295e-10  8.729e-10  -0.148  0.88276    
    temporary_size     -2.260e-10  4.246e-10  -0.532  0.59745    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.908e-09 on 42 degrees of freedom
    Multiple R-squared:  0.4031,	Adjusted R-squared:  0.3036 
    F-statistic: 4.051 on 7 and 42 DF,  p-value: 0.001787

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -5.854e-09 -1.467e-09 -3.838e-10  9.082e-10  1.101e-08 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)         2.449e-09  1.615e-09   1.516  0.13704    
    elements_number    -2.064e-10  9.844e-11  -2.097  0.04207 *  
    y_component_number  4.549e-10  3.544e-10   1.284  0.20631    
    vector_length       1.358e-10  8.473e-11   1.602  0.11659    
    threads_number     -3.475e-12  1.207e-12  -2.879  0.00626 ** 
    lws_y               1.947e-11  4.420e-12   4.404 7.18e-05 ***
    load_overlaptrue   -1.295e-10  8.729e-10  -0.148  0.88276    
    temporary_size     -2.260e-10  4.246e-10  -0.532  0.59745    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.908e-09 on 42 degrees of freedom
    Multiple R-squared:  0.4031,	Adjusted R-squared:  0.3036 
    F-statistic: 4.051 on 7 and 42 DF,  p-value: 0.001787

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -6.610e-09 -1.287e-09 -6.651e-10  9.950e-11  1.290e-08 

    Coefficients:
                   Estimate Std. Error t value Pr(>|t|)   
    (Intercept)   5.685e-10  8.229e-10   0.691  0.49310   
    vector_length 1.438e-10  8.941e-11   1.608  0.11453   
    lws_y         1.507e-11  4.596e-12   3.278  0.00197 **
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 3.181e-09 on 47 degrees of freedom
    Multiple R-squared:  0.2005,	Adjusted R-squared:  0.1665 
    F-statistic: 5.894 on 2 and 47 DF,  p-value: 0.005202

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -6.249e-09 -1.440e-09 -7.497e-10  1.096e-09  1.158e-08 

    Coefficients:
                     Estimate Std. Error t value Pr(>|t|)    
    (Intercept)     2.621e-09  5.982e-10   4.381 6.57e-05 ***
    threads_number -3.816e-12  1.216e-12  -3.138 0.002936 ** 
    lws_y           1.826e-11  4.463e-12   4.093 0.000166 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.971e-09 on 47 degrees of freedom
    Multiple R-squared:  0.3026,	Adjusted R-squared:  0.2729 
    F-statistic:  10.2 on 2 and 47 DF,  p-value: 0.0002096
#+end_example

    
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 600 :session
      model <- time_per_pixel ~ vector_length  + lws_y 
      fit <- lm(model,working_set)
      plot(fitted(fit), fitted(fit) + residuals(fit), xlim=c(0,2e-8), ylim=c(0,2e-8))
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3912W-5/figure3912LVs.png]]

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 600 :session
      model <- time_per_pixel ~ threads_number  + lws_y 
      fit <- lm(model,working_set)
      plot(fitted(fit), fitted(fit) + residuals(fit), xlim=c(0,2e-8), ylim=c(0,2e-8))
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3912W-5/figure3912Yfy.png]]

    
    We fix lws_y and vector_length as it is done is the result:
    #+begin_src R :results output :session :exports both
      subset1 <- working_set[working_set$vector_length == 1 & working_set$lws_y == 1,]
      pruned1 <- df[df$vector_length == 1 & df$lws_y == 1,]
      nrow(subset1)
      nrow(pruned1)
    #+end_src

    #+RESULTS:
    : [1] 1
    : [1] 576

    Additional points:
    #+begin_src R :results output :session :exports both
    subset1 <- rbind(subset1,logs[[1]]$added1)
    nrow(subset1)
    #+end_src

    #+RESULTS:
    : [1] 41

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      plot(working_set[,!names(working_set) %in% c("vector_recompute","vector_length","lws_y")])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3912W-5/figure39129Jf.png]]

    Here we sould have sample. We are very lucky get the best value:
    #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ elements_number + y_component_number + threads_number 
      fit <- lm(model,working_set)
      summary(fit)

      model <- time_per_pixel ~ y_component_number 
      fit <- lm(model,working_set)
      summary(fit)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -3.296e-09 -1.826e-09 -7.242e-10  5.474e-10  1.489e-08 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)   
    (Intercept)         3.323e-09  1.140e-09   2.915  0.00548 **
    elements_number    -1.810e-10  1.116e-10  -1.621  0.11179   
    y_component_number  3.886e-10  3.933e-10   0.988  0.32827   
    threads_number     -2.065e-12  1.323e-12  -1.561  0.12536   
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 3.399e-09 on 46 degrees of freedom
    Multiple R-squared:  0.1067,	Adjusted R-squared:  0.04844 
    F-statistic: 1.831 on 3 and 46 DF,  p-value: 0.1547

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -2.305e-09 -1.975e-09 -1.227e-09  3.037e-10  1.536e-08 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)  
    (Intercept)         2.582e-09  1.043e-09   2.475   0.0169 *
    y_component_number -4.257e-11  2.778e-10  -0.153   0.8789  
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 3.52e-09 on 48 degrees of freedom
    Multiple R-squared:  0.000489,	Adjusted R-squared:  -0.02033 
    F-statistic: 0.02348 on 1 and 48 DF,  p-value: 0.8789
#+end_example

    What if we did things correctly:
   #+begin_src R :results output :session :exports both
      objective_predict <- function(fit,x){
           names <- colnames(x)
           s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
           eval(parse(text=s))
           as.numeric(predict(fit, values, interval="none"))
       }

       objective_predict_one <- function(fit,x,colname){
           s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
           eval(parse(text=s))
           as.numeric(predict(fit, values, interval="none"))
       }

       find_best <- function(model,subset,full_set,colnames){
           fit <- lm(data=subset,formula=formula(model))
           if( length(colnames) > 1) {
               return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
           }
           else{
               return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
           }
       }
     #+end_src

   #+RESULTS:

    #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ threads_number  + lws_y 
      best1 <- find_best(model, working_set, df, c("threads_number","lws_y")) 
      best1
    #+end_src

    #+RESULTS:
    :      threads_number lws_y
    : 6467           1024     1

    #+begin_src R :results output :session :exports both
    subset1 <- working_set[working_set$threads_number == best1$threads_number & working_set$lws_y == best1$lws_y,]
    pruned1 <- df[df$threads_number == best1$threads_number & df$lws_y == best1$lws_y,]
    nrow(subset1)
    nrow(pruned1)
    #+end_src

    #+RESULTS:
    : [1] 1
    : [1] 380

    #+begin_src R :results output :session :exports both
      added1 <- pruned1[sample(1:nrow(pruned1), size = 20, replace = FALSE),]
      subset1 <- rbind(subset1,added1)
    #+end_src

    #+RESULTS:

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      plot(subset1[,!names(subset1) %in% c("vector_recompute","threads_number","lws_y")])
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3912W-5/figure3912wGN.png]]

    #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ elements_number + y_component_number + vector_length 
      fit <- lm(model,subset1)
      summary(fit)

      model <- time_per_pixel ~ vector_length 
      fit <- lm(model,subset1)
      summary(fit)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = model, data = subset1)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -3.572e-10 -6.365e-11  7.670e-12  1.020e-10  2.710e-10 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)         2.162e-10  9.065e-11   2.385    0.029 *  
    elements_number    -1.400e-11  9.268e-12  -1.511    0.149    
    y_component_number -1.798e-11  3.105e-11  -0.579    0.570    
    vector_length       9.341e-11  9.890e-12   9.445 3.55e-08 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 1.614e-10 on 17 degrees of freedom
    Multiple R-squared:  0.8603,	Adjusted R-squared:  0.8356 
    F-statistic: 34.89 on 3 and 17 DF,  p-value: 1.744e-07

    Call:
    lm(formula = model, data = subset1)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -3.289e-10 -1.078e-10  8.900e-13  1.677e-10  3.297e-10 

    Coefficients:
                   Estimate Std. Error t value Pr(>|t|)    
    (Intercept)   4.241e-11  5.854e-11   0.724    0.478    
    vector_length 9.660e-11  1.127e-11   8.574  5.9e-08 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 1.851e-10 on 19 degrees of freedom
    Multiple R-squared:  0.7946,	Adjusted R-squared:  0.7838 
    F-statistic: 73.52 on 1 and 19 DF,  p-value: 5.896e-08
#+end_example

    #+begin_src R :results output :session :exports both
      subset2 <- subset1[subset1$vector_length == 1,] 
      pruned2 <- pruned1[pruned1$vector_length == 1,] 
      nrow(subset2)
      nrow(pruned2)

      added2 <- pruned2[sample(1:nrow(pruned2), size = 20, replace = FALSE),] 
      subset2 <- rbind(subset2,added2)

      model <- time_per_pixel ~ y_component_number + elements_number
      fit <- lm(model,subset2)
      summary(fit)

      model <- time_per_pixel ~ (y_component_number + elements_number)^2
      fit <- lm(model,subset2)
      summary(fit)

    #+end_src

    #+RESULTS:
    #+begin_example
    [1] 10
    [1] 96

    Call:
    lm(formula = model, data = subset2)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -5.545e-11 -1.314e-11 -7.777e-12  1.820e-11  6.691e-11 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)         2.993e-10  1.271e-11  23.550  < 2e-16 ***
    y_component_number -3.696e-11  4.078e-12  -9.062 1.12e-09 ***
    elements_number     5.069e-12  1.078e-12   4.700 6.82e-05 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.926e-11 on 27 degrees of freedom
    Multiple R-squared:  0.7583,	Adjusted R-squared:  0.7404 
    F-statistic: 42.36 on 2 and 27 DF,  p-value: 4.712e-09

    Call:
    lm(formula = model, data = subset2)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -5.748e-11 -1.062e-11 -7.733e-12  1.892e-11  6.317e-11 

    Coefficients:
                                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)                         3.091e-10  2.454e-11  12.596 1.42e-12 ***
    y_component_number                 -3.874e-11  5.635e-12  -6.875 2.68e-07 ***
    elements_number                     3.348e-12  3.842e-12   0.871    0.392    
    y_component_number:elements_number  3.113e-13  6.661e-13   0.467    0.644    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 2.969e-11 on 26 degrees of freedom
    Multiple R-squared:  0.7604,	Adjusted R-squared:  0.7327 
    F-statistic:  27.5 on 3 and 26 DF,  p-value: 3.172e-08
#+end_example

    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      plot(subset2[,!names(subset2) %in% c("vector_recompute","threads_number","lws_y","vector_length")])    
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3912W-5/figure3912XsT.png]]

    #+begin_src R :results output :session :exports both
      model <- time_per_pixel ~ y_component_number + elements_number
      best2 <- find_best(model, subset2, pruned2, c("y_component_number","elements_number")) 
      best2
    #+end_src

    #+RESULTS:
    :       y_component_number elements_number
    : 14403                  6               6

    The solution is not better but still acceptable:
    #+begin_src R :results output :session :exports both
      subset3 <- subset2[subset2$y_component_number == best2$y_component_number & subset2$elements_number == best2$elements_number,]
      pruned3 <- pruned2[pruned2$y_component_number == best2$y_component_number & pruned2$elements_number == best2$elements_number,]
      nrow(subset3)
      nrow(pruned3)
      min(pruned3$time_per_pixel) / min(df$time_per_pixel)
      pruned3[pruned3$time_per_pixel == min(pruned3$time_per_pixel),]
    #+end_src

    #+RESULTS:
    : [1] 2
    : [1] 4
    : [1] 1.076159
    :       elements_number y_component_number vector_length temporary_size
    : 19156               6                  6             1              4
    :       vector_recompute load_overlap threads_number lws_y time_per_pixel
    : 19156             true        false           1024     1    1.25374e-10

*** Can we reach the best one?
    In order to find the best one, we must estimate a /lws y/ of 2 but
    we cannot with a model fully linear. 
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

    #+begin_src R :results output :session :exports both
      df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
      logs <- readRDS("../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_new_strat_1000.rds")
      df_lm_random <- read.csv("../data/2016_04_08/pilipili2/18_08_24/lm_random_new_strat_1000.csv", strip.white=T, header=T)
      df_lm_random[df_lm_random$time_per_pixel == min(df_lm_random$time_per_pixel),][1,]
      df_lm_random[df_lm_random$time_per_pixel == min(df_lm_random$time_per_pixel),][1,]$time_per_pixel / min(df$time_per_pixel)
      logs[[2]]$slowdown
    #+end_src    

    #+RESULTS:
    :   elements_number y_component_number vector_length temporary_size
    : 1               6                  6             1              2
    :   vector_recompute load_overlap threads_number lws_y time_per_pixel
    : 1             true         true            256     1     1.1792e-10
    :   point_number method
    : 1          119     LM
    : [1] 1.012177
    : [1] 1.012177

    #+begin_src R :results output :session :exports both
    working_set <- logs[[2]]$starting_set

    model <- time_per_pixel ~ vector_length  + lws_y + I(1/lws_y)
    fit <- lm(model,working_set)
    summary(fit)

    model <- time_per_pixel ~ vector_length  + lws_y 
    fit <- lm(model,working_set)
    summary(fit)

    model <- time_per_pixel ~ (vector_length  + lws_y)^2
    fit <- lm(model,working_set)
    summary(fit)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -1.537e-09 -5.155e-10 -4.300e-11  1.890e-10  3.353e-09 

    Coefficients:
                    Estimate Std. Error t value Pr(>|t|)    
    (Intercept)    4.432e-12  2.920e-10   0.015  0.98796    
    vector_length  8.781e-11  3.069e-11   2.861  0.00633 ** 
    lws_y          1.980e-11  3.246e-12   6.099 2.06e-07 ***
    I(1/lws_y)    -2.603e-11  5.352e-10  -0.049  0.96142    
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 9.927e-10 on 46 degrees of freedom
    Multiple R-squared:  0.5617,	Adjusted R-squared:  0.5332 
    F-statistic: 19.65 on 3 and 46 DF,  p-value: 2.409e-08

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -1.537e-09 -5.136e-10 -4.230e-11  1.875e-10  3.356e-09 

    Coefficients:
                    Estimate Std. Error t value Pr(>|t|)    
    (Intercept)   -4.712e-12  2.211e-10  -0.021  0.98308    
    vector_length  8.794e-11  3.025e-11   2.907  0.00555 ** 
    lws_y          1.987e-11  2.882e-12   6.894 1.18e-08 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 9.821e-10 on 47 degrees of freedom
    Multiple R-squared:  0.5617,	Adjusted R-squared:  0.5431 
    F-statistic: 30.12 on 2 and 47 DF,  p-value: 3.812e-09

    Call:
    lm(formula = model, data = working_set)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -9.632e-10 -3.858e-10 -2.504e-10 -1.810e-11  3.447e-09 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)   
    (Intercept)         3.586e-10  2.317e-10   1.548  0.12851   
    vector_length       3.963e-11  3.149e-11   1.259  0.21456   
    lws_y               8.705e-12  4.367e-12   1.994  0.05215 . 
    vector_length:lws_y 1.264e-12  3.944e-13   3.205  0.00246 **
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 8.976e-10 on 46 degrees of freedom
    Multiple R-squared:  0.6417,	Adjusted R-squared:  0.6183 
    F-statistic: 27.46 on 3 and 46 DF,  p-value: 2.49e-10
#+end_example

** 2016-06-15
*** Structure of the search space
    Just to order parameters by the impact magnitude to sort the
    data. This just for illustrating the structure of the search space
    in my M2 presentation:
    #+begin_src sh :results output :exports none
      ruby ../scripts/format_data.rb ../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

    #+begin_src R :results output :session :exports both
      df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
      attach(df)
    #+end_src

    #+RESULTS:

    T-values and p-values:
    #+begin_src R :results output :session :exports both
      fit <- lm(time_per_pixel ~ vector_length + elements_number + y_component_number + threads_number + lws_y)
      (tstats <- coef(fit) / sqrt(diag(vcov(fit))))
      2 * pt(abs(tstats), df = df.residual(fit), lower.tail = FALSE)
    #+end_src

    #+RESULTS:
    :        (Intercept)      vector_length    elements_number y_component_number 
    :           24.81310           58.12743          -35.52491           13.72347 
    :     threads_number              lws_y 
    :          -38.45353           87.82703
    :        (Intercept)      vector_length    elements_number y_component_number 
    :      3.685953e-134       0.000000e+00      3.454394e-269       1.080305e-42 
    :     threads_number              lws_y 
    :      1.238111e-313       0.000000e+00

    We can see the same structure in each vector length values:
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
      library(ggplot2)
      sorted <- df[order(vector_length, lws_y, threads_number, y_component_number, elements_number, temporary_size, load_overlap),]         
      ggplot(sorted) +
          aes(x=seq(1,nrow(sorted)), y=time_per_pixel) +
          geom_point()
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3964gX5/figure39646FF.png]]

    Fixing vector length to focus on lower order impact parameters:
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
      sorted <- df[vector_length == 1,]
      sorted <- sorted[order(sorted$lws_y, sorted$threads_number, sorted$elements_number, sorted$y_component_number, sorted$temporary_size, sorted$load_overlap),]         
      # plot(sorted$time_per_pixel)
      ggplot(sorted) +
          aes(x=seq(1,nrow(sorted)), y=sorted$time_per_pixel) +
          geom_point()
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3964gX5/figure3964HQL.png]]

    Focusing on lower order parameters
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
          
      sorted <- sorted[sorted$lws_y == 16,]
      sorted <- sorted[order(sorted$threads_number, sorted$y_component_number, sorted$elements_number, sorted$temporary_size, sorted$load_overlap),]         
      # plot(sorted$time_per_pixel)
      ggplot(sorted) +
          aes(x=seq(1,nrow(sorted)), y=sorted$time_per_pixel) +
          geom_point()
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3964gX5/figure3964UaR.png]]

    #+begin_src R :results output :session :exports both
      fit <- lm(time_per_pixel ~ elements_number + threads_number + y_component_number, sorted)
      summary(fit)
    #+end_src


    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = time_per_pixel ~ elements_number + threads_number + 
        y_component_number, data = sorted)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -5.484e-10 -3.406e-10 -1.169e-10  2.889e-10  1.626e-09 

    Coefficients:
                         Estimate Std. Error t value Pr(>|t|)    
    (Intercept)         1.220e-09  4.584e-11  26.617  < 2e-16 ***
    elements_number    -9.959e-13  4.249e-12  -0.234    0.815    
    threads_number     -9.559e-13  5.339e-14 -17.904  < 2e-16 ***
    y_component_number -8.054e-11  1.517e-11  -5.309 1.58e-07 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 4.44e-10 on 572 degrees of freedom
    Multiple R-squared:  0.3988,	Adjusted R-squared:  0.3956 
    F-statistic: 126.5 on 3 and 572 DF,  p-value: < 2.2e-16
#+end_example

    We can see the tendency of the impact of threads number:
    #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
    
      sorted1 <- sorted[ sorted$y_component_number== 1,]
      sorted1 <- sorted1[order( sorted1$threads_number,  sorted1$elements_number ,sorted1$temporary_size, sorted1$load_overlap),]         
      #sorted1 <- sorted[ sorted$threads_number == 128,]
      #sorted1 <- sorted1[order( sorted1$y_component_number, sorted1$elements_number ,sorted1$temporary_size, sorted1$load_overlap),]         
      ggplot(sorted1) +
          aes(x=seq(1,nrow(sorted1)), y=sorted1$time_per_pixel, shape=factor(threads_number)) +
          #aes(x=seq(1,nrow(sorted1)), y=sorted1$time_per_pixel, shape=factor(y_component_number)) +
          geom_point()
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-3964gX5/figure3964hkX.png]]

    #+begin_src R :results output :session :exports both
      fit <- lm(time_per_pixel ~ elements_number + threads_number , sorted)
      summary(fit)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = time_per_pixel ~ elements_number + threads_number, 
        data = sorted)

    Residuals:
           Min         1Q     Median         3Q        Max 
    -5.547e-10 -3.396e-10 -1.395e-10  2.898e-10  1.736e-09 

    Coefficients:
                      Estimate Std. Error t value Pr(>|t|)    
    (Intercept)      1.076e-09  3.786e-11  28.431  < 2e-16 ***
    elements_number -1.679e-11  3.105e-12  -5.407  9.4e-08 ***
    threads_number  -9.559e-13  5.464e-14 -17.494  < 2e-16 ***
    ---
    Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

    Residual standard error: 4.544e-10 on 573 degrees of freedom
    Multiple R-squared:  0.3691,	Adjusted R-squared:  0.3669 
    F-statistic: 167.6 on 2 and 573 DF,  p-value: < 2.2e-16
#+end_example

    
    In this one we can more easily see a pattern:
     #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
       sorted2 <- sorted[ sorted$threads_number == 128,]
       sorted2 <- sorted2[order( sorted2$y_component_number, sorted2$elements_number, sorted2$temporary_size, sorted2$load_overlap),]         
      # plot(sorted$time_per_pixel)
      ggplot(sorted2) +
          ##aes(x=seq(1,nrow(sorted2)), y=sorted2$time_per_pixel, shape=factor(threads_number)) +
           aes(x=seq(1,nrow(sorted2)), y=sorted2$time_per_pixel, shape=factor(y_component_number)) +
          geom_point()
    #+end_src

     #+RESULTS:
     [[file:/tmp/babel-3964gX5/figure3964uud.png]]

** 2016-06-17
   Gdr-im@gdr-im.fr
   hpc-announce-owner@mcs.anl.gov
** 2016-06-20
*** Christian feedback
**** p3
    - Thanks on the introduction
    - First slide overview not necessary
    - Machine cost a lost and even 1% of improvment is great
    - GPU \to programming paradigm
      - CUDA low level C programming
    - Performance is based on hw and sw stack.
**** p4
     - presents \to yields code that the compiler can optimizer easier
     - high level language e.g. ruby python.
       At the end of this slide remind the goal.
**** p5
     - D \to search space
     - These tools allow _the dev_....
     - e.g.,
     - exhaustive not efficient
**** p6
     - f function
     - be brief
     - link not clear between the last image and the other
**** p7 
     - To cope with combinatory explosion
     - explain what we see on the plot
     - parameters
     - does not make sense
     - relation with previous slide \to x vector
     - link between images
**** p8
     - Transition \to summary of previous section
**** p9
     - involve user into optimization
     - question \to investigate \to obtain faithfull sample
     - LR used to interpret the information and to discover the
       structure of the of the sp.
**** p12
     - we believe in reproducible and open re-search.
     - All experiments are logged
**** p14
     - Too much time to explain the parameters \to no need
       - Just take the 2 first as example
       - Insist in combinatorial explosion
       - Explain why design of xp is usefull
       - Explain the stuff about constraint
**** p15
     - Transition refere to section 2
**** p17
     - explain what we see
     - Explain the objectif \to get the optimal most of the time
**** p18
     - bigger font
     - explain what it is
**** p19
     - Don't see correctly the red
     - Size of the font
**** p22
     - Specify that it is the all search space
**** p23 
     - information on the slide
     - what R2 means \to coef of determination
     - explain more lucky case, why is it lucky
**** p26 
     - we designed a new approach that put focus of the optimization
       process on the user
**** p27
     - would like to work on phd on this topic \to depends on this topic
** 2016-06-22
*** Presentation feedback
    More time on explain search methods
    Pourquoi 5th and not the minimum?
    +p8 hypothesis, typo+
    +trop de fleches+
    +p16 title!+
    +formule latex+
** 2016-06-28
*** Modifying constraints mechanism                           :Modifications:
    Currently complex constraints such as the kernel size is a
    function and is not saved in the parameters yaml file but
    hardcoded in the experiment code. Thus an experiment is not
    linked to these complex constraints and we cannot keep track of
    these constraints used for this experiment. 
    The following modification would allow us to keep the functions as
    a string along with the parameters.
    #+BEGIN_SRC ruby :results output
        class Checker
          attr_accessor :code
          attr_accessor :calls
          
          def initialize(*parameters)
            parameters[0].each { |key, value|
              if key == :code then
                @code = value
                eval code
              elsif key == :calls then
                @calls = value
                eval code
              end
            }
            
          end
          
          def test
            @calls.each{ |call|
              eval call
            }
          end
        end
        
        code = <<EOF       
                      def foo (s)
                        puts s
                      end

                      def bar (s)
                        puts s.reverse!
                      end
      EOF
        
        c = Checker.new(:code => code, :calls => ['foo "teuop"', 'bar "teuop"'])
        c.test
    #+END_SRC

    #+RESULTS:
    : teuop
    : pouet

    
    

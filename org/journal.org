#+TITLE:  LabBook
#+AUTHOR: Steven QUINITO MASNADA
#+BABEL: :tangle yes
#+TAGS: Arnaud(a) Brice(b) Script(s)

* TODO [0/1]
  - [ ] Run brute force with load_overlap = [true,false],
    vector_recompute = [true,false] and different combination of local_work_size
* Memo
  - Get opencl platform
    #+begin_src R :results output :session :exports both
      require 'opencl_ruby_ffi'
      OpenCL::get_platforms
    #+end_src
  - Get usefull info
    #+begin_src sh :results output :exports both
      inxi -Fx
    #+end_src
  - Find opened tty
    #+begin_src sh :results output :exports both
      ps -ft pts/0 -t pts/2    
    #+end_src
  - Bench optimizer
   #+begin_src sh :results output :exports both
     OPTIMIZER_LOG_FILE=/tmp/test2.yaml OPTIMIZER_LOG=true ruby bench_optimizer.rb test_parameters.yaml test.yaml
   #+end_src
* Installation
  Here the installation that download and install al the necessary tools.
** Base
   #+begin_src sh :results output :exports both :tangle ../setup.sh
     #!/bin/bash
   #+end_src
*** Directory
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      ROOT_DIR=$PWD
      BOAST_DIR=$ROOT_DIR/boast
      DARWIN_DIR=$ROOT_DIR/darwinning
      BOAST_LIG_DIR=$ROOT_DIR/boast-lig
      TOOLS_DIR=$ROOT_DIR/apps
    #+end_src
*** Ruby
   #+begin_src sh :results output :exports both :tangle ../setup.sh
     echo "=========== Install ruby ============="
     gksudo "apt-get install -y ruby ruby-dev"
   #+end_src
*** Install fortran
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      echo "=========== Install fortran ============="
      gksudo "apt-get install -y gfortran"
    #+end_src
*** Install Opencl
   #+begin_src sh :results output :exports both :tangle ../setup.sh
     echo "=========== Install OpenCL ============="
     gksudo "apt-get install -y ocl-icd-libopencl1 ocl-icd-opencl-dev"
     if [ "$HOSTNAME" = "titan" ] ; then
         mkdir -p $TOOLS_DIR
         cd $TOOLS_DIR
         gksudo "apt-get install -y rpm alien libnuma1"
         wget http://registrationcenter.intel.com/irc_nas/4181/opencl_runtime_14.2_x64_4.5.0.8.tgz
         tar xvzf opencl_runtime_14.2_x64_4.5.0.8.tgz
         cd pset_opencl_runtime_14.1_x64_4.5.0.8/rpm/
         fakeroot alien --to-deb opencl-1.2-intel-cpu-4.5.0.8-1.x86_64.rpm
         gksudo "dpkg -i opencl-1.2-intel-cpu_4.5.0.8-2_amd64.deb"
         gksudo "mkdir -p /etc/OpenCL"
         gksudo "mkdir -p /etc/OpenCL/vendors"
         gksudo "cp /opt/intel/opencl-1.2-4.5.0.8/etc/intel64.icd /etc/OpenCL/vendors/"
     else
         gksudo "apt-get install -y nvidia-opencl-icd-340"
     fi
   #+end_src

** Boast
   #+begin_src sh :results output :exports both :tangle ../setup.sh
     echo "========= Installing Boast ========="
     cd $ROOT_DIR
     git clone git@github.com:Nanosim-LIG/boast.git
     cd $BOAST_DIR
     gem build *.gemspec
     gem install --user-install *.gem
   #+end_src
   
   To avoid retriving from internet:
   #+begin_src sh :results output :exports both
     gem install --user-install -l *.gem
   #+end_src

** Darwining
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      echo "========= Installing Darwining ========="
      cd $ROOT_DIR
      git clone git@github.com:Nanosim-LIG/darwinning.git
      cd $DARWIN_DIR
      gem build *.gemspec
      gem install --user-install *.gem
    #+end_src

   Install minitest:
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      gem install --user-install minitest
    #+end_src

** Boast-lig
    #+begin_src sh :results output :exports both :tangle ../setup.sh
      echo "========= Installing Boast-lig ========="
      cd $ROOT_DIR
      git clone https://forge.imag.fr/anonscm/git/boast/boast.git boast-lig
    #+end_src

** Grid5k setup
*** Reserving node
    -I : Interactive
    -l : list of parameters
    #+begin_src sh :results output :exports both
      oarsub -p "gpu='YES'" -I -t deploy -l nodes=nbNodes,walltime=duration
      oarsub -p "gpu='YES'" -t deploy -l nodes=nbNodes,walltime=duration -r 'yyyy-mm-dd hh:mm:ss'
    #+end_src
*** Deploying an environment
    -k : no password mode, using key ssh
    #+begin_src sh :results output :exports both
      kadeploy3 -a environment.env -f $OAR_FILE_NODES -k
    #+end_src
*** Connection:
     #+begin_src sh :results output :exports both
       ssh root@node
     #+end_src
*** BOAST
     #+begin_src sh :results output :exports both
       rsync -avzP --exclude '.git' boast squinitomasnada@access.grid5000.fr:~/grenoble/boast
       rsync -avzP --exclude '.git' boast-lig squinitomasnada@access.grid5000.fr:~/grenoble/boast
     #+end_src
* February
** 2016-02-02 Notes from Arnaud :Arnaud:
- [[http://mescal.imag.fr/membres/arnaud.legrand/research/M2R_boast.pdf][internships]]
- Stephan Wild's slides at JLPC
- Pointer from Emmanuel Aggulo: [[https://www.gerad.ca/~orban/papers.html][Dominique Orban]]
  - http://dpo.github.io/opal/ One of these articles mentions the
    ability to handle nicely discrete and continuous factors.
  - http://www.gerad.ca/~orban/_static/templating.pdf
- Travaux de Grigori Fursin sur http://www.ctuning.org/ (machine
  learning/big data).
- [[https://hal.inria.fr/hal-00872482][Old article mentioning early results with BOAST]]

Have a look at
https://en.wikipedia.org/wiki/Genetic_algorithm#Limitations
** 2016-02-02
*** Summary discussion with Arnaud :Arnaud:
    Optimization can be seen as:
    - _Minimization problem_
      E.g gradient approach if the function is convexe and second
      derivative \to good conditions.
    - _Fixed Point problem_
      If k-Lipschitz property (f is contraction mapping) can converge very quickly.
      
    Those methods can be generic, we can apply f multiple time to have
    good "conditions".

    - A good starting point would be to characterize the autotuning
      search problem.
** 2016-02-05
*** Discussion with Brice :Brice:
    - Local search only gives local optimal. It is quicker but the
      result can far from the global optimal unless we know where to
      search.
    - It is important to be able to put a bound on the value we want
      to minimize/maximize.
    - Combining global and local
    - It would be interesting to see how a problem looks like when
      changing architecture, it is possible that the search space is
      different.  
** 2016-02-09
*** Summary of the discussion with Arnaud :Arnaud:
    - It is possible to translate the constraint problem into a
      non-constraint one \to moving the constraint into the Obj. Func.
      Use of barrier methods.
    - I have to try to generate data and analyze it with R.
*** Analyse des donnÃ©es autotuning de Brice                         :Brice:ATTACH:
    Retrieved from Arnaud.
:PROPERTIES:
:Attachments: res_arnaud.txt
:ID:       f8f8e899-bef1-40b7-add3-788636a18c68
:END:      
    
Formatting of the data to use it with R:
#+BEGIN_SRC ruby :results output :exports both :var output = "/tmp/file.csv" input="data/f8/f8e899-bef1-40b7-add3-788636a18c68/res_arnaud.txt"
  require 'yaml'
  require 'pp'

  h = YAML::load(File::open(input).read)

  t = []

  h.each { |e|
    e[:measurements].each { |m|
       t.push e[:parameters].clone.update({:x => m[:dimension][0], :y => m[:dimension][1], :duration => m[:duration]})
    }
  }

  # pp t

  # puts YAML::dump(t)

  File::open(output,"w") { |f|
    head = t.first
    f.puts head.each_key.collect { |k| k}.join(", ")
    # head.each_key.to_a.join(", ")

    t.each { |e|
      f.puts e.each_value.collect { |k| k}.join(", ")
    }
  }
#+END_SRC
    
#+RESULTS:

#+begin_src R :results output :session :exports both :var input="/tmp/file.csv"
df = read.csv(input,strip.white=T,header=T)
head(df)
dim(df)
#+end_src

#+RESULTS:
#+begin_example
  x_component_number vector_length y_component_number temporary_size
1                  1            16                  2              2
2                  1            16                  2              2
3                  1            16                  2              2
4                  1            16                  2              2
5                  1            16                  2              2
6                  4            16                  1              2
  vector_recompute load_overlap    x    y    duration
1             true        false  768  432 0.020760143
2             true        false 2560 1600 0.256392290
3             true        false 2048 2048 0.263635845
4             true        false 5760 3240 1.180488412
5             true        false 7680 4320 2.076793683
6            false         true  768  432 0.005698532
[1] 4000    9
#+end_example

#+begin_src R :results output :session :exports both
str(df);
summary(df);
#+end_src

#+RESULTS:
#+begin_example
'data.frame':	4000 obs. of  9 variables:
 $ x_component_number: int  1 1 1 1 1 4 4 4 4 4 ...
 $ vector_length     : int  16 16 16 16 16 16 16 16 16 16 ...
 $ y_component_number: int  2 2 2 2 2 1 1 1 1 1 ...
 $ temporary_size    : int  2 2 2 2 2 2 2 2 2 2 ...
 $ vector_recompute  : Factor w/ 2 levels "false","true": 2 2 2 2 2 1 1 1 1 1 ...
 $ load_overlap      : Factor w/ 2 levels "false","true": 1 1 1 1 1 2 2 2 2 2 ...
 $ x                 : int  768 2560 2048 5760 7680 768 2560 2048 5760 7680 ...
 $ y                 : int  432 1600 2048 3240 4320 432 1600 2048 3240 4320 ...
 $ duration          : num  0.0208 0.2564 0.2636 1.1805 2.0768 ...
 x_component_number vector_length  y_component_number temporary_size
 Min.   : 1.0       Min.   : 1.0   Min.   :1.00       Min.   :2     
 1st Qu.: 2.0       1st Qu.: 2.0   1st Qu.:1.75       1st Qu.:2     
 Median : 4.0       Median : 4.0   Median :2.50       Median :3     
 Mean   : 6.2       Mean   : 6.2   Mean   :2.50       Mean   :3     
 3rd Qu.: 8.0       3rd Qu.: 8.0   3rd Qu.:3.25       3rd Qu.:4     
 Max.   :16.0       Max.   :16.0   Max.   :4.00       Max.   :4     
 vector_recompute load_overlap       x              y           duration       
 false:2000       false:2000   Min.   : 768   Min.   : 432   Min.   :0.000204  
 true :2000       true :2000   1st Qu.:2048   1st Qu.:1600   1st Qu.:0.006667  
                               Median :2560   Median :2048   Median :0.023882  
                               Mean   :3763   Mean   :2328   Mean   :0.072823  
                               3rd Qu.:5760   3rd Qu.:3240   3rd Qu.:0.088747  
                               Max.   :7680   Max.   :4320   Max.   :3.472179
#+end_example

#+begin_src R :results output :session :exports both
df$flops = with(df, 9*(x-2)*(y-2)/duration)
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 700 :sessiona
plot(df[!(names(df)%in%c("duration"))]);
#+end_src

#+RESULTS:
[[file:/tmp/babel-30783Rp/figure30781gR.png]]


#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
hist(df$flops)
#+end_src

#+RESULTS:
[[file:/tmp/babel-30783Rp/figure3078pJq.png]]


#+begin_src R :results output :session :exports both
names(df)
#+end_src

#+RESULTS:
:  [1] "x_component_number" "vector_length"      "y_component_number"
:  [4] "temporary_size"     "vector_recompute"   "load_overlap"
:  [7] "x"                  "y"                  "duration"
: [10] "flops"


#+begin_src R :results output :session :exports both
summary(lm(data=df, flops ~ (x_component_number + y_component_number + vector_length +
                            factor(temporary_size) + factor(vector_recompute) + factor(load_overlap) +
                            x + y)))
#+end_src

#+RESULTS:
#+begin_example
 
Call:
lm(formula = flops ~ (x_component_number + y_component_number + 
    vector_length + factor(temporary_size) + factor(vector_recompute) + 
    factor(load_overlap) + x + y), data = df)

Residuals:
       Min         1Q     Median         3Q        Max 
-4.532e+09 -1.340e+09 -4.478e+08  5.483e+08  1.239e+10 

Coefficients:
                               Estimate Std. Error t value Pr(>|t|)    
(Intercept)                   827765774  145444921   5.691 1.35e-08 ***
x_component_number            168354043    6796767  24.770  < 2e-16 ***
y_component_number            324149508   33163768   9.774  < 2e-16 ***
vector_length                  -7796884    6796767  -1.147 0.251390    
factor(temporary_size)4      -281970610   74156439  -3.802 0.000145 ***
factor(vector_recompute)true -178649163   74156439  -2.409 0.016038 *  
factor(load_overlap)true      518930201   74156439   6.998 3.04e-12 ***
x                               -104684      60695  -1.725 0.084649 .  
y                                291403     115655   2.520 0.011788 *  
---
Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

Residual standard error: 2.345e+09 on 3991 degrees of freedom
Multiple R-squared:  0.1661,	Adjusted R-squared:  0.1645 
F-statistic: 99.39 on 8 and 3991 DF,  p-value: < 2.2e-16
#+end_example

Bon, on n'y comprends pas grand chose, il y a un R^2 tout petit et
quand on regarde le plot d'interactions prÃ©cÃ©dent, on peut aisÃ©ment
voir que =vector_length= ou =x_component_number= ne sont pas du tout
linÃ©aires et qu'un modÃ¨le quadratique serait plus appropriÃ©. D'autre
part, il y a potentiellement des interactions entre ces diffÃ©rents
facteurs. Voyons ce que cela donne

#+begin_src R :results output :session :exports both
summary(lm(data=df, flops ~ (x_component_number + I(x_component_number^2) +
                            y_component_number + I(y_component_number^2) +
                            vector_length      + I(vector_length^2) +
                            factor(temporary_size) + factor(vector_recompute) + factor(load_overlap) +
                            x + y)^2))
#+end_src

#+RESULTS:
#+begin_example
 
Call:
lm(formula = flops ~ (x_component_number + I(x_component_number^2) + 
    y_component_number + I(y_component_number^2) + vector_length + 
    I(vector_length^2) + factor(temporary_size) + factor(vector_recompute) + 
    factor(load_overlap) + x + y)^2, data = df)

Residuals:
       Min         1Q     Median         3Q        Max 
-5.030e+09 -6.204e+08 -1.971e+07  5.541e+08  6.033e+09 

Coefficients:
                                                        Estimate Std. Error
(Intercept)                                            3.138e+09  5.423e+08
x_component_number                                    -8.962e+08  1.090e+08
I(x_component_number^2)                                1.128e+07  1.011e+07
y_component_number                                    -6.111e+08  5.901e+08
I(y_component_number^2)                               -9.967e+07  2.167e+08
vector_length                                         -8.809e+08  1.090e+08
I(vector_length^2)                                    -2.535e+07  1.011e+07
factor(temporary_size)4                                2.232e+09  2.461e+08
factor(vector_recompute)true                          -7.003e+08  2.461e+08
factor(load_overlap)true                              -2.130e+09  2.461e+08
x                                                      3.832e+05  1.991e+05
y                                                     -6.403e+05  3.719e+05
x_component_number:I(x_component_number^2)             1.452e+06  3.490e+05
x_component_number:y_component_number                  2.094e+08  7.516e+07
x_component_number:I(y_component_number^2)            -2.324e+07  1.480e+07
x_component_number:vector_length                       4.965e+08  1.203e+07
x_component_number:I(vector_length^2)                 -2.907e+07  6.795e+05
x_component_number:factor(temporary_size)4            -8.615e+07  2.960e+07
x_component_number:factor(vector_recompute)true        2.159e+08  2.960e+07
x_component_number:factor(load_overlap)true            2.061e+08  2.960e+07
x_component_number:x                                  -1.128e+04  2.422e+04
x_component_number:y                                   5.191e+04  4.616e+04
I(x_component_number^2):y_component_number            -8.905e+06  4.245e+06
I(x_component_number^2):I(y_component_number^2)        6.882e+05  8.357e+05
I(x_component_number^2):vector_length                 -2.094e+07  6.795e+05
I(x_component_number^2):I(vector_length^2)             1.273e+06  3.837e+04
I(x_component_number^2):factor(temporary_size)4        2.743e+06  1.671e+06
I(x_component_number^2):factor(vector_recompute)true  -1.063e+07  1.671e+06
I(x_component_number^2):factor(load_overlap)true      -7.750e+06  1.671e+06
I(x_component_number^2):x                             -1.683e+02  1.368e+03
I(x_component_number^2):y                             -9.343e+02  2.607e+03
y_component_number:I(y_component_number^2)             3.670e+07  2.713e+07
y_component_number:vector_length                       6.273e+08  7.516e+07
y_component_number:I(vector_length^2)                 -3.551e+07  4.245e+06
y_component_number:factor(temporary_size)4            -1.989e+08  1.849e+08
y_component_number:factor(vector_recompute)true       -1.776e+07  1.849e+08
y_component_number:factor(load_overlap)true            3.792e+08  1.849e+08
y_component_number:x                                  -6.029e+04  1.513e+05
y_component_number:y                                   1.512e+05  2.884e+05
I(y_component_number^2):vector_length                 -8.728e+07  1.480e+07
I(y_component_number^2):I(vector_length^2)             4.942e+06  8.357e+05
I(y_component_number^2):factor(temporary_size)4        2.857e+07  3.640e+07
I(y_component_number^2):factor(vector_recompute)true   4.712e+06  3.640e+07
I(y_component_number^2):factor(load_overlap)true      -7.237e+07  3.640e+07
I(y_component_number^2):x                              9.786e+03  2.979e+04
I(y_component_number^2):y                             -2.360e+04  5.677e+04
vector_length:I(vector_length^2)                       4.587e+06  3.490e+05
vector_length:factor(temporary_size)4                 -7.301e+08  2.960e+07
vector_length:factor(vector_recompute)true             6.302e+07  2.960e+07
vector_length:factor(load_overlap)true                 5.385e+08  2.960e+07
vector_length:x                                       -6.791e+04  2.422e+04
vector_length:y                                        1.823e+05  4.616e+04
I(vector_length^2):factor(temporary_size)4             4.266e+07  1.671e+06
I(vector_length^2):factor(vector_recompute)true       -6.746e+06  1.671e+06
I(vector_length^2):factor(load_overlap)true           -2.998e+07  1.671e+06
I(vector_length^2):x                                   3.807e+03  1.368e+03
I(vector_length^2):y                                  -1.029e+04  2.607e+03
factor(temporary_size)4:factor(vector_recompute)true  -2.517e+08  7.280e+07
factor(temporary_size)4:factor(load_overlap)true      -1.834e+08  7.280e+07
factor(temporary_size)4:x                              2.555e+04  5.959e+04
factor(temporary_size)4:y                             -6.267e+04  1.135e+05
factor(vector_recompute)true:factor(load_overlap)true  3.116e+08  7.280e+07
factor(vector_recompute)true:x                        -1.071e+04  5.959e+04
factor(vector_recompute)true:y                        -1.125e+03  1.135e+05
factor(load_overlap)true:x                            -4.277e+04  5.959e+04
factor(load_overlap)true:y                             1.277e+05  1.135e+05
x:y                                                   -3.127e+01  8.001e+00
                                                      t value Pr(>|t|)    
(Intercept)                                             5.787 7.71e-09 ***
x_component_number                                     -8.226 2.61e-16 ***
I(x_component_number^2)                                 1.116 0.264635    
y_component_number                                     -1.036 0.300474    
I(y_component_number^2)                                -0.460 0.645550    
vector_length                                          -8.085 8.20e-16 ***
I(vector_length^2)                                     -2.508 0.012185 *  
factor(temporary_size)4                                 9.070  < 2e-16 ***
factor(vector_recompute)true                           -2.845 0.004461 ** 
factor(load_overlap)true                               -8.653  < 2e-16 ***
x                                                       1.925 0.054320 .  
y                                                      -1.722 0.085220 .  
x_component_number:I(x_component_number^2)              4.160 3.25e-05 ***
x_component_number:y_component_number                   2.786 0.005366 ** 
x_component_number:I(y_component_number^2)             -1.571 0.116374    
x_component_number:vector_length                       41.266  < 2e-16 ***
x_component_number:I(vector_length^2)                 -42.784  < 2e-16 ***
x_component_number:factor(temporary_size)4             -2.911 0.003622 ** 
x_component_number:factor(vector_recompute)true         7.294 3.62e-13 ***
x_component_number:factor(load_overlap)true             6.964 3.85e-12 ***
x_component_number:x                                   -0.466 0.641385    
x_component_number:y                                    1.125 0.260777    
I(x_component_number^2):y_component_number             -2.098 0.035992 *  
I(x_component_number^2):I(y_component_number^2)         0.823 0.410285    
I(x_component_number^2):vector_length                 -30.818  < 2e-16 ***
I(x_component_number^2):I(vector_length^2)             33.185  < 2e-16 ***
I(x_component_number^2):factor(temporary_size)4         1.641 0.100889    
I(x_component_number^2):factor(vector_recompute)true   -6.362 2.21e-10 ***
I(x_component_number^2):factor(load_overlap)true       -4.637 3.66e-06 ***
I(x_component_number^2):x                              -0.123 0.902113    
I(x_component_number^2):y                              -0.358 0.720055    
y_component_number:I(y_component_number^2)              1.353 0.176258    
y_component_number:vector_length                        8.346  < 2e-16 ***
y_component_number:I(vector_length^2)                  -8.365  < 2e-16 ***
y_component_number:factor(temporary_size)4             -1.076 0.282210    
y_component_number:factor(vector_recompute)true        -0.096 0.923490    
y_component_number:factor(load_overlap)true             2.051 0.040360 *  
y_component_number:x                                   -0.398 0.690373    
y_component_number:y                                    0.524 0.600107    
I(y_component_number^2):vector_length                  -5.898 3.98e-09 ***
I(y_component_number^2):I(vector_length^2)              5.913 3.64e-09 ***
I(y_component_number^2):factor(temporary_size)4         0.785 0.432530    
I(y_component_number^2):factor(vector_recompute)true    0.129 0.897005    
I(y_component_number^2):factor(load_overlap)true       -1.988 0.046879 *  
I(y_component_number^2):x                               0.328 0.742588    
I(y_component_number^2):y                              -0.416 0.677657    
vector_length:I(vector_length^2)                       13.144  < 2e-16 ***
vector_length:factor(temporary_size)4                 -24.670  < 2e-16 ***
vector_length:factor(vector_recompute)true              2.130 0.033270 *  
vector_length:factor(load_overlap)true                 18.195  < 2e-16 ***
vector_length:x                                        -2.804 0.005077 ** 
vector_length:y                                         3.949 7.98e-05 ***
I(vector_length^2):factor(temporary_size)4             25.523  < 2e-16 ***
I(vector_length^2):factor(vector_recompute)true        -4.036 5.54e-05 ***
I(vector_length^2):factor(load_overlap)true           -17.935  < 2e-16 ***
I(vector_length^2):x                                    2.782 0.005421 ** 
I(vector_length^2):y                                   -3.948 8.03e-05 ***
factor(temporary_size)4:factor(vector_recompute)true   -3.458 0.000551 ***
factor(temporary_size)4:factor(load_overlap)true       -2.518 0.011825 *  
factor(temporary_size)4:x                               0.429 0.668131    
factor(temporary_size)4:y                              -0.552 0.581004    
factor(vector_recompute)true:factor(load_overlap)true   4.279 1.92e-05 ***
factor(vector_recompute)true:x                         -0.180 0.857361    
factor(vector_recompute)true:y                         -0.010 0.992093    
factor(load_overlap)true:x                             -0.718 0.472966    
factor(load_overlap)true:y                              1.124 0.260960    
x:y                                                    -3.909 9.43e-05 ***
---
Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

Residual standard error: 1.151e+09 on 3933 degrees of freedom
Multiple R-squared:  0.802,	Adjusted R-squared:  0.7987 
F-statistic: 241.3 on 66 and 3933 DF,  p-value: < 2.2e-16
#+end_example

Bon, lÃ , c'est pas mal, le R^2 n'est pas ridicule et bien des
paramÃ¨tres sont non significatifs (dont =x= et =y= mais on peut voir que
=x*y= l'est...).


IdÃ©alement, on voudrait donc maintenant rÃ©duire le modÃ¨le. J'enlÃ¨ve
ceux qui semblent sans importance: =x=, =y=, =y_component_number=. C'est un
peu pÃ©nible car =I(x_component_number^2)= est non significatif mais sa
contribution s'est perdue dans les interactions avec les autres
paramÃ¨tres. On voit l'intÃ©rÃªt qu'il y aurait ici Ã  utiliser une
approche MDL... D'autre part, certains paramÃ¨tres semblent significatifs
sans pour autant Ãªtre importants (par exemple =vector_recompute=)

#+begin_src R :results output :session :exports both
summary(lm(data=df, flops ~ (x_component_number + I(x_component_number^2) +
                            vector_length      + I(vector_length^2) +
                            factor(temporary_size) + factor(vector_recompute) + factor(load_overlap))^2))
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = flops ~ (x_component_number + I(x_component_number^2) +
    vector_length + I(vector_length^2) + factor(temporary_size) +
    factor(vector_recompute) + factor(load_overlap))^2, data = df)

Residuals:
       Min         1Q     Median         3Q        Max
-5.459e+09 -6.205e+08 -2.736e+07  5.874e+08  6.409e+09

Coefficients:
                                                        Estimate Std. Error
(Intercept)                                            1.531e+09  1.873e+08
x_component_number                                    -4.687e+08  7.410e+07
I(x_component_number^2)                               -8.632e+06  9.824e+06
vector_length                                          2.015e+08  7.410e+07
I(vector_length^2)                                    -8.669e+07  9.824e+06
factor(temporary_size)4                                1.900e+09  1.393e+08a
factor(vector_recompute)true                          -7.523e+08  1.393e+08
factor(load_overlap)true                              -1.588e+09  1.393e+08
x_component_number:I(x_component_number^2)             1.452e+06  3.868e+05
x_component_number:vector_length                       4.965e+08  1.333e+07
x_component_number:I(vector_length^2)                 -2.907e+07  7.531e+05
x_component_number:factor(temporary_size)4            -8.615e+07  3.280e+07
x_component_number:factor(vector_recompute)true        2.159e+08  3.280e+07
x_component_number:factor(load_overlap)true            2.061e+08  3.280e+07
I(x_component_number^2):vector_length                 -2.094e+07  7.531e+05
I(x_component_number^2):I(vector_length^2)             1.273e+06  4.253e+04
I(x_component_number^2):factor(temporary_size)4        2.743e+06  1.853e+06
I(x_component_number^2):factor(vector_recompute)true  -1.063e+07  1.853e+06
I(x_component_number^2):factor(load_overlap)true      -7.750e+06  1.853e+06
vector_length:I(vector_length^2)                       4.587e+06  3.868e+05
vector_length:factor(temporary_size)4                 -7.301e+08  3.280e+07
vector_length:factor(vector_recompute)true             6.302e+07  3.280e+07
vector_length:factor(load_overlap)true                 5.385e+08  3.280e+07
I(vector_length^2):factor(temporary_size)4             4.266e+07  1.853e+06
I(vector_length^2):factor(vector_recompute)true       -6.746e+06  1.853e+06
I(vector_length^2):factor(load_overlap)true           -2.998e+07  1.853e+06
factor(temporary_size)4:factor(vector_recompute)true  -2.517e+08  8.070e+07
factor(temporary_size)4:factor(load_overlap)true      -1.834e+08  8.070e+07
factor(vector_recompute)true:factor(load_overlap)true  3.116e+08  8.070e+07
                                                      t value Pr(>|t|)
(Intercept)                                             8.175 3.93e-16 ***
x_component_number                                     -6.325 2.81e-10 ***
I(x_component_number^2)                                -0.879 0.379645
vector_length                                           2.720 0.006564 **
I(vector_length^2)                                     -8.824  < 2e-16 ***
factor(temporary_size)4                                13.641  < 2e-16 ***
factor(vector_recompute)true                           -5.402 6.99e-08 ***
factor(load_overlap)true                              -11.406  < 2e-16 ***
x_component_number:I(x_component_number^2)              3.753 0.000177 ***
x_component_number:vector_length                       37.231  < 2e-16 ***
x_component_number:I(vector_length^2)                 -38.600  < 2e-16 ***
x_component_number:factor(temporary_size)4             -2.626 0.008662 **
x_component_number:factor(vector_recompute)true         6.581 5.29e-11 ***
x_component_number:factor(load_overlap)true             6.283 3.67e-10 ***
I(x_component_number^2):vector_length                 -27.804  < 2e-16 ***
I(x_component_number^2):I(vector_length^2)             29.940  < 2e-16 ***
I(x_component_number^2):factor(temporary_size)4         1.480 0.138824
I(x_component_number^2):factor(vector_recompute)true   -5.740 1.02e-08 ***
I(x_component_number^2):factor(load_overlap)true       -4.183 2.94e-05 ***
vector_length:I(vector_length^2)                       11.859  < 2e-16 ***
vector_length:factor(temporary_size)4                 -22.257  < 2e-16 ***
vector_length:factor(vector_recompute)true              1.921 0.054764 .
vector_length:factor(load_overlap)true                 16.415  < 2e-16 ***
I(vector_length^2):factor(temporary_size)4             23.028  < 2e-16 ***
I(vector_length^2):factor(vector_recompute)true        -3.641 0.000275 ***
I(vector_length^2):factor(load_overlap)true           -16.182  < 2e-16 ***
factor(temporary_size)4:factor(vector_recompute)true   -3.119 0.001825 **
factor(temporary_size)4:factor(load_overlap)true       -2.272 0.023127 *
factor(vector_recompute)true:factor(load_overlap)true   3.861 0.000115 ***
---
Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

Residual standard error: 1.276e+09 on 3971 degrees of freedom
Multiple R-squared:  0.7544,    Adjusted R-squared:  0.7526
F-statistic: 435.6 on 28 and 3971 DF,  p-value: < 2.2e-16
#+end_example

#+end_src

Y verrait-on plus clair en se concentrant sur les rÃ©sultats
"intÃ©ressants". Pas sÃ»r...

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 600 :session
plot(df[df$flops>1E10 & df$temporary_size==2 & df$vector_length==8 & df$load_overlap=="true",!(names(df) %in% c("duration","x","y"))]) # ,"temporary_size","vector_length"
#+end_src

#+RESULTS:
[[file:/tmp/babel-30783Rp/figure30782Tw.png]]

But as we have less points and do not cover the parameter space,
fitting the previous model is now meaningless.

Entered on [2015-11-19 jeu. 20:56]
** 2016-02-11
   - Wrong hypothesis can lead to bad solution \to need to make less
     hypothesis as possible.
** 2016-02-16
   - Activate performance logs:
     #+begin_src sh :results output :exports both
     OPTIMIZER_LOG_FILE=file OPTIMIZER_LOG=true ruby prog.rb
   #+end_src
   - Using bench_optimizer:
     #+begin_src sh :results output :exports both
     OPTIMIZER_LOG_FILE=/tmp/test2.yaml OPTIMIZER_LOG=true ruby bench_optimizer.rb test_parameters.yaml test.yaml
   #+end_src
   - Let's try to make a first experiment and how look likes the
     optimization space of the Laplacian.rb by running brute force on
     adonis nodes to see if we can see something interesting, and
     compare it with Brice's results. Let's also run the experiment
     several time to see how is the variability. 
   - Send to grenoble:
     #+begin_src sh :results output :exports both :tangle scripts/send_to_grenoble.sh
       BASE="$PWD/../.."
       ssh squinitomasnada@access.grid5000.fr 'mkdir -p ~/grenoble/boast'
       rsync -avzP --exclude '.git' $BASE/boast squinitomasnada@access.grid5000.fr:~/grenoble/boast
       rsync -avzP --exclude '.git' $BASE/boast-lig squinitomasnada@access.grid5000.fr:~/grenoble/boast
       rsync -avzP --exclude '.git' $BASE/org/scripts squinitomasnada@access.grid5000.fr:~/grenoble/boast
     #+end_src
   - Send to nodes:
     #+begin_src sh :results output :exports both :tangle scripts/send_to_nodes.sh
       #!/bin/bash
       BASE="$PWD/.."
       PREV_NODE=''
       while read NODE; do
           if [[ "$NODE" != "$PREV_NODE" ]]; then
               ssh root@$NODE 'mkdir -p ~/boast'
               rsync -avzP --exclude '.git' $BASE/boast root@$NODE:~/boast
               rsync -avzP --exclude '.git' $BASE/boast-lig root@$NODE:~/boast
               rsync -avzP --exclude '.git' $BASE/scripts root@$NODE:~/boast
               PREV_NODE=$NODE
               fi
       done < $OAR_NODE_FILE

     #+end_src

   - The results below are obtained from different executions of
     Laplacian.rb on adonis platforms. The best configuration is found
     as follow:
     - For each configurations:
       - For each size of image [768x432, 2560x1600, 2048x2048, 5760x3240,
         7680x4320]:
         - Laplacian is computed 4 times:
           - Each time is calculated the average time to compute a
             pixel (for a given image)
           - Keep the minimum of the average time to compute a pixel
         - Make the average of the of the min the different size of
           image
       - Keep the best value.

     - Which more formally would look like this:
       min(avg_k(min_j(t_i))) 
       i \in {0..3} 
       j \in {768x432,2560x1600,2048x2048,5760x3240,7680x4320} which is
       the sizes of images
       k \in X which is the set of configuration.

       Here are the best configurations found:
     - Adonis-5 15:32:21
       - [[file:data/2016_02_19/15_32_21_adonis-5/Info15_32_21.org][Infos-Adonis-5]] 
       - [[file:data/2016_02_19/15_32_21_adonis-5/Data15_32_21.yaml][Results-Adonis-5]] 
       - Best candidate:
         #+BEGIN_SRC 
         {:x_component_number=>1, :vector_length=>8, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
         6.381553113495854e-10
         #+END_SRC
     - Adonis-9 15:23:23
       - [[file:data/2016_02_19/15_23_23_adonis-9/Info15_23_23.org][Infos-Adonis-9]] 
       - [[file:data/2016_02_19/15_23_23_adonis-9/Data15_23_23.yaml][Results-Adonis-9]] 
       - Best candidate:
         #+BEGIN_SRC 
         {:x_component_number=>1, :vector_length=>16, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
         6.379672182710354e-10
         #+END_SRC
     - Adonis-6 15:42:14
       - [[file:data/2016_02_19/15_42_14_adonis-6/Info15_42_14.org][Infos-Adonis-6]] 
       - [[file:data/2016_02_19/15_42_14_adonis-6/Data15_42_14.yaml][Results-Adonis-6]] 
       - Best candidate:
         #+BEGIN_SRC 
         {:x_component_number=>8, :vector_length=>8, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false}
         1.7839996605890094e-09
         #+END_SRC
     - Adonis-2 15:51:36
       - [[file:data/2016_02_19/15_51_36_adonis-2/Info15_51_36.org][Infos-Adonis-2]] 
       - [[file:data/2016_02_19/15_51_36_adonis-2/Data15_51_36.yaml][Results-Adonis-2]] 
       - Best candidate:
         #+BEGIN_SRC 
         {:x_component_number=>8, :vector_length=>8, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>false}
         1.7518950929881022e-09
         #+END_SRC
     It is seems we have a lot of variability (~3x)
   - Let's try to make some plots to see if the result have the same shape:
     - Formatting data:
       *Warning:* this is an outdated version
       #+BEGIN_SRC ruby
         require 'yaml'
         require 'pp'
         
         input = ARGV[0]
         
         # h = YAML::load(File::open("../data/2016_02_19/15_23_23_adonis-9/Data15_23_23.yaml").read)
         h = YAML::load(File::open(input).read)
         
         t = []
         t2 = []
         head = []
         
         h.first[0].each {|key, value| head.push key } 
         head.push :time_per_pixel
         
         h.each {|key, value| 
           t2 = []
           key.each { |key2, value2|
             t2.push value2
           }
           t2.push value
           t.push t2
         }
         
         # sorted = t.sort{ |a,b| (a[0] <=> b[0]) == 0 ? (a[1] <=> b[1]) == 0 ? (a[2] <=> b[2]) == 0 ? (a[3] <=> b[3]) == 0 ? a[4] ? a[5] ? 1 : 0 : 1 : (a[3] <=> b[3])  : (a[2] <=> b[2]) : (a[1] <=> b[1]) : (a[0] <=> b[0]) }
         
         File::open("/tmp/test.csv", "w"){ |f|
           f.puts head.collect{ |v| v }.join(", ")
           t.each{ |e|
             f.puts e.collect{ |v| v }.join(", ")
           }
         }
       #+END_SRC
     - Adonis-5 15:32:21
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_19/15_32_21_adonis-5/Data15_32_21.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure133112eT.png]]
     - Adonis-9 15:23:23:
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_19/15_23_23_adonis-9/Data15_23_23.yaml
       #+end_src

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]
       #+end_src

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-4721NXH/figure4721oFw.png]]
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         hist(sorted$time_per_pixel)
       #+end_src
   
       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-12889xAc/figure12889LDa.png]]
     - Adonis-6 15:42:14
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_19/15_42_14_adonis-6/Data15_42_14.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]
       #+end_src

       #+RESULTS:
       : The following objects are masked from df (pos = 3):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure133113Ry.png]]

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         hist(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure13311pbB.png]]
     - Adonis-2 15:51:36
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_19/15_51_36_adonis-2/Data15_51_36.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:
       : The following objects are masked from df (pos = 3):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number
       : 
       : The following objects are masked from df (pos = 4):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure13311dEa.png]]
     - We can see that the structure is completly different between
       Adonis-5 and Adonis-6 it seemed to be due to some
       variability but Adonis-5 and Adonis-9 have the same structure
       and Adonis-6 and Adonis-2 also. So the difference is not
       related to a big variablity but to other things.
     - Lets have a look on Adonis-6 with another test:
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_22/15_14_33_adonis-6.grenoble.grid5000.fr/Data15_14_33.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:
       #+begin_example
       The following objects are masked from df (pos = 3):

           load_overlap, temporary_size, time_per_pixel, vector_length,
           vector_recompute, x_component_number, y_component_number

       The following objects are masked from df (pos = 4):

           load_overlap, temporary_size, time_per_pixel, vector_length,
           vector_recompute, x_component_number, y_component_number

       The following objects are masked from df (pos = 5):

           load_overlap, temporary_size, time_per_pixel, vector_length,
           vector_recompute, x_component_number, y_component_number
#+end_example

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-13311ddc/figure13311Rty.png]]

       - We have the same structure has before maybe there are some
         differences between Adonis platform.
** 2016-02-29
   - [X] Check if there are errors in the kernel computation
     Yes, there are!
   - [X] Check which implementation of OpenCL is used
     
   - Let's try with the check on adonis-9 and adonis-6:
     #+begin_src sh :session foo :results output :exports both 
       oarsub -p "gpu='YES' and network_address in ('adonis-9.grenoble.grid5000.fr', 'adonis-6.grenoble.grid5000.fr')" -t deploy -l nodes=2,walltime=3 -I
     #+end_src
   - Results adonis-6
     - 14:15:35
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_29/adonis-6.grenoble.grid5000.fr/14_15_35/Data14_15_35.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-9562LHG/figure95629pq.png]]
      
     - 15:12:51
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_29/adonis-6.grenoble.grid5000.fr/15_12_51/Data15_12_51.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:
       : The following objects are masked from df (pos = 3):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-9562LHG/figure9562WSM.png]]
   - Results adonis-9
     - 14:08:07
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_29/adonis-9.grenoble.grid5000.fr/14_08_07/Data14_08_07.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:
       : The following objects are masked from df (pos = 3):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number
       : 
       : The following objects are masked from df (pos = 4):
       : 
       :     load_overlap, temporary_size, time_per_pixel, vector_length,
       :     vector_recompute, x_component_number, y_component_number

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-9562LHG/figure9562K7k.png]]
     - 15:05:38
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_02_29/adonis-9.grenoble.grid5000.fr/15_05_38/Data15_05_38.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
       #+end_src

       #+RESULTS:

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-9562LHG/figure9562YGy.png]]

       #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 500 :session
         plot(sorted)
       #+end_src

       #+RESULTS:
       [[file:/tmp/babel-10001xgG/figure10001vhG.png]]


   - The previous differences we had between adonis-6 and adonis-9
     came from the fact that on one machine the nvidia implementation
     of the opencl was not used.
* Mars
** 2016-03-01
 - Result on a machine with a GPU Nvidia GTX960 
   - [[file:data/2016_03_01/pantheon/22_11_09/Info22_11_09.org][Conditions of experiment]]
   - [[file:data/2016_03_01/pantheon/22_11_09/Data22_11_09_parameters.yaml][Search space]]
   - [[file:data/2016_03_01/pantheon/22_11_09/Data22_11_09.yaml][Results of experiment]]
 - Observations:    
       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_03_01/pantheon/22_11_09/Data22_11_09.yaml
       #+end_src

       #+RESULTS:

   - Best candidate:
     #+begin_src R :results output :session :exports both
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       df[df$time_per_pixel==min(df$time_per_pixel),]
     #+end_src

     #+RESULTS:
     :    x_component_number vector_length y_component_number temporary_size
     : 33                  1             1                  4              4
     :    vector_recompute load_overlap time_per_pixel
     : 33            false        false   1.432887e-10

   - Lets plot simply the result
       #+begin_src R :results output graphics :file img/not_ordered.png :exports both :width 700 :height 500 :session
         plot(df$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:img/not_ordered.png]]
     - Here we can see no structure because the configuration are
       generated in random order 
   - Now lets try plot in certain order
       #+begin_src R :results output graphics :file img/ordered.png :exports both :width 700 :height 500 :session
         attach(df)
         sorted <- df[order(x_component_number, vector_length, y_component_number, temporary_size, vector_recompute, load_overlap),]         
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
     [[file:img/ordered.png]]

       #+begin_src R :results output graphics :file img/another_order.png :exports both :width 700 :height 500 :session
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(y_component_number, x_component_number,  temporary_size, vector_length,  vector_recompute, load_overlap),]         

         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
     [[file:img/another_order.png]]

   - Lets see what are the parameters that have the bigger impact:
     #+begin_src R :results output :session :exports both
       head(df)
     #+end_src

     #+RESULTS:
     #+begin_example
     x_component_number vector_length y_component_number temporary_size
     1                  1             2                  3              2
     2                  1             2                  1              2
     3                  4             2                  1              2
     4                 16             8                  3              4
     5                  2             4                  4              4
     6                  8             1                  3              4
     vector_recompute load_overlap time_per_pixel
     1            false        false   1.604461e-10
     2             true         true   4.561930e-10
     3            false         true   3.974526e-10
     4             true        false   5.710954e-10
     5            false        false   1.572302e-10
     6            false         true   3.197862e-10
     #+end_example

     #+begin_src R :results output :session :exports both
       summary(lm(data=df,time_per_pixel ~ x_component_number + vector_length + y_component_number + vector_recompute  )) # + temporary_size + load_overlap
     #+end_src

     #+RESULTS:
     #+begin_example
     
     Call:
     lm(formula = time_per_pixel ~ x_component_number + vector_length + 
     y_component_number + vector_recompute, data = df)
     
     Residuals:
       Min         1Q     Median         3Q        Max 
     -3.494e-10 -1.409e-10 -3.041e-11  8.200e-11  1.627e-09 
     
     Coefficients:
                       Estimate Std. Error t value Pr(>|t|)    
     (Intercept)           2.770e-10  2.622e-11  10.567   <2e-16 ***
     x_component_number    1.364e-11  1.552e-12   8.785   <2e-16 ***
     vector_length         2.308e-11  1.552e-12  14.870   <2e-16 ***
     y_component_number   -6.680e-11  7.575e-12  -8.819   <2e-16 ***
     vector_recomputetrue  2.162e-10  1.694e-11  12.763   <2e-16 ***
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1
     
     Residual standard error: 2.395e-10 on 795 degrees of freedom
     Multiple R-squared:  0.404,	Adjusted R-squared:  0.401 
     F-statistic: 134.7 on 4 and 795 DF,  p-value: < 2.2e-16
     #+end_example

     We can see that temporary_size and load_overlap don't any impact on
     the result.

   - By keeping the best value for the most important parameters we can
    get the best times per pixel
     #+begin_src R :results output :session :exports both
       x = min(df$x_component_number)
       v = min(df$vector_length)
       y = max(df$y_component_number)
       min(df$time_per_pixel)
       df[df$x_component_number==x & df$y_component_number==y & df$vector_length == v & df$vector_recompute == "false", ]
     #+end_src

     #+RESULTS:
     #+begin_example
     [1] 1.432887e-10
     x_component_number vector_length y_component_number temporary_size
     33                   1             1                  4              4
     165                  1             1                  4              4
     389                  1             1                  4              2
     789                  1             1                  4              2
     vector_recompute load_overlap time_per_pixel
     33             false        false   1.432887e-10
     165            false         true   1.436893e-10
     389            false         true   1.449263e-10
     789            false        false   1.444410e-10
     #+end_example

   - Now can make the same conclusion by using less measurement. For
    example here we try to take 80 points at with a totally random
    strategy and we most of the time we can get which are the more
    important parameters.
     #+begin_src R :results output :session :exports both
       summary(lm(data=df[sample(size = 80, x = 1:length(df$time_per_pixel),replace = F),],time_per_pixel ~ x_component_number + vector_length + y_component_number + vector_recompute + temporary_size + load_overlap )) 
     #+end_src

     #+RESULTS:
     #+begin_example

     Call:
     lm(formula = time_per_pixel ~ x_component_number + vector_length + 
     y_component_number + vector_recompute + temporary_size + 
     load_overlap, data = df[sample(size = 80, x = 1:length(df$time_per_pixel), 
     replace = F), ])
     
     Residuals:
       Min         1Q     Median         3Q        Max 
     -1.750e-10 -5.990e-11 -1.045e-11  4.103e-11  3.183e-10 
     
     Coefficients:
                       Estimate Std. Error t value Pr(>|t|)    
     (Intercept)           3.554e-10  5.668e-11   6.270 2.28e-08 ***
     x_component_number    2.519e-11  2.210e-12  11.398  < 2e-16 ***
     vector_length         8.272e-12  2.308e-12   3.584 0.000608 ***
     y_component_number   -7.489e-11  1.211e-11  -6.183 3.27e-08 ***
     vector_recomputetrue  1.145e-10  2.437e-11   4.697 1.21e-05 ***
     temporary_size       -1.910e-11  1.217e-11  -1.570 0.120790    
     load_overlaptrue      5.258e-12  2.413e-11   0.218 0.828133    
     ---
     Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1
     
     Residual standard error: 1.062e-10 on 73 degrees of freedom
     Multiple R-squared:  0.7412,	Adjusted R-squared:   0.72 
     F-statistic: 34.85 on 6 and 73 DF,  p-value: < 2.2e-16
     #+end_example

     #+end_src
   - Lets try better order
       #+begin_src R :results output graphics :file img/ordered_1.png :exports both :width 700 :height 500 :session
                  df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
                  attach(df)
                  # sorted <- df[order(x_component_number, -y_component_number, vector_length, vector_recompute, temporary_size, load_overlap ),]         
                  # sorted <- df[order( -vector_recompute, x_component_number, -y_component_number, vector_length, temporary_size, load_overlap),]        
                  # sorted <- df[order( -vector_recompute, x_component_number, -y_component_number, vector_length),]         
                  # sorted <- df[order(vector_length, -vector_recompute, -y_component_number, x_component_number),]         
                                                 # sorted <- df[order(x_component_number, -y_component_number, -vector_recompute, vector_length),]        
                  sorted <- df[order(x_component_number, -y_component_number, -vector_recompute, vector_length),]         
                  plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:
       [[file:img/ordered_1.png]]

** 2016-03-02
*** Meeting report
    Atlas ~ brute force?
    Berkley autotuning
    - Next meeting : 4 avril 14h
** 2016-03-07
*** Bruteforce on Pilipili2
**** Results
     - [[file:data/2016_03_07/pilipili2/10_19_36/Info10_19_36.org][Conditions of experiment]]
     - [[file:data/2016_03_07/pilipili2/10_19_36/Data10_19_36_parameters.yaml][Search space]]
     - [[file:data/2016_03_07/pilipili2/10_19_36/Data10_19_36.yaml][Results of experiment]]
**** Observations
     #+begin_src sh :results output :exports both
       ruby scripts/format_data.rb data/2016_03_07/pilipili2/10_19_36/Data10_19_36.yaml
     #+end_src

     #+RESULTS:

     - The structure is close to what was obtained earlier with a
       GTX960 but they are some little differences. We can see that
       we have 5 groups of points due to the five value that can take
       x_component_number. And in this groups we can distinguish 4
       others which seems to be related to the y_component_number. 

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
         attach(df)
         sorted <- df[order(x_component_number, -y_component_number, -vector_recompute, vector_length),]         
       #+end_src

       #+RESULTS:
       : Warning message:
       : In Ops.factor(vector_recompute) : â-â not meaningful for factors

     - *Warning* it seems that the result are not coherent:
       #+begin_src R :results output :session :exports both
         df[df$time_per_pixel==min(df$time_per_pixel),]
       #+end_src

       #+RESULTS:
       :     x_component_number vector_length y_component_number temporary_size
       : 605                  4            16                  4              4
       :     vector_recompute load_overlap time_per_pixel
       : 605            false        false   1.747586e-10


       #+begin_src R :results output graphics :file img/pilipili2_gtx960_order.png :exports both :width 600 :height 400 :session
         plot(sorted$time_per_pixel)
       #+end_src
     
       #+RESULTS:
       [[file:img/pilipili2_gtx960_order.png]]
    
     - At first sight the other factors don't seems to have any
       impact, so try to order according to : 

       #+begin_src R :results output :session :exports both
         sorted <- df[order(x_component_number, -y_component_number ),]         
         plot(sorted$time_per_pixel)
       #+end_src

       #+RESULTS:

     - But when we try to make a linear regression it tells me that
       vector_length and vector_recompute have an impact
       #+begin_src R :results output :session :exports both
         summary(lm(data=df,time_per_pixel ~ x_component_number + vector_length + y_component_number + vector_recompute  )) #+ temporary_size + load_overlap
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = time_per_pixel ~ x_component_number + vector_length + 
           y_component_number + vector_recompute, data = df)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -3.104e-10 -1.517e-10 -3.305e-11  6.809e-11  1.588e-09 

       Coefficients:
                              Estimate Std. Error t value Pr(>|t|)    
       (Intercept)           4.563e-10  2.605e-11  17.512  < 2e-16 ***
       x_component_number   -6.055e-12  1.543e-12  -3.925 9.42e-05 ***
       vector_length         1.758e-11  1.543e-12  11.393  < 2e-16 ***
       y_component_number   -8.612e-11  7.528e-12 -11.441  < 2e-16 ***
       vector_recomputetrue  1.868e-10  1.683e-11  11.096  < 2e-16 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.38e-10 on 795 degrees of freedom
       Multiple R-squared:  0.3343,	Adjusted R-squared:  0.3309 
       F-statistic: 99.81 on 4 and 795 DF,  p-value: < 2.2e-16
       #+end_example
       
       - Locally they have almost no impact:
         #+begin_src R :results output graphics :file img/pilipili2_local_impact.png :exports both :width 600 :height 400 :session
           sorted <- df[ order(x_component_number, -y_component_number, vector_recompute, vector_length),]         
           plot(sorted$time_per_pixel)
         #+end_src

         #+RESULTS:
         [[file:img/pilipili2_local_impact.png]]

       - Globally we can see that outliers are linked to
         vector_recompute=false
         #+begin_src R :results output graphics :file img/pilipili2_global_impact.png :exports both :width 600 :height 400 :session
           sorted <- df[ order(-vector_recompute, vector_length, -y_component_number, x_component_number),]         
           plot(sorted$time_per_pixel)
         #+end_src

         #+RESULTS:
         [[file:img/pilipili2_global_impact.png]]

       - Trying with another model:
         #+begin_src R :results output :session :exports both
           model <- lm(data=df,time_per_pixel ~ x_component_number + y_component_number + (vector_length : vector_recompute) +  (x_component_number : vector_length : vector_recompute))
           summary(model)
         #+end_src

         #+RESULTS:
         #+begin_example

         Call:
         lm(formula = time_per_pixel ~ x_component_number + y_component_number + 
             (vector_length:vector_recompute) + (x_component_number:vector_length:vector_recompute), 
             data = df)

         Residuals:
                Min         1Q     Median         3Q        Max 
         -4.746e-10 -8.865e-11 -1.000e-13  6.870e-11  1.108e-09 

         Coefficients:
                                                                Estimate Std. Error
         (Intercept)                                             4.575e-10  2.010e-11
         x_component_number                                      8.807e-12  1.742e-12
         y_component_number                                     -8.612e-11  5.614e-12
         vector_length:vector_recomputefalse                     1.938e-12  2.088e-12
         vector_length:vector_recomputetrue                      6.294e-11  2.088e-12
         x_component_number:vector_length:vector_recomputefalse -9.141e-14  2.528e-13
         x_component_number:vector_length:vector_recomputetrue  -4.703e-12  2.528e-13
                                                                t value Pr(>|t|)    
         (Intercept)                                             22.765  < 2e-16 ***
         x_component_number                                       5.056 5.31e-07 ***
         y_component_number                                     -15.340  < 2e-16 ***
         vector_length:vector_recomputefalse                      0.929    0.353    
         vector_length:vector_recomputetrue                      30.152  < 2e-16 ***
         x_component_number:vector_length:vector_recomputefalse  -0.362    0.718    
         x_component_number:vector_length:vector_recomputetrue  -18.605  < 2e-16 ***
         ---
         Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

         Residual standard error: 1.775e-10 on 793 degrees of freedom
         Multiple R-squared:  0.6307,	Adjusted R-squared:  0.6279 
         F-statistic: 225.7 on 6 and 793 DF,  p-value: < 2.2e-16
         #+end_example

     - Lets try to visualize with higher dimension:
       #+begin_src R :results output graphics :file img/multi_dim_pilipili2.png :exports both :width 800 :height 700 :session
         library(ggplot2)
         df$vector_length.cat <- as.factor(df$vector_length)
         ggplot(df) + aes(x=x_component_number, y=time_per_pixel, color=vector_recompute, shape=load_overlap) + geom_point(alpha=0.5) + facet_grid( vector_length ~ y_component_number)       
       #+end_src

       #+RESULTS:
       [[file:img/multi_dim_pilipili2.png]]

     - With this plot we see that in the different configuration the
       result is very similar except the with vector_recompute the
       bigger is the vector_length and the smaller is the
       x_component_number is and the bigger worst the performances but
       this case doesn't interest us. 

**** Quick study of optimization of Laplacian.rb
     To be able to understand the result I must first understand
     exactly what is done.
     
     The laplacian filter is optimized according to 6 parameters:
     - x_component_number and y_component_number : split the image into
       part on which the computational unit will work.
     - vector_length : Number of component that are vectorized
     - temporary_size : size of the temporary type
     - vector_recompute : As it is ARM code it prevent segfault on
       Intel. 
     - load_overlap : activate the synthetizing load optimization
** 2016-03-09
*** Changing the search space
    - By exlporing values for global_work_size and local_work_size
      - Local_work_size \to Number of work-items in a group. Limited by the
        physical device. 
      - Global_work_size \to Total number of work-items. Each dimension
        should be a multiple of the corresponding dimension in
        local_work_size and it also dependson the size of the work. So it 
        should be equal to the be number of work-groups *
        local_work_size.       
      - It seems that for the K40 GPU I can not have more than 256
        work item per work-group.
*** Bruteforce on pilipili2
**** Results
     - [[file:data/2016_03_11/pilipili2/19_13_54/Info19_13_54.org][Conditions of experiment]]
     - [[file:data/2016_03_11/pilipili2/19_13_54/Data19_13_54_parameters.yaml][Search space]]
     - [[file:data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml][Results of experiments]]
**** Formatting data script :Script:
       #+BEGIN_SRC ruby
         require 'yaml'
         require 'pp'
         require 'csv'
         input = ARGV[0]

         # h = YAML::load(File::open(input).read)
         h = YAML::load_documents(File::open(input).read)

         t = []
         t2 = []
         head = []

         h.first[0].each {|key, value| head.push key } 
         head.push :time_per_pixel

         h.each {|key, value| 
           t2 = []
           key.each { |key2, value2|
             t2.push value2
           }
           t2.push value
           t.push t2
         }

         CSV.open("/tmp/test.csv", "w"){ |f|
           f << head
           t.each{ |e|
             f << e
           }
         }                  
       #+END_SRC
**** Formatting data 2 :Script:
     #+BEGIN_SRC ruby :tangle scripts/format_data.rb
       require 'yaml'
       require 'pp'
       require 'csv'
       input = ARGV[0]

       t = []
       t2 = []
       head = []

       # h = YAML::load(File::open(input).read)
       h = YAML::load_documents(File::open(input).read){ |doc|

         if head.empty?
           # h.first[0].each {|key, value| head.push key }
           doc.first[0].each {|key, value| head.push key } 
           head.push :time_per_pixel
         end

         # h.each {|key, value| 
         doc.each {|key, value| 
           t2 = []
           key.each { |key2, value2|
             t2.push value2
           }
           t2.push value
           t.push t2
         }
       }

       CSV.open("/tmp/test.csv", "w"){ |f|
         f << head
         t.each{ |e|
           f << e
         }
       }
     #+END_SRC
**** Observations
     #+begin_src sh :results output :exports both
       ruby scripts/format_data.rb data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml
     #+end_src
     
     #+RESULTS:

     #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_sg.png :exports both :width 800 :height 600 :session
       df <- read.csv("/tmp/test.csv",strip.white=T,header=T)
       attach(df)
       plot(df)
     #+end_src

     #+RESULTS:
     [[file:img/20160311/pilipili2/pilipili2_sg.png]]
     
     - Fitting a simple model doesn't really work:
       #+begin_src R :results output :session :exports both
         summary(lm(data=df,time_per_pixel ~ x_component_number + y_component_number + local_work_size + vector_length)) #+ temporary_size
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = time_per_pixel ~ x_component_number + y_component_number + 
           local_work_size + vector_length, data = df)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -4.123e-10 -1.586e-10 -5.251e-11  1.100e-10  1.413e-09 
  
       Coefficients:
                                    Estimate Std. Error t value Pr(>|t|)    
       (Intercept)                 4.814e-10  2.284e-11  21.075  < 2e-16 ***
       x_component_number         -1.027e-11  9.986e-13 -10.286  < 2e-16 ***
       y_component_number         -8.007e-11  4.873e-12 -16.432  < 2e-16 ***
       local_work_size[128, 2, 1]  1.118e-11  2.436e-11   0.459  0.64629    
       local_work_size[256, 1, 1]  1.568e-11  2.436e-11   0.644  0.51983    
       local_work_size[32, 1, 1]   7.581e-11  2.436e-11   3.112  0.00189 ** 
       local_work_size[32, 2, 1]   2.476e-12  2.436e-11   0.102  0.91905    
       local_work_size[32, 4, 1]  -2.783e-12  2.436e-11  -0.114  0.90907    
       local_work_size[32, 8, 1]   7.394e-12  2.436e-11   0.303  0.76156    
       local_work_size[64, 1, 1]   2.301e-11  2.436e-11   0.945  0.34496    
       local_work_size[64, 2, 1]  -1.268e-12  2.436e-11  -0.052  0.95850    
       local_work_size[64, 4, 1]   9.419e-12  2.436e-11   0.387  0.69910    
       vector_length               3.376e-11  9.986e-13  33.810  < 2e-16 ***
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.436e-10 on 1987 degrees of freedom
       Multiple R-squared:  0.4359,	Adjusted R-squared:  0.4324 
       F-statistic: 127.9 on 12 and 1987 DF,  p-value: < 2.2e-16
       #+end_example
     - Neither a more complex one:
       It seems that the local_work_size doesn't have a significant effect... 
       #+begin_src R :results output :session :exports both
         summary(lm(data=df,time_per_pixel ~ x_component_number * y_component_number * local_work_size * vector_length)) #+ temporary_size
       #+end_src

       #+RESULTS:
       #+begin_example

       Call:
       lm(formula = time_per_pixel ~ x_component_number * y_component_number * 
           local_work_size * vector_length, data = df)

       Residuals:
              Min         1Q     Median         3Q        Max 
       -5.351e-10 -1.024e-10 -1.680e-11  8.515e-11  9.055e-10 

       Coefficients:
                                                                                        Estimate
       (Intercept)                                                                     2.155e-10
       x_component_number                                                              2.383e-11
       y_component_number                                                             -4.086e-11
       local_work_size[128, 2, 1]                                                      2.398e-11
       local_work_size[256, 1, 1]                                                      3.167e-11
       local_work_size[32, 1, 1]                                                       1.826e-10
       local_work_size[32, 2, 1]                                                       2.868e-11
       local_work_size[32, 4, 1]                                                      -5.634e-12
       local_work_size[32, 8, 1]                                                       1.566e-11
       local_work_size[64, 1, 1]                                                       3.215e-12
       local_work_size[64, 2, 1]                                                      -2.377e-12
       local_work_size[64, 4, 1]                                                       1.896e-11
       vector_length                                                                   7.948e-11
       x_component_number:y_component_number                                          -2.287e-12
       x_component_number:local_work_size[128, 2, 1]                                  -2.576e-12
       x_component_number:local_work_size[256, 1, 1]                                  -3.683e-12
       x_component_number:local_work_size[32, 1, 1]                                   -1.508e-11
       x_component_number:local_work_size[32, 2, 1]                                   -3.016e-12
       x_component_number:local_work_size[32, 4, 1]                                   -1.552e-13
       x_component_number:local_work_size[32, 8, 1]                                   -2.666e-12
       x_component_number:local_work_size[64, 1, 1]                                   -9.496e-13
       x_component_number:local_work_size[64, 2, 1]                                   -3.054e-13
       x_component_number:local_work_size[64, 4, 1]                                   -2.734e-12
       y_component_number:local_work_size[128, 2, 1]                                  -1.687e-11
       y_component_number:local_work_size[256, 1, 1]                                  -1.900e-11
       y_component_number:local_work_size[32, 1, 1]                                   -3.347e-11
       y_component_number:local_work_size[32, 2, 1]                                   -3.700e-12
       y_component_number:local_work_size[32, 4, 1]                                    5.126e-12
       y_component_number:local_work_size[32, 8, 1]                                   -1.016e-11
       y_component_number:local_work_size[64, 1, 1]                                   -2.884e-13
       y_component_number:local_work_size[64, 2, 1]                                    2.189e-12
       y_component_number:local_work_size[64, 4, 1]                                   -1.336e-11
       x_component_number:vector_length                                               -5.846e-12
       y_component_number:vector_length                                               -7.884e-12
       local_work_size[128, 2, 1]:vector_length                                       -8.218e-12
       local_work_size[256, 1, 1]:vector_length                                       -7.760e-12
       local_work_size[32, 1, 1]:vector_length                                         8.643e-12
       local_work_size[32, 2, 1]:vector_length                                         7.793e-13
       local_work_size[32, 4, 1]:vector_length                                         2.840e-12
       local_work_size[32, 8, 1]:vector_length                                        -4.316e-12
       local_work_size[64, 1, 1]:vector_length                                         1.319e-11
       local_work_size[64, 2, 1]:vector_length                                         1.716e-12
       local_work_size[64, 4, 1]:vector_length                                        -5.489e-12
       x_component_number:y_component_number:local_work_size[128, 2, 1]                2.064e-12
       x_component_number:y_component_number:local_work_size[256, 1, 1]                2.469e-12
       x_component_number:y_component_number:local_work_size[32, 1, 1]                 3.010e-12
       x_component_number:y_component_number:local_work_size[32, 2, 1]                 4.556e-13
       x_component_number:y_component_number:local_work_size[32, 4, 1]                -2.338e-13
       x_component_number:y_component_number:local_work_size[32, 8, 1]                 1.756e-12
       x_component_number:y_component_number:local_work_size[64, 1, 1]                 2.137e-13
       x_component_number:y_component_number:local_work_size[64, 2, 1]                -4.305e-15
       x_component_number:y_component_number:local_work_size[64, 4, 1]                 1.916e-12
       x_component_number:y_component_number:vector_length                             5.763e-13
       x_component_number:local_work_size[128, 2, 1]:vector_length                     6.007e-13
       x_component_number:local_work_size[256, 1, 1]:vector_length                     5.864e-13
       x_component_number:local_work_size[32, 1, 1]:vector_length                     -6.546e-13
       x_component_number:local_work_size[32, 2, 1]:vector_length                     -6.384e-14
       x_component_number:local_work_size[32, 4, 1]:vector_length                     -2.534e-13
       x_component_number:local_work_size[32, 8, 1]:vector_length                      2.520e-13
       x_component_number:local_work_size[64, 1, 1]:vector_length                     -1.033e-12
       x_component_number:local_work_size[64, 2, 1]:vector_length                     -1.543e-13
       x_component_number:local_work_size[64, 4, 1]:vector_length                      3.644e-13
       y_component_number:local_work_size[128, 2, 1]:vector_length                     4.690e-12
       y_component_number:local_work_size[256, 1, 1]:vector_length                     4.762e-12
       y_component_number:local_work_size[32, 1, 1]:vector_length                     -5.191e-13
       y_component_number:local_work_size[32, 2, 1]:vector_length                     -1.039e-12
       y_component_number:local_work_size[32, 4, 1]:vector_length                     -1.894e-12
       y_component_number:local_work_size[32, 8, 1]:vector_length                      2.175e-12
       y_component_number:local_work_size[64, 1, 1]:vector_length                     -2.301e-12
       y_component_number:local_work_size[64, 2, 1]:vector_length                     -9.942e-13
       y_component_number:local_work_size[64, 4, 1]:vector_length                      3.239e-12
       x_component_number:y_component_number:local_work_size[128, 2, 1]:vector_length -3.278e-13
       x_component_number:y_component_number:local_work_size[256, 1, 1]:vector_length -3.346e-13
       x_component_number:y_component_number:local_work_size[32, 1, 1]:vector_length   3.418e-14
       x_component_number:y_component_number:local_work_size[32, 2, 1]:vector_length   8.746e-14
       x_component_number:y_component_number:local_work_size[32, 4, 1]:vector_length   1.677e-13
       x_component_number:y_component_number:local_work_size[32, 8, 1]:vector_length  -1.063e-13
       x_component_number:y_component_number:local_work_size[64, 1, 1]:vector_length   1.738e-13
       x_component_number:y_component_number:local_work_size[64, 2, 1]:vector_length   8.634e-14
       x_component_number:y_component_number:local_work_size[64, 4, 1]:vector_length  -1.983e-13
                                                                                      Std. Error
       (Intercept)                                                                     7.986e-11
       x_component_number                                                              9.670e-12
       y_component_number                                                              2.916e-11
       local_work_size[128, 2, 1]                                                      1.129e-10
       local_work_size[256, 1, 1]                                                      1.129e-10
       local_work_size[32, 1, 1]                                                       1.129e-10
       local_work_size[32, 2, 1]                                                       1.129e-10
       local_work_size[32, 4, 1]                                                       1.129e-10
       local_work_size[32, 8, 1]                                                       1.129e-10
       local_work_size[64, 1, 1]                                                       1.129e-10
       local_work_size[64, 2, 1]                                                       1.129e-10
       local_work_size[64, 4, 1]                                                       1.129e-10
       vector_length                                                                   9.670e-12
       x_component_number:y_component_number                                           3.531e-12
       x_component_number:local_work_size[128, 2, 1]                                   1.368e-11
       x_component_number:local_work_size[256, 1, 1]                                   1.368e-11
       x_component_number:local_work_size[32, 1, 1]                                    1.368e-11
       x_component_number:local_work_size[32, 2, 1]                                    1.368e-11
       x_component_number:local_work_size[32, 4, 1]                                    1.368e-11
       x_component_number:local_work_size[32, 8, 1]                                    1.368e-11
       x_component_number:local_work_size[64, 1, 1]                                    1.368e-11
       x_component_number:local_work_size[64, 2, 1]                                    1.368e-11
       x_component_number:local_work_size[64, 4, 1]                                    1.368e-11
       y_component_number:local_work_size[128, 2, 1]                                   4.124e-11
       y_component_number:local_work_size[256, 1, 1]                                   4.124e-11
       y_component_number:local_work_size[32, 1, 1]                                    4.124e-11
       y_component_number:local_work_size[32, 2, 1]                                    4.124e-11
       y_component_number:local_work_size[32, 4, 1]                                    4.124e-11
       y_component_number:local_work_size[32, 8, 1]                                    4.124e-11
       y_component_number:local_work_size[64, 1, 1]                                    4.124e-11
       y_component_number:local_work_size[64, 2, 1]                                    4.124e-11
       y_component_number:local_work_size[64, 4, 1]                                    4.124e-11
       x_component_number:vector_length                                                1.171e-12
       y_component_number:vector_length                                                3.531e-12
       local_work_size[128, 2, 1]:vector_length                                        1.368e-11
       local_work_size[256, 1, 1]:vector_length                                        1.368e-11
       local_work_size[32, 1, 1]:vector_length                                         1.368e-11
       local_work_size[32, 2, 1]:vector_length                                         1.368e-11
       local_work_size[32, 4, 1]:vector_length                                         1.368e-11
       local_work_size[32, 8, 1]:vector_length                                         1.368e-11
       local_work_size[64, 1, 1]:vector_length                                         1.368e-11
       local_work_size[64, 2, 1]:vector_length                                         1.368e-11
       local_work_size[64, 4, 1]:vector_length                                         1.368e-11
       x_component_number:y_component_number:local_work_size[128, 2, 1]                4.994e-12
       x_component_number:y_component_number:local_work_size[256, 1, 1]                4.994e-12
       x_component_number:y_component_number:local_work_size[32, 1, 1]                 4.994e-12
       x_component_number:y_component_number:local_work_size[32, 2, 1]                 4.994e-12
       x_component_number:y_component_number:local_work_size[32, 4, 1]                 4.994e-12
       x_component_number:y_component_number:local_work_size[32, 8, 1]                 4.994e-12
       x_component_number:y_component_number:local_work_size[64, 1, 1]                 4.994e-12
       x_component_number:y_component_number:local_work_size[64, 2, 1]                 4.994e-12
       x_component_number:y_component_number:local_work_size[64, 4, 1]                 4.994e-12
       x_component_number:y_component_number:vector_length                             4.276e-13
       x_component_number:local_work_size[128, 2, 1]:vector_length                     1.656e-12
       x_component_number:local_work_size[256, 1, 1]:vector_length                     1.656e-12
       x_component_number:local_work_size[32, 1, 1]:vector_length                      1.656e-12
       x_component_number:local_work_size[32, 2, 1]:vector_length                      1.656e-12
       x_component_number:local_work_size[32, 4, 1]:vector_length                      1.656e-12
       x_component_number:local_work_size[32, 8, 1]:vector_length                      1.656e-12
       x_component_number:local_work_size[64, 1, 1]:vector_length                      1.656e-12
       x_component_number:local_work_size[64, 2, 1]:vector_length                      1.656e-12
       x_component_number:local_work_size[64, 4, 1]:vector_length                      1.656e-12
       y_component_number:local_work_size[128, 2, 1]:vector_length                     4.994e-12
       y_component_number:local_work_size[256, 1, 1]:vector_length                     4.994e-12
       y_component_number:local_work_size[32, 1, 1]:vector_length                      4.994e-12
       y_component_number:local_work_size[32, 2, 1]:vector_length                      4.994e-12
       y_component_number:local_work_size[32, 4, 1]:vector_length                      4.994e-12
       y_component_number:local_work_size[32, 8, 1]:vector_length                      4.994e-12
       y_component_number:local_work_size[64, 1, 1]:vector_length                      4.994e-12
       y_component_number:local_work_size[64, 2, 1]:vector_length                      4.994e-12
       y_component_number:local_work_size[64, 4, 1]:vector_length                      4.994e-12
       x_component_number:y_component_number:local_work_size[128, 2, 1]:vector_length  6.047e-13
       x_component_number:y_component_number:local_work_size[256, 1, 1]:vector_length  6.047e-13
       x_component_number:y_component_number:local_work_size[32, 1, 1]:vector_length   6.047e-13
       x_component_number:y_component_number:local_work_size[32, 2, 1]:vector_length   6.047e-13
       x_component_number:y_component_number:local_work_size[32, 4, 1]:vector_length   6.047e-13
       x_component_number:y_component_number:local_work_size[32, 8, 1]:vector_length   6.047e-13
       x_component_number:y_component_number:local_work_size[64, 1, 1]:vector_length   6.047e-13
       x_component_number:y_component_number:local_work_size[64, 2, 1]:vector_length   6.047e-13
       x_component_number:y_component_number:local_work_size[64, 4, 1]:vector_length   6.047e-13
                                                                                      t value
       (Intercept)                                                                      2.699
       x_component_number                                                               2.464
       y_component_number                                                              -1.401
       local_work_size[128, 2, 1]                                                       0.212
       local_work_size[256, 1, 1]                                                       0.280
       local_work_size[32, 1, 1]                                                        1.617
       local_work_size[32, 2, 1]                                                        0.254
       local_work_size[32, 4, 1]                                                       -0.050
       local_work_size[32, 8, 1]                                                        0.139
       local_work_size[64, 1, 1]                                                        0.028
       local_work_size[64, 2, 1]                                                       -0.021
       local_work_size[64, 4, 1]                                                        0.168
       vector_length                                                                    8.219
       x_component_number:y_component_number                                           -0.648
       x_component_number:local_work_size[128, 2, 1]                                   -0.188
       x_component_number:local_work_size[256, 1, 1]                                   -0.269
       x_component_number:local_work_size[32, 1, 1]                                    -1.102
       x_component_number:local_work_size[32, 2, 1]                                    -0.221
       x_component_number:local_work_size[32, 4, 1]                                    -0.011
       x_component_number:local_work_size[32, 8, 1]                                    -0.195
       x_component_number:local_work_size[64, 1, 1]                                    -0.069
       x_component_number:local_work_size[64, 2, 1]                                    -0.022
       x_component_number:local_work_size[64, 4, 1]                                    -0.200
       y_component_number:local_work_size[128, 2, 1]                                   -0.409
       y_component_number:local_work_size[256, 1, 1]                                   -0.461
       y_component_number:local_work_size[32, 1, 1]                                    -0.811
       y_component_number:local_work_size[32, 2, 1]                                    -0.090
       y_component_number:local_work_size[32, 4, 1]                                     0.124
       y_component_number:local_work_size[32, 8, 1]                                    -0.246
       y_component_number:local_work_size[64, 1, 1]                                    -0.007
       y_component_number:local_work_size[64, 2, 1]                                     0.053
       y_component_number:local_work_size[64, 4, 1]                                    -0.324
       x_component_number:vector_length                                                -4.992
       y_component_number:vector_length                                                -2.233
       local_work_size[128, 2, 1]:vector_length                                        -0.601
       local_work_size[256, 1, 1]:vector_length                                        -0.567
       local_work_size[32, 1, 1]:vector_length                                          0.632
       local_work_size[32, 2, 1]:vector_length                                          0.057
       local_work_size[32, 4, 1]:vector_length                                          0.208
       local_work_size[32, 8, 1]:vector_length                                         -0.316
       local_work_size[64, 1, 1]:vector_length                                          0.964
       local_work_size[64, 2, 1]:vector_length                                          0.126
       local_work_size[64, 4, 1]:vector_length                                         -0.401
       x_component_number:y_component_number:local_work_size[128, 2, 1]                 0.413
       x_component_number:y_component_number:local_work_size[256, 1, 1]                 0.494
       x_component_number:y_component_number:local_work_size[32, 1, 1]                  0.603
       x_component_number:y_component_number:local_work_size[32, 2, 1]                  0.091
       x_component_number:y_component_number:local_work_size[32, 4, 1]                 -0.047
       x_component_number:y_component_number:local_work_size[32, 8, 1]                  0.352
       x_component_number:y_component_number:local_work_size[64, 1, 1]                  0.043
       x_component_number:y_component_number:local_work_size[64, 2, 1]                 -0.001
       x_component_number:y_component_number:local_work_size[64, 4, 1]                  0.384
       x_component_number:y_component_number:vector_length                              1.348
       x_component_number:local_work_size[128, 2, 1]:vector_length                      0.363
       x_component_number:local_work_size[256, 1, 1]:vector_length                      0.354
       x_component_number:local_work_size[32, 1, 1]:vector_length                      -0.395
       x_component_number:local_work_size[32, 2, 1]:vector_length                      -0.039
       x_component_number:local_work_size[32, 4, 1]:vector_length                      -0.153
       x_component_number:local_work_size[32, 8, 1]:vector_length                       0.152
       x_component_number:local_work_size[64, 1, 1]:vector_length                      -0.624
       x_component_number:local_work_size[64, 2, 1]:vector_length                      -0.093
       x_component_number:local_work_size[64, 4, 1]:vector_length                       0.220
       y_component_number:local_work_size[128, 2, 1]:vector_length                      0.939
       y_component_number:local_work_size[256, 1, 1]:vector_length                      0.954
       y_component_number:local_work_size[32, 1, 1]:vector_length                      -0.104
       y_component_number:local_work_size[32, 2, 1]:vector_length                      -0.208
       y_component_number:local_work_size[32, 4, 1]:vector_length                      -0.379
       y_component_number:local_work_size[32, 8, 1]:vector_length                       0.436
       y_component_number:local_work_size[64, 1, 1]:vector_length                      -0.461
       y_component_number:local_work_size[64, 2, 1]:vector_length                      -0.199
       y_component_number:local_work_size[64, 4, 1]:vector_length                       0.649
       x_component_number:y_component_number:local_work_size[128, 2, 1]:vector_length  -0.542
       x_component_number:y_component_number:local_work_size[256, 1, 1]:vector_length  -0.553
       x_component_number:y_component_number:local_work_size[32, 1, 1]:vector_length    0.057
       x_component_number:y_component_number:local_work_size[32, 2, 1]:vector_length    0.145
       x_component_number:y_component_number:local_work_size[32, 4, 1]:vector_length    0.277
       x_component_number:y_component_number:local_work_size[32, 8, 1]:vector_length   -0.176
       x_component_number:y_component_number:local_work_size[64, 1, 1]:vector_length    0.287
       x_component_number:y_component_number:local_work_size[64, 2, 1]:vector_length    0.143
       x_component_number:y_component_number:local_work_size[64, 4, 1]:vector_length   -0.328
                                                                                      Pr(>|t|)
       (Intercept)                                                                     0.00703
       x_component_number                                                              0.01382
       y_component_number                                                              0.16135
       local_work_size[128, 2, 1]                                                      0.83190
       local_work_size[256, 1, 1]                                                      0.77922
       local_work_size[32, 1, 1]                                                       0.10604
       local_work_size[32, 2, 1]                                                       0.79957
       local_work_size[32, 4, 1]                                                       0.96022
       local_work_size[32, 8, 1]                                                       0.88977
       local_work_size[64, 1, 1]                                                       0.97730
       local_work_size[64, 2, 1]                                                       0.98321
       local_work_size[64, 4, 1]                                                       0.86672
       vector_length                                                                  3.72e-16
       x_component_number:y_component_number                                           0.51722
       x_component_number:local_work_size[128, 2, 1]                                   0.85062
       x_component_number:local_work_size[256, 1, 1]                                   0.78774
       x_component_number:local_work_size[32, 1, 1]                                    0.27040
       x_component_number:local_work_size[32, 2, 1]                                    0.82549
       x_component_number:local_work_size[32, 4, 1]                                    0.99095
       x_component_number:local_work_size[32, 8, 1]                                    0.84548
       x_component_number:local_work_size[64, 1, 1]                                    0.94465
       x_component_number:local_work_size[64, 2, 1]                                    0.98219
       x_component_number:local_work_size[64, 4, 1]                                    0.84155
       y_component_number:local_work_size[128, 2, 1]                                   0.68261
       y_component_number:local_work_size[256, 1, 1]                                   0.64503
       y_component_number:local_work_size[32, 1, 1]                                    0.41719
       y_component_number:local_work_size[32, 2, 1]                                    0.92852
       y_component_number:local_work_size[32, 4, 1]                                    0.90110
       y_component_number:local_work_size[32, 8, 1]                                    0.80547
       y_component_number:local_work_size[64, 1, 1]                                    0.99442
       y_component_number:local_work_size[64, 2, 1]                                    0.95768
       y_component_number:local_work_size[64, 4, 1]                                    0.74592
       x_component_number:vector_length                                               6.51e-07
       y_component_number:vector_length                                                0.02569
       local_work_size[128, 2, 1]:vector_length                                        0.54799
       local_work_size[256, 1, 1]:vector_length                                        0.57048
       local_work_size[32, 1, 1]:vector_length                                         0.52747
       local_work_size[32, 2, 1]:vector_length                                         0.95457
       local_work_size[32, 4, 1]:vector_length                                         0.83551
       local_work_size[32, 8, 1]:vector_length                                         0.75237
       local_work_size[64, 1, 1]:vector_length                                         0.33497
       local_work_size[64, 2, 1]:vector_length                                         0.90014
       local_work_size[64, 4, 1]:vector_length                                         0.68818
       x_component_number:y_component_number:local_work_size[128, 2, 1]                0.67936
       x_component_number:y_component_number:local_work_size[256, 1, 1]                0.62114
       x_component_number:y_component_number:local_work_size[32, 1, 1]                 0.54669
       x_component_number:y_component_number:local_work_size[32, 2, 1]                 0.92732
       x_component_number:y_component_number:local_work_size[32, 4, 1]                 0.96266
       x_component_number:y_component_number:local_work_size[32, 8, 1]                 0.72508
       x_component_number:y_component_number:local_work_size[64, 1, 1]                 0.96587
       x_component_number:y_component_number:local_work_size[64, 2, 1]                 0.99931
       x_component_number:y_component_number:local_work_size[64, 4, 1]                 0.70122
       x_component_number:y_component_number:vector_length                             0.17791
       x_component_number:local_work_size[128, 2, 1]:vector_length                     0.71683
       x_component_number:local_work_size[256, 1, 1]:vector_length                     0.72329
       x_component_number:local_work_size[32, 1, 1]:vector_length                      0.69268
       x_component_number:local_work_size[32, 2, 1]:vector_length                      0.96925
       x_component_number:local_work_size[32, 4, 1]:vector_length                      0.87838
       x_component_number:local_work_size[32, 8, 1]:vector_length                      0.87909
       x_component_number:local_work_size[64, 1, 1]:vector_length                      0.53277
       x_component_number:local_work_size[64, 2, 1]:vector_length                      0.92578
       x_component_number:local_work_size[64, 4, 1]:vector_length                      0.82586
       y_component_number:local_work_size[128, 2, 1]:vector_length                     0.34772
       y_component_number:local_work_size[256, 1, 1]:vector_length                     0.34039
       y_component_number:local_work_size[32, 1, 1]:vector_length                      0.91722
       y_component_number:local_work_size[32, 2, 1]:vector_length                      0.83525
       y_component_number:local_work_size[32, 4, 1]:vector_length                      0.70452
       y_component_number:local_work_size[32, 8, 1]:vector_length                      0.66317
       y_component_number:local_work_size[64, 1, 1]:vector_length                      0.64505
       y_component_number:local_work_size[64, 2, 1]:vector_length                      0.84222
       y_component_number:local_work_size[64, 4, 1]:vector_length                      0.51668
       x_component_number:y_component_number:local_work_size[128, 2, 1]:vector_length  0.58784
       x_component_number:y_component_number:local_work_size[256, 1, 1]:vector_length  0.58015
       x_component_number:y_component_number:local_work_size[32, 1, 1]:vector_length   0.95493
       x_component_number:y_component_number:local_work_size[32, 2, 1]:vector_length   0.88502
       x_component_number:y_component_number:local_work_size[32, 4, 1]:vector_length   0.78157
       x_component_number:y_component_number:local_work_size[32, 8, 1]:vector_length   0.86054
       x_component_number:y_component_number:local_work_size[64, 1, 1]:vector_length   0.77384
       x_component_number:y_component_number:local_work_size[64, 2, 1]:vector_length   0.88648
       x_component_number:y_component_number:local_work_size[64, 4, 1]:vector_length   0.74303

       (Intercept)                                                                    ** 
       x_component_number                                                             *  
       y_component_number                                                                
       local_work_size[128, 2, 1]                                                        
       local_work_size[256, 1, 1]                                                        
       local_work_size[32, 1, 1]                                                         
       local_work_size[32, 2, 1]                                                         
       local_work_size[32, 4, 1]                                                         
       local_work_size[32, 8, 1]                                                         
       local_work_size[64, 1, 1]                                                         
       local_work_size[64, 2, 1]                                                         
       local_work_size[64, 4, 1]                                                         
       vector_length                                                                  ***
       x_component_number:y_component_number                                             
       x_component_number:local_work_size[128, 2, 1]                                     
       x_component_number:local_work_size[256, 1, 1]                                     
       x_component_number:local_work_size[32, 1, 1]                                      
       x_component_number:local_work_size[32, 2, 1]                                      
       x_component_number:local_work_size[32, 4, 1]                                      
       x_component_number:local_work_size[32, 8, 1]                                      
       x_component_number:local_work_size[64, 1, 1]                                      
       x_component_number:local_work_size[64, 2, 1]                                      
       x_component_number:local_work_size[64, 4, 1]                                      
       y_component_number:local_work_size[128, 2, 1]                                     
       y_component_number:local_work_size[256, 1, 1]                                     
       y_component_number:local_work_size[32, 1, 1]                                      
       y_component_number:local_work_size[32, 2, 1]                                      
       y_component_number:local_work_size[32, 4, 1]                                      
       y_component_number:local_work_size[32, 8, 1]                                      
       y_component_number:local_work_size[64, 1, 1]                                      
       y_component_number:local_work_size[64, 2, 1]                                      
       y_component_number:local_work_size[64, 4, 1]                                      
       x_component_number:vector_length                                               ***
       y_component_number:vector_length                                               *  
       local_work_size[128, 2, 1]:vector_length                                          
       local_work_size[256, 1, 1]:vector_length                                          
       local_work_size[32, 1, 1]:vector_length                                           
       local_work_size[32, 2, 1]:vector_length                                           
       local_work_size[32, 4, 1]:vector_length                                           
       local_work_size[32, 8, 1]:vector_length                                           
       local_work_size[64, 1, 1]:vector_length                                           
       local_work_size[64, 2, 1]:vector_length                                           
       local_work_size[64, 4, 1]:vector_length                                           
       x_component_number:y_component_number:local_work_size[128, 2, 1]                  
       x_component_number:y_component_number:local_work_size[256, 1, 1]                  
       x_component_number:y_component_number:local_work_size[32, 1, 1]                   
       x_component_number:y_component_number:local_work_size[32, 2, 1]                   
       x_component_number:y_component_number:local_work_size[32, 4, 1]                   
       x_component_number:y_component_number:local_work_size[32, 8, 1]                   
       x_component_number:y_component_number:local_work_size[64, 1, 1]                   
       x_component_number:y_component_number:local_work_size[64, 2, 1]                   
       x_component_number:y_component_number:local_work_size[64, 4, 1]                   
       x_component_number:y_component_number:vector_length                               
       x_component_number:local_work_size[128, 2, 1]:vector_length                       
       x_component_number:local_work_size[256, 1, 1]:vector_length                       
       x_component_number:local_work_size[32, 1, 1]:vector_length                        
       x_component_number:local_work_size[32, 2, 1]:vector_length                        
       x_component_number:local_work_size[32, 4, 1]:vector_length                        
       x_component_number:local_work_size[32, 8, 1]:vector_length                        
       x_component_number:local_work_size[64, 1, 1]:vector_length                        
       x_component_number:local_work_size[64, 2, 1]:vector_length                        
       x_component_number:local_work_size[64, 4, 1]:vector_length                        
       y_component_number:local_work_size[128, 2, 1]:vector_length                       
       y_component_number:local_work_size[256, 1, 1]:vector_length                       
       y_component_number:local_work_size[32, 1, 1]:vector_length                        
       y_component_number:local_work_size[32, 2, 1]:vector_length                        
       y_component_number:local_work_size[32, 4, 1]:vector_length                        
       y_component_number:local_work_size[32, 8, 1]:vector_length                        
       y_component_number:local_work_size[64, 1, 1]:vector_length                        
       y_component_number:local_work_size[64, 2, 1]:vector_length                        
       y_component_number:local_work_size[64, 4, 1]:vector_length                        
       x_component_number:y_component_number:local_work_size[128, 2, 1]:vector_length    
       x_component_number:y_component_number:local_work_size[256, 1, 1]:vector_length    
       x_component_number:y_component_number:local_work_size[32, 1, 1]:vector_length     
       x_component_number:y_component_number:local_work_size[32, 2, 1]:vector_length     
       x_component_number:y_component_number:local_work_size[32, 4, 1]:vector_length     
       x_component_number:y_component_number:local_work_size[32, 8, 1]:vector_length     
       x_component_number:y_component_number:local_work_size[64, 1, 1]:vector_length     
       x_component_number:y_component_number:local_work_size[64, 2, 1]:vector_length     
       x_component_number:y_component_number:local_work_size[64, 4, 1]:vector_length     
       ---
       Signif. codes:  0 â***â 0.001 â**â 0.01 â*â 0.05 â.â 0.1 â â 1

       Residual standard error: 2.012e-10 on 1920 degrees of freedom
       Multiple R-squared:  0.6282,	Adjusted R-squared:  0.6129 
       F-statistic: 41.07 on 79 and 1920 DF,  p-value: < 2.2e-16
       #+end_example

     - But we can see that it has an impact: 
       #+begin_src R :results output :session :exports both
         library(ggplot2)
         df$y_component_number.cat <- as.factor(df$y_component_number)
         df$vector_length.cat <- as.factor(df$vector_length)
         ggplot(df) + aes(x=x_component_number, y=time_per_pixel, color=vector_length.cat) + scale_y_log10() + geom_point(alpha=0.5) + facet_wrap(~ local_work_size, ncol=10)       
       #+end_src

       #+RESULTS:

     - Genetic algo on brute force results
       #+begin_src sh :results output :exports both
         ruby ../boast/optimizer_benchmarks/bench_optimizer.rb data/2016_03_11/pilipili2/19_13_54/Data19_13_54_parameters.yaml data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml
       #+end_src

       #+RESULTS:
       : {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       : 1.2466509034021744e-10
       : 2000
       : {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       : 1.2466509034021744e-10
       : 210
     - How frequently the genetic algo can hit the best value:
       #+begin_src sh :results output :exports both
         for i in `seq 1 100`; do
             ruby ../boast/optimizer_benchmarks/bench_optimizer.rb data/2016_03_11/pilipili2/19_13_54/Data19_13_54_parameters.yaml data/2016_03_11/pilipili2/19_13_54/Data19_13_54.yaml data/2016_03_11/pilipili2/19_13_54/GenData19_13_54.yaml
         done
       #+end_src

       #+RESULTS:
       #+begin_example
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.355607181964973e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4719812116126017e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.505875915195742e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.592122967721286e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.2792532564187264e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4719812116126017e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5757451430312544e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.3677113531099145e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5757451430312544e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.4815754215803011e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5757451430312544e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4719812116126017e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.4651616091154568e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.5935495827052707e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5165358603283972e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5582289103262858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.4817793636426216e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4719812116126017e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2829227608170006e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.273354292477101e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 4, 1]}
       1.4815754215803011e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 1, 1]}
       1.5757451430312544e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.4799300946579003e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2875093575170066e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.505875915195742e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.592122967721286e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.2640506753627206e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.4029326473013859e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.2875093575170066e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.454572838047117e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 4, 1]}
       1.4817793636426216e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[32, 8, 1]}
       1.3675932183855746e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 1, 1]}
       1.2762727494278176e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.3926561402808184e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.5582289103262858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[64, 2, 1]}
       1.257773801503952e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[256, 1, 1]}
       1.26451863659571e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>2, :vector_length=>2, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.4606094882055858e-10
       210
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       2000
       {:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true, :local_work_size=>[128, 2, 1]}
       1.2466509034021744e-10
       210
       #+end_example

       #+begin_src sh :results output :exports both
         ruby scripts/format_data.rb data/2016_03_11/pilipili2/19_13_54/GenData19_13_54.yaml
       #+end_src

       #+RESULTS:

       #+begin_src R :results output :session :exports both
         df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
         attach(df)
         summary(df)
       #+end_src

       #+RESULTS:
       #+begin_example
        x_component_number vector_length  y_component_number temporary_size
        Min.   :1.00       Min.   :1.00   Min.   :3.00       Min.   :2.0   
        1st Qu.:1.00       1st Qu.:1.00   1st Qu.:4.00       1st Qu.:2.0   
        Median :1.00       Median :1.00   Median :4.00       Median :4.0   
        Mean   :1.47       Mean   :1.37   Mean   :3.93       Mean   :3.2   
        3rd Qu.:2.00       3rd Qu.:2.00   3rd Qu.:4.00       3rd Qu.:4.0   
        Max.   :4.00       Max.   :4.00   Max.   :4.00       Max.   :4.0   

        vector_recompute load_overlap    local_work_size time_per_pixel     
        true:100         true:100     [64, 2, 1] :29     Min.   :1.247e-10  
                                      [128, 2, 1]:24     1st Qu.:1.258e-10  
                                      [256, 1, 1]:11     Median :1.273e-10  
                                      [32, 8, 1] :11     Mean   :1.354e-10  
                                      [128, 1, 1]: 8     3rd Qu.:1.462e-10  
                                      [32, 4, 1] : 7     Max.   :1.594e-10  
                                      (Other)    :10
       #+end_example

       #+begin_src R :results output graphics :file img/20160311/pilipili2/pilipili2_gen_100.png :exports both :width 600 :height 600 :session       
         default <- par()
         count <- table(df$time_per_pixel)
         barplot(count, xlab="time_per_pixel", ylab="frequency", space=1)
         axis(1,labels=FALSE)
         text(rownames(count), par("usr")[3]-0.3, 
             srt = 45, xpd = TRUE, adj=1,
             labels = paste(rownames(count)))
       #+end_src

       #+RESULTS:
       [[file:img/20160311/pilipili2/pilipili2_gen_100.png]]

       On this 100 runs the global optimium is hit more 15% of the time.

       #+begin_src R :results output :session :exports both
       count
       #+end_src

       #+RESULTS:
       #+begin_example

       1.24665090340217e-10 1.25777380150395e-10 1.26405067536272e-10 
                         17                   17                    9 
       1.26451863659571e-10  1.2733542924771e-10 1.27627274942782e-10 
                          5                    5                    1 
       1.27925325641873e-10   1.282922760817e-10 1.28750935751701e-10 
                          1                    1                    2 
       1.35560718196497e-10 1.36759321838557e-10 1.36771135310991e-10 
                          1                    1                    1 
       1.39265614028082e-10 1.40293264730139e-10 1.45457283804712e-10 
                          1                    1                    7 
       1.46060948820559e-10 1.46516160911546e-10  1.4719812116126e-10 
                          5                    1                    4 
        1.4799300946579e-10  1.4815754215803e-10 1.48177936364262e-10 
                          4                    2                    2 
       1.50587591519574e-10  1.5165358603284e-10 1.55822891032629e-10 
                          2                    1                    2 
       1.57574514303125e-10 1.59212296772129e-10 1.59354958270527e-10 
                          4                    2                    1
       #+end_example

       - What are the 27 first values?
         #+begin_src R :results output :session :exports both
           df[1:30,]
         #+end_src

         #+RESULTS:
         #+begin_example
            x_component_number vector_length y_component_number temporary_size
         1                   2             2                  4              2
         2                   1             1                  3              4
         3                   2             2                  4              2
         4                   1             1                  4              4
         5                   1             1                  4              4
         6                   1             1                  4              2
         7                   2             2                  4              2
         8                   1             1                  4              4
         9                   1             1                  4              4
         10                  2             2                  3              4
         11                  1             1                  4              4
         12                  2             1                  4              2
         13                  1             1                  4              4
         14                  1             1                  4              4
         15                  2             2                  4              2
         16                  1             1                  4              4
         17                  1             1                  4              4
         18                  4             4                  4              2
         19                  1             1                  4              4
         20                  1             1                  3              4
         21                  1             1                  4              4
         22                  2             1                  4              2
         23                  4             4                  4              2
         24                  2             1                  4              2
         25                  1             1                  4              2
         26                  1             1                  4              4
         27                  4             4                  4              2
         28                  2             2                  4              2
         29                  2             2                  4              2
         30                  4             2                  4              2
            vector_recompute load_overlap local_work_size time_per_pixel
         1              true         true     [128, 1, 1]   1.454573e-10
         2              true         true     [256, 1, 1]   1.355607e-10
         3              true         true      [64, 2, 1]   1.471981e-10
         4              true         true      [64, 2, 1]   1.257774e-10
         5              true         true      [64, 2, 1]   1.257774e-10
         6              true         true     [256, 1, 1]   1.273354e-10
         7              true         true      [32, 4, 1]   1.505876e-10
         8              true         true      [64, 2, 1]   1.257774e-10
         9              true         true      [32, 8, 1]   1.264051e-10
         10             true         true      [64, 2, 1]   1.592123e-10
         11             true         true      [64, 4, 1]   1.279253e-10
         12             true         true      [64, 2, 1]   1.479930e-10
         13             true         true     [128, 2, 1]   1.246651e-10
         14             true         true     [128, 2, 1]   1.246651e-10
         15             true         true      [64, 2, 1]   1.471981e-10
         16             true         true     [256, 1, 1]   1.264519e-10
         17             true         true      [32, 8, 1]   1.264051e-10
         18             true         true      [64, 1, 1]   1.575745e-10
         19             true         true      [32, 8, 1]   1.264051e-10
         20             true         true      [64, 4, 1]   1.367711e-10
         21             true         true     [128, 2, 1]   1.246651e-10
         22             true         true      [64, 2, 1]   1.479930e-10
         23             true         true      [64, 1, 1]   1.575745e-10
         24             true         true      [64, 4, 1]   1.481575e-10
         25             true         true     [256, 1, 1]   1.273354e-10
         26             true         true     [128, 2, 1]   1.246651e-10
         27             true         true      [64, 1, 1]   1.575745e-10
         28             true         true      [64, 2, 1]   1.471981e-10
         29             true         true      [64, 4, 1]   1.465162e-10
         30             true         true     [128, 2, 1]   1.593550e-10
         #+end_example


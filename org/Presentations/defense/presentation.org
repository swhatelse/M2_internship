# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer
#+STARTUP: overview
#+STARTUP: indent
#+TAGS: noexport(n)
#+LANGUAGE: en

#+Title: Semi-Automatic Performance Optimization of HPC Kernels
#+AUTHOR:      Steven QUINITO MASNADA

#+EPRESENT_FRAME_LEVEL: 2

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [11pt,xcolor=dvipsnames,presentation]
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t

#+LATEX_HEADER: \usedescriptionitemofwidthas{bl}
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[american]{babel}
#+LATEX_HEADER: \usepackage{ifthen,figlatex,amsmath,amstext,gensymb,amssymb}
#+LATEX_HEADER: \usepackage{boxedminipage,xspace,multicol}
#+LATEX_HEADER: %%%%%%%%% Begin of Beamer Layout %%%%%%%%%%%%%
#+LATEX_HEADER: \ProcessOptionsBeamer
#+latex_header: \mode<beamer>{\usetheme{Madrid}}
#+LATEX_HEADER: \usecolortheme{whale}
#+LATEX_HEADER: \usecolortheme[named=BrickRed]{structure}
# #+LATEX_HEADER: \useinnertheme{rounded}
#+LATEX_HEADER: \useoutertheme{infolines}
#+LATEX_HEADER: \setbeamertemplate{footline}[frame number]
#+LATEX_HEADER: \setbeamertemplate{headline}[default]
#+LATEX_HEADER: \setbeamertemplate{navigation symbols}{}
#+LATEX_HEADER: \defbeamertemplate*{headline}{info theme}{}
#+LATEX_HEADER: \defbeamertemplate*{footline}{info theme}{\leavevmode%
#+LATEX_HEADER:   \hbox{%
#+LATEX_HEADER:     \begin{beamercolorbox}[wd=.5\paperwidth,ht=2.25ex,dp=1ex,center]{author in head/foot}%
#+LATEX_HEADER:       \usebeamerfont{author in head/foot}\insertshortauthor
#+LATEX_HEADER:     \end{beamercolorbox}%
#+LATEX_HEADER:   \begin{beamercolorbox}[wd=.41\paperwidth,ht=2.25ex,dp=1ex,center]{title in head/foot}%
#+LATEX_HEADER:     \usebeamerfont{title in head/foot}\insertsectionhead
#+LATEX_HEADER:   \end{beamercolorbox}%
#+LATEX_HEADER:   \begin{beamercolorbox}[wd=.09\paperwidth,ht=2.25ex,dp=1ex,right]{section in head/foot}%
#+LATEX_HEADER:     \usebeamerfont{section in head/foot}\insertframenumber{}~/~\inserttotalframenumber\hspace*{2ex} 
#+LATEX_HEADER:   \end{beamercolorbox}
#+LATEX_HEADER:   }\vskip0pt}
#+LATEX_HEADER: \setbeamertemplate{footline}[info theme]
#+LATEX_HEADER: %%%%%%%%% End of Beamer Layout %%%%%%%%%%%%%
#+LATEX_HEADER: \usepackage{verbments}
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{url} \urlstyle{sf}

#+LATEX_HEADER: \let\alert=\structure % to make sure the org * * works of tools
#+BEAMER_FRAME_LEVEL: 2

#+LATEX_HEADER: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}}

#+LATEX_HEADER: %\usepackage{biblatex}
# #+LATEX_HEADER: \bibliography{../../biblio.bib}
# #+LATEX_HEADER: \usepackage{cite}

#+LATEX_HEADER:   \institute{POLARIS and CORSE teams/LIG\\Under the supervision of A. LEGRAND, B. VIDEAU and F.DESPREZ}

* General presentation
*** The performance optimization challenge
- Scientific applications \to computation power hungry 
- HPC platforms \to complicated and unique machines
  - Many cores
  - Different cache hierarchy
  - Pipelining / Instruction Level Parallelism
  - Vector support
  - GPUs
  - etc
- Have to be program with care to exploit the available power.
- Specialized code \to hinder portability
*** Code generation and opportunities - Compilers
- Re-arrange order of instruction \to better usage of the pipeline
- Loop transformation / automatic parallelization \to threading and
  vectorization
- But limited in several aspects: 
  - Applications still have to be program with care to facilitate
    compiler job
  - Semantic rules
  - Lack of information (either because not available at run-time or
    because of the language), no global vision.
  - Choice of transformations
*** Code generation and opportunities - Source-to-source transformation frameworks
- Performs transformation instead of the compiler 
- Presents a code the compiler can easily work with \to less burden for
  the developer
- Allows to specify the type of transformation wanted and ensures its
  validity 
- Generally limited to one target language \to no C to OpenCL / CUDA
*** Code generation and opportunities - Meta-programming frameworks
- Higher level approach \to describe computation and optimization using
  high level languages
- Multiple language targets
- Developer has even more control on the transformation but can be
  error prone.
- BOAST:
  - C, Fortran, CUDA, OpenCL
  - Complete tool chain:
    - Code generation
    - Verification
    - Compilation
    - Benchmark
*** Problem analysis
- Huge search space
- Mathematical optimization problem:
  #+BEGIN_LaTeX
  \[ \displaystyle\min_{x} {f(\vec{x}): \vec{x} \in \mathcal{D} \subset \!R^{n} } \]
  #+END_LaTeX
- Empirical function \to evaluation costly
- Discrete or Continuous
- Constraints
*** Generally used methods
- RS
- LHS
- GS
- GSR
- GA
* Contribution
** Design and prototype of a new approach
*** Code                                                         :noexport:
#+begin_src sh :results output :exports none
  ruby ../../../scripts/format_data.rb ../../../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file ./img/combinations_index.pdf :exports none :width 6 :height 4 :session
  df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
  library(ggplot2)
  ggplot(df) +
      aes(x=seq(1,nrow(df)), y=time_per_pixel) +
      geom_point(alpha=0.5) +
      labs(x="Combination indexes", y="Time per pixel in s")
#+end_src

#+RESULTS:
[[file:./img/combinations_index.pdf]]

#+begin_src R :results output graphics :file ./img/combinations_sorted.pdf :exports none :width 6 :height 4 :session
  library(ggplot2)
  df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
  df1 <- df[order(df$vector_length, df$lws_y, df$threads_number, df$y_component_number, df$elements_number, df$temporary_size, df$load_overlap),]         
  ggplot(df1) +
      aes(x=seq(1,nrow(df1)), y=time_per_pixel) +
      #aes(x=seq(1,nrow(df1)), y=time_per_pixel, shape=factor(vector_length), color=lws_y) +
      geom_point(alpha=0.5) +
      labs(x="Combination indexes", y="Time per pixel in s")
#+end_src

#+RESULTS:
[[file:./img/combinations_sorted.pdf]]
*** Principle
#+BEGIN_LaTeX
\begin{figure}[tbh]
\centering
\includegraphics[width=.8\linewidth]{../../Report/Project-report-template/img/process.pdf}
\end{figure}
#+END_LaTeX
*** Finding the structure of the problem
#+BEGIN_LaTeX
\begin{figure}[]
\centering
\includegraphics[width=\linewidth]{./img/combinations_index.pdf}
\end{figure}
#+END_LaTeX
*** Finding the structure of the problem
#+BEGIN_LaTeX
\begin{figure}[]
\centering
\includegraphics[width=\linewidth]{./img/combinations_sorted.pdf}
\end{figure}
#+END_LaTeX
** Methodology
*** Reproducible research
- Github repository \to publicly available on github
- Laboratory book:
  - Literate programming org-mode + R
  - Code, experiments, and detailed analysis
  - 33K lines including 17K lines which are code analysis
- Every experiments are logged and also available
*** Case study: A Laplacian kernel
- Kernel parameters:
     | Parameters         | Values                            |
     |--------------------+-----------------------------------|
     | /                  | <                                 |
     | vector_length      | 1,2,4,8,16                        |
     | load_overlap       | true,false                        |
     | temporary_size     | 2,4                               |
     | elements_number    | from 1 to 24                      |
     | y_component_number | from 1 to 6                       |
     | threads_number     | 32,64,128,256,512,1024            |
     | local_work_size_y  | 1,2,4,8,16,32,64,128,256,512,1024 |

- 190080 variants \to 23120 due to constraints
- Using OpenCL on a GPU Nvidia K40c 
** Experiment
*** Code                                                         :noexport:
**** Results
#+begin_src sh :results output :exports none
  ruby ../../../scripts/format_data.rb ../../../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file ./img/results_hist.pdf :exports none :width 6 :height 5 :session
  df_all_methods <- read.csv("../../../data/2016_04_08/pilipili2/18_08_24/all_search_1000.csv", strip.white=T, header=T)  
  library(ggplot2)
  library(plyr)

  df_all_methods$method <- factor(df_all_methods$method, levels = c("RS","LHS","GS","GSR","GA","LM","RQ"))

  df_mean = ddply(df_all_methods,.(method), summarize, 
                  mean = mean(slowdown))

  df_median = ddply(df_all_methods,.(method), summarize, 
                    median = median(slowdown))

  df_err = ddply(df_all_methods,.(method), summarize,
                 mean = mean(slowdown), err = 2*sd(slowdown)/sqrt(length(slowdown)))

  df_max = ddply(df_all_methods,.(method), summarize, max = max(slowdown))

  ggplot(df_all_methods ) + 
      facet_grid(method~.) +
      theme_bw() +
      coord_cartesian(xlim=c(.9,4), ylim=c(0,1000)) +
      geom_histogram(aes(slowdown),binwidth=.05, fill="gray48") +
      geom_curve(data=df_max, aes(x=max+.1, y=500, xend=max, yend=5), arrow = arrow(length = unit(0.05, "npc")), curvature=0.3) +
      geom_text( aes(x=max+.2,y=550,label="max"),data=df_max ) +
      geom_rect(data = df_err, aes(xmin=mean-err, xmax=mean+err, ymin=0, ymax=1000, fill="red"), alpha=0.3) +
      geom_vline( aes(xintercept = median), df_median, color="darkgreen", linetype=3 ) +
      geom_vline( aes(xintercept = mean), df_mean, color="red", linetype=2 ) +
      labs(y="Frequency", x="Slowdown compared to the optimal solution") +
      scale_fill_discrete(name="",breaks=c("red"), labels=c("Mean\nerror")) +
      ggtitle("") + 
      theme(legend.position="right")
#+end_src

#+RESULTS:
[[file:./img/results_hist.pdf]]

 
*** Protocol
- Measures: 1000
- Maximal budget: 120
- Methods: RS, LHS, GS, GSR, GA, LM and RQ
- Automatization of LM and RQ \to using same strategy each time
*** Results
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.55\linewidth]{./img/results_hist.pdf}
\end{figure}
#+END_LaTeX

#+BEGIN_LaTeX
\tiny\tiny\tiny
#+END_LaTeX
| Method |  Min. | 1st Qu. | Median | 3rd Qu. |    Max. |  Mean | Mean Cost |
|--------+-------+---------+--------+---------+---------+-------+-----------|
| /      |    <> |      <> |     <> |      <> |      <> |    <> |           |
| RS     | 1.000 |   1.027 |  1.079 |   1.178 |   1.388 | 1.102 |       120 |
| LHS    | 1.000 |   1.087 |  1.188 |   1.244 |   1.524 | 1.175 |    98.918 |
| GS     | 1.000 |   1.348 |  1.799 |   6.314 | 124.800 | 6.460 |    22.171 |
| GSR    | 1.000 |   1.072 |  1.187 |   1.333 |   3.164 | 1.227 |       120 |
| GA     | 1.000 |   1.018 |  1.086 |   1.187 |   1.646 | 1.118 |       120 |
| LM     | 1.012 |   1.012 |  1.012 |   1.012 |   3.771 | 1.022 |       119 |
| RQ     | 1.012 |   1.012 |  1.012 |   1.012 |   2.064 | 1.019 |       119 |

** Analysis
*** Characteristics of the search space: Combination distributions
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.35\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/search_combination_rep_slowdown.pdf}
\end{minipage}
\hfil
\begin{minipage}{.35\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/search_combination_rep_slowdown_zoom.pdf}
\end{minipage}
\end{figure}
#+END_LaTeX   

#+BEGIN_LaTeX
\tiny
#+END_LaTeX

| Min  | 1st Q. | Median | Mean   | 3rd Q. |     Max |
|------+--------+--------+--------+--------+---------|
| /    | <>     | <>     | <>     | <>     |         |
| 1.00 | 2.599  | 6.116  | 17.276 | 17.177 | 382.168 |

*** Characteristics of the search space: Structured
# That is why our approach worked
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/heteroscedasticity_v_len.pdf}
\end{minipage}
\hfill
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/heteroscedasticity_x_comp.pdf}
\end{minipage}
\end{figure}
#+END_LaTeX   

*** Least square regression vs quantile regression
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/lm_v_len.pdf}
\end{minipage}
\hfill
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/lm_x_comp.pdf}
\end{minipage}
\end{figure}
#+END_LaTeX
*** Least square regression vs quantile regression
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/why_we_choose_quantile_reg_v_len.pdf}
\end{minipage}
\hfill
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/why_we_choose_quantile_reg_x_comp.pdf}
\end{minipage}
\end{figure}
#+END_LaTeX
*** LM: Success and "failures" - $R^{2}$, standard errors and p-values
- Worst case:
#+BEGIN_LaTeX
\tiny
#+END_LaTeX
    |               |       Coef | Std. err. | p-values |
    |---------------+------------+-----------+----------|
    | /             |         <> |        <> |        < |
    | vector_length | -2.316e-11 | 5.953e-11 |  0.69904 |
    | lws y         |  5.572e-12 | 1.625e-12 |  0.00127 |

#+BEGIN_LaTeX
\normalsize
#+END_LaTeX
- Good case:
#+BEGIN_LaTeX
\tiny
#+END_LaTeX
    |               |      Coef | Std. err. | p-values |
    |---------------+-----------+-----------+----------|
    | /             |        <> |        <> |        < |
    | vector length | 8.794e-11 | 3.025e-11 |  0.00555 |
    | lws y         | 1.987e-11 | 2.882e-12 | 1.18e-08 |
#+BEGIN_LaTeX
\normalsize
#+END_LaTeX
- Lucky case:
#+BEGIN_LaTeX
\tiny
#+END_LaTeX
    |               |      Coef | Std. err. | p-values |
    |---------------+-----------+-----------+----------|
    | /             |        <> |        <> |        < |
    | vector_length | 1.438e-10 | 8.941e-11 |  0.11453 |
    | lws y         | 1.507e-11 | 4.596e-12 |  0.00197 |

*** LM: Success and "failures" - Predictions vs observations
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.30\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/bad_prediction.pdf}
\end{minipage}
\hfil
\begin{minipage}{.30\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/good_prediction.pdf}
\end{minipage}
\hfil
\begin{minipage}{.30\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/lucky_prediction.pdf}
\end{minipage}
\end{figure}
#+END_LaTeX
* Technical difficulties
** Constrained  and discrete search space
*** Model optimization
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/search_space_3D.pdf}
\end{minipage}
\hfill
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/search_space_3D_constrained_ugly.pdf}
\end{minipage}
\end{figure}
#+END_LaTeX
*** Model optimization
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/search_space_3D_constrained.pdf}
\end{minipage}
\hfill
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/search_space_3D_barrier.pdf}
\end{minipage}
\end{figure}
#+END_LaTeX
*** Sampling techniques: Screening design
*** Sampling techniques: LHS
** Quantile regression
*** Quantile regression
* Conclusion
*** Summary
*** Future work
*** This is the end
Thanks for your attention.
*** LM: Improving worst case
*** Controlling measurements: Warm-up effect
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\includegraphics[height=.8\textheight]{../../Report/Project-report-template/img/warm_up.pdf}
\end{figure}
#+END_LaTeX
* Emacs Setup 							   :noexport:
  This document has local variables in its postembule, which should
  allow Org-mode to work seamlessly without any setup. If you're
  uncomfortable using such variables, you can safely ignore them at
  startup. Exporting may require that you copy them in your .emacs.

# Local Variables:
# eval:    (require 'org-install)
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (sh . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (unless (boundp 'org-latex-classes) (setq org-latex-classes nil))
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:   (setq org-export-babel-evaluate nil)
# eval:   (setq ispell-local-dictionary "english")
# eval:   (eval (flyspell-mode t))
# eval:    (setq org-latex-listings 'minted)
# eval:    (setq org-latex-minted-options '(("bgcolor" "white") ("style" "tango") ("numbers" "left") ("numbersep" "5pt")))
# End:

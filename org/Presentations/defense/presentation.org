# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer
#+STARTUP: overview
#+STARTUP: indent
#+TAGS: noexport(n)
#+LANGUAGE: en

#+Title: Semi-Automatic Performance Optimization of HPC Kernels
#+AUTHOR:      Steven QUINITO MASNADA

#+EPRESENT_FRAME_LEVEL: 2

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [11pt,xcolor=dvipsnames,presentation]
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t

#+LATEX_HEADER: \usedescriptionitemofwidthas{bl}
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[american]{babel}
#+LATEX_HEADER: \usepackage{ifthen,figlatex,amsmath,amstext,gensymb,amssymb}
#+LATEX_HEADER: \usepackage{boxedminipage,xspace,multicol}
#+LATEX_HEADER: %%%%%%%%% Begin of Beamer Layout %%%%%%%%%%%%%
#+LATEX_HEADER: \ProcessOptionsBeamer
#+latex_header: \mode<beamer>{\usetheme{Madrid}}
#+LATEX_HEADER: \usecolortheme{whale}
#+LATEX_HEADER: \usecolortheme[named=BrickRed]{structure}
# #+LATEX_HEADER: \useinnertheme{rounded}
#+LATEX_HEADER: \useoutertheme{infolines}
#+LATEX_HEADER: \setbeamertemplate{footline}[frame number]
#+LATEX_HEADER: \setbeamertemplate{headline}[default]
#+LATEX_HEADER: \setbeamertemplate{navigation symbols}{}
#+LATEX_HEADER: \defbeamertemplate*{headline}{info theme}{}
#+LATEX_HEADER: \defbeamertemplate*{footline}{info theme}{\leavevmode%
#+LATEX_HEADER:   \hbox{%
#+LATEX_HEADER:     \begin{beamercolorbox}[wd=.5\paperwidth,ht=2.25ex,dp=1ex,center]{author in head/foot}%
#+LATEX_HEADER:       \usebeamerfont{author in head/foot}\insertshortauthor
#+LATEX_HEADER:     \end{beamercolorbox}%
#+LATEX_HEADER:   \begin{beamercolorbox}[wd=.41\paperwidth,ht=2.25ex,dp=1ex,center]{title in head/foot}%
#+LATEX_HEADER:     \usebeamerfont{title in head/foot}\insertsectionhead
#+LATEX_HEADER:   \end{beamercolorbox}%
#+LATEX_HEADER:   \begin{beamercolorbox}[wd=.09\paperwidth,ht=2.25ex,dp=1ex,right]{section in head/foot}%
#+LATEX_HEADER:     \usebeamerfont{section in head/foot}\insertframenumber{}~/~\inserttotalframenumber\hspace*{2ex} 
#+LATEX_HEADER:   \end{beamercolorbox}
#+LATEX_HEADER:   }\vskip0pt}
#+LATEX_HEADER: \setbeamertemplate{footline}[info theme]
#+LATEX_HEADER: %%%%%%%%% End of Beamer Layout %%%%%%%%%%%%%
#+LATEX_HEADER: \usepackage{verbments}
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{url} \urlstyle{sf}
#+LATEX_HEADER: \usepackage{appendixnumberbeamer}
#+LATEX_HEADER: \usepackage{multicol}

#+LATEX_HEADER: \let\alert=\structure % to make sure the org * * works of tools
#+BEAMER_FRAME_LEVEL: 2

#+LATEX_HEADER: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Talk Outline}\tableofcontents[currentsection]\end{frame}}

#+LATEX_HEADER: %\usepackage{biblatex}
# #+LATEX_HEADER: \bibliography{../../biblio.bib}
# #+LATEX_HEADER: \usepackage{cite}

#+LATEX_HEADER:   \institute{POLARIS and CORSE teams/LIG\\Under the supervision of A. LEGRAND, B. VIDEAU and F. DESPREZ}
#+LATEX_HEADER: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Talk Outline}\tableofcontents[currentsection]\end{frame}}

#+BEGIN_LaTeX
\newcommand{\backupbegin}{
   \newcounter{finalframe}
   \setcounter{finalframe}{\value{framenumber}}
}
\newcommand{\backupend}{
   \setcounter{framenumber}{\value{finalframe}}
}
#+END_LaTeX

#+BEGIN_LaTeX
\setbeamertemplate{caption}{\raggedright\insertcaption\par}
#+END_LaTeX


*** Facing the Increasing Complexity of HPC Platforms
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.6\linewidth]{./img/HPC_v4.pdf}
\end{figure}
#+END_LaTeX

#+BEGIN_LaTeX
\small
#+END_LaTeX
 - Scientific applications \to increasing need for computing power
- Supercomputers become bigger and bigger and more complex
- *Exploiting* correctly their *power* is crucial but very *complicated*
- Avoid spending months porting applications on new platforms
  (recompiling is not enough)

#+BEGIN_LaTeX
\normalsize
#+END_LaTeX
*** Optimization of Scientific Applications
- Compute intensive \to *focus on kernels* optimization
- Doing it by hand \to neither scalable nor portable
**** Code generation tools: 
  - Write portable kernels code by *describing many possible optimization* 
  - *Generate specialized code variants* to match the underlying
    architecture 
- Auto-tuning approach \to find high performing variants for a given
  platform. 

*** Why is performances optimization complicated?                :noexport:
**** Structure                                                  :noexport:
- Scientific applications \to computation power hungry 
- HPC platforms \to complicated and unique machines
- They have multiple characteristics:
  - Many cores \to parallelizing efficiently is difficult
  - Different cache hierarchy \to achieving good data locality \to using
    good memory access patterns
  - Pipeline / Instruction Level Parallelism \to maximize occupancy \to
    order of the instructions
  - Vector support \to saving decoding phase
  - GPUs \to a different way of programming than CPUs
    - Different cache size and organization
    - Mapping computation suited to graphic pipeline.
  - etc, ...
The user has to: paralellize, vectorize, access data carefully, take
care about the order of the instruction, etc... \to turns out to be a really
nightmare.
- Targeting the underlying hardware = specialized code \to porting even
  more difficult

****  
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <1>
:END:
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.9\linewidth]{./img/HPC1.pdf}
\end{figure}
#+END_LaTeX

****  
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <2>
:END:
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.9\linewidth]{./img/HPC_v2.pdf}
\end{figure}
#+END_LaTeX

****  
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <3>
:END:
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.9\linewidth]{./img/HPC_v2_1.pdf}
\end{figure}
#+END_LaTeX

****  
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <4>
:END:
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.9\linewidth]{./img/HPC_v2_2.pdf}
\end{figure}
#+END_LaTeX

****  
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <5>
:END:
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.9\linewidth]{./img/HPC_v2_3.pdf}
\end{figure}
#+END_LaTeX

****  
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <6>
:END:
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.9\linewidth]{./img/HPC_v2_4.pdf}
\end{figure}
#+END_LaTeX

****  
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <7>
:END:
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.9\linewidth]{./img/HPC_v2_4.pdf}
\end{figure}
#+END_LaTeX

#+LaTeX: \begin{overlayarea}{\linewidth}{0cm}\vspace{-7.0cm}\begin{block}{}
  - Complicated and time consuming task
  - Specialized code \to porting is even more difficult
#+LaTeX: \end{block}\end{overlayarea}

****                                                            :noexport:

*****  
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <7>
:END:
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.9\linewidth]{./img/HPC7.pdf}
\end{figure}
#+END_LaTeX

*****  
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <8>
:END:
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.9\linewidth]{./img/HPC8.pdf}
\end{figure}
#+END_LaTeX

*****  
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <10>
:END:
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.9\linewidth]{./img/HPC9.pdf}
\end{figure}
#+END_LaTeX

#+LaTeX: \begin{overlayarea}{\linewidth}{0cm}\vspace{-7.0cm}\begin{block}{}
  - Optimization complicated \to need to be programmed with care
  - Specialized code \to target machine \to hinder portability
#+LaTeX: \end{block}\end{overlayarea}

*****  
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <9>
:END:
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.9\linewidth]{./img/HPC9.pdf}
\end{figure}
#+END_LaTeX
  
*** Code generation                                              :noexport:
Tools exist to help the developer:
  - Write relevant optimization \to generic code
  - Using parameters generate specialized variant 
**** Compilers
***** 
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <2>
:END:
- Transformation :
  - To make better use of the pipeline
  - To paralellize or vectorize 
- Limited by
  - Semantic rules
  - Lack of information at compile time, no global vision of the code
  - Choice of the transformation \to does not look for the best one but
    the one which respect the semantic
  - Still need to be programmed with care

**** Source-to-source transformation frameworks
***** 
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <3>
:END:
- Performs transformation instead of the compiler 
- Allows to specify which of transformation wanted \to e.g.,
  loop-unroll degree
- Ensures its validity 
- Yields a code that the compiler can easily work with \to less burden for
  the developer
- But generally limited:
  - To one target language \to no C to OpenCL / CUDA
  - Still limited by some semantic rules

**** Meta-programming frameworks
***** 
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <4>
:END:
- Describe computation and optimization using high level languages
- Multiple language targets (e.g., python, ruby)
- Developer has even more control on the transformation \to try
  optimization that no compiler would be able to do.
- But:
  - Can be error prone
  - Need to re-write part of the application

*** Problem Analysis
#+BEGIN_LaTeX
\small
#+END_LaTeX
- *Huge search space* (e.g., GCC \approx 500 compilations flags \to $2^{500}$ combinations) \to +exhaustive search+
- Auto-tuning considers this as a *mathematical optimization* problem:
  #+BEGIN_LaTeX
  \[ \displaystyle\min_{x} {f(\vec{x}): \vec{x} \in \mathcal{D} \subset \!R^{n} } \]
  #+END_LaTeX
# *** Problem analysis: Objective function
   #+BEGIN_LaTeX
   \vspace{-0.7cm}\begin{figure}[!htb]
   \centering

   \begin{minipage}{.30\linewidth}
   \includegraphics[width=\linewidth]{../../Report/Project-report-template/img/convex_function.pdf}
   \vspace{-0.5cm}\caption{Convex}
   \end{minipage}
   \hfil
   \begin{minipage}{.30\linewidth}
   \includegraphics[width=\linewidth]{../../Report/Project-report-template/img/non_convex_function.pdf}
   \vspace{-0.5cm}\caption{Multiple local optimum}
   \end{minipage}

   \vspace{-0.5cm}
   \begin{minipage}{.30\linewidth}
   \includegraphics[width=\linewidth]{../../Report/Project-report-template/img/non_smooth_function.pdf}
   \vspace{-0.5cm}\caption{Non-smooth}
   \end{minipage}
   \hfil
   \begin{minipage}{.30\linewidth}
   \includegraphics[width=\linewidth]{../../Report/Project-report-template/img/auto_tuning_function.pdf}
   \vspace{-0.5cm}\caption{Auto-tuning}
   \end{minipage}
   \end{figure}
   #+END_LaTeX
# - Empirical function \to evaluation costly
# - Discrete or Continuous
# - Constraints
*** Generally Used Methods
   # #+BEGIN_LaTeX
   # \begin{figure}[htb]
   # \centering
   # \begin{minipage}{.45\linewidth}
   # \includegraphics[width=\linewidth]{../../Report/Project-report-template/img/DoE_examples_RS.pdf}
   # \end{minipage}
   # \begin{minipage}{.45\linewidth}
   # \includegraphics[width=\linewidth]{../../Report/Project-report-template/img/DoE_examples_LHS.pdf}
   # \end{minipage}
   # \end{figure}
   # #+END_LaTeX    

- Random Search 
   #+BEGIN_LaTeX
   \only<1>{
   \begin{figure}[htb]
   \centering
   \begin{minipage}{.45\linewidth}
   \includegraphics[width=\linewidth]{../../Report/Project-report-template/img/DoE_examples_RS.pdf}
   \end{minipage}
   \end{figure}
   }
   #+END_LaTeX
- Latin Hyper Square
   #+BEGIN_LaTeX
   \only<2>{
   \begin{figure}[htb]
   \centering
   \begin{minipage}{.45\linewidth}
   \includegraphics[width=\linewidth]{../../Report/Project-report-template/img/DoE_examples_LHS.pdf}
   \end{minipage}
   \end{figure}
   }
   #+END_LaTeX
- Local search \to Greedy Search
   #+BEGIN_LaTeX
   \only<3>{
   \begin{figure}[htb]
   \centering
   \begin{minipage}{.45\linewidth}
   \includegraphics[width=\linewidth]{img/Gradient_descent.png}
   \end{minipage}
   \end{figure}
   }
   #+END_LaTeX
- Multiple local search \to Greedy Search + Restart
- Genetic Algorithms

**** 
:PROPERTIES:
:BEAMER_env: block
:BEAMER_act: <4>
:END:
- Efficiency of a method depends the characteristics of the search space
- Fully automatic approach \to black box and *user excluded*
- But the application is *not a black box* for the user \to
  exploit his knowledge of the kernel.

* Design and Prototype of a New Approach
*** Code                                                         :noexport:
#+begin_src sh :results output :exports none
  ruby ../../../scripts/format_data.rb ../../../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file ./img/combinations_index.pdf :exports none :width 6 :height 4 :session
  df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
  library(ggplot2)
  ggplot(df) +
      aes(x=seq(1,nrow(df)), y=time_per_pixel) +
      geom_point(alpha=0.5) +
      labs(x="Combination indexes", y="Time per pixel in s")
#+end_src

#+RESULTS:
[[file:./img/combinations_index.pdf]]

#+begin_src R :results output graphics :file ./img/combinations_sorted.pdf :exports none :width 6 :height 4 :session
  library(ggplot2)
  df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
  df1 <- df[order(df$vector_length, df$lws_y, df$threads_number, df$y_component_number, df$elements_number, df$temporary_size, df$load_overlap),]         
  ggplot(df1) +
      aes(x=seq(1,nrow(df1)), y=time_per_pixel) +
      #aes(x=seq(1,nrow(df1)), y=time_per_pixel, shape=factor(vector_length), color=lws_y) +
      geom_point(alpha=0.5) +
      labs(x="Combination indexes", y="Time per pixel in s")
#+end_src

#+RESULTS:
[[file:./img/combinations_sorted.pdf]]
*** Principle
**** Involve the user in the optimization process
  - give him valuable feedback
  - guide him and allow him to guide the tuning process
**** Based on:
  - Design of experiments \to investigate the search at a minimal
    experimental cost
  - Linear regression:
    - interpret information to reveal the structure of the search
      space
    - predict the best combinations of parameters
*** Semi-automatic performance tuning
# Ajouter fleche pour indiquer aspect iteratif \to need for six
# 1. *Sample* the search space according to the user's needs
# 2. Apply linear regression (keeping the model *as simple as possible*):
#    - Find relevant parameters and *remove useless ones* 
#    - Refine the model by *checking hypothesis*
#    - If not satisfied \to additional points needed \to back to 1
# 3. Instantiate the model to predict best values of significant
#    parameters only
# 4. Prune the search space \to by fixing these parameters
# 5. Re-inject unused parameters
# 6. Back to 1 until all parameters are estimated


#+BEGIN_LaTeX
\begin{figure}[tbh]
\centering
\includegraphics[width=.8\linewidth]{./img/process.pdf}
\end{figure}
#+END_LaTeX
* Methodology
*** Reproducible research
- Publicly available on Github!
- Lab book:
  - Code, experiments, and detailed analysis
  - Literate programming, emacs org-mode, Ruby and R
  - *33K lines* including 17K lines which are code and analysis
- All experiments are logged and also available
*** BOAST
  - Ruby-based meta-programming framework
  - C, Fortran, CUDA, OpenCL
  - Complete tool chain: 
    - Code generation
    - Compilation 
    - Verification 
    - Benchmark
*** Case study: A Laplacian kernel
- Time to compute a pixel
- Kernel parameters:
     | Parameters         | Values                            |
     |--------------------+-----------------------------------|
     | /                  | <                                 |
     | /vector_length/      | 1,2,4,8,16                        |
     | /load_overlap/       | true,false                        |
     | /temporary_size/     | 2,4                               |
     | /elements_number/    | from 1 to 24                      |
     | /y_component_number/ | from 1 to 6                       |
     | /threads_number/     | 32,64,128,256,512,1024            |
     | /local_work_size_y/  | 1,2,4,8,16,32,64,128,256,512,1024 |

- 190080 variants \to 23120 due to constraints \approx 6.7 days
- GPU Nvidia K40c and OpenCL 
* Experiment and Analysis
*** Code                                                         :noexport:
**** Results
#+begin_src sh :results output :exports none
  ruby ../../../scripts/format_data.rb ../../../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file ./img/results_hist.pdf :exports none :width 8 :height 8 :session
  df_all_methods <- read.csv("../../../data/2016_04_08/pilipili2/18_08_24/all_search_1000.csv", strip.white=T, header=T)  
  library(ggplot2)
  library(plyr)

  df_all_methods$method <- factor(df_all_methods$method, levels = c("RS","LHS","GS","GSR","GA","LM","RQ"))

  df_mean = ddply(df_all_methods,.(method), summarize, 
                  mean = mean(slowdown))

  df_median = ddply(df_all_methods,.(method), summarize, 
                    median = median(slowdown))

  df_err = ddply(df_all_methods,.(method), summarize,
                 mean = mean(slowdown), err = 2*sd(slowdown)/sqrt(length(slowdown)))

  df_max = ddply(df_all_methods,.(method), summarize, max = max(slowdown))

  ggplot(df_all_methods ) + 
      facet_grid(method~.) +
      theme_bw() +
      coord_cartesian(xlim=c(.9,4), ylim=c(0,1000)) +
      geom_histogram(aes(slowdown),binwidth=.05, fill="gray48") +
      geom_curve(data=df_max, aes(x=max+.1, y=500, xend=max, yend=5), arrow = arrow(length = unit(0.05, "npc")), curvature=0.3) +
      geom_text( aes(x=max+.2,y=550,label="max"),data=df_max ) +
      geom_rect(data = df_err, aes(xmin=mean-err, xmax=mean+err, ymin=0, ymax=1000, fill="red"), alpha=0.3) +
      geom_vline( aes(xintercept = median), df_median, color="darkgreen", linetype=3 ) +
      geom_vline( aes(xintercept = mean), df_mean, color="red", linetype=2 ) +
      labs(y="Frequency", x="Slowdown compared to the optimal solution") +
      scale_fill_discrete(name="",breaks=c("red"), labels=c("Mean\nerror")) +
      ggtitle("") + 
      theme(legend.position="right")
#+end_src

#+RESULTS:
[[file:./img/results_hist.pdf]]

**** Distribution combination
#+begin_src sh :results output :exports none
     ruby ../../../scripts/format_data.rb ../../../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml
   #+end_src

   #+RESULTS:

   #+begin_src R :results output graphics :file ./img/search_combination_rep_slowdown.pdf :exports results :width 4 :height 6 :session
     library(ggplot2)

     df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

     slowdown <-  df$time_per_pixel / min(df$time_per_pixel)
     df$slowdown <- slowdown

     ggplot(data=df) +
         geom_histogram(aes(x=slowdown,y=..density.. * 0.05), binwidth=.05) +
         theme_bw() +
         theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
         geom_vline(xintercept = median(slowdown), color="darkgreen", linetype=2) +
         geom_vline(xintercept = quantile(slowdown, prob=c(0.25)), color="blue", linetype=2) +
         geom_vline(xintercept = quantile(slowdown, prob=c(0.75)), color="cyan3", linetype=2) +
         geom_vline(xintercept = mean(slowdown), color="red", linetype=2) +
         labs(y="Frequency", x="Slowdown")

   #+end_src

   #+RESULTS:
   [[file:./img/search_combination_rep_slowdown.pdf]]

   #+begin_src R :results output graphics :file ./img/search_combination_rep_slowdown_zoom.pdf :exports both :width 4 :height 6 :session
     ggplot(data=df) +
         geom_histogram(aes(x=slowdown,y=..density.. * 0.05), binwidth=.05) +
         theme_bw() +
         theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
         geom_vline(xintercept = median(slowdown), color="darkgreen", linetype=2) +
         geom_vline(xintercept = quantile(slowdown, prob=c(0.25)), color="blue", linetype=2) +
         geom_vline(xintercept = quantile(slowdown, prob=c(0.75)), color="cyan3", linetype=2) +
         geom_vline(xintercept = mean(slowdown), color="red", linetype=2) +
         coord_cartesian(xlim=c(.9,17)) +
         labs(y="Frequency", x="Slowdown")
   #+end_src

   #+RESULTS:
   [[file:./img/search_combination_rep_slowdown_zoom.pdf]]

**** Repartition of combination
   #+begin_src R :results output graphics :file ./img/search_combination_rep_slowdown.pdf :exports results :width 4 :height 6 :session
     library(ggplot2)

     df <- read.csv("/tmp/test.csv",strip.white=T,header=T)

     slowdown <-  df$time_per_pixel / min(df$time_per_pixel)
     df$slowdown <- slowdown

     ggplot(data=df) +
         geom_histogram(aes(x=slowdown,y=..density.. * 0.05), binwidth=.05) +
         theme_bw() +
         theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
         geom_vline(xintercept = median(slowdown), color="darkgreen", linetype=2) +
         geom_vline(xintercept = quantile(slowdown, prob=c(0.25,0.75)), color="blue", linetype=2) +
         geom_vline(xintercept = mean(slowdown), color="red", linetype=2) +
         labs(y="Frequency", x="Slowdown")

   #+end_src

   #+RESULTS:
   [[file:./img/search_combination_rep_slowdown.pdf]]

   #+begin_src R :results output graphics :file ./img/search_combination_rep_slowdown_zoom.pdf :exports both :width 4 :height 6 :session
     ggplot(data=df) +
         geom_histogram(aes(x=slowdown,y=..density.. * 0.05), binwidth=.05) +
         theme_bw() +
         theme(axis.text.x = element_text(angle = 70, hjust = 1, face="bold", size=12)) +
         geom_vline(aes(xintercept = median(slowdown), color="median"), linetype=2) +
         geom_vline(aes(xintercept = quantile(slowdown, prob=c(0.25)), colour="1st quartile"), linetype=2) +
         geom_vline(aes(xintercept = quantile(slowdown, prob=c(0.75)), colour="3rd quartile"), linetype=2) +
         geom_vline(aes(xintercept = mean(slowdown), colour="mean"), linetype=2) +
         coord_cartesian(xlim=c(.9,17)) +
         labs(y="Frequency", x="Slowdown")
   #+end_src

   #+RESULTS:
   [[file:./img/search_combination_rep_slowdown_zoom.pdf]]

 
*** Protocol
- Methods: RS, LHS, GS, GSR, GA and semi-automatic performance
  optimization using least square regression to estimate
  the mean (LM) or quantile regression to estimate the 5th percentile (RQ)
- Maximal budget: 120 (0.5% of the search space)
- GA \to population size = 20, mutation rate = 0.1
- 1000 runs
- Automatization of LM and RQ \to using same strategy each time:
  - random sampling
  - same models and parameters are fixed in the same order
- Which method does have the highest rate of high performing solutions?
*** Results
#+BEGIN_LaTeX
\begin{figure}[t]
\centering
\includegraphics[width=.8\linewidth]{./img/results_hist.pdf}
\end{figure}
#+END_LaTeX

*** Distribution of Combinations of the Whole Search Space

#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.35\linewidth}
\includegraphics[width=\linewidth]{./img/search_combination_rep_slowdown.pdf}
\end{minipage}
\begin{minipage}{.35\linewidth}
\includegraphics[width=\linewidth]{./img/search_combination_rep_slowdown_zoom.pdf}
\end{minipage}
\begin{minipage}{.15\linewidth}
\includegraphics[width=\linewidth]{./img/legend.pdf}
\end{minipage}
\end{figure}
#+END_LaTeX   

#+BEGIN_LaTeX
\tiny
#+END_LaTeX

# | Min  | 1st Q. | Median | Mean   | 3rd Q. |     Max |
# |------+--------+--------+--------+--------+---------|
# | /    | <>     | <>     | <>     | <>     |         |
# | 1.00 | 2.599  | 6.116  | 17.276 | 17.177 | 382.168 |

#+BEGIN_LaTeX
\normalsize
#+END_LaTeX
**** 
- Lots a of good combinations parameters
- 312 random points = 90% of chance to get a slowdown lower than 1.1

*** Characteristics of the search space: Structured              :noexport:
# That is why our approach worked
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/heteroscedasticity_v_len.pdf}
\end{minipage}
\hfill
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/heteroscedasticity_x_comp.pdf}
\end{minipage}
\end{figure}
#+END_LaTeX   
*** Least square regression: Estimation of  general tendency     :noexport:
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/lm_v_len.pdf}
\end{minipage}
\hfill
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/lm_x_comp.pdf}
\end{minipage}
\end{figure}
#+END_LaTeX
**** 
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <2>
:END:
#+LaTeX: \begin{overlayarea}{\linewidth}{0cm}\vspace{-5.0cm}\begin{block}{}
But does not respect classic least square regression main assumption:
- Same variance
#+LaTeX: \end{block}\end{overlayarea}
*** Least Square Regression vs Quantile Regression
# Explain quantile regression
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/why_we_choose_quantile_reg_v_len.pdf}
\end{minipage}
\hfill
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/why_we_choose_quantile_reg_x_comp.pdf}
\end{minipage}
\end{figure}
#+END_LaTeX
**** 
# :PROPERTIES:
# :BEAMER_env: onlyenv
# :BEAMER_act: <2>
# :END:
# #+LaTeX:
# %\begin{overlayarea}{\linewidth}{0cm}\vspace{-5.0cm}\begin{block}{}
#+BEGIN_LaTeX
\footnotesize
#+END_LaTeX
Least square regression main assumption \to +same variance+

Quantile regression:
- Handle non-uniform variance
- Estimate different quantile \to minimum \to 5th percentile
# #+LaTeX: §\end{block}\end{overlayarea}
*** Characteristics of the search space: Top-20 of the best combinations
#+BEGIN_LaTeX
\tiny
#+END_LaTeX
  | elements | y component | vector | temporary | load    | threads | lws_y | slowdown |
  | number   | number      | length | size      | overlap | number  |       |          |
  | <c>      | <c>         | <c>    | <c>       | <c>     | <c>     | <c>   | <c>      |
  | /        | <>          | <>     | <>        | <>      | <>      | <>    |          |
  |----------+-------------+--------+-----------+---------+---------+-------+----------|
  | 6        | 6           | 1      | 2         | true    | 1024    | 2     | 1.000000 |
  | 6        | 6           | 1      | 2         | false   | 256     | 4     | 1.005562 |
  | 5        | 5           | 1      | 2         | true    | 256     | 4     | 1.007540 |
  | 5        | 5           | 1      | 2         | false   | 256     | 4     | 1.009100 |
  | 6        | 6           | 1      | 2         | false   | 1024    | 8     | 1.009796 |
  | 6        | 6           | 1      | 2         | false   | 128     | 4     | 1.010568 |
  | 6        | 6           | 1      | 2         | true    | 1024    | 4     | 1.011509 |
  | 5        | 5           | 1      | 2         | false   | 512     | 4     | 1.011710 |
  | \to *6*      | *6*           | *1*      | *2*         | *true*    | *256*     | *1*     | *1.012177* |
  | 6        | 6           | 1      | 2         | false   | 128     | 2     | 1.012663 |
  | 6        | 6           | 1      | 2         | true    | 128     | 2     | 1.013555 |
  | 6        | 6           | 1      | 2         | true    | 256     | 2     | 1.013578 |
  | 5        | 5           | 1      | 2         | true    | 512     | 4     | 1.013662 |
  | 6        | 6           | 1      | 4         | false   | 1024    | 4     | 1.013695 |
  | 6        | 6           | 1      | 4         | true    | 512     | 8     | 1.014100 |
  | 6        | 6           | 1      | 4         | true    | 1024    | 4     | 1.014177 |
  | 6        | 6           | 1      | 2         | false   | 256     | 1     | 1.014598 |
  | 6        | 6           | 1      | 2         | true    | 1024    | 8     | 1.014882 |
  | 6        | 6           | 1      | 2         | true    | 128     | 1     | 1.015087 |
  | 6        | 6           | 1      | 2         | true    | 512     | 8     | 1.015301 |
#+BEGIN_LaTeX
\small
#+END_LaTeX
**** 
# :PROPERTIES:
# :BEAMER_env: onlyenv
# :BEAMER_act: <2>
# :END:
# #+LaTeX: \begin{overlayarea}{\linewidth}{0cm}\vspace{-3.0cm}\begin{block}{}
- Localized but still several local optimum!
- Failed to get better /lws_y/ because of the model \to /vector_length/ +
  /lws_y/
# #+LaTeX: \end{block}\end{overlayarea}

*** LM: Success and "Failures"
**** Best solution
#+BEGIN_LaTeX
\begin{columns}
\begin{column}{.75\linewidth}
  \tiny
  \vspace{-1.0cm}\begin{multicols}{2}
  \begin{itemize}
  \item  element\_number : 6
  \item y\_component\_number : 6
  \item \underline{vector\_length : 1}
  \item temporary\_size : 2
    
  \item load\_overlap : true
  \item thread\_number : 256
  \item \underline{lws\_y : 1}
  \item slowdown : 1.012177
  \end{enumerate}
  \end{multicols}
  \scriptsize
#+END_LaTeX
  Coefficient of determination = 0.5431

 $time\,per\,pixel = 8.794 \times 10^{-11} vector\,length + 1.987 \times 10^{-11} lws\,y$

#+BEGIN_LaTeX
\end{column}
\begin{column}{.25\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/good_prediction.pdf}  

\end{column}
  \end{columns}
#+END_LaTeX

    # |               |      Coef | Std. err. | p-values       |
    # |---------------+-----------+-----------+----------------|
    # | /             |        <> |        <> | <              |
    # | vector length | 8.794e-11 | 3.025e-11 | 0.00555 $**$   |
    # | lws y         | 1.987e-11 | 2.882e-12 | 1.18e-08 $***$ |
  #+BEGIN_LaTeX
  \scriptsize
  #+END_LaTeX
# - Lucky case: Coefficient of determination = 0.1665
#    #+BEGIN_LaTeX
#    \tiny
#    #+END_LaTeX
#      |               |      Coef | Std. err. | p-values     |
#      |---------------+-----------+-----------+--------------|
#      | /             |        <> |        <> | <            |
#      | vector_length | 1.438e-10 | 8.941e-11 | 0.11453      |
#      | lws y         | 1.507e-11 | 4.596e-12 | 0.00197 $**$ |

  #+BEGIN_LaTeX
  \normalsize
  #+END_LaTeX
**** Worst Solution
#+BEGIN_LaTeX
\begin{columns}
\begin{column}{.75\linewidth}

\vspace{-1.0cm}\begin{multicols}{2}
  \tiny
  \begin{itemize}
  \item  element\_number : 24
  \item y\_component\_number : 6
  \item \underline{vector\_length : 16}
  \item temporary\_size : 2
    
  \item load\_overlap : false
  \item thread\_number : 64
  \item \underline{lws\_y : 1}
  \item slowdown : 3.771183
  \end{enumerate}
  \end{multicols}
#+END_LaTeX

  #+BEGIN_LaTeX
  \tiny
  #+END_LaTeX
  # | e_n | y_c_n | *vector* | t_s | l_o   | t_n | *lws y* | slowdown |
  # |     |       | *length* |     |       |     |       |          |
  # | <c> | <c>   | <c>    | <c> | <c>   | <c> | <c>   | <c>      |
  # |-----+-------+--------+-----+-------+-----+-------+----------|
  # | /   | <>    | <>     | <>  | <>    | <>  | <>    | <        |
  # | 24  | 6     | 16     | 2   | false | 64  | 1     | 3.771183 |
  
#+BEGIN_LaTeX
  \scriptsize
  #+END_LaTeX
Coefficient of determination = 0.1744
$time\,per\,pixel = -2.316 \times 10^{-11}vector\,length + 5.572 \times 10^{-12}lws\,y$

#+BEGIN_LaTeX
\end{column}
\begin{column}{.25\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/bad_prediction.pdf}  
\end{column}
  \end{columns}
#+END_LaTeX
#+BEGIN_LaTeX
  \tiny
  #+END_LaTeX

  # |               |       Coef | Std. err. | p-values     |
  # |---------------+------------+-----------+--------------|
  # | /             |         <> |        <> | <            |
  # | vector_length | -2.316e-11 | 5.953e-11 | 0.69904      |
  # | lws y         |  5.572e-12 | 1.625e-12 | 0.00127 $**$ |

  #+BEGIN_LaTeX
  \normalsize
  #+END_LaTeX
*** LM: Success and "Failures" - Predictions vs Observations       :noexport:
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/good_prediction.pdf}
\caption{Favorable}
\end{minipage}
\hfil
% \begin{minipage}{.30\linewidth}
% \includegraphics[width=\linewidth]{../../Report/Project-report-template/img/lucky_prediction.pdf}
% \caption{Lucky}
% \end{minipage}
% \hfil
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/bad_prediction.pdf}
\caption{Worst}
\end{minipage}
\end{figure}
#+END_LaTeX
* Conclusion and Perspective
*** Conclusion and Perspective
**** Conclusion
- We designed a new approach that put the user in the core of the
  optimization process
- Comparison against techniques commonly used in the auto-tuning
  literature
- In depth study of the results:
  - Reasons why it works
  - Why quantile regression makes more sense than mean regression
**** Future Work
- Try more complex cases
- Compute correctly standard error, p-values and coefficient of
  determinations for quantile regression
- Dig into sampling strategies to find the optimum number of points.
*** This is the end
Thanks for your attention.
* 
#+BEGIN_LaTeX
\appendix
#+END_LaTeX
* Technical difficulties
** Constrained  and discrete search space
*** Model optimization
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/search_space_3D.pdf}
\end{minipage}
\hfill
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/search_space_3D_constrained_ugly.pdf}
\end{minipage}
\end{figure}
#+END_LaTeX
*** Model optimization
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/search_space_3D_constrained.pdf}
\end{minipage}
\hfill
\begin{minipage}{.45\linewidth}
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/search_space_3D_barrier.pdf}
\end{minipage}
\end{figure}
#+END_LaTeX
*** Sampling techniques: LHS
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/lhs_cover_constraints.pdf}
\end{figure}
#+END_LaTeX
*** Sampling techniques: Random
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\includegraphics[width=\linewidth]{../../Report/Project-report-template/img/rs_cover_constraints.pdf}
\end{figure}
#+END_LaTeX
** Quantile regression                                            :noexport:
*** Quantile regression
* Code generation and optimization opportunities
*** Code generation and optimization opportunities
Tools exist to help the developer:
  - Write relevant optimization \to generic code
  - Using parameters generate specialized variant 
**** Compilers
***** 
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <2>
:END:
- Transformation :
  - To make better use of the pipeline
  - To paralellize or vectorize 
- Limited by
  - Semantic rules
  - Lack of information at compile time, no global vision of the code
  - Choice of the transformation \to does not look for the best one but
    the one which respect the semantic
  - Still need to be programmed with care

**** Source-to-source transformation frameworks
***** 
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <3>
:END:
- Performs transformation instead of the compiler 
- Allows to specify which of transformation wanted \to e.g.,
  loop-unroll degree
- Ensures its validity 
- Yields a code that the compiler can easily work with \to less burden for
  the developer
- But generally limited:
  - To one target language \to no C to OpenCL / CUDA
  - Still limited by some semantic rules

**** Meta-programming frameworks
***** 
:PROPERTIES:
:BEAMER_env: onlyenv
:BEAMER_act: <4>
:END:
- Describe computation and optimization using high level languages
- Multiple language targets (e.g., python, ruby)
- Developer has even more control on the transformation \to try
  optimization that no compiler would be able to do.
- But:
  - Can be error prone
  - Need to re-write part of the application


* Controlling measurements: Warm-up effect
*** Controlling measurements: Warm-up effect
#+BEGIN_LaTeX
\begin{figure}[htb]
\centering
\includegraphics[height=.8\textheight]{../../Report/Project-report-template/img/warm_up.pdf}
\end{figure}
#+END_LaTeX
* A structured problem
*** Finding the structure of the problem
#+BEGIN_LaTeX
\begin{figure}[]
\centering
\includegraphics[width=\linewidth]{./img/combinations_index.pdf}
\end{figure}
#+END_LaTeX
*** Ordered by factor significance
#+BEGIN_LaTeX
\begin{figure}[]
\centering
\includegraphics[width=\linewidth]{./img/combinations_sorted.pdf}
\end{figure}
#+END_LaTeX
* Quantile regression
*** Code                                                         :noexport:
**** How we compute it
#+begin_src R :results output graphics :file ./img/rq_70th.pdf :exports both :width 4 :height 4 :session
  f <- function(x) { x * (0.75 - 1 * (x < 0)) }
  curve(f,-10,10)
#+end_src

#+RESULTS:
[[file:./img/rq_70th.pdf]]

#+begin_src R :results output graphics :file ./img/rq_med.pdf :exports both :width 4 :height 4 :session
  f <- function(x) { x * (0.5 - 1 * (x < 0)) }
  curve(f,-10,10)
#+end_src

#+RESULTS:
[[file:./img/rq_med.pdf]]

#+begin_src R :results output graphics :file ./img/rq_5th.pdf :exports both :width 4 :height 4 :session
  f <- function(x) { x * (0.05 - 1 * (x < 0)) }
  curve(f,-10,10)
#+end_src

#+RESULTS:
[[file:./img/rq_5th.pdf]]

*** How we compute it
Let $R_u(x) = x\cdot (u - 1 ( x > 0 )$
\\
Quantile regression:
#+BEGIN_LaTeX
\[\displaystyle \underset{Q}{\arg\min} { \sum_{i=1} R_{u} (X_{i} - Q) }\]
#+END_LaTeX

#+BEGIN_LaTeX
\begin{figure}[htb]
\centering

\begin{minipage}{.3\linewidth}
\includegraphics[width=\linewidth]{./img/rq_70th.pdf}
\caption{3rd quartile}
\end{minipage}
\hfil
\begin{minipage}{.3\linewidth}
\includegraphics[width=\linewidth]{./img/rq_med.pdf}
\caption{Median}
\end{minipage}
\hfil
\begin{minipage}{.3\linewidth}
\includegraphics[width=\linewidth]{./img/rq_5th.pdf}
\caption{5th percentile}
\end{minipage}

\end{figure}
#+END_LaTeX

* Improving worst case                                             :noexport:
    #+begin_src sh :results output :exports none
      ruby ../../../scripts/format_data.rb ../../../data/2016_04_08/pilipili2/18_08_24/test_space_2016_04_02_end_cleaned.yaml 
    #+end_src

    #+RESULTS:

    #+begin_src R :results output :session :exports none
      df <- read.csv("/tmp/test.csv", strip.white=T, header=T)
      logs <- readRDS("../../../data/2016_04_08/pilipili2/18_08_24/lm_random_logs_new_strat_1000.rds")
      df_lm_random <- read.csv("../../../data/2016_04_08/pilipili2/18_08_24/lm_random_new_strat_1000.csv", strip.white=T, header=T)
      df_lm_random[df_lm_random$time_per_pixel == max(df_lm_random$time_per_pixel),][1,]
      df_lm_random[df_lm_random$time_per_pixel == max(df_lm_random$time_per_pixel),][1,]$time_per_pixel / min(df$time_per_pixel)
      logs[[544]]$slowdown
    #+end_src

    #+RESULTS:
    :     elements_number y_component_number vector_length temporary_size
    : 544              24                  6            16              2
    :     vector_recompute load_overlap threads_number lws_y time_per_pixel
    : 544             true        false             64     1   4.393478e-10
    :     point_number method
    : 544          119     LM
    : [1] 3.771183
    : [1] 3.771183

    One of the worst case is at the run 544
    #+begin_src R :results output :session :exports none
      working_set <- logs[[544]]$starting_set
      summary(working_set)
    #+end_src

    #+RESULTS:
    #+begin_example
     elements_number y_component_number vector_length   temporary_size
     Min.   : 1.00   Min.   :1.00       Min.   : 1.00   Min.   :2.00  
     1st Qu.: 2.25   1st Qu.:2.00       1st Qu.: 2.00   1st Qu.:2.00  
     Median : 6.00   Median :3.00       Median : 4.00   Median :2.00  
     Mean   : 7.90   Mean   :3.12       Mean   : 7.14   Mean   :2.84  
     3rd Qu.:12.00   3rd Qu.:4.75       3rd Qu.:14.00   3rd Qu.:4.00  
     Max.   :24.00   Max.   :6.00       Max.   :16.00   Max.   :4.00  
     vector_recompute load_overlap threads_number       lws_y        
     true:50          false:25     Min.   :  32.0   Min.   :   1.00  
                      true :25     1st Qu.:  64.0   1st Qu.:   2.00  
                                   Median : 192.0   Median :   8.00  
                                   Mean   : 307.2   Mean   :  78.94  
                                   3rd Qu.: 512.0   3rd Qu.:  64.00  
                                   Max.   :1024.0   Max.   :1024.00  
     time_per_pixel     
     Min.   :1.272e-10  
     1st Qu.:4.326e-10  
     Median :7.162e-10  
     Mean   :1.868e-09  
     3rd Qu.:1.609e-09  
     Max.   :1.079e-08
#+end_example

#+begin_src R :results output :session :exports both
  objective_predict <- function(fit,x){
       names <- colnames(x)
       s <- paste("values <-data.frame(", paste(paste(names,names,sep="=x$"),collapse=","), ")")
       eval(parse(text=s))
       as.numeric(predict(fit, values, interval="none"))
   }

   objective_predict_one <- function(fit,x,colname){
       s <- paste("values <-data.frame(", paste(paste(colname,"=x",sep=""),collapse=","), ")")
       eval(parse(text=s))
       as.numeric(predict(fit, values, interval="none"))
   }

   find_best <- function(model,subset,full_set,colnames){
       fit <- lm(data=subset,formula=formula(model))
       if( length(colnames) > 1) {
           return(full_set[objective_predict(fit,full_set[,colnames]) == min(objective_predict(fit,full_set[,colnames])), colnames][1,])
       }
       else{
           return(full_set[objective_predict_one(fit, full_set[,colnames], colnames) == min(objective_predict_one(fit, full_set[,colnames], colnames)), colnames][1])
       }
   }

     #+end_src

#+RESULTS:

**    Step1
#+begin_src R :results output :session :exports both
fit <- lm(time_per_pixel ~ elements_number + threads_number + y_component_number + lws_y + vector_length + load_overlap + temporary_size, working_set)
summary(fit)
fit <- lm(time_per_pixel ~ lws_y , working_set)
summary(fit)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = time_per_pixel ~ elements_number + threads_number + 
    y_component_number + lws_y + vector_length + load_overlap + 
    temporary_size, data = working_set)

Residuals:
       Min         1Q     Median         3Q        Max 
-3.205e-09 -1.315e-09 -4.193e-10  3.619e-10  7.396e-09 

Coefficients:
                     Estimate Std. Error t value Pr(>|t|)    
(Intercept)         4.503e-09  1.348e-09   3.340  0.00176 ** 
elements_number    -9.059e-11  8.247e-11  -1.098  0.27829    
threads_number     -2.445e-12  1.348e-12  -1.813  0.07691 .  
y_component_number -2.341e-10  3.055e-10  -0.766  0.44787    
lws_y               8.072e-12  1.854e-12   4.354 8.41e-05 ***
vector_length       1.941e-12  6.063e-11   0.032  0.97462    
load_overlaptrue    2.150e-10  6.540e-10   0.329  0.74402    
temporary_size     -4.210e-10  3.362e-10  -1.252  0.21738    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 2.255e-09 on 42 degrees of freedom
Multiple R-squared:  0.3723,	Adjusted R-squared:  0.2677 
F-statistic: 3.559 on 7 and 42 DF,  p-value: 0.004306

Call:
lm(formula = time_per_pixel ~ lws_y, data = working_set)

Residuals:
       Min         1Q     Median         3Q        Max 
-3.055e-09 -1.120e-09 -7.814e-10 -1.174e-10  9.011e-09 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) 1.423e-09  3.586e-10   3.968 0.000242 ***
lws_y       5.642e-12  1.601e-12   3.524 0.000946 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 2.373e-09 on 48 degrees of freedom
Multiple R-squared:  0.2055,	Adjusted R-squared:  0.189 
F-statistic: 12.42 on 1 and 48 DF,  p-value: 0.0009458
#+end_example

Bad fitting indeed
#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
  library(ggplot2)
  ggplot() +
      theme_bw() +
      geom_point(aes(x=fitted(fit), y=fitted(fit) + residuals(fit))) +
      geom_line( aes(x=c(-1,1), y=c(-1,1)), linetype=2) +
      labs(y="Real", x="Predicted") +
      coord_cartesian(xlim=c(0,1e-8), ylim=c(0,1e-8))
#+end_src

#+RESULTS:
[[file:/tmp/babel-3609ONO/figure3609hpV.png]]

Asking more points
#+begin_src R :results output :session :exports both
set.seed(1)
working_set_bis <- rbind(working_set, df[sample(1:nrow(df), size = 20, replace = FALSE),])

fit <- lm(time_per_pixel ~ elements_number + threads_number + y_component_number + lws_y + vector_length + load_overlap + temporary_size, working_set_bis)
summary(fit)
fit <- lm(time_per_pixel ~ (lws_y + threads_number + elements_number)^2, working_set_bis)
summary(fit)
fit <- lm(time_per_pixel ~ lws_y + threads_number + elements_number, working_set_bis)
summary(fit)
# fit <- lm(time_per_pixel ~ lws_y , working_set_bis)
# summary(fit)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = time_per_pixel ~ elements_number + threads_number + 
    y_component_number + lws_y + vector_length + load_overlap + 
    temporary_size, data = working_set_bis)

Residuals:
       Min         1Q     Median         3Q        Max 
-3.544e-09 -1.279e-09 -5.907e-10  3.776e-10  8.050e-09 

Coefficients:
                     Estimate Std. Error t value Pr(>|t|)    
(Intercept)         4.228e-09  1.110e-09   3.808 0.000324 ***
elements_number    -1.186e-10  7.130e-11  -1.663 0.101357    
threads_number     -2.198e-12  9.310e-13  -2.361 0.021363 *  
y_component_number -1.686e-10  2.655e-10  -0.635 0.527717    
lws_y               8.235e-12  1.713e-12   4.807 1.01e-05 ***
vector_length       1.332e-11  4.974e-11   0.268 0.789796    
load_overlaptrue    3.033e-10  5.617e-10   0.540 0.591119    
temporary_size     -3.589e-10  2.804e-10  -1.280 0.205318    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 2.247e-09 on 62 degrees of freedom
Multiple R-squared:  0.3406,	Adjusted R-squared:  0.2661 
F-statistic: 4.575 on 7 and 62 DF,  p-value: 0.0003605

Call:
lm(formula = time_per_pixel ~ (lws_y + threads_number + elements_number)^2, 
    data = working_set_bis)

Residuals:
       Min         1Q     Median         3Q        Max 
-3.950e-09 -7.345e-10 -2.796e-10  4.369e-10  6.194e-09 

Coefficients:
                                 Estimate Std. Error t value Pr(>|t|)    
(Intercept)                     1.847e-09  4.957e-10   3.725 0.000419 ***
lws_y                           6.286e-11  7.681e-12   8.184 1.70e-11 ***
threads_number                 -2.636e-12  1.411e-12  -1.868 0.066440 .  
elements_number                -9.703e-11  4.709e-11  -2.061 0.043456 *  
lws_y:threads_number           -3.963e-14  5.755e-15  -6.886 3.16e-09 ***
lws_y:elements_number          -1.709e-12  3.628e-13  -4.711 1.40e-05 ***
threads_number:elements_number  1.243e-13  1.553e-13   0.801 0.426387    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.666e-09 on 63 degrees of freedom
Multiple R-squared:  0.6315,	Adjusted R-squared:  0.5964 
F-statistic: 17.99 on 6 and 63 DF,  p-value: 4.965e-12

Call:
lm(formula = time_per_pixel ~ lws_y + threads_number + elements_number, 
    data = working_set_bis)

Residuals:
       Min         1Q     Median         3Q        Max 
-3.716e-09 -1.229e-09 -4.964e-10  5.473e-10  8.019e-09 

Coefficients:
                  Estimate Std. Error t value Pr(>|t|)    
(Intercept)      3.177e-09  5.348e-10   5.940 1.17e-07 ***
lws_y            8.315e-12  1.676e-12   4.961 5.19e-06 ***
threads_number  -2.296e-12  9.011e-13  -2.549  0.01315 *  
elements_number -1.479e-10  4.824e-11  -3.065  0.00315 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 2.212e-09 on 66 degrees of freedom
Multiple R-squared:  0.3193,	Adjusted R-squared:  0.2883 
F-statistic: 10.32 on 3 and 66 DF,  p-value: 1.174e-05
#+end_example

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
plot(working_set_bis)
#+end_src

#+RESULTS:
[[file:/tmp/babel-3609ONO/figure3609IWQ.png]]

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session
library(ggplot2)
  ggplot() +
      theme_bw() +
      geom_point(aes(x=fitted(fit), y=fitted(fit) + residuals(fit))) +
      geom_line( aes(x=c(-1,1), y=c(-1,1)), linetype=2) +
      labs(y="Real", x="Predicted") +
      coord_cartesian(xlim=c(0,2e-8), ylim=c(0,2e-8))
#+end_src
#+RESULTS:
[[file:/tmp/babel-3609ONO/figure3609ixQ.png]]

#+begin_src R :results output :session :exports both
best1 <- find_best(fit, working_set, df, c("threads_number", "elements_number", "lws_y")) 
best1
#+end_src

#+RESULTS:
:      threads_number elements_number lws_y
: 7880           1024              24     1

Pruning
#+begin_src R :results output :session :exports both
full1 <- df[df$elements_number==best1$elements_number & df$threads_number==best1$threads_number & df$lws_y==best1$lws_y ,] 
subset1 <- working_set_bis[working_set_bis$elements_number==best1$elements_number & working_set_bis$threads_number==best1$threads_number & working_set_bis$lws_y==best1$lws_y ,] 
min(full1$time_per_pixel) / min(df$time_per_pixel)
nrow(subset1)
nrow(full1)
#+end_src

#+RESULTS:
: [1] 1.639966
: [1] 0
: [1] 13


* Emacs Setup 							   :noexport:
  This document has local variables in its postembule, which should
  allow Org-mode to work seamlessly without any setup. If you're
  uncomfortable using such variables, you can safely ignore them at
  startup. Exporting may require that you copy them in your .emacs.

# Local Variables:
# eval:    (require 'org-install)
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (sh . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (unless (boundp 'org-latex-classes) (setq org-latex-classes nil))
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:   (setq org-export-babel-evaluate nil)
# eval:   (setq ispell-local-dictionary "english")
# eval:   (eval (flyspell-mode t))
# eval:    (setq org-latex-listings 'minted)
# eval:    (setq org-latex-minted-options '(("bgcolor" "white") ("style" "tango") ("numbers" "left") ("numbersep" "5pt")))
# eval:   (add-to-list 'org-beamer-environments-extra '("onlyenv" "O" "\\begin{onlyenv}%a" "\\end{onlyenv}"))
# End:

#+TITLE: Experiment information
#+DATE: Tue Mar  1 10:22:39 CET 2016
#+MACHINE: adonis-9.grenoble.grid5000.fr
#+FILE: /tmp/2016_03_01/adonis-9.grenoble.grid5000.fr/10_22_39/Info10_22_39.org
* ENVIRONMENT INFOS
** HARDWARE
*** CPU
#+BEGIN_EXAMPLE
processor	: 0
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz
stepping	: 5
microcode	: 0x11
cpu MHz		: 1600.000
cache size	: 8192 KB
physical id	: 0
siblings	: 4
core id		: 0
cpu cores	: 4
apicid		: 0
initial apicid	: 0
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 sse4_2 popcnt lahf_lm ida dtherm tpr_shadow vnmi flexpriority ept vpid
bogomips	: 4532.79
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:

processor	: 1
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz
stepping	: 5
microcode	: 0x11
cpu MHz		: 1600.000
cache size	: 8192 KB
physical id	: 0
siblings	: 4
core id		: 1
cpu cores	: 4
apicid		: 2
initial apicid	: 2
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 sse4_2 popcnt lahf_lm ida dtherm tpr_shadow vnmi flexpriority ept vpid
bogomips	: 4533.33
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:

processor	: 2
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz
stepping	: 5
microcode	: 0x11
cpu MHz		: 1600.000
cache size	: 8192 KB
physical id	: 0
siblings	: 4
core id		: 2
cpu cores	: 4
apicid		: 4
initial apicid	: 4
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 sse4_2 popcnt lahf_lm ida dtherm tpr_shadow vnmi flexpriority ept vpid
bogomips	: 4533.34
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:

processor	: 3
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz
stepping	: 5
microcode	: 0x11
cpu MHz		: 1600.000
cache size	: 8192 KB
physical id	: 0
siblings	: 4
core id		: 3
cpu cores	: 4
apicid		: 6
initial apicid	: 6
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 sse4_2 popcnt lahf_lm ida dtherm tpr_shadow vnmi flexpriority ept vpid
bogomips	: 4533.34
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:

processor	: 4
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz
stepping	: 5
microcode	: 0x11
cpu MHz		: 1600.000
cache size	: 8192 KB
physical id	: 1
siblings	: 4
core id		: 0
cpu cores	: 4
apicid		: 16
initial apicid	: 16
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 sse4_2 popcnt lahf_lm ida dtherm tpr_shadow vnmi flexpriority ept vpid
bogomips	: 4533.38
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:

processor	: 5
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz
stepping	: 5
microcode	: 0x11
cpu MHz		: 1600.000
cache size	: 8192 KB
physical id	: 1
siblings	: 4
core id		: 1
cpu cores	: 4
apicid		: 18
initial apicid	: 18
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 sse4_2 popcnt lahf_lm ida dtherm tpr_shadow vnmi flexpriority ept vpid
bogomips	: 4533.39
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:

processor	: 6
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz
stepping	: 5
microcode	: 0x11
cpu MHz		: 1600.000
cache size	: 8192 KB
physical id	: 1
siblings	: 4
core id		: 2
cpu cores	: 4
apicid		: 20
initial apicid	: 20
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 sse4_2 popcnt lahf_lm ida dtherm tpr_shadow vnmi flexpriority ept vpid
bogomips	: 4533.39
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:

processor	: 7
vendor_id	: GenuineIntel
cpu family	: 6
model		: 26
model name	: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz
stepping	: 5
microcode	: 0x11
cpu MHz		: 1600.000
cache size	: 8192 KB
physical id	: 1
siblings	: 4
core id		: 3
cpu cores	: 4
apicid		: 22
initial apicid	: 22
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 sse4_2 popcnt lahf_lm ida dtherm tpr_shadow vnmi flexpriority ept vpid
bogomips	: 4533.37
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:

#+END_EXAMPLE
*** GPU INFO FROM NVIDIA-SMI
#+BEGIN_EXAMPLE

==============NVSMI LOG==============

Timestamp                       : Tue Mar  1 10:22:43 2016
Driver Version                  : 304.54

Attached GPUs                   : 2
GPU 0000:0C:00.0
    Product Name                : Tesla T10 Processor
    Display Mode                : Disabled
    Persistence Mode            : Disabled
    Driver Model
        Current                 : N/A
        Pending                 : N/A
    Serial Number               : N/A
    GPU UUID                    : GPU-feb9d9fe-3603-a80e-52f4-7090fc1ee24d
    VBIOS Version               : 62.00.62.00.09
    Inforom Version
        Image Version           : N/A
        OEM Object              : N/A
        ECC Object              : N/A
        Power Management Object : N/A
    GPU Operation Mode
        Current                 : N/A
        Pending                 : N/A
    PCI
        Bus                     : 0x0C
        Device                  : 0x00
        Domain                  : 0x0000
        Device Id               : 0x05E710DE
        Bus Id                  : 0000:0C:00.0
        Sub System Id           : 0x068F10DE
        GPU Link Info
            PCIe Generation
                Max             : 2
                Current         : 2
            Link Width
                Max             : 16x
                Current         : 16x
    Fan Speed                   : N/A
    Performance State           : P0
    Clocks Throttle Reasons     : N/A
    Memory Usage
        Total                   : 4095 MB
        Used                    : 3 MB
        Free                    : 4092 MB
    Compute Mode                : Default
    Utilization
        Gpu                     : 0 %
        Memory                  : 0 %
    Ecc Mode
        Current                 : N/A
        Pending                 : N/A
    ECC Errors
        Volatile
            Single Bit            
                Device Memory   : N/A
                Register File   : N/A
                L1 Cache        : N/A
                L2 Cache        : N/A
                Texture Memory  : N/A
                Total           : N/A
            Double Bit            
                Device Memory   : N/A
                Register File   : N/A
                L1 Cache        : N/A
                L2 Cache        : N/A
                Texture Memory  : N/A
                Total           : N/A
        Aggregate
            Single Bit            
                Device Memory   : N/A
                Register File   : N/A
                L1 Cache        : N/A
                L2 Cache        : N/A
                Texture Memory  : N/A
                Total           : N/A
            Double Bit            
                Device Memory   : N/A
                Register File   : N/A
                L1 Cache        : N/A
                L2 Cache        : N/A
                Texture Memory  : N/A
                Total           : N/A
    Temperature
        Gpu                     : 32 C
    Power Readings
        Power Management        : N/A
        Power Draw              : N/A
        Power Limit             : N/A
        Default Power Limit     : N/A
        Min Power Limit         : N/A
        Max Power Limit         : N/A
    Clocks
        Graphics                : 610 MHz
        SM                      : 1296 MHz
        Memory                  : 800 MHz
    Applications Clocks
        Graphics                : N/A
        Memory                  : N/A
    Max Clocks
        Graphics                : 610 MHz
        SM                      : 1296 MHz
        Memory                  : 800 MHz
    Compute Processes           : None

GPU 0000:0A:00.0
    Product Name                : Tesla T10 Processor
    Display Mode                : Disabled
    Persistence Mode            : Disabled
    Driver Model
        Current                 : N/A
        Pending                 : N/A
    Serial Number               : N/A
    GPU UUID                    : GPU-eb8ed4ff-8951-5902-b7de-1676d5a342b8
    VBIOS Version               : 62.00.62.00.09
    Inforom Version
        Image Version           : N/A
        OEM Object              : N/A
        ECC Object              : N/A
        Power Management Object : N/A
    GPU Operation Mode
        Current                 : N/A
        Pending                 : N/A
    PCI
        Bus                     : 0x0A
        Device                  : 0x00
        Domain                  : 0x0000
        Device Id               : 0x05E710DE
        Bus Id                  : 0000:0A:00.0
        Sub System Id           : 0x068F10DE
        GPU Link Info
            PCIe Generation
                Max             : 2
                Current         : 2
            Link Width
                Max             : 16x
                Current         : 16x
    Fan Speed                   : N/A
    Performance State           : P0
    Clocks Throttle Reasons     : N/A
    Memory Usage
        Total                   : 4095 MB
        Used                    : 3 MB
        Free                    : 4092 MB
    Compute Mode                : Default
    Utilization
        Gpu                     : 0 %
        Memory                  : 0 %
    Ecc Mode
        Current                 : N/A
        Pending                 : N/A
    ECC Errors
        Volatile
            Single Bit            
                Device Memory   : N/A
                Register File   : N/A
                L1 Cache        : N/A
                L2 Cache        : N/A
                Texture Memory  : N/A
                Total           : N/A
            Double Bit            
                Device Memory   : N/A
                Register File   : N/A
                L1 Cache        : N/A
                L2 Cache        : N/A
                Texture Memory  : N/A
                Total           : N/A
        Aggregate
            Single Bit            
                Device Memory   : N/A
                Register File   : N/A
                L1 Cache        : N/A
                L2 Cache        : N/A
                Texture Memory  : N/A
                Total           : N/A
            Double Bit            
                Device Memory   : N/A
                Register File   : N/A
                L1 Cache        : N/A
                L2 Cache        : N/A
                Texture Memory  : N/A
                Total           : N/A
    Temperature
        Gpu                     : 32 C
    Power Readings
        Power Management        : N/A
        Power Draw              : N/A
        Power Limit             : N/A
        Default Power Limit     : N/A
        Min Power Limit         : N/A
        Max Power Limit         : N/A
    Clocks
        Graphics                : 610 MHz
        SM                      : 1296 MHz
        Memory                  : 800 MHz
    Applications Clocks
        Graphics                : N/A
        Memory                  : N/A
    Max Clocks
        Graphics                : 610 MHz
        SM                      : 1296 MHz
        Memory                  : 800 MHz
    Compute Processes           : None

#+END_EXAMPLE
** SOFTWARE
*** LINUX AND GCC VERSIONS
#+BEGIN_EXAMPLE
Linux version 3.2.0-4-amd64 (debian-kernel@lists.debian.org) (gcc version 4.6.3 (Debian 4.6.3-14) ) #1 SMP Debian 3.2.35-2
#+END_EXAMPLE
*** ENVIRONMENT VARIABLES
#+BEGIN_EXAMPLE
SHELL=/bin/bash
TERM=xterm
XDG_SESSION_COOKIE=a90a4877919666415c3c29a55135b529-1456823988.858095-152875012
SSH_CLIENT=172.16.31.101 60338 22
SSH_TTY=/dev/pts/0
USER=root
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/cuda-5.0/bin
MAIL=/var/mail/root
PWD=/root/boast/scripts
LANG=en_US.UTF-8
HOME=/root
SHLVL=2
LOGNAME=root
SSH_CONNECTION=172.16.31.101 60338 172.16.18.9 22
_=/usr/bin/env
#+END_EXAMPLE
*** CPU GOVERNOR
#+BEGIN_EXAMPLE
ondemand
#+END_EXAMPLE
*** CPU FREQUENCY
#+BEGIN_EXAMPLE
1600000
#+END_EXAMPLE
* PROGRAM OUTPUT
#+BEGIN_EXAMPLE
void math(const int32_t width, const int32_t height, const uint8_t * psrc, uint8_t * pdst){
  int32_t i;
  int32_t j;
  int32_t c;
  int32_t tmp;
  int32_t w;
  w = (width) * (3);
  for (j = 1; j <= height - (2); j += 1) {
    for (i = 1; i <= width - (2); i += 1) {
      for (c = 0; c <= 2; c += 1) {
        tmp =  -(psrc[c + (3) * (i - (1) + (width) * (j - (1)))]) - (psrc[c + (3) * (i + (width) * (j - (1)))]) - (psrc[c + (3) * (i + 1 + (width) * (j - (1)))]) - (psrc[c + (3) * (i - (1) + (width) * (j))]) + (psrc[c + (3) * (i + (width) * (j))]) * (9) - (psrc[c + (3) * (i + 1 + (width) * (j))]) - (psrc[c + (3) * (i - (1) + (width) * (j + 1))]) - (psrc[c + (3) * (i + (width) * (j + 1))]) - (psrc[c + (3) * (i + 1 + (width) * (j + 1))]);
        pdst[c + (3) * (i + (width) * (j))] = (tmp < 0 ? 0 : (tmp > 255 ? 255 : tmp));
      }
    }
  }
}
{:x_component_number=>2, :vector_length=>8, :y_component_number=>1, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (2);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar8 temp000;
  uchar8 temp001;
  uchar8 temp002;
  uchar8 temp010;
  uchar8 temp011;
  uchar8 temp012;
  uchar8 temp020;
  uchar8 temp021;
  uchar8 temp022;
  uchar8 res00;
  short8 tempc000;
  short8 tempc001;
  short8 tempc002;
  short8 tempc010;
  short8 tempc011;
  short8 tempc012;
  short8 tempc020;
  short8 tempc021;
  short8 tempc022;
  short8 resc00;
  temp000 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short8( temp000 );
  temp010 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short8( temp010 );
  temp020 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short8( temp020 );
  temp001 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short8( temp001 );
  temp011 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short8( temp011 );
  temp021 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short8( temp021 );
  temp002 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short8( temp002 );
  temp012 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short8( temp012 );
  temp022 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short8( temp022 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar8( clamp(resc00, (short)0, (short)255) );
  vstore8(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
4.436262068127998e-09 s
2560 x 1600 :
4.220099205320176e-09 s
2048 x 2048 :
4.2062398653071246e-09 s
5760 x 3240 :
4.119776851005803e-09 s
7680 x 4320 :
4.2287867104885484e-09 s
{:x_component_number=>16, :vector_length=>4, :y_component_number=>1, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (16);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (19) ? w - (19) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar4 temp000;
  uchar4 temp001;
  uchar4 temp002;
  uchar4 temp100;
  uchar4 temp101;
  uchar4 temp102;
  uchar4 temp200;
  uchar4 temp201;
  uchar4 temp202;
  uchar4 temp300;
  uchar4 temp301;
  uchar4 temp302;
  uchar4 temp010;
  uchar4 temp011;
  uchar4 temp012;
  uchar4 temp110;
  uchar4 temp111;
  uchar4 temp112;
  uchar4 temp210;
  uchar4 temp211;
  uchar4 temp212;
  uchar4 temp310;
  uchar4 temp311;
  uchar4 temp312;
  uchar4 temp020;
  uchar4 temp021;
  uchar4 temp022;
  uchar4 temp120;
  uchar4 temp121;
  uchar4 temp122;
  uchar4 temp220;
  uchar4 temp221;
  uchar4 temp222;
  uchar4 temp320;
  uchar4 temp321;
  uchar4 temp322;
  uchar4 res00;
  uchar4 res10;
  uchar4 res20;
  uchar4 res30;
  int4 tempc000;
  int4 tempc001;
  int4 tempc002;
  int4 tempc100;
  int4 tempc101;
  int4 tempc102;
  int4 tempc200;
  int4 tempc201;
  int4 tempc202;
  int4 tempc300;
  int4 tempc301;
  int4 tempc302;
  int4 tempc010;
  int4 tempc011;
  int4 tempc012;
  int4 tempc110;
  int4 tempc111;
  int4 tempc112;
  int4 tempc210;
  int4 tempc211;
  int4 tempc212;
  int4 tempc310;
  int4 tempc311;
  int4 tempc312;
  int4 tempc020;
  int4 tempc021;
  int4 tempc022;
  int4 tempc120;
  int4 tempc121;
  int4 tempc122;
  int4 tempc220;
  int4 tempc221;
  int4 tempc222;
  int4 tempc320;
  int4 tempc321;
  int4 tempc322;
  int4 resc00;
  int4 resc10;
  int4 resc20;
  int4 resc30;
  temp000 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int4( temp000 );
  temp100 = vload4(0, &psrc[x + 4 + -3 + (w) * (y + -1)]);
  tempc100 = convert_int4( temp100 );
  temp200 = vload4(0, &psrc[x + 8 + -3 + (w) * (y + -1)]);
  tempc200 = convert_int4( temp200 );
  temp300 = vload4(0, &psrc[x + 12 + -3 + (w) * (y + -1)]);
  tempc300 = convert_int4( temp300 );
  temp010 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int4( temp010 );
  temp110 = vload4(0, &psrc[x + 4 + 0 + (w) * (y + -1)]);
  tempc110 = convert_int4( temp110 );
  temp210 = vload4(0, &psrc[x + 8 + 0 + (w) * (y + -1)]);
  tempc210 = convert_int4( temp210 );
  temp310 = vload4(0, &psrc[x + 12 + 0 + (w) * (y + -1)]);
  tempc310 = convert_int4( temp310 );
  temp020 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int4( temp020 );
  temp120 = vload4(0, &psrc[x + 4 + 3 + (w) * (y + -1)]);
  tempc120 = convert_int4( temp120 );
  temp220 = vload4(0, &psrc[x + 8 + 3 + (w) * (y + -1)]);
  tempc220 = convert_int4( temp220 );
  temp320 = vload4(0, &psrc[x + 12 + 3 + (w) * (y + -1)]);
  tempc320 = convert_int4( temp320 );
  temp001 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int4( temp001 );
  temp101 = vload4(0, &psrc[x + 4 + -3 + (w) * (y + 0)]);
  tempc101 = convert_int4( temp101 );
  temp201 = vload4(0, &psrc[x + 8 + -3 + (w) * (y + 0)]);
  tempc201 = convert_int4( temp201 );
  temp301 = vload4(0, &psrc[x + 12 + -3 + (w) * (y + 0)]);
  tempc301 = convert_int4( temp301 );
  temp011 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int4( temp011 );
  temp111 = vload4(0, &psrc[x + 4 + 0 + (w) * (y + 0)]);
  tempc111 = convert_int4( temp111 );
  temp211 = vload4(0, &psrc[x + 8 + 0 + (w) * (y + 0)]);
  tempc211 = convert_int4( temp211 );
  temp311 = vload4(0, &psrc[x + 12 + 0 + (w) * (y + 0)]);
  tempc311 = convert_int4( temp311 );
  temp021 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int4( temp021 );
  temp121 = vload4(0, &psrc[x + 4 + 3 + (w) * (y + 0)]);
  tempc121 = convert_int4( temp121 );
  temp221 = vload4(0, &psrc[x + 8 + 3 + (w) * (y + 0)]);
  tempc221 = convert_int4( temp221 );
  temp321 = vload4(0, &psrc[x + 12 + 3 + (w) * (y + 0)]);
  tempc321 = convert_int4( temp321 );
  temp002 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int4( temp002 );
  temp102 = vload4(0, &psrc[x + 4 + -3 + (w) * (y + 1)]);
  tempc102 = convert_int4( temp102 );
  temp202 = vload4(0, &psrc[x + 8 + -3 + (w) * (y + 1)]);
  tempc202 = convert_int4( temp202 );
  temp302 = vload4(0, &psrc[x + 12 + -3 + (w) * (y + 1)]);
  tempc302 = convert_int4( temp302 );
  temp012 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int4( temp012 );
  temp112 = vload4(0, &psrc[x + 4 + 0 + (w) * (y + 1)]);
  tempc112 = convert_int4( temp112 );
  temp212 = vload4(0, &psrc[x + 8 + 0 + (w) * (y + 1)]);
  tempc212 = convert_int4( temp212 );
  temp312 = vload4(0, &psrc[x + 12 + 0 + (w) * (y + 1)]);
  tempc312 = convert_int4( temp312 );
  temp022 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int4( temp022 );
  temp122 = vload4(0, &psrc[x + 4 + 3 + (w) * (y + 1)]);
  tempc122 = convert_int4( temp122 );
  temp222 = vload4(0, &psrc[x + 8 + 3 + (w) * (y + 1)]);
  tempc222 = convert_int4( temp222 );
  temp322 = vload4(0, &psrc[x + 12 + 3 + (w) * (y + 1)]);
  tempc322 = convert_int4( temp322 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (int)0, (int)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar4( clamp(resc10, (int)0, (int)255) );
  resc20 =  -(tempc200) - (tempc210) - (tempc220) - (tempc201) + (tempc211) * ((int)9) - (tempc221) - (tempc202) - (tempc212) - (tempc222);
  res20 = convert_uchar4( clamp(resc20, (int)0, (int)255) );
  resc30 =  -(tempc300) - (tempc310) - (tempc320) - (tempc301) + (tempc311) * ((int)9) - (tempc321) - (tempc302) - (tempc312) - (tempc322);
  res30 = convert_uchar4( clamp(resc30, (int)0, (int)255) );
  vstore4(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore4(res10, 0, &pdst[x + 4 + (w) * (y + 0)]);
  vstore4(res20, 0, &pdst[x + 8 + (w) * (y + 0)]);
  vstore4(res30, 0, &pdst[x + 12 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
4.052025016698039e-09 s
2560 x 1600 :
3.84121277476439e-09 s
2048 x 2048 :
3.7674942595952904e-09 s
5760 x 3240 :
3.763658414610625e-09 s
7680 x 4320 :
4.009349451118497e-09 s
{:x_component_number=>8, :vector_length=>8, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (8);
  y = (get_global_id(1)) * (4);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (5) ? height - (5) : y));
  uchar8 tempload0_7;
  uchar4 tempload8_11;
  uchar2 tempload12_13;
  uchar8 res00;
  uchar8 res01;
  uchar8 res02;
  uchar8 res03;
  short8 tempc000;
  short8 tempc001;
  short8 tempc002;
  short8 tempc003;
  short8 tempc004;
  short8 tempc005;
  short8 tempc010;
  short8 tempc011;
  short8 tempc012;
  short8 tempc013;
  short8 tempc014;
  short8 tempc015;
  short8 tempc020;
  short8 tempc021;
  short8 tempc022;
  short8 tempc023;
  short8 tempc024;
  short8 tempc025;
  short8 resc00;
  short8 resc01;
  short8 resc02;
  short8 resc03;
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + -1)]);
  tempc000 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc010 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc020 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 0)]);
  tempc001 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc011 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc021 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 1)]);
  tempc002 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc012 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc022 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 2)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 2)]);
  tempc003 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc013 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc023 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 3)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 3)]);
  tempc004 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc014 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc024 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 4)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 4)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 4)]);
  tempc005 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc015 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc025 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar8( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar8( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar8( clamp(resc02, (short)0, (short)255) );
  resc03 =  -(tempc003) - (tempc013) - (tempc023) - (tempc004) + (tempc014) * ((short)9) - (tempc024) - (tempc005) - (tempc015) - (tempc025);
  res03 = convert_uchar8( clamp(resc03, (short)0, (short)255) );
  vstore8(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore8(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore8(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
  vstore8(res03, 0, &pdst[x + 0 + (w) * (y + 3)]);
}
768 x 432 :
Tesla T10 Processor: 
1.5143117372032302e-09 s
2560 x 1600 :
1.2961784717213953e-09 s
2048 x 2048 :
1.2845128993080936e-09 s
5760 x 3240 :
1.3253383696255455e-09 s
7680 x 4320 :
1.3216928090231155e-09 s
{:x_component_number=>8, :vector_length=>8, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (8);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar8 temp000;
  uchar8 temp001;
  uchar8 temp002;
  uchar8 temp003;
  uchar8 temp004;
  uchar8 temp010;
  uchar8 temp011;
  uchar8 temp012;
  uchar8 temp013;
  uchar8 temp014;
  uchar8 temp020;
  uchar8 temp021;
  uchar8 temp022;
  uchar8 temp023;
  uchar8 temp024;
  uchar8 res00;
  uchar8 res01;
  uchar8 res02;
  int8 tempc000;
  int8 tempc001;
  int8 tempc002;
  int8 tempc003;
  int8 tempc004;
  int8 tempc010;
  int8 tempc011;
  int8 tempc012;
  int8 tempc013;
  int8 tempc014;
  int8 tempc020;
  int8 tempc021;
  int8 tempc022;
  int8 tempc023;
  int8 tempc024;
  int8 resc00;
  int8 resc01;
  int8 resc02;
  temp000 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int8( temp000 );
  temp010 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int8( temp010 );
  temp020 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int8( temp020 );
  temp001 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int8( temp001 );
  temp011 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int8( temp011 );
  temp021 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int8( temp021 );
  temp002 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int8( temp002 );
  temp012 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int8( temp012 );
  temp022 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int8( temp022 );
  temp003 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_int8( temp003 );
  temp013 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_int8( temp013 );
  temp023 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_int8( temp023 );
  temp004 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_int8( temp004 );
  temp014 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_int8( temp014 );
  temp024 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_int8( temp024 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar8( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar8( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar8( clamp(resc02, (int)0, (int)255) );
  vstore8(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore8(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore8(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
1.596502519885846e-09 s
2560 x 1600 :
1.4717850009932274e-09 s
2048 x 2048 :
1.5408115780833594e-09 s
5760 x 3240 :
1.4832392604236639e-09 s
7680 x 4320 :
1.4808048017947007e-09 s
{:x_component_number=>1, :vector_length=>16, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (4);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (19) ? w - (19) : x));
  y = (y < 1 ? 1 : (y > height - (5) ? height - (5) : y));
  uchar16 temp000;
  uchar16 temp001;
  uchar16 temp002;
  uchar16 temp003;
  uchar16 temp004;
  uchar16 temp005;
  uchar16 temp010;
  uchar16 temp011;
  uchar16 temp012;
  uchar16 temp013;
  uchar16 temp014;
  uchar16 temp015;
  uchar16 temp020;
  uchar16 temp021;
  uchar16 temp022;
  uchar16 temp023;
  uchar16 temp024;
  uchar16 temp025;
  uchar16 res00;
  uchar16 res01;
  uchar16 res02;
  uchar16 res03;
  short16 tempc000;
  short16 tempc001;
  short16 tempc002;
  short16 tempc003;
  short16 tempc004;
  short16 tempc005;
  short16 tempc010;
  short16 tempc011;
  short16 tempc012;
  short16 tempc013;
  short16 tempc014;
  short16 tempc015;
  short16 tempc020;
  short16 tempc021;
  short16 tempc022;
  short16 tempc023;
  short16 tempc024;
  short16 tempc025;
  short16 resc00;
  short16 resc01;
  short16 resc02;
  short16 resc03;
  temp000 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short16( temp000 );
  temp010 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short16( temp010 );
  temp020 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short16( temp020 );
  temp001 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short16( temp001 );
  temp011 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short16( temp011 );
  temp021 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short16( temp021 );
  temp002 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short16( temp002 );
  temp012 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short16( temp012 );
  temp022 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short16( temp022 );
  temp003 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_short16( temp003 );
  temp013 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_short16( temp013 );
  temp023 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_short16( temp023 );
  temp004 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_short16( temp004 );
  temp014 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_short16( temp014 );
  temp024 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_short16( temp024 );
  temp005 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 4)]);
  tempc005 = convert_short16( temp005 );
  temp015 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 4)]);
  tempc015 = convert_short16( temp015 );
  temp025 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 4)]);
  tempc025 = convert_short16( temp025 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar16( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar16( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar16( clamp(resc02, (short)0, (short)255) );
  resc03 =  -(tempc003) - (tempc013) - (tempc023) - (tempc004) + (tempc014) * ((short)9) - (tempc024) - (tempc005) - (tempc015) - (tempc025);
  res03 = convert_uchar16( clamp(resc03, (short)0, (short)255) );
  vstore16(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore16(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore16(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
  vstore16(res03, 0, &pdst[x + 0 + (w) * (y + 3)]);
}
768 x 432 :
Tesla T10 Processor: 
4.623775578359342e-08 s
2560 x 1600 :
4.483375916533665e-08 s
2048 x 2048 :
4.490028274419534e-08 s
5760 x 3240 :
4.532381855703191e-08 s
7680 x 4320 :
4.571460381803438e-08 s
{:x_component_number=>4, :vector_length=>2, :y_component_number=>1, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar2 tempload0_1;
  uchar2 tempload2_3;
  uchar2 tempload4_5;
  uchar2 tempload6_7;
  uchar2 tempload8_9;
  uchar2 res00;
  uchar2 res10;
  int2 tempc000;
  int2 tempc001;
  int2 tempc002;
  int2 tempc100;
  int2 tempc101;
  int2 tempc102;
  int2 tempc010;
  int2 tempc011;
  int2 tempc012;
  int2 tempc110;
  int2 tempc111;
  int2 tempc112;
  int2 tempc020;
  int2 tempc021;
  int2 tempc022;
  int2 tempc120;
  int2 tempc121;
  int2 tempc122;
  int2 resc00;
  int2 resc10;
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + -1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload6_7 = vload2(0, &psrc[x + 3 + (w) * (y + -1)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempc000 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc100 = convert_int2( (uchar2)(tempload2_3.s01) );
  tempc010 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc110 = convert_int2( (uchar2)(tempload4_5.s1,tempload6_7.s0) );
  tempc020 = convert_int2( (uchar2)(tempload6_7.s01) );
  tempc120 = convert_int2( (uchar2)(tempload8_9.s01) );
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + 0)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload6_7 = vload2(0, &psrc[x + 3 + (w) * (y + 0)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempc001 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc101 = convert_int2( (uchar2)(tempload2_3.s01) );
  tempc011 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc111 = convert_int2( (uchar2)(tempload4_5.s1,tempload6_7.s0) );
  tempc021 = convert_int2( (uchar2)(tempload6_7.s01) );
  tempc121 = convert_int2( (uchar2)(tempload8_9.s01) );
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + 1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload6_7 = vload2(0, &psrc[x + 3 + (w) * (y + 1)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempc002 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc102 = convert_int2( (uchar2)(tempload2_3.s01) );
  tempc012 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc112 = convert_int2( (uchar2)(tempload4_5.s1,tempload6_7.s0) );
  tempc022 = convert_int2( (uchar2)(tempload6_7.s01) );
  tempc122 = convert_int2( (uchar2)(tempload8_9.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (int)0, (int)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar2( clamp(resc10, (int)0, (int)255) );
  vstore2(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res10, 0, &pdst[x + 2 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
1.953051187078754e-09 s
2560 x 1600 :
1.917995618056582e-09 s
2048 x 2048 :
1.9087937362462007e-09 s
5760 x 3240 :
1.9004127994651906e-09 s
7680 x 4320 :
1.9072011597894457e-09 s
{:x_component_number=>1, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (4);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (5) ? height - (5) : y));
  uchar4 temp000;
  uchar4 temp001;
  uchar4 temp002;
  uchar4 temp003;
  uchar4 temp004;
  uchar4 temp005;
  uchar4 temp010;
  uchar4 temp011;
  uchar4 temp012;
  uchar4 temp013;
  uchar4 temp014;
  uchar4 temp015;
  uchar4 temp020;
  uchar4 temp021;
  uchar4 temp022;
  uchar4 temp023;
  uchar4 temp024;
  uchar4 temp025;
  uchar4 res00;
  uchar4 res01;
  uchar4 res02;
  uchar4 res03;
  short4 tempc000;
  short4 tempc001;
  short4 tempc002;
  short4 tempc003;
  short4 tempc004;
  short4 tempc005;
  short4 tempc010;
  short4 tempc011;
  short4 tempc012;
  short4 tempc013;
  short4 tempc014;
  short4 tempc015;
  short4 tempc020;
  short4 tempc021;
  short4 tempc022;
  short4 tempc023;
  short4 tempc024;
  short4 tempc025;
  short4 resc00;
  short4 resc01;
  short4 resc02;
  short4 resc03;
  temp000 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short4( temp000 );
  temp010 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short4( temp010 );
  temp020 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short4( temp020 );
  temp001 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short4( temp001 );
  temp011 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short4( temp011 );
  temp021 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short4( temp021 );
  temp002 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short4( temp002 );
  temp012 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short4( temp012 );
  temp022 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short4( temp022 );
  temp003 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_short4( temp003 );
  temp013 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_short4( temp013 );
  temp023 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_short4( temp023 );
  temp004 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_short4( temp004 );
  temp014 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_short4( temp014 );
  temp024 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_short4( temp024 );
  temp005 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 4)]);
  tempc005 = convert_short4( temp005 );
  temp015 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 4)]);
  tempc015 = convert_short4( temp015 );
  temp025 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 4)]);
  tempc025 = convert_short4( temp025 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar4( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar4( clamp(resc02, (short)0, (short)255) );
  resc03 =  -(tempc003) - (tempc013) - (tempc023) - (tempc004) + (tempc014) * ((short)9) - (tempc024) - (tempc005) - (tempc015) - (tempc025);
  res03 = convert_uchar4( clamp(resc03, (short)0, (short)255) );
  vstore4(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore4(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore4(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
  vstore4(res03, 0, &pdst[x + 0 + (w) * (y + 3)]);
}
768 x 432 :
Tesla T10 Processor: 
3.342910923553343e-09 s
2560 x 1600 :
2.6437660053957205e-09 s
2048 x 2048 :
2.5863096005939635e-09 s
5760 x 3240 :
2.6070681583600096e-09 s
7680 x 4320 :
2.7251152544380998e-09 s
{:x_component_number=>16, :vector_length=>8, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (16);
  y = (get_global_id(1)) * (2);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (19) ? w - (19) : x));
  y = (y < 1 ? 1 : (y > height - (3) ? height - (3) : y));
  uchar8 tempload0_7;
  uchar8 tempload8_15;
  uchar4 tempload16_19;
  uchar2 tempload20_21;
  uchar8 res00;
  uchar8 res01;
  uchar8 res10;
  uchar8 res11;
  short8 tempc000;
  short8 tempc001;
  short8 tempc002;
  short8 tempc003;
  short8 tempc100;
  short8 tempc101;
  short8 tempc102;
  short8 tempc103;
  short8 tempc010;
  short8 tempc011;
  short8 tempc012;
  short8 tempc013;
  short8 tempc110;
  short8 tempc111;
  short8 tempc112;
  short8 tempc113;
  short8 tempc020;
  short8 tempc021;
  short8 tempc022;
  short8 tempc023;
  short8 tempc120;
  short8 tempc121;
  short8 tempc122;
  short8 tempc123;
  short8 resc00;
  short8 resc01;
  short8 resc10;
  short8 resc11;
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload8_15 = vload8(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + -1)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + -1)]);
  tempc000 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc100 = convert_short8( (uchar8)(tempload8_15.s01234567) );
  tempc010 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_15.s012) );
  tempc110 = convert_short8( (uchar8)(tempload8_15.s345,tempload8_15.s67,tempload16_19.s012) );
  tempc020 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_15.s012,tempload8_15.s345) );
  tempc120 = convert_short8( (uchar8)(tempload8_15.s67,tempload16_19.s0123,tempload20_21.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload8_15 = vload8(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 0)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 0)]);
  tempc001 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc101 = convert_short8( (uchar8)(tempload8_15.s01234567) );
  tempc011 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_15.s012) );
  tempc111 = convert_short8( (uchar8)(tempload8_15.s345,tempload8_15.s67,tempload16_19.s012) );
  tempc021 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_15.s012,tempload8_15.s345) );
  tempc121 = convert_short8( (uchar8)(tempload8_15.s67,tempload16_19.s0123,tempload20_21.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload8_15 = vload8(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 1)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 1)]);
  tempc002 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc102 = convert_short8( (uchar8)(tempload8_15.s01234567) );
  tempc012 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_15.s012) );
  tempc112 = convert_short8( (uchar8)(tempload8_15.s345,tempload8_15.s67,tempload16_19.s012) );
  tempc022 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_15.s012,tempload8_15.s345) );
  tempc122 = convert_short8( (uchar8)(tempload8_15.s67,tempload16_19.s0123,tempload20_21.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload8_15 = vload8(0, &psrc[x + 5 + (w) * (y + 2)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 2)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 2)]);
  tempc003 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc103 = convert_short8( (uchar8)(tempload8_15.s01234567) );
  tempc013 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_15.s012) );
  tempc113 = convert_short8( (uchar8)(tempload8_15.s345,tempload8_15.s67,tempload16_19.s012) );
  tempc023 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_15.s012,tempload8_15.s345) );
  tempc123 = convert_short8( (uchar8)(tempload8_15.s67,tempload16_19.s0123,tempload20_21.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar8( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar8( clamp(resc01, (short)0, (short)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((short)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar8( clamp(resc10, (short)0, (short)255) );
  resc11 =  -(tempc101) - (tempc111) - (tempc121) - (tempc102) + (tempc112) * ((short)9) - (tempc122) - (tempc103) - (tempc113) - (tempc123);
  res11 = convert_uchar8( clamp(resc11, (short)0, (short)255) );
  vstore8(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore8(res10, 0, &pdst[x + 8 + (w) * (y + 0)]);
  vstore8(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore8(res11, 0, &pdst[x + 8 + (w) * (y + 1)]);
}
768 x 432 :
Tesla T10 Processor: 
2.669354544902544e-09 s
2560 x 1600 :
2.5044597380815154e-09 s
2048 x 2048 :
2.429914507863614e-09 s
5760 x 3240 :
2.579756156324439e-09 s
7680 x 4320 :
2.5888496466326856e-09 s
{:x_component_number=>1, :vector_length=>16, :y_component_number=>2, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (2);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (4) ? w - (4) : x));
  y = (y < 1 ? 1 : (y > height - (3) ? height - (3) : y));
  uchar4 tempload0_3;
  uchar2 tempload4_5;
  uchar tempload6_6;
  uchar16 res00;
  uchar16 res01;
  int16 tempc000;
  int16 tempc001;
  int16 tempc002;
  int16 tempc003;
  int16 tempc010;
  int16 tempc011;
  int16 tempc012;
  int16 tempc013;
  int16 tempc020;
  int16 tempc021;
  int16 tempc022;
  int16 tempc023;
  int16 resc00;
  int16 resc01;
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + -1)];
  tempc000 = convert_int16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc010 = convert_int16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc020 = convert_int16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 0)];
  tempc001 = convert_int16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc011 = convert_int16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc021 = convert_int16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 1)];
  tempc002 = convert_int16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc012 = convert_int16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc022 = convert_int16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 2)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 2)];
  tempc003 = convert_int16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc013 = convert_int16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc023 = convert_int16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar16( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar16( clamp(resc01, (int)0, (int)255) );
  pdst[x + 0 + (w) * (y + 0)] = res00.s0;
  pdst[x + 0 + (w) * (y + 1)] = res01.s0;
}
768 x 432 :
Tesla T10 Processor: 
9.024470216770904e-10 s
2560 x 1600 :
8.4545869984079e-10 s
2048 x 2048 :
8.26044954320425e-10 s
5760 x 3240 :
8.222246203203921e-10 s
7680 x 4320 :
8.029534285322344e-10 s
{:x_component_number=>16, :vector_length=>8, :y_component_number=>1, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (16);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (19) ? w - (19) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar8 tempload0_7;
  uchar8 tempload8_15;
  uchar4 tempload16_19;
  uchar2 tempload20_21;
  uchar8 res00;
  uchar8 res10;
  int8 tempc000;
  int8 tempc001;
  int8 tempc002;
  int8 tempc100;
  int8 tempc101;
  int8 tempc102;
  int8 tempc010;
  int8 tempc011;
  int8 tempc012;
  int8 tempc110;
  int8 tempc111;
  int8 tempc112;
  int8 tempc020;
  int8 tempc021;
  int8 tempc022;
  int8 tempc120;
  int8 tempc121;
  int8 tempc122;
  int8 resc00;
  int8 resc10;
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload8_15 = vload8(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + -1)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + -1)]);
  tempc000 = convert_int8( (uchar8)(tempload0_7.s01234567) );
  tempc100 = convert_int8( (uchar8)(tempload8_15.s01234567) );
  tempc010 = convert_int8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_15.s012) );
  tempc110 = convert_int8( (uchar8)(tempload8_15.s345,tempload8_15.s67,tempload16_19.s012) );
  tempc020 = convert_int8( (uchar8)(tempload0_7.s67,tempload8_15.s012,tempload8_15.s345) );
  tempc120 = convert_int8( (uchar8)(tempload8_15.s67,tempload16_19.s0123,tempload20_21.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload8_15 = vload8(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 0)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 0)]);
  tempc001 = convert_int8( (uchar8)(tempload0_7.s01234567) );
  tempc101 = convert_int8( (uchar8)(tempload8_15.s01234567) );
  tempc011 = convert_int8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_15.s012) );
  tempc111 = convert_int8( (uchar8)(tempload8_15.s345,tempload8_15.s67,tempload16_19.s012) );
  tempc021 = convert_int8( (uchar8)(tempload0_7.s67,tempload8_15.s012,tempload8_15.s345) );
  tempc121 = convert_int8( (uchar8)(tempload8_15.s67,tempload16_19.s0123,tempload20_21.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload8_15 = vload8(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 1)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 1)]);
  tempc002 = convert_int8( (uchar8)(tempload0_7.s01234567) );
  tempc102 = convert_int8( (uchar8)(tempload8_15.s01234567) );
  tempc012 = convert_int8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_15.s012) );
  tempc112 = convert_int8( (uchar8)(tempload8_15.s345,tempload8_15.s67,tempload16_19.s012) );
  tempc022 = convert_int8( (uchar8)(tempload0_7.s67,tempload8_15.s012,tempload8_15.s345) );
  tempc122 = convert_int8( (uchar8)(tempload8_15.s67,tempload16_19.s0123,tempload20_21.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar8( clamp(resc00, (int)0, (int)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar8( clamp(resc10, (int)0, (int)255) );
  vstore8(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore8(res10, 0, &pdst[x + 8 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
3.6000728641690448e-09 s
2560 x 1600 :
3.62157935887412e-09 s
2048 x 2048 :
3.623979841934624e-09 s
5760 x 3240 :
3.593145911234277e-09 s
7680 x 4320 :
3.805302373763045e-09 s
{:x_component_number=>4, :vector_length=>2, :y_component_number=>1, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar2 temp000;
  uchar2 temp001;
  uchar2 temp002;
  uchar2 temp100;
  uchar2 temp101;
  uchar2 temp102;
  uchar2 temp010;
  uchar2 temp011;
  uchar2 temp012;
  uchar2 temp110;
  uchar2 temp111;
  uchar2 temp112;
  uchar2 temp020;
  uchar2 temp021;
  uchar2 temp022;
  uchar2 temp120;
  uchar2 temp121;
  uchar2 temp122;
  uchar2 res00;
  uchar2 res10;
  int2 tempc000;
  int2 tempc001;
  int2 tempc002;
  int2 tempc100;
  int2 tempc101;
  int2 tempc102;
  int2 tempc010;
  int2 tempc011;
  int2 tempc012;
  int2 tempc110;
  int2 tempc111;
  int2 tempc112;
  int2 tempc020;
  int2 tempc021;
  int2 tempc022;
  int2 tempc120;
  int2 tempc121;
  int2 tempc122;
  int2 resc00;
  int2 resc10;
  temp000 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int2( temp000 );
  temp100 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + -1)]);
  tempc100 = convert_int2( temp100 );
  temp010 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int2( temp010 );
  temp110 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + -1)]);
  tempc110 = convert_int2( temp110 );
  temp020 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int2( temp020 );
  temp120 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + -1)]);
  tempc120 = convert_int2( temp120 );
  temp001 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int2( temp001 );
  temp101 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 0)]);
  tempc101 = convert_int2( temp101 );
  temp011 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int2( temp011 );
  temp111 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 0)]);
  tempc111 = convert_int2( temp111 );
  temp021 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int2( temp021 );
  temp121 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 0)]);
  tempc121 = convert_int2( temp121 );
  temp002 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int2( temp002 );
  temp102 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 1)]);
  tempc102 = convert_int2( temp102 );
  temp012 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int2( temp012 );
  temp112 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 1)]);
  tempc112 = convert_int2( temp112 );
  temp022 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int2( temp022 );
  temp122 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 1)]);
  tempc122 = convert_int2( temp122 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (int)0, (int)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar2( clamp(resc10, (int)0, (int)255) );
  vstore2(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res10, 0, &pdst[x + 2 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
1.983362681401421e-09 s
2560 x 1600 :
1.9399620910031207e-09 s
2048 x 2048 :
1.928523719839584e-09 s
5760 x 3240 :
1.918619656600447e-09 s
7680 x 4320 :
1.9148204822618984e-09 s
{:x_component_number=>8, :vector_length=>2, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (8);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar2 temp000;
  uchar2 temp001;
  uchar2 temp002;
  uchar2 temp003;
  uchar2 temp004;
  uchar2 temp100;
  uchar2 temp101;
  uchar2 temp102;
  uchar2 temp103;
  uchar2 temp104;
  uchar2 temp200;
  uchar2 temp201;
  uchar2 temp202;
  uchar2 temp203;
  uchar2 temp204;
  uchar2 temp300;
  uchar2 temp301;
  uchar2 temp302;
  uchar2 temp303;
  uchar2 temp304;
  uchar2 temp010;
  uchar2 temp011;
  uchar2 temp012;
  uchar2 temp013;
  uchar2 temp014;
  uchar2 temp110;
  uchar2 temp111;
  uchar2 temp112;
  uchar2 temp113;
  uchar2 temp114;
  uchar2 temp210;
  uchar2 temp211;
  uchar2 temp212;
  uchar2 temp213;
  uchar2 temp214;
  uchar2 temp310;
  uchar2 temp311;
  uchar2 temp312;
  uchar2 temp313;
  uchar2 temp314;
  uchar2 temp020;
  uchar2 temp021;
  uchar2 temp022;
  uchar2 temp023;
  uchar2 temp024;
  uchar2 temp120;
  uchar2 temp121;
  uchar2 temp122;
  uchar2 temp123;
  uchar2 temp124;
  uchar2 temp220;
  uchar2 temp221;
  uchar2 temp222;
  uchar2 temp223;
  uchar2 temp224;
  uchar2 temp320;
  uchar2 temp321;
  uchar2 temp322;
  uchar2 temp323;
  uchar2 temp324;
  uchar2 res00;
  uchar2 res01;
  uchar2 res02;
  uchar2 res10;
  uchar2 res11;
  uchar2 res12;
  uchar2 res20;
  uchar2 res21;
  uchar2 res22;
  uchar2 res30;
  uchar2 res31;
  uchar2 res32;
  short2 tempc000;
  short2 tempc001;
  short2 tempc002;
  short2 tempc003;
  short2 tempc004;
  short2 tempc100;
  short2 tempc101;
  short2 tempc102;
  short2 tempc103;
  short2 tempc104;
  short2 tempc200;
  short2 tempc201;
  short2 tempc202;
  short2 tempc203;
  short2 tempc204;
  short2 tempc300;
  short2 tempc301;
  short2 tempc302;
  short2 tempc303;
  short2 tempc304;
  short2 tempc010;
  short2 tempc011;
  short2 tempc012;
  short2 tempc013;
  short2 tempc014;
  short2 tempc110;
  short2 tempc111;
  short2 tempc112;
  short2 tempc113;
  short2 tempc114;
  short2 tempc210;
  short2 tempc211;
  short2 tempc212;
  short2 tempc213;
  short2 tempc214;
  short2 tempc310;
  short2 tempc311;
  short2 tempc312;
  short2 tempc313;
  short2 tempc314;
  short2 tempc020;
  short2 tempc021;
  short2 tempc022;
  short2 tempc023;
  short2 tempc024;
  short2 tempc120;
  short2 tempc121;
  short2 tempc122;
  short2 tempc123;
  short2 tempc124;
  short2 tempc220;
  short2 tempc221;
  short2 tempc222;
  short2 tempc223;
  short2 tempc224;
  short2 tempc320;
  short2 tempc321;
  short2 tempc322;
  short2 tempc323;
  short2 tempc324;
  short2 resc00;
  short2 resc01;
  short2 resc02;
  short2 resc10;
  short2 resc11;
  short2 resc12;
  short2 resc20;
  short2 resc21;
  short2 resc22;
  short2 resc30;
  short2 resc31;
  short2 resc32;
  temp000 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short2( temp000 );
  temp100 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + -1)]);
  tempc100 = convert_short2( temp100 );
  temp200 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + -1)]);
  tempc200 = convert_short2( temp200 );
  temp300 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + -1)]);
  tempc300 = convert_short2( temp300 );
  temp010 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short2( temp010 );
  temp110 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + -1)]);
  tempc110 = convert_short2( temp110 );
  temp210 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + -1)]);
  tempc210 = convert_short2( temp210 );
  temp310 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + -1)]);
  tempc310 = convert_short2( temp310 );
  temp020 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short2( temp020 );
  temp120 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + -1)]);
  tempc120 = convert_short2( temp120 );
  temp220 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + -1)]);
  tempc220 = convert_short2( temp220 );
  temp320 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + -1)]);
  tempc320 = convert_short2( temp320 );
  temp001 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short2( temp001 );
  temp101 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 0)]);
  tempc101 = convert_short2( temp101 );
  temp201 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 0)]);
  tempc201 = convert_short2( temp201 );
  temp301 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 0)]);
  tempc301 = convert_short2( temp301 );
  temp011 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short2( temp011 );
  temp111 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 0)]);
  tempc111 = convert_short2( temp111 );
  temp211 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 0)]);
  tempc211 = convert_short2( temp211 );
  temp311 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 0)]);
  tempc311 = convert_short2( temp311 );
  temp021 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short2( temp021 );
  temp121 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 0)]);
  tempc121 = convert_short2( temp121 );
  temp221 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 0)]);
  tempc221 = convert_short2( temp221 );
  temp321 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 0)]);
  tempc321 = convert_short2( temp321 );
  temp002 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short2( temp002 );
  temp102 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 1)]);
  tempc102 = convert_short2( temp102 );
  temp202 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 1)]);
  tempc202 = convert_short2( temp202 );
  temp302 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 1)]);
  tempc302 = convert_short2( temp302 );
  temp012 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short2( temp012 );
  temp112 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 1)]);
  tempc112 = convert_short2( temp112 );
  temp212 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 1)]);
  tempc212 = convert_short2( temp212 );
  temp312 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 1)]);
  tempc312 = convert_short2( temp312 );
  temp022 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short2( temp022 );
  temp122 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 1)]);
  tempc122 = convert_short2( temp122 );
  temp222 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 1)]);
  tempc222 = convert_short2( temp222 );
  temp322 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 1)]);
  tempc322 = convert_short2( temp322 );
  temp003 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_short2( temp003 );
  temp103 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 2)]);
  tempc103 = convert_short2( temp103 );
  temp203 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 2)]);
  tempc203 = convert_short2( temp203 );
  temp303 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 2)]);
  tempc303 = convert_short2( temp303 );
  temp013 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_short2( temp013 );
  temp113 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 2)]);
  tempc113 = convert_short2( temp113 );
  temp213 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 2)]);
  tempc213 = convert_short2( temp213 );
  temp313 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 2)]);
  tempc313 = convert_short2( temp313 );
  temp023 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_short2( temp023 );
  temp123 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 2)]);
  tempc123 = convert_short2( temp123 );
  temp223 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 2)]);
  tempc223 = convert_short2( temp223 );
  temp323 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 2)]);
  tempc323 = convert_short2( temp323 );
  temp004 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_short2( temp004 );
  temp104 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 3)]);
  tempc104 = convert_short2( temp104 );
  temp204 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 3)]);
  tempc204 = convert_short2( temp204 );
  temp304 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 3)]);
  tempc304 = convert_short2( temp304 );
  temp014 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_short2( temp014 );
  temp114 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 3)]);
  tempc114 = convert_short2( temp114 );
  temp214 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 3)]);
  tempc214 = convert_short2( temp214 );
  temp314 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 3)]);
  tempc314 = convert_short2( temp314 );
  temp024 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_short2( temp024 );
  temp124 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 3)]);
  tempc124 = convert_short2( temp124 );
  temp224 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 3)]);
  tempc224 = convert_short2( temp224 );
  temp324 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 3)]);
  tempc324 = convert_short2( temp324 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar2( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar2( clamp(resc02, (short)0, (short)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((short)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar2( clamp(resc10, (short)0, (short)255) );
  resc11 =  -(tempc101) - (tempc111) - (tempc121) - (tempc102) + (tempc112) * ((short)9) - (tempc122) - (tempc103) - (tempc113) - (tempc123);
  res11 = convert_uchar2( clamp(resc11, (short)0, (short)255) );
  resc12 =  -(tempc102) - (tempc112) - (tempc122) - (tempc103) + (tempc113) * ((short)9) - (tempc123) - (tempc104) - (tempc114) - (tempc124);
  res12 = convert_uchar2( clamp(resc12, (short)0, (short)255) );
  resc20 =  -(tempc200) - (tempc210) - (tempc220) - (tempc201) + (tempc211) * ((short)9) - (tempc221) - (tempc202) - (tempc212) - (tempc222);
  res20 = convert_uchar2( clamp(resc20, (short)0, (short)255) );
  resc21 =  -(tempc201) - (tempc211) - (tempc221) - (tempc202) + (tempc212) * ((short)9) - (tempc222) - (tempc203) - (tempc213) - (tempc223);
  res21 = convert_uchar2( clamp(resc21, (short)0, (short)255) );
  resc22 =  -(tempc202) - (tempc212) - (tempc222) - (tempc203) + (tempc213) * ((short)9) - (tempc223) - (tempc204) - (tempc214) - (tempc224);
  res22 = convert_uchar2( clamp(resc22, (short)0, (short)255) );
  resc30 =  -(tempc300) - (tempc310) - (tempc320) - (tempc301) + (tempc311) * ((short)9) - (tempc321) - (tempc302) - (tempc312) - (tempc322);
  res30 = convert_uchar2( clamp(resc30, (short)0, (short)255) );
  resc31 =  -(tempc301) - (tempc311) - (tempc321) - (tempc302) + (tempc312) * ((short)9) - (tempc322) - (tempc303) - (tempc313) - (tempc323);
  res31 = convert_uchar2( clamp(resc31, (short)0, (short)255) );
  resc32 =  -(tempc302) - (tempc312) - (tempc322) - (tempc303) + (tempc313) * ((short)9) - (tempc323) - (tempc304) - (tempc314) - (tempc324);
  res32 = convert_uchar2( clamp(resc32, (short)0, (short)255) );
  vstore2(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res10, 0, &pdst[x + 2 + (w) * (y + 0)]);
  vstore2(res20, 0, &pdst[x + 4 + (w) * (y + 0)]);
  vstore2(res30, 0, &pdst[x + 6 + (w) * (y + 0)]);
  vstore2(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore2(res11, 0, &pdst[x + 2 + (w) * (y + 1)]);
  vstore2(res21, 0, &pdst[x + 4 + (w) * (y + 1)]);
  vstore2(res31, 0, &pdst[x + 6 + (w) * (y + 1)]);
  vstore2(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
  vstore2(res12, 0, &pdst[x + 2 + (w) * (y + 2)]);
  vstore2(res22, 0, &pdst[x + 4 + (w) * (y + 2)]);
  vstore2(res32, 0, &pdst[x + 6 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
1.611852571497966e-09 s
2560 x 1600 :
1.504413746268058e-09 s
2048 x 2048 :
1.5587222141001348e-09 s
5760 x 3240 :
1.4889649462648417e-09 s
7680 x 4320 :
1.4910871228358763e-09 s
{:x_component_number=>16, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (16);
  y = (get_global_id(1)) * (4);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (19) ? w - (19) : x));
  y = (y < 1 ? 1 : (y > height - (5) ? height - (5) : y));
  uchar temp000;
  uchar temp001;
  uchar temp002;
  uchar temp003;
  uchar temp004;
  uchar temp005;
  uchar temp100;
  uchar temp101;
  uchar temp102;
  uchar temp103;
  uchar temp104;
  uchar temp105;
  uchar temp200;
  uchar temp201;
  uchar temp202;
  uchar temp203;
  uchar temp204;
  uchar temp205;
  uchar temp300;
  uchar temp301;
  uchar temp302;
  uchar temp303;
  uchar temp304;
  uchar temp305;
  uchar temp400;
  uchar temp401;
  uchar temp402;
  uchar temp403;
  uchar temp404;
  uchar temp405;
  uchar temp500;
  uchar temp501;
  uchar temp502;
  uchar temp503;
  uchar temp504;
  uchar temp505;
  uchar temp600;
  uchar temp601;
  uchar temp602;
  uchar temp603;
  uchar temp604;
  uchar temp605;
  uchar temp700;
  uchar temp701;
  uchar temp702;
  uchar temp703;
  uchar temp704;
  uchar temp705;
  uchar temp800;
  uchar temp801;
  uchar temp802;
  uchar temp803;
  uchar temp804;
  uchar temp805;
  uchar temp900;
  uchar temp901;
  uchar temp902;
  uchar temp903;
  uchar temp904;
  uchar temp905;
  uchar temp1000;
  uchar temp1001;
  uchar temp1002;
  uchar temp1003;
  uchar temp1004;
  uchar temp1005;
  uchar temp1100;
  uchar temp1101;
  uchar temp1102;
  uchar temp1103;
  uchar temp1104;
  uchar temp1105;
  uchar temp1200;
  uchar temp1201;
  uchar temp1202;
  uchar temp1203;
  uchar temp1204;
  uchar temp1205;
  uchar temp1300;
  uchar temp1301;
  uchar temp1302;
  uchar temp1303;
  uchar temp1304;
  uchar temp1305;
  uchar temp1400;
  uchar temp1401;
  uchar temp1402;
  uchar temp1403;
  uchar temp1404;
  uchar temp1405;
  uchar temp1500;
  uchar temp1501;
  uchar temp1502;
  uchar temp1503;
  uchar temp1504;
  uchar temp1505;
  uchar temp010;
  uchar temp011;
  uchar temp012;
  uchar temp013;
  uchar temp014;
  uchar temp015;
  uchar temp110;
  uchar temp111;
  uchar temp112;
  uchar temp113;
  uchar temp114;
  uchar temp115;
  uchar temp210;
  uchar temp211;
  uchar temp212;
  uchar temp213;
  uchar temp214;
  uchar temp215;
  uchar temp310;
  uchar temp311;
  uchar temp312;
  uchar temp313;
  uchar temp314;
  uchar temp315;
  uchar temp410;
  uchar temp411;
  uchar temp412;
  uchar temp413;
  uchar temp414;
  uchar temp415;
  uchar temp510;
  uchar temp511;
  uchar temp512;
  uchar temp513;
  uchar temp514;
  uchar temp515;
  uchar temp610;
  uchar temp611;
  uchar temp612;
  uchar temp613;
  uchar temp614;
  uchar temp615;
  uchar temp710;
  uchar temp711;
  uchar temp712;
  uchar temp713;
  uchar temp714;
  uchar temp715;
  uchar temp810;
  uchar temp811;
  uchar temp812;
  uchar temp813;
  uchar temp814;
  uchar temp815;
  uchar temp910;
  uchar temp911;
  uchar temp912;
  uchar temp913;
  uchar temp914;
  uchar temp915;
  uchar temp1010;
  uchar temp1011;
  uchar temp1012;
  uchar temp1013;
  uchar temp1014;
  uchar temp1015;
  uchar temp1110;
  uchar temp1111;
  uchar temp1112;
  uchar temp1113;
  uchar temp1114;
  uchar temp1115;
  uchar temp1210;
  uchar temp1211;
  uchar temp1212;
  uchar temp1213;
  uchar temp1214;
  uchar temp1215;
  uchar temp1310;
  uchar temp1311;
  uchar temp1312;
  uchar temp1313;
  uchar temp1314;
  uchar temp1315;
  uchar temp1410;
  uchar temp1411;
  uchar temp1412;
  uchar temp1413;
  uchar temp1414;
  uchar temp1415;
  uchar temp1510;
  uchar temp1511;
  uchar temp1512;
  uchar temp1513;
  uchar temp1514;
  uchar temp1515;
  uchar temp020;
  uchar temp021;
  uchar temp022;
  uchar temp023;
  uchar temp024;
  uchar temp025;
  uchar temp120;
  uchar temp121;
  uchar temp122;
  uchar temp123;
  uchar temp124;
  uchar temp125;
  uchar temp220;
  uchar temp221;
  uchar temp222;
  uchar temp223;
  uchar temp224;
  uchar temp225;
  uchar temp320;
  uchar temp321;
  uchar temp322;
  uchar temp323;
  uchar temp324;
  uchar temp325;
  uchar temp420;
  uchar temp421;
  uchar temp422;
  uchar temp423;
  uchar temp424;
  uchar temp425;
  uchar temp520;
  uchar temp521;
  uchar temp522;
  uchar temp523;
  uchar temp524;
  uchar temp525;
  uchar temp620;
  uchar temp621;
  uchar temp622;
  uchar temp623;
  uchar temp624;
  uchar temp625;
  uchar temp720;
  uchar temp721;
  uchar temp722;
  uchar temp723;
  uchar temp724;
  uchar temp725;
  uchar temp820;
  uchar temp821;
  uchar temp822;
  uchar temp823;
  uchar temp824;
  uchar temp825;
  uchar temp920;
  uchar temp921;
  uchar temp922;
  uchar temp923;
  uchar temp924;
  uchar temp925;
  uchar temp1020;
  uchar temp1021;
  uchar temp1022;
  uchar temp1023;
  uchar temp1024;
  uchar temp1025;
  uchar temp1120;
  uchar temp1121;
  uchar temp1122;
  uchar temp1123;
  uchar temp1124;
  uchar temp1125;
  uchar temp1220;
  uchar temp1221;
  uchar temp1222;
  uchar temp1223;
  uchar temp1224;
  uchar temp1225;
  uchar temp1320;
  uchar temp1321;
  uchar temp1322;
  uchar temp1323;
  uchar temp1324;
  uchar temp1325;
  uchar temp1420;
  uchar temp1421;
  uchar temp1422;
  uchar temp1423;
  uchar temp1424;
  uchar temp1425;
  uchar temp1520;
  uchar temp1521;
  uchar temp1522;
  uchar temp1523;
  uchar temp1524;
  uchar temp1525;
  uchar res00;
  uchar res01;
  uchar res02;
  uchar res03;
  uchar res10;
  uchar res11;
  uchar res12;
  uchar res13;
  uchar res20;
  uchar res21;
  uchar res22;
  uchar res23;
  uchar res30;
  uchar res31;
  uchar res32;
  uchar res33;
  uchar res40;
  uchar res41;
  uchar res42;
  uchar res43;
  uchar res50;
  uchar res51;
  uchar res52;
  uchar res53;
  uchar res60;
  uchar res61;
  uchar res62;
  uchar res63;
  uchar res70;
  uchar res71;
  uchar res72;
  uchar res73;
  uchar res80;
  uchar res81;
  uchar res82;
  uchar res83;
  uchar res90;
  uchar res91;
  uchar res92;
  uchar res93;
  uchar res100;
  uchar res101;
  uchar res102;
  uchar res103;
  uchar res110;
  uchar res111;
  uchar res112;
  uchar res113;
  uchar res120;
  uchar res121;
  uchar res122;
  uchar res123;
  uchar res130;
  uchar res131;
  uchar res132;
  uchar res133;
  uchar res140;
  uchar res141;
  uchar res142;
  uchar res143;
  uchar res150;
  uchar res151;
  uchar res152;
  uchar res153;
  int tempc000;
  int tempc001;
  int tempc002;
  int tempc003;
  int tempc004;
  int tempc005;
  int tempc100;
  int tempc101;
  int tempc102;
  int tempc103;
  int tempc104;
  int tempc105;
  int tempc200;
  int tempc201;
  int tempc202;
  int tempc203;
  int tempc204;
  int tempc205;
  int tempc300;
  int tempc301;
  int tempc302;
  int tempc303;
  int tempc304;
  int tempc305;
  int tempc400;
  int tempc401;
  int tempc402;
  int tempc403;
  int tempc404;
  int tempc405;
  int tempc500;
  int tempc501;
  int tempc502;
  int tempc503;
  int tempc504;
  int tempc505;
  int tempc600;
  int tempc601;
  int tempc602;
  int tempc603;
  int tempc604;
  int tempc605;
  int tempc700;
  int tempc701;
  int tempc702;
  int tempc703;
  int tempc704;
  int tempc705;
  int tempc800;
  int tempc801;
  int tempc802;
  int tempc803;
  int tempc804;
  int tempc805;
  int tempc900;
  int tempc901;
  int tempc902;
  int tempc903;
  int tempc904;
  int tempc905;
  int tempc1000;
  int tempc1001;
  int tempc1002;
  int tempc1003;
  int tempc1004;
  int tempc1005;
  int tempc1100;
  int tempc1101;
  int tempc1102;
  int tempc1103;
  int tempc1104;
  int tempc1105;
  int tempc1200;
  int tempc1201;
  int tempc1202;
  int tempc1203;
  int tempc1204;
  int tempc1205;
  int tempc1300;
  int tempc1301;
  int tempc1302;
  int tempc1303;
  int tempc1304;
  int tempc1305;
  int tempc1400;
  int tempc1401;
  int tempc1402;
  int tempc1403;
  int tempc1404;
  int tempc1405;
  int tempc1500;
  int tempc1501;
  int tempc1502;
  int tempc1503;
  int tempc1504;
  int tempc1505;
  int tempc010;
  int tempc011;
  int tempc012;
  int tempc013;
  int tempc014;
  int tempc015;
  int tempc110;
  int tempc111;
  int tempc112;
  int tempc113;
  int tempc114;
  int tempc115;
  int tempc210;
  int tempc211;
  int tempc212;
  int tempc213;
  int tempc214;
  int tempc215;
  int tempc310;
  int tempc311;
  int tempc312;
  int tempc313;
  int tempc314;
  int tempc315;
  int tempc410;
  int tempc411;
  int tempc412;
  int tempc413;
  int tempc414;
  int tempc415;
  int tempc510;
  int tempc511;
  int tempc512;
  int tempc513;
  int tempc514;
  int tempc515;
  int tempc610;
  int tempc611;
  int tempc612;
  int tempc613;
  int tempc614;
  int tempc615;
  int tempc710;
  int tempc711;
  int tempc712;
  int tempc713;
  int tempc714;
  int tempc715;
  int tempc810;
  int tempc811;
  int tempc812;
  int tempc813;
  int tempc814;
  int tempc815;
  int tempc910;
  int tempc911;
  int tempc912;
  int tempc913;
  int tempc914;
  int tempc915;
  int tempc1010;
  int tempc1011;
  int tempc1012;
  int tempc1013;
  int tempc1014;
  int tempc1015;
  int tempc1110;
  int tempc1111;
  int tempc1112;
  int tempc1113;
  int tempc1114;
  int tempc1115;
  int tempc1210;
  int tempc1211;
  int tempc1212;
  int tempc1213;
  int tempc1214;
  int tempc1215;
  int tempc1310;
  int tempc1311;
  int tempc1312;
  int tempc1313;
  int tempc1314;
  int tempc1315;
  int tempc1410;
  int tempc1411;
  int tempc1412;
  int tempc1413;
  int tempc1414;
  int tempc1415;
  int tempc1510;
  int tempc1511;
  int tempc1512;
  int tempc1513;
  int tempc1514;
  int tempc1515;
  int tempc020;
  int tempc021;
  int tempc022;
  int tempc023;
  int tempc024;
  int tempc025;
  int tempc120;
  int tempc121;
  int tempc122;
  int tempc123;
  int tempc124;
  int tempc125;
  int tempc220;
  int tempc221;
  int tempc222;
  int tempc223;
  int tempc224;
  int tempc225;
  int tempc320;
  int tempc321;
  int tempc322;
  int tempc323;
  int tempc324;
  int tempc325;
  int tempc420;
  int tempc421;
  int tempc422;
  int tempc423;
  int tempc424;
  int tempc425;
  int tempc520;
  int tempc521;
  int tempc522;
  int tempc523;
  int tempc524;
  int tempc525;
  int tempc620;
  int tempc621;
  int tempc622;
  int tempc623;
  int tempc624;
  int tempc625;
  int tempc720;
  int tempc721;
  int tempc722;
  int tempc723;
  int tempc724;
  int tempc725;
  int tempc820;
  int tempc821;
  int tempc822;
  int tempc823;
  int tempc824;
  int tempc825;
  int tempc920;
  int tempc921;
  int tempc922;
  int tempc923;
  int tempc924;
  int tempc925;
  int tempc1020;
  int tempc1021;
  int tempc1022;
  int tempc1023;
  int tempc1024;
  int tempc1025;
  int tempc1120;
  int tempc1121;
  int tempc1122;
  int tempc1123;
  int tempc1124;
  int tempc1125;
  int tempc1220;
  int tempc1221;
  int tempc1222;
  int tempc1223;
  int tempc1224;
  int tempc1225;
  int tempc1320;
  int tempc1321;
  int tempc1322;
  int tempc1323;
  int tempc1324;
  int tempc1325;
  int tempc1420;
  int tempc1421;
  int tempc1422;
  int tempc1423;
  int tempc1424;
  int tempc1425;
  int tempc1520;
  int tempc1521;
  int tempc1522;
  int tempc1523;
  int tempc1524;
  int tempc1525;
  int resc00;
  int resc01;
  int resc02;
  int resc03;
  int resc10;
  int resc11;
  int resc12;
  int resc13;
  int resc20;
  int resc21;
  int resc22;
  int resc23;
  int resc30;
  int resc31;
  int resc32;
  int resc33;
  int resc40;
  int resc41;
  int resc42;
  int resc43;
  int resc50;
  int resc51;
  int resc52;
  int resc53;
  int resc60;
  int resc61;
  int resc62;
  int resc63;
  int resc70;
  int resc71;
  int resc72;
  int resc73;
  int resc80;
  int resc81;
  int resc82;
  int resc83;
  int resc90;
  int resc91;
  int resc92;
  int resc93;
  int resc100;
  int resc101;
  int resc102;
  int resc103;
  int resc110;
  int resc111;
  int resc112;
  int resc113;
  int resc120;
  int resc121;
  int resc122;
  int resc123;
  int resc130;
  int resc131;
  int resc132;
  int resc133;
  int resc140;
  int resc141;
  int resc142;
  int resc143;
  int resc150;
  int resc151;
  int resc152;
  int resc153;
  temp000 = psrc[x + 0 + -3 + (w) * (y + -1)];
  tempc000 = temp000;
  temp100 = psrc[x + 1 + -3 + (w) * (y + -1)];
  tempc100 = temp100;
  temp200 = psrc[x + 2 + -3 + (w) * (y + -1)];
  tempc200 = temp200;
  temp300 = psrc[x + 3 + -3 + (w) * (y + -1)];
  tempc300 = temp300;
  temp400 = psrc[x + 4 + -3 + (w) * (y + -1)];
  tempc400 = temp400;
  temp500 = psrc[x + 5 + -3 + (w) * (y + -1)];
  tempc500 = temp500;
  temp600 = psrc[x + 6 + -3 + (w) * (y + -1)];
  tempc600 = temp600;
  temp700 = psrc[x + 7 + -3 + (w) * (y + -1)];
  tempc700 = temp700;
  temp800 = psrc[x + 8 + -3 + (w) * (y + -1)];
  tempc800 = temp800;
  temp900 = psrc[x + 9 + -3 + (w) * (y + -1)];
  tempc900 = temp900;
  temp1000 = psrc[x + 10 + -3 + (w) * (y + -1)];
  tempc1000 = temp1000;
  temp1100 = psrc[x + 11 + -3 + (w) * (y + -1)];
  tempc1100 = temp1100;
  temp1200 = psrc[x + 12 + -3 + (w) * (y + -1)];
  tempc1200 = temp1200;
  temp1300 = psrc[x + 13 + -3 + (w) * (y + -1)];
  tempc1300 = temp1300;
  temp1400 = psrc[x + 14 + -3 + (w) * (y + -1)];
  tempc1400 = temp1400;
  temp1500 = psrc[x + 15 + -3 + (w) * (y + -1)];
  tempc1500 = temp1500;
  temp010 = psrc[x + 0 + 0 + (w) * (y + -1)];
  tempc010 = temp010;
  temp110 = psrc[x + 1 + 0 + (w) * (y + -1)];
  tempc110 = temp110;
  temp210 = psrc[x + 2 + 0 + (w) * (y + -1)];
  tempc210 = temp210;
  temp310 = psrc[x + 3 + 0 + (w) * (y + -1)];
  tempc310 = temp310;
  temp410 = psrc[x + 4 + 0 + (w) * (y + -1)];
  tempc410 = temp410;
  temp510 = psrc[x + 5 + 0 + (w) * (y + -1)];
  tempc510 = temp510;
  temp610 = psrc[x + 6 + 0 + (w) * (y + -1)];
  tempc610 = temp610;
  temp710 = psrc[x + 7 + 0 + (w) * (y + -1)];
  tempc710 = temp710;
  temp810 = psrc[x + 8 + 0 + (w) * (y + -1)];
  tempc810 = temp810;
  temp910 = psrc[x + 9 + 0 + (w) * (y + -1)];
  tempc910 = temp910;
  temp1010 = psrc[x + 10 + 0 + (w) * (y + -1)];
  tempc1010 = temp1010;
  temp1110 = psrc[x + 11 + 0 + (w) * (y + -1)];
  tempc1110 = temp1110;
  temp1210 = psrc[x + 12 + 0 + (w) * (y + -1)];
  tempc1210 = temp1210;
  temp1310 = psrc[x + 13 + 0 + (w) * (y + -1)];
  tempc1310 = temp1310;
  temp1410 = psrc[x + 14 + 0 + (w) * (y + -1)];
  tempc1410 = temp1410;
  temp1510 = psrc[x + 15 + 0 + (w) * (y + -1)];
  tempc1510 = temp1510;
  temp020 = psrc[x + 0 + 3 + (w) * (y + -1)];
  tempc020 = temp020;
  temp120 = psrc[x + 1 + 3 + (w) * (y + -1)];
  tempc120 = temp120;
  temp220 = psrc[x + 2 + 3 + (w) * (y + -1)];
  tempc220 = temp220;
  temp320 = psrc[x + 3 + 3 + (w) * (y + -1)];
  tempc320 = temp320;
  temp420 = psrc[x + 4 + 3 + (w) * (y + -1)];
  tempc420 = temp420;
  temp520 = psrc[x + 5 + 3 + (w) * (y + -1)];
  tempc520 = temp520;
  temp620 = psrc[x + 6 + 3 + (w) * (y + -1)];
  tempc620 = temp620;
  temp720 = psrc[x + 7 + 3 + (w) * (y + -1)];
  tempc720 = temp720;
  temp820 = psrc[x + 8 + 3 + (w) * (y + -1)];
  tempc820 = temp820;
  temp920 = psrc[x + 9 + 3 + (w) * (y + -1)];
  tempc920 = temp920;
  temp1020 = psrc[x + 10 + 3 + (w) * (y + -1)];
  tempc1020 = temp1020;
  temp1120 = psrc[x + 11 + 3 + (w) * (y + -1)];
  tempc1120 = temp1120;
  temp1220 = psrc[x + 12 + 3 + (w) * (y + -1)];
  tempc1220 = temp1220;
  temp1320 = psrc[x + 13 + 3 + (w) * (y + -1)];
  tempc1320 = temp1320;
  temp1420 = psrc[x + 14 + 3 + (w) * (y + -1)];
  tempc1420 = temp1420;
  temp1520 = psrc[x + 15 + 3 + (w) * (y + -1)];
  tempc1520 = temp1520;
  temp001 = psrc[x + 0 + -3 + (w) * (y + 0)];
  tempc001 = temp001;
  temp101 = psrc[x + 1 + -3 + (w) * (y + 0)];
  tempc101 = temp101;
  temp201 = psrc[x + 2 + -3 + (w) * (y + 0)];
  tempc201 = temp201;
  temp301 = psrc[x + 3 + -3 + (w) * (y + 0)];
  tempc301 = temp301;
  temp401 = psrc[x + 4 + -3 + (w) * (y + 0)];
  tempc401 = temp401;
  temp501 = psrc[x + 5 + -3 + (w) * (y + 0)];
  tempc501 = temp501;
  temp601 = psrc[x + 6 + -3 + (w) * (y + 0)];
  tempc601 = temp601;
  temp701 = psrc[x + 7 + -3 + (w) * (y + 0)];
  tempc701 = temp701;
  temp801 = psrc[x + 8 + -3 + (w) * (y + 0)];
  tempc801 = temp801;
  temp901 = psrc[x + 9 + -3 + (w) * (y + 0)];
  tempc901 = temp901;
  temp1001 = psrc[x + 10 + -3 + (w) * (y + 0)];
  tempc1001 = temp1001;
  temp1101 = psrc[x + 11 + -3 + (w) * (y + 0)];
  tempc1101 = temp1101;
  temp1201 = psrc[x + 12 + -3 + (w) * (y + 0)];
  tempc1201 = temp1201;
  temp1301 = psrc[x + 13 + -3 + (w) * (y + 0)];
  tempc1301 = temp1301;
  temp1401 = psrc[x + 14 + -3 + (w) * (y + 0)];
  tempc1401 = temp1401;
  temp1501 = psrc[x + 15 + -3 + (w) * (y + 0)];
  tempc1501 = temp1501;
  temp011 = psrc[x + 0 + 0 + (w) * (y + 0)];
  tempc011 = temp011;
  temp111 = psrc[x + 1 + 0 + (w) * (y + 0)];
  tempc111 = temp111;
  temp211 = psrc[x + 2 + 0 + (w) * (y + 0)];
  tempc211 = temp211;
  temp311 = psrc[x + 3 + 0 + (w) * (y + 0)];
  tempc311 = temp311;
  temp411 = psrc[x + 4 + 0 + (w) * (y + 0)];
  tempc411 = temp411;
  temp511 = psrc[x + 5 + 0 + (w) * (y + 0)];
  tempc511 = temp511;
  temp611 = psrc[x + 6 + 0 + (w) * (y + 0)];
  tempc611 = temp611;
  temp711 = psrc[x + 7 + 0 + (w) * (y + 0)];
  tempc711 = temp711;
  temp811 = psrc[x + 8 + 0 + (w) * (y + 0)];
  tempc811 = temp811;
  temp911 = psrc[x + 9 + 0 + (w) * (y + 0)];
  tempc911 = temp911;
  temp1011 = psrc[x + 10 + 0 + (w) * (y + 0)];
  tempc1011 = temp1011;
  temp1111 = psrc[x + 11 + 0 + (w) * (y + 0)];
  tempc1111 = temp1111;
  temp1211 = psrc[x + 12 + 0 + (w) * (y + 0)];
  tempc1211 = temp1211;
  temp1311 = psrc[x + 13 + 0 + (w) * (y + 0)];
  tempc1311 = temp1311;
  temp1411 = psrc[x + 14 + 0 + (w) * (y + 0)];
  tempc1411 = temp1411;
  temp1511 = psrc[x + 15 + 0 + (w) * (y + 0)];
  tempc1511 = temp1511;
  temp021 = psrc[x + 0 + 3 + (w) * (y + 0)];
  tempc021 = temp021;
  temp121 = psrc[x + 1 + 3 + (w) * (y + 0)];
  tempc121 = temp121;
  temp221 = psrc[x + 2 + 3 + (w) * (y + 0)];
  tempc221 = temp221;
  temp321 = psrc[x + 3 + 3 + (w) * (y + 0)];
  tempc321 = temp321;
  temp421 = psrc[x + 4 + 3 + (w) * (y + 0)];
  tempc421 = temp421;
  temp521 = psrc[x + 5 + 3 + (w) * (y + 0)];
  tempc521 = temp521;
  temp621 = psrc[x + 6 + 3 + (w) * (y + 0)];
  tempc621 = temp621;
  temp721 = psrc[x + 7 + 3 + (w) * (y + 0)];
  tempc721 = temp721;
  temp821 = psrc[x + 8 + 3 + (w) * (y + 0)];
  tempc821 = temp821;
  temp921 = psrc[x + 9 + 3 + (w) * (y + 0)];
  tempc921 = temp921;
  temp1021 = psrc[x + 10 + 3 + (w) * (y + 0)];
  tempc1021 = temp1021;
  temp1121 = psrc[x + 11 + 3 + (w) * (y + 0)];
  tempc1121 = temp1121;
  temp1221 = psrc[x + 12 + 3 + (w) * (y + 0)];
  tempc1221 = temp1221;
  temp1321 = psrc[x + 13 + 3 + (w) * (y + 0)];
  tempc1321 = temp1321;
  temp1421 = psrc[x + 14 + 3 + (w) * (y + 0)];
  tempc1421 = temp1421;
  temp1521 = psrc[x + 15 + 3 + (w) * (y + 0)];
  tempc1521 = temp1521;
  temp002 = psrc[x + 0 + -3 + (w) * (y + 1)];
  tempc002 = temp002;
  temp102 = psrc[x + 1 + -3 + (w) * (y + 1)];
  tempc102 = temp102;
  temp202 = psrc[x + 2 + -3 + (w) * (y + 1)];
  tempc202 = temp202;
  temp302 = psrc[x + 3 + -3 + (w) * (y + 1)];
  tempc302 = temp302;
  temp402 = psrc[x + 4 + -3 + (w) * (y + 1)];
  tempc402 = temp402;
  temp502 = psrc[x + 5 + -3 + (w) * (y + 1)];
  tempc502 = temp502;
  temp602 = psrc[x + 6 + -3 + (w) * (y + 1)];
  tempc602 = temp602;
  temp702 = psrc[x + 7 + -3 + (w) * (y + 1)];
  tempc702 = temp702;
  temp802 = psrc[x + 8 + -3 + (w) * (y + 1)];
  tempc802 = temp802;
  temp902 = psrc[x + 9 + -3 + (w) * (y + 1)];
  tempc902 = temp902;
  temp1002 = psrc[x + 10 + -3 + (w) * (y + 1)];
  tempc1002 = temp1002;
  temp1102 = psrc[x + 11 + -3 + (w) * (y + 1)];
  tempc1102 = temp1102;
  temp1202 = psrc[x + 12 + -3 + (w) * (y + 1)];
  tempc1202 = temp1202;
  temp1302 = psrc[x + 13 + -3 + (w) * (y + 1)];
  tempc1302 = temp1302;
  temp1402 = psrc[x + 14 + -3 + (w) * (y + 1)];
  tempc1402 = temp1402;
  temp1502 = psrc[x + 15 + -3 + (w) * (y + 1)];
  tempc1502 = temp1502;
  temp012 = psrc[x + 0 + 0 + (w) * (y + 1)];
  tempc012 = temp012;
  temp112 = psrc[x + 1 + 0 + (w) * (y + 1)];
  tempc112 = temp112;
  temp212 = psrc[x + 2 + 0 + (w) * (y + 1)];
  tempc212 = temp212;
  temp312 = psrc[x + 3 + 0 + (w) * (y + 1)];
  tempc312 = temp312;
  temp412 = psrc[x + 4 + 0 + (w) * (y + 1)];
  tempc412 = temp412;
  temp512 = psrc[x + 5 + 0 + (w) * (y + 1)];
  tempc512 = temp512;
  temp612 = psrc[x + 6 + 0 + (w) * (y + 1)];
  tempc612 = temp612;
  temp712 = psrc[x + 7 + 0 + (w) * (y + 1)];
  tempc712 = temp712;
  temp812 = psrc[x + 8 + 0 + (w) * (y + 1)];
  tempc812 = temp812;
  temp912 = psrc[x + 9 + 0 + (w) * (y + 1)];
  tempc912 = temp912;
  temp1012 = psrc[x + 10 + 0 + (w) * (y + 1)];
  tempc1012 = temp1012;
  temp1112 = psrc[x + 11 + 0 + (w) * (y + 1)];
  tempc1112 = temp1112;
  temp1212 = psrc[x + 12 + 0 + (w) * (y + 1)];
  tempc1212 = temp1212;
  temp1312 = psrc[x + 13 + 0 + (w) * (y + 1)];
  tempc1312 = temp1312;
  temp1412 = psrc[x + 14 + 0 + (w) * (y + 1)];
  tempc1412 = temp1412;
  temp1512 = psrc[x + 15 + 0 + (w) * (y + 1)];
  tempc1512 = temp1512;
  temp022 = psrc[x + 0 + 3 + (w) * (y + 1)];
  tempc022 = temp022;
  temp122 = psrc[x + 1 + 3 + (w) * (y + 1)];
  tempc122 = temp122;
  temp222 = psrc[x + 2 + 3 + (w) * (y + 1)];
  tempc222 = temp222;
  temp322 = psrc[x + 3 + 3 + (w) * (y + 1)];
  tempc322 = temp322;
  temp422 = psrc[x + 4 + 3 + (w) * (y + 1)];
  tempc422 = temp422;
  temp522 = psrc[x + 5 + 3 + (w) * (y + 1)];
  tempc522 = temp522;
  temp622 = psrc[x + 6 + 3 + (w) * (y + 1)];
  tempc622 = temp622;
  temp722 = psrc[x + 7 + 3 + (w) * (y + 1)];
  tempc722 = temp722;
  temp822 = psrc[x + 8 + 3 + (w) * (y + 1)];
  tempc822 = temp822;
  temp922 = psrc[x + 9 + 3 + (w) * (y + 1)];
  tempc922 = temp922;
  temp1022 = psrc[x + 10 + 3 + (w) * (y + 1)];
  tempc1022 = temp1022;
  temp1122 = psrc[x + 11 + 3 + (w) * (y + 1)];
  tempc1122 = temp1122;
  temp1222 = psrc[x + 12 + 3 + (w) * (y + 1)];
  tempc1222 = temp1222;
  temp1322 = psrc[x + 13 + 3 + (w) * (y + 1)];
  tempc1322 = temp1322;
  temp1422 = psrc[x + 14 + 3 + (w) * (y + 1)];
  tempc1422 = temp1422;
  temp1522 = psrc[x + 15 + 3 + (w) * (y + 1)];
  tempc1522 = temp1522;
  temp003 = psrc[x + 0 + -3 + (w) * (y + 2)];
  tempc003 = temp003;
  temp103 = psrc[x + 1 + -3 + (w) * (y + 2)];
  tempc103 = temp103;
  temp203 = psrc[x + 2 + -3 + (w) * (y + 2)];
  tempc203 = temp203;
  temp303 = psrc[x + 3 + -3 + (w) * (y + 2)];
  tempc303 = temp303;
  temp403 = psrc[x + 4 + -3 + (w) * (y + 2)];
  tempc403 = temp403;
  temp503 = psrc[x + 5 + -3 + (w) * (y + 2)];
  tempc503 = temp503;
  temp603 = psrc[x + 6 + -3 + (w) * (y + 2)];
  tempc603 = temp603;
  temp703 = psrc[x + 7 + -3 + (w) * (y + 2)];
  tempc703 = temp703;
  temp803 = psrc[x + 8 + -3 + (w) * (y + 2)];
  tempc803 = temp803;
  temp903 = psrc[x + 9 + -3 + (w) * (y + 2)];
  tempc903 = temp903;
  temp1003 = psrc[x + 10 + -3 + (w) * (y + 2)];
  tempc1003 = temp1003;
  temp1103 = psrc[x + 11 + -3 + (w) * (y + 2)];
  tempc1103 = temp1103;
  temp1203 = psrc[x + 12 + -3 + (w) * (y + 2)];
  tempc1203 = temp1203;
  temp1303 = psrc[x + 13 + -3 + (w) * (y + 2)];
  tempc1303 = temp1303;
  temp1403 = psrc[x + 14 + -3 + (w) * (y + 2)];
  tempc1403 = temp1403;
  temp1503 = psrc[x + 15 + -3 + (w) * (y + 2)];
  tempc1503 = temp1503;
  temp013 = psrc[x + 0 + 0 + (w) * (y + 2)];
  tempc013 = temp013;
  temp113 = psrc[x + 1 + 0 + (w) * (y + 2)];
  tempc113 = temp113;
  temp213 = psrc[x + 2 + 0 + (w) * (y + 2)];
  tempc213 = temp213;
  temp313 = psrc[x + 3 + 0 + (w) * (y + 2)];
  tempc313 = temp313;
  temp413 = psrc[x + 4 + 0 + (w) * (y + 2)];
  tempc413 = temp413;
  temp513 = psrc[x + 5 + 0 + (w) * (y + 2)];
  tempc513 = temp513;
  temp613 = psrc[x + 6 + 0 + (w) * (y + 2)];
  tempc613 = temp613;
  temp713 = psrc[x + 7 + 0 + (w) * (y + 2)];
  tempc713 = temp713;
  temp813 = psrc[x + 8 + 0 + (w) * (y + 2)];
  tempc813 = temp813;
  temp913 = psrc[x + 9 + 0 + (w) * (y + 2)];
  tempc913 = temp913;
  temp1013 = psrc[x + 10 + 0 + (w) * (y + 2)];
  tempc1013 = temp1013;
  temp1113 = psrc[x + 11 + 0 + (w) * (y + 2)];
  tempc1113 = temp1113;
  temp1213 = psrc[x + 12 + 0 + (w) * (y + 2)];
  tempc1213 = temp1213;
  temp1313 = psrc[x + 13 + 0 + (w) * (y + 2)];
  tempc1313 = temp1313;
  temp1413 = psrc[x + 14 + 0 + (w) * (y + 2)];
  tempc1413 = temp1413;
  temp1513 = psrc[x + 15 + 0 + (w) * (y + 2)];
  tempc1513 = temp1513;
  temp023 = psrc[x + 0 + 3 + (w) * (y + 2)];
  tempc023 = temp023;
  temp123 = psrc[x + 1 + 3 + (w) * (y + 2)];
  tempc123 = temp123;
  temp223 = psrc[x + 2 + 3 + (w) * (y + 2)];
  tempc223 = temp223;
  temp323 = psrc[x + 3 + 3 + (w) * (y + 2)];
  tempc323 = temp323;
  temp423 = psrc[x + 4 + 3 + (w) * (y + 2)];
  tempc423 = temp423;
  temp523 = psrc[x + 5 + 3 + (w) * (y + 2)];
  tempc523 = temp523;
  temp623 = psrc[x + 6 + 3 + (w) * (y + 2)];
  tempc623 = temp623;
  temp723 = psrc[x + 7 + 3 + (w) * (y + 2)];
  tempc723 = temp723;
  temp823 = psrc[x + 8 + 3 + (w) * (y + 2)];
  tempc823 = temp823;
  temp923 = psrc[x + 9 + 3 + (w) * (y + 2)];
  tempc923 = temp923;
  temp1023 = psrc[x + 10 + 3 + (w) * (y + 2)];
  tempc1023 = temp1023;
  temp1123 = psrc[x + 11 + 3 + (w) * (y + 2)];
  tempc1123 = temp1123;
  temp1223 = psrc[x + 12 + 3 + (w) * (y + 2)];
  tempc1223 = temp1223;
  temp1323 = psrc[x + 13 + 3 + (w) * (y + 2)];
  tempc1323 = temp1323;
  temp1423 = psrc[x + 14 + 3 + (w) * (y + 2)];
  tempc1423 = temp1423;
  temp1523 = psrc[x + 15 + 3 + (w) * (y + 2)];
  tempc1523 = temp1523;
  temp004 = psrc[x + 0 + -3 + (w) * (y + 3)];
  tempc004 = temp004;
  temp104 = psrc[x + 1 + -3 + (w) * (y + 3)];
  tempc104 = temp104;
  temp204 = psrc[x + 2 + -3 + (w) * (y + 3)];
  tempc204 = temp204;
  temp304 = psrc[x + 3 + -3 + (w) * (y + 3)];
  tempc304 = temp304;
  temp404 = psrc[x + 4 + -3 + (w) * (y + 3)];
  tempc404 = temp404;
  temp504 = psrc[x + 5 + -3 + (w) * (y + 3)];
  tempc504 = temp504;
  temp604 = psrc[x + 6 + -3 + (w) * (y + 3)];
  tempc604 = temp604;
  temp704 = psrc[x + 7 + -3 + (w) * (y + 3)];
  tempc704 = temp704;
  temp804 = psrc[x + 8 + -3 + (w) * (y + 3)];
  tempc804 = temp804;
  temp904 = psrc[x + 9 + -3 + (w) * (y + 3)];
  tempc904 = temp904;
  temp1004 = psrc[x + 10 + -3 + (w) * (y + 3)];
  tempc1004 = temp1004;
  temp1104 = psrc[x + 11 + -3 + (w) * (y + 3)];
  tempc1104 = temp1104;
  temp1204 = psrc[x + 12 + -3 + (w) * (y + 3)];
  tempc1204 = temp1204;
  temp1304 = psrc[x + 13 + -3 + (w) * (y + 3)];
  tempc1304 = temp1304;
  temp1404 = psrc[x + 14 + -3 + (w) * (y + 3)];
  tempc1404 = temp1404;
  temp1504 = psrc[x + 15 + -3 + (w) * (y + 3)];
  tempc1504 = temp1504;
  temp014 = psrc[x + 0 + 0 + (w) * (y + 3)];
  tempc014 = temp014;
  temp114 = psrc[x + 1 + 0 + (w) * (y + 3)];
  tempc114 = temp114;
  temp214 = psrc[x + 2 + 0 + (w) * (y + 3)];
  tempc214 = temp214;
  temp314 = psrc[x + 3 + 0 + (w) * (y + 3)];
  tempc314 = temp314;
  temp414 = psrc[x + 4 + 0 + (w) * (y + 3)];
  tempc414 = temp414;
  temp514 = psrc[x + 5 + 0 + (w) * (y + 3)];
  tempc514 = temp514;
  temp614 = psrc[x + 6 + 0 + (w) * (y + 3)];
  tempc614 = temp614;
  temp714 = psrc[x + 7 + 0 + (w) * (y + 3)];
  tempc714 = temp714;
  temp814 = psrc[x + 8 + 0 + (w) * (y + 3)];
  tempc814 = temp814;
  temp914 = psrc[x + 9 + 0 + (w) * (y + 3)];
  tempc914 = temp914;
  temp1014 = psrc[x + 10 + 0 + (w) * (y + 3)];
  tempc1014 = temp1014;
  temp1114 = psrc[x + 11 + 0 + (w) * (y + 3)];
  tempc1114 = temp1114;
  temp1214 = psrc[x + 12 + 0 + (w) * (y + 3)];
  tempc1214 = temp1214;
  temp1314 = psrc[x + 13 + 0 + (w) * (y + 3)];
  tempc1314 = temp1314;
  temp1414 = psrc[x + 14 + 0 + (w) * (y + 3)];
  tempc1414 = temp1414;
  temp1514 = psrc[x + 15 + 0 + (w) * (y + 3)];
  tempc1514 = temp1514;
  temp024 = psrc[x + 0 + 3 + (w) * (y + 3)];
  tempc024 = temp024;
  temp124 = psrc[x + 1 + 3 + (w) * (y + 3)];
  tempc124 = temp124;
  temp224 = psrc[x + 2 + 3 + (w) * (y + 3)];
  tempc224 = temp224;
  temp324 = psrc[x + 3 + 3 + (w) * (y + 3)];
  tempc324 = temp324;
  temp424 = psrc[x + 4 + 3 + (w) * (y + 3)];
  tempc424 = temp424;
  temp524 = psrc[x + 5 + 3 + (w) * (y + 3)];
  tempc524 = temp524;
  temp624 = psrc[x + 6 + 3 + (w) * (y + 3)];
  tempc624 = temp624;
  temp724 = psrc[x + 7 + 3 + (w) * (y + 3)];
  tempc724 = temp724;
  temp824 = psrc[x + 8 + 3 + (w) * (y + 3)];
  tempc824 = temp824;
  temp924 = psrc[x + 9 + 3 + (w) * (y + 3)];
  tempc924 = temp924;
  temp1024 = psrc[x + 10 + 3 + (w) * (y + 3)];
  tempc1024 = temp1024;
  temp1124 = psrc[x + 11 + 3 + (w) * (y + 3)];
  tempc1124 = temp1124;
  temp1224 = psrc[x + 12 + 3 + (w) * (y + 3)];
  tempc1224 = temp1224;
  temp1324 = psrc[x + 13 + 3 + (w) * (y + 3)];
  tempc1324 = temp1324;
  temp1424 = psrc[x + 14 + 3 + (w) * (y + 3)];
  tempc1424 = temp1424;
  temp1524 = psrc[x + 15 + 3 + (w) * (y + 3)];
  tempc1524 = temp1524;
  temp005 = psrc[x + 0 + -3 + (w) * (y + 4)];
  tempc005 = temp005;
  temp105 = psrc[x + 1 + -3 + (w) * (y + 4)];
  tempc105 = temp105;
  temp205 = psrc[x + 2 + -3 + (w) * (y + 4)];
  tempc205 = temp205;
  temp305 = psrc[x + 3 + -3 + (w) * (y + 4)];
  tempc305 = temp305;
  temp405 = psrc[x + 4 + -3 + (w) * (y + 4)];
  tempc405 = temp405;
  temp505 = psrc[x + 5 + -3 + (w) * (y + 4)];
  tempc505 = temp505;
  temp605 = psrc[x + 6 + -3 + (w) * (y + 4)];
  tempc605 = temp605;
  temp705 = psrc[x + 7 + -3 + (w) * (y + 4)];
  tempc705 = temp705;
  temp805 = psrc[x + 8 + -3 + (w) * (y + 4)];
  tempc805 = temp805;
  temp905 = psrc[x + 9 + -3 + (w) * (y + 4)];
  tempc905 = temp905;
  temp1005 = psrc[x + 10 + -3 + (w) * (y + 4)];
  tempc1005 = temp1005;
  temp1105 = psrc[x + 11 + -3 + (w) * (y + 4)];
  tempc1105 = temp1105;
  temp1205 = psrc[x + 12 + -3 + (w) * (y + 4)];
  tempc1205 = temp1205;
  temp1305 = psrc[x + 13 + -3 + (w) * (y + 4)];
  tempc1305 = temp1305;
  temp1405 = psrc[x + 14 + -3 + (w) * (y + 4)];
  tempc1405 = temp1405;
  temp1505 = psrc[x + 15 + -3 + (w) * (y + 4)];
  tempc1505 = temp1505;
  temp015 = psrc[x + 0 + 0 + (w) * (y + 4)];
  tempc015 = temp015;
  temp115 = psrc[x + 1 + 0 + (w) * (y + 4)];
  tempc115 = temp115;
  temp215 = psrc[x + 2 + 0 + (w) * (y + 4)];
  tempc215 = temp215;
  temp315 = psrc[x + 3 + 0 + (w) * (y + 4)];
  tempc315 = temp315;
  temp415 = psrc[x + 4 + 0 + (w) * (y + 4)];
  tempc415 = temp415;
  temp515 = psrc[x + 5 + 0 + (w) * (y + 4)];
  tempc515 = temp515;
  temp615 = psrc[x + 6 + 0 + (w) * (y + 4)];
  tempc615 = temp615;
  temp715 = psrc[x + 7 + 0 + (w) * (y + 4)];
  tempc715 = temp715;
  temp815 = psrc[x + 8 + 0 + (w) * (y + 4)];
  tempc815 = temp815;
  temp915 = psrc[x + 9 + 0 + (w) * (y + 4)];
  tempc915 = temp915;
  temp1015 = psrc[x + 10 + 0 + (w) * (y + 4)];
  tempc1015 = temp1015;
  temp1115 = psrc[x + 11 + 0 + (w) * (y + 4)];
  tempc1115 = temp1115;
  temp1215 = psrc[x + 12 + 0 + (w) * (y + 4)];
  tempc1215 = temp1215;
  temp1315 = psrc[x + 13 + 0 + (w) * (y + 4)];
  tempc1315 = temp1315;
  temp1415 = psrc[x + 14 + 0 + (w) * (y + 4)];
  tempc1415 = temp1415;
  temp1515 = psrc[x + 15 + 0 + (w) * (y + 4)];
  tempc1515 = temp1515;
  temp025 = psrc[x + 0 + 3 + (w) * (y + 4)];
  tempc025 = temp025;
  temp125 = psrc[x + 1 + 3 + (w) * (y + 4)];
  tempc125 = temp125;
  temp225 = psrc[x + 2 + 3 + (w) * (y + 4)];
  tempc225 = temp225;
  temp325 = psrc[x + 3 + 3 + (w) * (y + 4)];
  tempc325 = temp325;
  temp425 = psrc[x + 4 + 3 + (w) * (y + 4)];
  tempc425 = temp425;
  temp525 = psrc[x + 5 + 3 + (w) * (y + 4)];
  tempc525 = temp525;
  temp625 = psrc[x + 6 + 3 + (w) * (y + 4)];
  tempc625 = temp625;
  temp725 = psrc[x + 7 + 3 + (w) * (y + 4)];
  tempc725 = temp725;
  temp825 = psrc[x + 8 + 3 + (w) * (y + 4)];
  tempc825 = temp825;
  temp925 = psrc[x + 9 + 3 + (w) * (y + 4)];
  tempc925 = temp925;
  temp1025 = psrc[x + 10 + 3 + (w) * (y + 4)];
  tempc1025 = temp1025;
  temp1125 = psrc[x + 11 + 3 + (w) * (y + 4)];
  tempc1125 = temp1125;
  temp1225 = psrc[x + 12 + 3 + (w) * (y + 4)];
  tempc1225 = temp1225;
  temp1325 = psrc[x + 13 + 3 + (w) * (y + 4)];
  tempc1325 = temp1325;
  temp1425 = psrc[x + 14 + 3 + (w) * (y + 4)];
  tempc1425 = temp1425;
  temp1525 = psrc[x + 15 + 3 + (w) * (y + 4)];
  tempc1525 = temp1525;
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = clamp(resc00, (int)0, (int)255);
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = clamp(resc01, (int)0, (int)255);
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = clamp(resc02, (int)0, (int)255);
  resc03 =  -(tempc003) - (tempc013) - (tempc023) - (tempc004) + (tempc014) * ((int)9) - (tempc024) - (tempc005) - (tempc015) - (tempc025);
  res03 = clamp(resc03, (int)0, (int)255);
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = clamp(resc10, (int)0, (int)255);
  resc11 =  -(tempc101) - (tempc111) - (tempc121) - (tempc102) + (tempc112) * ((int)9) - (tempc122) - (tempc103) - (tempc113) - (tempc123);
  res11 = clamp(resc11, (int)0, (int)255);
  resc12 =  -(tempc102) - (tempc112) - (tempc122) - (tempc103) + (tempc113) * ((int)9) - (tempc123) - (tempc104) - (tempc114) - (tempc124);
  res12 = clamp(resc12, (int)0, (int)255);
  resc13 =  -(tempc103) - (tempc113) - (tempc123) - (tempc104) + (tempc114) * ((int)9) - (tempc124) - (tempc105) - (tempc115) - (tempc125);
  res13 = clamp(resc13, (int)0, (int)255);
  resc20 =  -(tempc200) - (tempc210) - (tempc220) - (tempc201) + (tempc211) * ((int)9) - (tempc221) - (tempc202) - (tempc212) - (tempc222);
  res20 = clamp(resc20, (int)0, (int)255);
  resc21 =  -(tempc201) - (tempc211) - (tempc221) - (tempc202) + (tempc212) * ((int)9) - (tempc222) - (tempc203) - (tempc213) - (tempc223);
  res21 = clamp(resc21, (int)0, (int)255);
  resc22 =  -(tempc202) - (tempc212) - (tempc222) - (tempc203) + (tempc213) * ((int)9) - (tempc223) - (tempc204) - (tempc214) - (tempc224);
  res22 = clamp(resc22, (int)0, (int)255);
  resc23 =  -(tempc203) - (tempc213) - (tempc223) - (tempc204) + (tempc214) * ((int)9) - (tempc224) - (tempc205) - (tempc215) - (tempc225);
  res23 = clamp(resc23, (int)0, (int)255);
  resc30 =  -(tempc300) - (tempc310) - (tempc320) - (tempc301) + (tempc311) * ((int)9) - (tempc321) - (tempc302) - (tempc312) - (tempc322);
  res30 = clamp(resc30, (int)0, (int)255);
  resc31 =  -(tempc301) - (tempc311) - (tempc321) - (tempc302) + (tempc312) * ((int)9) - (tempc322) - (tempc303) - (tempc313) - (tempc323);
  res31 = clamp(resc31, (int)0, (int)255);
  resc32 =  -(tempc302) - (tempc312) - (tempc322) - (tempc303) + (tempc313) * ((int)9) - (tempc323) - (tempc304) - (tempc314) - (tempc324);
  res32 = clamp(resc32, (int)0, (int)255);
  resc33 =  -(tempc303) - (tempc313) - (tempc323) - (tempc304) + (tempc314) * ((int)9) - (tempc324) - (tempc305) - (tempc315) - (tempc325);
  res33 = clamp(resc33, (int)0, (int)255);
  resc40 =  -(tempc400) - (tempc410) - (tempc420) - (tempc401) + (tempc411) * ((int)9) - (tempc421) - (tempc402) - (tempc412) - (tempc422);
  res40 = clamp(resc40, (int)0, (int)255);
  resc41 =  -(tempc401) - (tempc411) - (tempc421) - (tempc402) + (tempc412) * ((int)9) - (tempc422) - (tempc403) - (tempc413) - (tempc423);
  res41 = clamp(resc41, (int)0, (int)255);
  resc42 =  -(tempc402) - (tempc412) - (tempc422) - (tempc403) + (tempc413) * ((int)9) - (tempc423) - (tempc404) - (tempc414) - (tempc424);
  res42 = clamp(resc42, (int)0, (int)255);
  resc43 =  -(tempc403) - (tempc413) - (tempc423) - (tempc404) + (tempc414) * ((int)9) - (tempc424) - (tempc405) - (tempc415) - (tempc425);
  res43 = clamp(resc43, (int)0, (int)255);
  resc50 =  -(tempc500) - (tempc510) - (tempc520) - (tempc501) + (tempc511) * ((int)9) - (tempc521) - (tempc502) - (tempc512) - (tempc522);
  res50 = clamp(resc50, (int)0, (int)255);
  resc51 =  -(tempc501) - (tempc511) - (tempc521) - (tempc502) + (tempc512) * ((int)9) - (tempc522) - (tempc503) - (tempc513) - (tempc523);
  res51 = clamp(resc51, (int)0, (int)255);
  resc52 =  -(tempc502) - (tempc512) - (tempc522) - (tempc503) + (tempc513) * ((int)9) - (tempc523) - (tempc504) - (tempc514) - (tempc524);
  res52 = clamp(resc52, (int)0, (int)255);
  resc53 =  -(tempc503) - (tempc513) - (tempc523) - (tempc504) + (tempc514) * ((int)9) - (tempc524) - (tempc505) - (tempc515) - (tempc525);
  res53 = clamp(resc53, (int)0, (int)255);
  resc60 =  -(tempc600) - (tempc610) - (tempc620) - (tempc601) + (tempc611) * ((int)9) - (tempc621) - (tempc602) - (tempc612) - (tempc622);
  res60 = clamp(resc60, (int)0, (int)255);
  resc61 =  -(tempc601) - (tempc611) - (tempc621) - (tempc602) + (tempc612) * ((int)9) - (tempc622) - (tempc603) - (tempc613) - (tempc623);
  res61 = clamp(resc61, (int)0, (int)255);
  resc62 =  -(tempc602) - (tempc612) - (tempc622) - (tempc603) + (tempc613) * ((int)9) - (tempc623) - (tempc604) - (tempc614) - (tempc624);
  res62 = clamp(resc62, (int)0, (int)255);
  resc63 =  -(tempc603) - (tempc613) - (tempc623) - (tempc604) + (tempc614) * ((int)9) - (tempc624) - (tempc605) - (tempc615) - (tempc625);
  res63 = clamp(resc63, (int)0, (int)255);
  resc70 =  -(tempc700) - (tempc710) - (tempc720) - (tempc701) + (tempc711) * ((int)9) - (tempc721) - (tempc702) - (tempc712) - (tempc722);
  res70 = clamp(resc70, (int)0, (int)255);
  resc71 =  -(tempc701) - (tempc711) - (tempc721) - (tempc702) + (tempc712) * ((int)9) - (tempc722) - (tempc703) - (tempc713) - (tempc723);
  res71 = clamp(resc71, (int)0, (int)255);
  resc72 =  -(tempc702) - (tempc712) - (tempc722) - (tempc703) + (tempc713) * ((int)9) - (tempc723) - (tempc704) - (tempc714) - (tempc724);
  res72 = clamp(resc72, (int)0, (int)255);
  resc73 =  -(tempc703) - (tempc713) - (tempc723) - (tempc704) + (tempc714) * ((int)9) - (tempc724) - (tempc705) - (tempc715) - (tempc725);
  res73 = clamp(resc73, (int)0, (int)255);
  resc80 =  -(tempc800) - (tempc810) - (tempc820) - (tempc801) + (tempc811) * ((int)9) - (tempc821) - (tempc802) - (tempc812) - (tempc822);
  res80 = clamp(resc80, (int)0, (int)255);
  resc81 =  -(tempc801) - (tempc811) - (tempc821) - (tempc802) + (tempc812) * ((int)9) - (tempc822) - (tempc803) - (tempc813) - (tempc823);
  res81 = clamp(resc81, (int)0, (int)255);
  resc82 =  -(tempc802) - (tempc812) - (tempc822) - (tempc803) + (tempc813) * ((int)9) - (tempc823) - (tempc804) - (tempc814) - (tempc824);
  res82 = clamp(resc82, (int)0, (int)255);
  resc83 =  -(tempc803) - (tempc813) - (tempc823) - (tempc804) + (tempc814) * ((int)9) - (tempc824) - (tempc805) - (tempc815) - (tempc825);
  res83 = clamp(resc83, (int)0, (int)255);
  resc90 =  -(tempc900) - (tempc910) - (tempc920) - (tempc901) + (tempc911) * ((int)9) - (tempc921) - (tempc902) - (tempc912) - (tempc922);
  res90 = clamp(resc90, (int)0, (int)255);
  resc91 =  -(tempc901) - (tempc911) - (tempc921) - (tempc902) + (tempc912) * ((int)9) - (tempc922) - (tempc903) - (tempc913) - (tempc923);
  res91 = clamp(resc91, (int)0, (int)255);
  resc92 =  -(tempc902) - (tempc912) - (tempc922) - (tempc903) + (tempc913) * ((int)9) - (tempc923) - (tempc904) - (tempc914) - (tempc924);
  res92 = clamp(resc92, (int)0, (int)255);
  resc93 =  -(tempc903) - (tempc913) - (tempc923) - (tempc904) + (tempc914) * ((int)9) - (tempc924) - (tempc905) - (tempc915) - (tempc925);
  res93 = clamp(resc93, (int)0, (int)255);
  resc100 =  -(tempc1000) - (tempc1010) - (tempc1020) - (tempc1001) + (tempc1011) * ((int)9) - (tempc1021) - (tempc1002) - (tempc1012) - (tempc1022);
  res100 = clamp(resc100, (int)0, (int)255);
  resc101 =  -(tempc1001) - (tempc1011) - (tempc1021) - (tempc1002) + (tempc1012) * ((int)9) - (tempc1022) - (tempc1003) - (tempc1013) - (tempc1023);
  res101 = clamp(resc101, (int)0, (int)255);
  resc102 =  -(tempc1002) - (tempc1012) - (tempc1022) - (tempc1003) + (tempc1013) * ((int)9) - (tempc1023) - (tempc1004) - (tempc1014) - (tempc1024);
  res102 = clamp(resc102, (int)0, (int)255);
  resc103 =  -(tempc1003) - (tempc1013) - (tempc1023) - (tempc1004) + (tempc1014) * ((int)9) - (tempc1024) - (tempc1005) - (tempc1015) - (tempc1025);
  res103 = clamp(resc103, (int)0, (int)255);
  resc110 =  -(tempc1100) - (tempc1110) - (tempc1120) - (tempc1101) + (tempc1111) * ((int)9) - (tempc1121) - (tempc1102) - (tempc1112) - (tempc1122);
  res110 = clamp(resc110, (int)0, (int)255);
  resc111 =  -(tempc1101) - (tempc1111) - (tempc1121) - (tempc1102) + (tempc1112) * ((int)9) - (tempc1122) - (tempc1103) - (tempc1113) - (tempc1123);
  res111 = clamp(resc111, (int)0, (int)255);
  resc112 =  -(tempc1102) - (tempc1112) - (tempc1122) - (tempc1103) + (tempc1113) * ((int)9) - (tempc1123) - (tempc1104) - (tempc1114) - (tempc1124);
  res112 = clamp(resc112, (int)0, (int)255);
  resc113 =  -(tempc1103) - (tempc1113) - (tempc1123) - (tempc1104) + (tempc1114) * ((int)9) - (tempc1124) - (tempc1105) - (tempc1115) - (tempc1125);
  res113 = clamp(resc113, (int)0, (int)255);
  resc120 =  -(tempc1200) - (tempc1210) - (tempc1220) - (tempc1201) + (tempc1211) * ((int)9) - (tempc1221) - (tempc1202) - (tempc1212) - (tempc1222);
  res120 = clamp(resc120, (int)0, (int)255);
  resc121 =  -(tempc1201) - (tempc1211) - (tempc1221) - (tempc1202) + (tempc1212) * ((int)9) - (tempc1222) - (tempc1203) - (tempc1213) - (tempc1223);
  res121 = clamp(resc121, (int)0, (int)255);
  resc122 =  -(tempc1202) - (tempc1212) - (tempc1222) - (tempc1203) + (tempc1213) * ((int)9) - (tempc1223) - (tempc1204) - (tempc1214) - (tempc1224);
  res122 = clamp(resc122, (int)0, (int)255);
  resc123 =  -(tempc1203) - (tempc1213) - (tempc1223) - (tempc1204) + (tempc1214) * ((int)9) - (tempc1224) - (tempc1205) - (tempc1215) - (tempc1225);
  res123 = clamp(resc123, (int)0, (int)255);
  resc130 =  -(tempc1300) - (tempc1310) - (tempc1320) - (tempc1301) + (tempc1311) * ((int)9) - (tempc1321) - (tempc1302) - (tempc1312) - (tempc1322);
  res130 = clamp(resc130, (int)0, (int)255);
  resc131 =  -(tempc1301) - (tempc1311) - (tempc1321) - (tempc1302) + (tempc1312) * ((int)9) - (tempc1322) - (tempc1303) - (tempc1313) - (tempc1323);
  res131 = clamp(resc131, (int)0, (int)255);
  resc132 =  -(tempc1302) - (tempc1312) - (tempc1322) - (tempc1303) + (tempc1313) * ((int)9) - (tempc1323) - (tempc1304) - (tempc1314) - (tempc1324);
  res132 = clamp(resc132, (int)0, (int)255);
  resc133 =  -(tempc1303) - (tempc1313) - (tempc1323) - (tempc1304) + (tempc1314) * ((int)9) - (tempc1324) - (tempc1305) - (tempc1315) - (tempc1325);
  res133 = clamp(resc133, (int)0, (int)255);
  resc140 =  -(tempc1400) - (tempc1410) - (tempc1420) - (tempc1401) + (tempc1411) * ((int)9) - (tempc1421) - (tempc1402) - (tempc1412) - (tempc1422);
  res140 = clamp(resc140, (int)0, (int)255);
  resc141 =  -(tempc1401) - (tempc1411) - (tempc1421) - (tempc1402) + (tempc1412) * ((int)9) - (tempc1422) - (tempc1403) - (tempc1413) - (tempc1423);
  res141 = clamp(resc141, (int)0, (int)255);
  resc142 =  -(tempc1402) - (tempc1412) - (tempc1422) - (tempc1403) + (tempc1413) * ((int)9) - (tempc1423) - (tempc1404) - (tempc1414) - (tempc1424);
  res142 = clamp(resc142, (int)0, (int)255);
  resc143 =  -(tempc1403) - (tempc1413) - (tempc1423) - (tempc1404) + (tempc1414) * ((int)9) - (tempc1424) - (tempc1405) - (tempc1415) - (tempc1425);
  res143 = clamp(resc143, (int)0, (int)255);
  resc150 =  -(tempc1500) - (tempc1510) - (tempc1520) - (tempc1501) + (tempc1511) * ((int)9) - (tempc1521) - (tempc1502) - (tempc1512) - (tempc1522);
  res150 = clamp(resc150, (int)0, (int)255);
  resc151 =  -(tempc1501) - (tempc1511) - (tempc1521) - (tempc1502) + (tempc1512) * ((int)9) - (tempc1522) - (tempc1503) - (tempc1513) - (tempc1523);
  res151 = clamp(resc151, (int)0, (int)255);
  resc152 =  -(tempc1502) - (tempc1512) - (tempc1522) - (tempc1503) + (tempc1513) * ((int)9) - (tempc1523) - (tempc1504) - (tempc1514) - (tempc1524);
  res152 = clamp(resc152, (int)0, (int)255);
  resc153 =  -(tempc1503) - (tempc1513) - (tempc1523) - (tempc1504) + (tempc1514) * ((int)9) - (tempc1524) - (tempc1505) - (tempc1515) - (tempc1525);
  res153 = clamp(resc153, (int)0, (int)255);
  pdst[x + 0 + (w) * (y + 0)] = res00;
  pdst[x + 1 + (w) * (y + 0)] = res10;
  pdst[x + 2 + (w) * (y + 0)] = res20;
  pdst[x + 3 + (w) * (y + 0)] = res30;
  pdst[x + 4 + (w) * (y + 0)] = res40;
  pdst[x + 5 + (w) * (y + 0)] = res50;
  pdst[x + 6 + (w) * (y + 0)] = res60;
  pdst[x + 7 + (w) * (y + 0)] = res70;
  pdst[x + 8 + (w) * (y + 0)] = res80;
  pdst[x + 9 + (w) * (y + 0)] = res90;
  pdst[x + 10 + (w) * (y + 0)] = res100;
  pdst[x + 11 + (w) * (y + 0)] = res110;
  pdst[x + 12 + (w) * (y + 0)] = res120;
  pdst[x + 13 + (w) * (y + 0)] = res130;
  pdst[x + 14 + (w) * (y + 0)] = res140;
  pdst[x + 15 + (w) * (y + 0)] = res150;
  pdst[x + 0 + (w) * (y + 1)] = res01;
  pdst[x + 1 + (w) * (y + 1)] = res11;
  pdst[x + 2 + (w) * (y + 1)] = res21;
  pdst[x + 3 + (w) * (y + 1)] = res31;
  pdst[x + 4 + (w) * (y + 1)] = res41;
  pdst[x + 5 + (w) * (y + 1)] = res51;
  pdst[x + 6 + (w) * (y + 1)] = res61;
  pdst[x + 7 + (w) * (y + 1)] = res71;
  pdst[x + 8 + (w) * (y + 1)] = res81;
  pdst[x + 9 + (w) * (y + 1)] = res91;
  pdst[x + 10 + (w) * (y + 1)] = res101;
  pdst[x + 11 + (w) * (y + 1)] = res111;
  pdst[x + 12 + (w) * (y + 1)] = res121;
  pdst[x + 13 + (w) * (y + 1)] = res131;
  pdst[x + 14 + (w) * (y + 1)] = res141;
  pdst[x + 15 + (w) * (y + 1)] = res151;
  pdst[x + 0 + (w) * (y + 2)] = res02;
  pdst[x + 1 + (w) * (y + 2)] = res12;
  pdst[x + 2 + (w) * (y + 2)] = res22;
  pdst[x + 3 + (w) * (y + 2)] = res32;
  pdst[x + 4 + (w) * (y + 2)] = res42;
  pdst[x + 5 + (w) * (y + 2)] = res52;
  pdst[x + 6 + (w) * (y + 2)] = res62;
  pdst[x + 7 + (w) * (y + 2)] = res72;
  pdst[x + 8 + (w) * (y + 2)] = res82;
  pdst[x + 9 + (w) * (y + 2)] = res92;
  pdst[x + 10 + (w) * (y + 2)] = res102;
  pdst[x + 11 + (w) * (y + 2)] = res112;
  pdst[x + 12 + (w) * (y + 2)] = res122;
  pdst[x + 13 + (w) * (y + 2)] = res132;
  pdst[x + 14 + (w) * (y + 2)] = res142;
  pdst[x + 15 + (w) * (y + 2)] = res152;
  pdst[x + 0 + (w) * (y + 3)] = res03;
  pdst[x + 1 + (w) * (y + 3)] = res13;
  pdst[x + 2 + (w) * (y + 3)] = res23;
  pdst[x + 3 + (w) * (y + 3)] = res33;
  pdst[x + 4 + (w) * (y + 3)] = res43;
  pdst[x + 5 + (w) * (y + 3)] = res53;
  pdst[x + 6 + (w) * (y + 3)] = res63;
  pdst[x + 7 + (w) * (y + 3)] = res73;
  pdst[x + 8 + (w) * (y + 3)] = res83;
  pdst[x + 9 + (w) * (y + 3)] = res93;
  pdst[x + 10 + (w) * (y + 3)] = res103;
  pdst[x + 11 + (w) * (y + 3)] = res113;
  pdst[x + 12 + (w) * (y + 3)] = res123;
  pdst[x + 13 + (w) * (y + 3)] = res133;
  pdst[x + 14 + (w) * (y + 3)] = res143;
  pdst[x + 15 + (w) * (y + 3)] = res153;
}
768 x 432 :
Tesla T10 Processor: 
4.130912623717287e-09 s
2560 x 1600 :
3.642293288815867e-09 s
2048 x 2048 :
3.686609735611722e-09 s
5760 x 3240 :
3.696996053078447e-09 s
7680 x 4320 :
3.6613730440889623e-09 s
{:x_component_number=>16, :vector_length=>4, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (16);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (19) ? w - (19) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar4 tempload0_3;
  uchar4 tempload4_7;
  uchar4 tempload8_11;
  uchar4 tempload12_15;
  uchar4 tempload16_19;
  uchar2 tempload20_21;
  uchar4 res00;
  uchar4 res01;
  uchar4 res02;
  uchar4 res10;
  uchar4 res11;
  uchar4 res12;
  uchar4 res20;
  uchar4 res21;
  uchar4 res22;
  uchar4 res30;
  uchar4 res31;
  uchar4 res32;
  short4 tempc000;
  short4 tempc001;
  short4 tempc002;
  short4 tempc003;
  short4 tempc004;
  short4 tempc100;
  short4 tempc101;
  short4 tempc102;
  short4 tempc103;
  short4 tempc104;
  short4 tempc200;
  short4 tempc201;
  short4 tempc202;
  short4 tempc203;
  short4 tempc204;
  short4 tempc300;
  short4 tempc301;
  short4 tempc302;
  short4 tempc303;
  short4 tempc304;
  short4 tempc010;
  short4 tempc011;
  short4 tempc012;
  short4 tempc013;
  short4 tempc014;
  short4 tempc110;
  short4 tempc111;
  short4 tempc112;
  short4 tempc113;
  short4 tempc114;
  short4 tempc210;
  short4 tempc211;
  short4 tempc212;
  short4 tempc213;
  short4 tempc214;
  short4 tempc310;
  short4 tempc311;
  short4 tempc312;
  short4 tempc313;
  short4 tempc314;
  short4 tempc020;
  short4 tempc021;
  short4 tempc022;
  short4 tempc023;
  short4 tempc024;
  short4 tempc120;
  short4 tempc121;
  short4 tempc122;
  short4 tempc123;
  short4 tempc124;
  short4 tempc220;
  short4 tempc221;
  short4 tempc222;
  short4 tempc223;
  short4 tempc224;
  short4 tempc320;
  short4 tempc321;
  short4 tempc322;
  short4 tempc323;
  short4 tempc324;
  short4 resc00;
  short4 resc01;
  short4 resc02;
  short4 resc10;
  short4 resc11;
  short4 resc12;
  short4 resc20;
  short4 resc21;
  short4 resc22;
  short4 resc30;
  short4 resc31;
  short4 resc32;
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempload12_15 = vload4(0, &psrc[x + 9 + (w) * (y + -1)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + -1)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + -1)]);
  tempc000 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc100 = convert_short4( (uchar4)(tempload4_7.s0123) );
  tempc200 = convert_short4( (uchar4)(tempload8_11.s0123) );
  tempc300 = convert_short4( (uchar4)(tempload12_15.s0123) );
  tempc010 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc110 = convert_short4( (uchar4)(tempload4_7.s3,tempload8_11.s012) );
  tempc210 = convert_short4( (uchar4)(tempload8_11.s3,tempload12_15.s012) );
  tempc310 = convert_short4( (uchar4)(tempload12_15.s3,tempload16_19.s012) );
  tempc020 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_11.s01) );
  tempc120 = convert_short4( (uchar4)(tempload8_11.s23,tempload12_15.s01) );
  tempc220 = convert_short4( (uchar4)(tempload12_15.s23,tempload16_19.s01) );
  tempc320 = convert_short4( (uchar4)(tempload16_19.s23,tempload20_21.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempload12_15 = vload4(0, &psrc[x + 9 + (w) * (y + 0)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 0)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 0)]);
  tempc001 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc101 = convert_short4( (uchar4)(tempload4_7.s0123) );
  tempc201 = convert_short4( (uchar4)(tempload8_11.s0123) );
  tempc301 = convert_short4( (uchar4)(tempload12_15.s0123) );
  tempc011 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc111 = convert_short4( (uchar4)(tempload4_7.s3,tempload8_11.s012) );
  tempc211 = convert_short4( (uchar4)(tempload8_11.s3,tempload12_15.s012) );
  tempc311 = convert_short4( (uchar4)(tempload12_15.s3,tempload16_19.s012) );
  tempc021 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_11.s01) );
  tempc121 = convert_short4( (uchar4)(tempload8_11.s23,tempload12_15.s01) );
  tempc221 = convert_short4( (uchar4)(tempload12_15.s23,tempload16_19.s01) );
  tempc321 = convert_short4( (uchar4)(tempload16_19.s23,tempload20_21.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempload12_15 = vload4(0, &psrc[x + 9 + (w) * (y + 1)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 1)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 1)]);
  tempc002 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc102 = convert_short4( (uchar4)(tempload4_7.s0123) );
  tempc202 = convert_short4( (uchar4)(tempload8_11.s0123) );
  tempc302 = convert_short4( (uchar4)(tempload12_15.s0123) );
  tempc012 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc112 = convert_short4( (uchar4)(tempload4_7.s3,tempload8_11.s012) );
  tempc212 = convert_short4( (uchar4)(tempload8_11.s3,tempload12_15.s012) );
  tempc312 = convert_short4( (uchar4)(tempload12_15.s3,tempload16_19.s012) );
  tempc022 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_11.s01) );
  tempc122 = convert_short4( (uchar4)(tempload8_11.s23,tempload12_15.s01) );
  tempc222 = convert_short4( (uchar4)(tempload12_15.s23,tempload16_19.s01) );
  tempc322 = convert_short4( (uchar4)(tempload16_19.s23,tempload20_21.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 2)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 2)]);
  tempload12_15 = vload4(0, &psrc[x + 9 + (w) * (y + 2)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 2)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 2)]);
  tempc003 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc103 = convert_short4( (uchar4)(tempload4_7.s0123) );
  tempc203 = convert_short4( (uchar4)(tempload8_11.s0123) );
  tempc303 = convert_short4( (uchar4)(tempload12_15.s0123) );
  tempc013 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc113 = convert_short4( (uchar4)(tempload4_7.s3,tempload8_11.s012) );
  tempc213 = convert_short4( (uchar4)(tempload8_11.s3,tempload12_15.s012) );
  tempc313 = convert_short4( (uchar4)(tempload12_15.s3,tempload16_19.s012) );
  tempc023 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_11.s01) );
  tempc123 = convert_short4( (uchar4)(tempload8_11.s23,tempload12_15.s01) );
  tempc223 = convert_short4( (uchar4)(tempload12_15.s23,tempload16_19.s01) );
  tempc323 = convert_short4( (uchar4)(tempload16_19.s23,tempload20_21.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 3)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 3)]);
  tempload12_15 = vload4(0, &psrc[x + 9 + (w) * (y + 3)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 3)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 3)]);
  tempc004 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc104 = convert_short4( (uchar4)(tempload4_7.s0123) );
  tempc204 = convert_short4( (uchar4)(tempload8_11.s0123) );
  tempc304 = convert_short4( (uchar4)(tempload12_15.s0123) );
  tempc014 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc114 = convert_short4( (uchar4)(tempload4_7.s3,tempload8_11.s012) );
  tempc214 = convert_short4( (uchar4)(tempload8_11.s3,tempload12_15.s012) );
  tempc314 = convert_short4( (uchar4)(tempload12_15.s3,tempload16_19.s012) );
  tempc024 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_11.s01) );
  tempc124 = convert_short4( (uchar4)(tempload8_11.s23,tempload12_15.s01) );
  tempc224 = convert_short4( (uchar4)(tempload12_15.s23,tempload16_19.s01) );
  tempc324 = convert_short4( (uchar4)(tempload16_19.s23,tempload20_21.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar4( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar4( clamp(resc02, (short)0, (short)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((short)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar4( clamp(resc10, (short)0, (short)255) );
  resc11 =  -(tempc101) - (tempc111) - (tempc121) - (tempc102) + (tempc112) * ((short)9) - (tempc122) - (tempc103) - (tempc113) - (tempc123);
  res11 = convert_uchar4( clamp(resc11, (short)0, (short)255) );
  resc12 =  -(tempc102) - (tempc112) - (tempc122) - (tempc103) + (tempc113) * ((short)9) - (tempc123) - (tempc104) - (tempc114) - (tempc124);
  res12 = convert_uchar4( clamp(resc12, (short)0, (short)255) );
  resc20 =  -(tempc200) - (tempc210) - (tempc220) - (tempc201) + (tempc211) * ((short)9) - (tempc221) - (tempc202) - (tempc212) - (tempc222);
  res20 = convert_uchar4( clamp(resc20, (short)0, (short)255) );
  resc21 =  -(tempc201) - (tempc211) - (tempc221) - (tempc202) + (tempc212) * ((short)9) - (tempc222) - (tempc203) - (tempc213) - (tempc223);
  res21 = convert_uchar4( clamp(resc21, (short)0, (short)255) );
  resc22 =  -(tempc202) - (tempc212) - (tempc222) - (tempc203) + (tempc213) * ((short)9) - (tempc223) - (tempc204) - (tempc214) - (tempc224);
  res22 = convert_uchar4( clamp(resc22, (short)0, (short)255) );
  resc30 =  -(tempc300) - (tempc310) - (tempc320) - (tempc301) + (tempc311) * ((short)9) - (tempc321) - (tempc302) - (tempc312) - (tempc322);
  res30 = convert_uchar4( clamp(resc30, (short)0, (short)255) );
  resc31 =  -(tempc301) - (tempc311) - (tempc321) - (tempc302) + (tempc312) * ((short)9) - (tempc322) - (tempc303) - (tempc313) - (tempc323);
  res31 = convert_uchar4( clamp(resc31, (short)0, (short)255) );
  resc32 =  -(tempc302) - (tempc312) - (tempc322) - (tempc303) + (tempc313) * ((short)9) - (tempc323) - (tempc304) - (tempc314) - (tempc324);
  res32 = convert_uchar4( clamp(resc32, (short)0, (short)255) );
  vstore4(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore4(res10, 0, &pdst[x + 4 + (w) * (y + 0)]);
  vstore4(res20, 0, &pdst[x + 8 + (w) * (y + 0)]);
  vstore4(res30, 0, &pdst[x + 12 + (w) * (y + 0)]);
  vstore4(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore4(res11, 0, &pdst[x + 4 + (w) * (y + 1)]);
  vstore4(res21, 0, &pdst[x + 8 + (w) * (y + 1)]);
  vstore4(res31, 0, &pdst[x + 12 + (w) * (y + 1)]);
  vstore4(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
  vstore4(res12, 0, &pdst[x + 4 + (w) * (y + 2)]);
  vstore4(res22, 0, &pdst[x + 8 + (w) * (y + 2)]);
  vstore4(res32, 0, &pdst[x + 12 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
2.2748193575809093e-09 s
2560 x 1600 :
2.290689789132428e-09 s
2048 x 2048 :
2.2092307045480827e-09 s
5760 x 3240 :
2.3270828072594866e-09 s
7680 x 4320 :
2.3198346701613496e-09 s
{:x_component_number=>8, :vector_length=>4, :y_component_number=>1, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (8);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar4 tempload0_3;
  uchar4 tempload4_7;
  uchar4 tempload8_11;
  uchar2 tempload12_13;
  uchar4 res00;
  uchar4 res10;
  short4 tempc000;
  short4 tempc001;
  short4 tempc002;
  short4 tempc100;
  short4 tempc101;
  short4 tempc102;
  short4 tempc010;
  short4 tempc011;
  short4 tempc012;
  short4 tempc110;
  short4 tempc111;
  short4 tempc112;
  short4 tempc020;
  short4 tempc021;
  short4 tempc022;
  short4 tempc120;
  short4 tempc121;
  short4 tempc122;
  short4 resc00;
  short4 resc10;
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + -1)]);
  tempc000 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc100 = convert_short4( (uchar4)(tempload4_7.s0123) );
  tempc010 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc110 = convert_short4( (uchar4)(tempload4_7.s3,tempload8_11.s012) );
  tempc020 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_11.s01) );
  tempc120 = convert_short4( (uchar4)(tempload8_11.s23,tempload12_13.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 0)]);
  tempc001 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc101 = convert_short4( (uchar4)(tempload4_7.s0123) );
  tempc011 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc111 = convert_short4( (uchar4)(tempload4_7.s3,tempload8_11.s012) );
  tempc021 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_11.s01) );
  tempc121 = convert_short4( (uchar4)(tempload8_11.s23,tempload12_13.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 1)]);
  tempc002 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc102 = convert_short4( (uchar4)(tempload4_7.s0123) );
  tempc012 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc112 = convert_short4( (uchar4)(tempload4_7.s3,tempload8_11.s012) );
  tempc022 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_11.s01) );
  tempc122 = convert_short4( (uchar4)(tempload8_11.s23,tempload12_13.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (short)0, (short)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((short)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar4( clamp(resc10, (short)0, (short)255) );
  vstore4(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore4(res10, 0, &pdst[x + 4 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
2.469415265043415e-09 s
2560 x 1600 :
2.374038697707553e-09 s
2048 x 2048 :
2.4015693783927634e-09 s
5760 x 3240 :
2.41536237897441e-09 s
7680 x 4320 :
2.4168212903791698e-09 s
{:x_component_number=>1, :vector_length=>8, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar8 tempload0_7;
  uchar4 tempload8_11;
  uchar2 tempload12_13;
  uchar8 res00;
  uchar8 res01;
  uchar8 res02;
  int8 tempc000;
  int8 tempc001;
  int8 tempc002;
  int8 tempc003;
  int8 tempc004;
  int8 tempc010;
  int8 tempc011;
  int8 tempc012;
  int8 tempc013;
  int8 tempc014;
  int8 tempc020;
  int8 tempc021;
  int8 tempc022;
  int8 tempc023;
  int8 tempc024;
  int8 resc00;
  int8 resc01;
  int8 resc02;
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + -1)]);
  tempc000 = convert_int8( (uchar8)(tempload0_7.s01234567) );
  tempc010 = convert_int8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc020 = convert_int8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 0)]);
  tempc001 = convert_int8( (uchar8)(tempload0_7.s01234567) );
  tempc011 = convert_int8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc021 = convert_int8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 1)]);
  tempc002 = convert_int8( (uchar8)(tempload0_7.s01234567) );
  tempc012 = convert_int8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc022 = convert_int8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 2)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 2)]);
  tempc003 = convert_int8( (uchar8)(tempload0_7.s01234567) );
  tempc013 = convert_int8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc023 = convert_int8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 3)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 3)]);
  tempc004 = convert_int8( (uchar8)(tempload0_7.s01234567) );
  tempc014 = convert_int8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc024 = convert_int8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar8( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar8( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar8( clamp(resc02, (int)0, (int)255) );
  vstore8(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore8(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore8(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
5.570319995142389e-09 s
2560 x 1600 :
4.4420967961319906e-09 s
2048 x 2048 :
4.400489618538999e-09 s
5760 x 3240 :
4.412464780316925e-09 s
7680 x 4320 :
4.811833790377661e-09 s
{:x_component_number=>4, :vector_length=>4, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar4 tempload0_3;
  uchar4 tempload4_7;
  uchar2 tempload8_9;
  uchar4 res00;
  uchar4 res01;
  uchar4 res02;
  short4 tempc000;
  short4 tempc001;
  short4 tempc002;
  short4 tempc003;
  short4 tempc004;
  short4 tempc010;
  short4 tempc011;
  short4 tempc012;
  short4 tempc013;
  short4 tempc014;
  short4 tempc020;
  short4 tempc021;
  short4 tempc022;
  short4 tempc023;
  short4 tempc024;
  short4 resc00;
  short4 resc01;
  short4 resc02;
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempc000 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc010 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc020 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempc001 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc011 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc021 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempc002 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc012 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc022 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 2)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 2)]);
  tempc003 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc013 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc023 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 3)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 3)]);
  tempc004 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc014 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc024 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar4( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar4( clamp(resc02, (short)0, (short)255) );
  vstore4(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore4(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore4(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
1.1296860768716982e-09 s
2560 x 1600 :
1.0934152444269174e-09 s
2048 x 2048 :
1.0872207076918079e-09 s
5760 x 3240 :
1.119505455899797e-09 s
7680 x 4320 :
1.1140561370039892e-09 s
{:x_component_number=>4, :vector_length=>2, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar2 temp000;
  uchar2 temp001;
  uchar2 temp002;
  uchar2 temp003;
  uchar2 temp004;
  uchar2 temp100;
  uchar2 temp101;
  uchar2 temp102;
  uchar2 temp103;
  uchar2 temp104;
  uchar2 temp010;
  uchar2 temp011;
  uchar2 temp012;
  uchar2 temp013;
  uchar2 temp014;
  uchar2 temp110;
  uchar2 temp111;
  uchar2 temp112;
  uchar2 temp113;
  uchar2 temp114;
  uchar2 temp020;
  uchar2 temp021;
  uchar2 temp022;
  uchar2 temp023;
  uchar2 temp024;
  uchar2 temp120;
  uchar2 temp121;
  uchar2 temp122;
  uchar2 temp123;
  uchar2 temp124;
  uchar2 res00;
  uchar2 res01;
  uchar2 res02;
  uchar2 res10;
  uchar2 res11;
  uchar2 res12;
  short2 tempc000;
  short2 tempc001;
  short2 tempc002;
  short2 tempc003;
  short2 tempc004;
  short2 tempc100;
  short2 tempc101;
  short2 tempc102;
  short2 tempc103;
  short2 tempc104;
  short2 tempc010;
  short2 tempc011;
  short2 tempc012;
  short2 tempc013;
  short2 tempc014;
  short2 tempc110;
  short2 tempc111;
  short2 tempc112;
  short2 tempc113;
  short2 tempc114;
  short2 tempc020;
  short2 tempc021;
  short2 tempc022;
  short2 tempc023;
  short2 tempc024;
  short2 tempc120;
  short2 tempc121;
  short2 tempc122;
  short2 tempc123;
  short2 tempc124;
  short2 resc00;
  short2 resc01;
  short2 resc02;
  short2 resc10;
  short2 resc11;
  short2 resc12;
  temp000 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short2( temp000 );
  temp100 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + -1)]);
  tempc100 = convert_short2( temp100 );
  temp010 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short2( temp010 );
  temp110 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + -1)]);
  tempc110 = convert_short2( temp110 );
  temp020 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short2( temp020 );
  temp120 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + -1)]);
  tempc120 = convert_short2( temp120 );
  temp001 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short2( temp001 );
  temp101 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 0)]);
  tempc101 = convert_short2( temp101 );
  temp011 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short2( temp011 );
  temp111 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 0)]);
  tempc111 = convert_short2( temp111 );
  temp021 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short2( temp021 );
  temp121 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 0)]);
  tempc121 = convert_short2( temp121 );
  temp002 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short2( temp002 );
  temp102 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 1)]);
  tempc102 = convert_short2( temp102 );
  temp012 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short2( temp012 );
  temp112 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 1)]);
  tempc112 = convert_short2( temp112 );
  temp022 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short2( temp022 );
  temp122 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 1)]);
  tempc122 = convert_short2( temp122 );
  temp003 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_short2( temp003 );
  temp103 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 2)]);
  tempc103 = convert_short2( temp103 );
  temp013 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_short2( temp013 );
  temp113 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 2)]);
  tempc113 = convert_short2( temp113 );
  temp023 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_short2( temp023 );
  temp123 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 2)]);
  tempc123 = convert_short2( temp123 );
  temp004 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_short2( temp004 );
  temp104 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 3)]);
  tempc104 = convert_short2( temp104 );
  temp014 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_short2( temp014 );
  temp114 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 3)]);
  tempc114 = convert_short2( temp114 );
  temp024 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_short2( temp024 );
  temp124 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 3)]);
  tempc124 = convert_short2( temp124 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar2( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar2( clamp(resc02, (short)0, (short)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((short)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar2( clamp(resc10, (short)0, (short)255) );
  resc11 =  -(tempc101) - (tempc111) - (tempc121) - (tempc102) + (tempc112) * ((short)9) - (tempc122) - (tempc103) - (tempc113) - (tempc123);
  res11 = convert_uchar2( clamp(resc11, (short)0, (short)255) );
  resc12 =  -(tempc102) - (tempc112) - (tempc122) - (tempc103) + (tempc113) * ((short)9) - (tempc123) - (tempc104) - (tempc114) - (tempc124);
  res12 = convert_uchar2( clamp(resc12, (short)0, (short)255) );
  vstore2(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res10, 0, &pdst[x + 2 + (w) * (y + 0)]);
  vstore2(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore2(res11, 0, &pdst[x + 2 + (w) * (y + 1)]);
  vstore2(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
  vstore2(res12, 0, &pdst[x + 2 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
1.232084522436092e-09 s
2560 x 1600 :
1.1582186881373414e-09 s
2048 x 2048 :
1.1783715501433787e-09 s
5760 x 3240 :
1.1214260321756598e-09 s
7680 x 4320 :
1.1145763821031343e-09 s
{:x_component_number=>1, :vector_length=>4, :y_component_number=>2, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (2);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (4) ? w - (4) : x));
  y = (y < 1 ? 1 : (y > height - (3) ? height - (3) : y));
  uchar4 tempload0_3;
  uchar2 tempload4_5;
  uchar tempload6_6;
  uchar4 res00;
  uchar4 res01;
  int4 tempc000;
  int4 tempc001;
  int4 tempc002;
  int4 tempc003;
  int4 tempc010;
  int4 tempc011;
  int4 tempc012;
  int4 tempc013;
  int4 tempc020;
  int4 tempc021;
  int4 tempc022;
  int4 tempc023;
  int4 resc00;
  int4 resc01;
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + -1)];
  tempc000 = convert_int4( (uchar4)(tempload0_3.s0123) );
  tempc010 = convert_int4( (uchar4)(tempload0_3.s3,tempload4_5.s01,tempload6_6) );
  tempc020 = convert_int4( (uchar4)(tempload6_6,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 0)];
  tempc001 = convert_int4( (uchar4)(tempload0_3.s0123) );
  tempc011 = convert_int4( (uchar4)(tempload0_3.s3,tempload4_5.s01,tempload6_6) );
  tempc021 = convert_int4( (uchar4)(tempload6_6,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 1)];
  tempc002 = convert_int4( (uchar4)(tempload0_3.s0123) );
  tempc012 = convert_int4( (uchar4)(tempload0_3.s3,tempload4_5.s01,tempload6_6) );
  tempc022 = convert_int4( (uchar4)(tempload6_6,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 2)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 2)];
  tempc003 = convert_int4( (uchar4)(tempload0_3.s0123) );
  tempc013 = convert_int4( (uchar4)(tempload0_3.s3,tempload4_5.s01,tempload6_6) );
  tempc023 = convert_int4( (uchar4)(tempload6_6,0,0,0) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar4( clamp(resc01, (int)0, (int)255) );
  pdst[x + 0 + (w) * (y + 0)] = res00.s0;
  pdst[x + 0 + (w) * (y + 1)] = res01.s0;
}
768 x 432 :
Tesla T10 Processor: 
9.030299350294492e-10 s
2560 x 1600 :
8.450672801517926e-10 s
2048 x 2048 :
8.248600851003652e-10 s
5760 x 3240 :
8.224117005831884e-10 s
7680 x 4320 :
8.028935858677687e-10 s
{:x_component_number=>4, :vector_length=>16, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (19) ? w - (19) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar16 tempload0_15;
  uchar4 tempload16_19;
  uchar2 tempload20_21;
  uchar16 res00;
  uchar16 res01;
  uchar16 res02;
  int16 tempc000;
  int16 tempc001;
  int16 tempc002;
  int16 tempc003;
  int16 tempc004;
  int16 tempc010;
  int16 tempc011;
  int16 tempc012;
  int16 tempc013;
  int16 tempc014;
  int16 tempc020;
  int16 tempc021;
  int16 tempc022;
  int16 tempc023;
  int16 tempc024;
  int16 resc00;
  int16 resc01;
  int16 resc02;
  tempload0_15 = vload16(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + -1)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + -1)]);
  tempc000 = convert_int16( (uchar16)(tempload0_15.s0123456789abcdef) );
  tempc010 = convert_int16( (uchar16)(tempload0_15.s3456,tempload0_15.s789a,tempload0_15.sbcd,tempload0_15.sef,tempload16_19.s012) );
  tempc020 = convert_int16( (uchar16)(tempload0_15.s6789,tempload0_15.sabc,tempload0_15.sdef,tempload16_19.s0123,tempload20_21.s01) );
  tempload0_15 = vload16(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 0)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 0)]);
  tempc001 = convert_int16( (uchar16)(tempload0_15.s0123456789abcdef) );
  tempc011 = convert_int16( (uchar16)(tempload0_15.s3456,tempload0_15.s789a,tempload0_15.sbcd,tempload0_15.sef,tempload16_19.s012) );
  tempc021 = convert_int16( (uchar16)(tempload0_15.s6789,tempload0_15.sabc,tempload0_15.sdef,tempload16_19.s0123,tempload20_21.s01) );
  tempload0_15 = vload16(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 1)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 1)]);
  tempc002 = convert_int16( (uchar16)(tempload0_15.s0123456789abcdef) );
  tempc012 = convert_int16( (uchar16)(tempload0_15.s3456,tempload0_15.s789a,tempload0_15.sbcd,tempload0_15.sef,tempload16_19.s012) );
  tempc022 = convert_int16( (uchar16)(tempload0_15.s6789,tempload0_15.sabc,tempload0_15.sdef,tempload16_19.s0123,tempload20_21.s01) );
  tempload0_15 = vload16(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 2)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 2)]);
  tempc003 = convert_int16( (uchar16)(tempload0_15.s0123456789abcdef) );
  tempc013 = convert_int16( (uchar16)(tempload0_15.s3456,tempload0_15.s789a,tempload0_15.sbcd,tempload0_15.sef,tempload16_19.s012) );
  tempc023 = convert_int16( (uchar16)(tempload0_15.s6789,tempload0_15.sabc,tempload0_15.sdef,tempload16_19.s0123,tempload20_21.s01) );
  tempload0_15 = vload16(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 3)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 3)]);
  tempc004 = convert_int16( (uchar16)(tempload0_15.s0123456789abcdef) );
  tempc014 = convert_int16( (uchar16)(tempload0_15.s3456,tempload0_15.s789a,tempload0_15.sbcd,tempload0_15.sef,tempload16_19.s012) );
  tempc024 = convert_int16( (uchar16)(tempload0_15.s6789,tempload0_15.sabc,tempload0_15.sdef,tempload16_19.s0123,tempload20_21.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar16( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar16( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar16( clamp(resc02, (int)0, (int)255) );
  vstore16(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore16(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore16(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
3.742498026595422e-09 s
2560 x 1600 :
3.386218699879932e-09 s
2048 x 2048 :
3.397478712964476e-09 s
5760 x 3240 :
3.3371548910868916e-09 s
7680 x 4320 :
3.464838151532485e-09 s
{:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (2);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (5) ? w - (5) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar2 tempload0_1;
  uchar2 tempload2_3;
  uchar2 tempload4_5;
  uchar2 tempload6_7;
  uchar2 res00;
  uchar2 res01;
  uchar2 res02;
  int2 tempc000;
  int2 tempc001;
  int2 tempc002;
  int2 tempc003;
  int2 tempc004;
  int2 tempc010;
  int2 tempc011;
  int2 tempc012;
  int2 tempc013;
  int2 tempc014;
  int2 tempc020;
  int2 tempc021;
  int2 tempc022;
  int2 tempc023;
  int2 tempc024;
  int2 resc00;
  int2 resc01;
  int2 resc02;
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + -1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload6_7 = vload2(0, &psrc[x + 3 + (w) * (y + -1)]);
  tempc000 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc010 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc020 = convert_int2( (uchar2)(tempload6_7.s01) );
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + 0)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload6_7 = vload2(0, &psrc[x + 3 + (w) * (y + 0)]);
  tempc001 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc011 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc021 = convert_int2( (uchar2)(tempload6_7.s01) );
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + 1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload6_7 = vload2(0, &psrc[x + 3 + (w) * (y + 1)]);
  tempc002 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc012 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc022 = convert_int2( (uchar2)(tempload6_7.s01) );
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + 2)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 2)]);
  tempload6_7 = vload2(0, &psrc[x + 3 + (w) * (y + 2)]);
  tempc003 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc013 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc023 = convert_int2( (uchar2)(tempload6_7.s01) );
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + 3)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 3)]);
  tempload6_7 = vload2(0, &psrc[x + 3 + (w) * (y + 3)]);
  tempc004 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc014 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc024 = convert_int2( (uchar2)(tempload6_7.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar2( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar2( clamp(resc02, (int)0, (int)255) );
  vstore2(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore2(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
9.087619163276459e-10 s
2560 x 1600 :
8.671198654299109e-10 s
2048 x 2048 :
8.627988330949262e-10 s
5760 x 3240 :
8.250273915969639e-10 s
7680 x 4320 :
8.037333135788194e-10 s
{:x_component_number=>4, :vector_length=>8, :y_component_number=>2, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (2);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (3) ? height - (3) : y));
  uchar8 temp000;
  uchar8 temp001;
  uchar8 temp002;
  uchar8 temp003;
  uchar8 temp010;
  uchar8 temp011;
  uchar8 temp012;
  uchar8 temp013;
  uchar8 temp020;
  uchar8 temp021;
  uchar8 temp022;
  uchar8 temp023;
  uchar8 res00;
  uchar8 res01;
  short8 tempc000;
  short8 tempc001;
  short8 tempc002;
  short8 tempc003;
  short8 tempc010;
  short8 tempc011;
  short8 tempc012;
  short8 tempc013;
  short8 tempc020;
  short8 tempc021;
  short8 tempc022;
  short8 tempc023;
  short8 resc00;
  short8 resc01;
  temp000 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short8( temp000 );
  temp010 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short8( temp010 );
  temp020 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short8( temp020 );
  temp001 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short8( temp001 );
  temp011 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short8( temp011 );
  temp021 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short8( temp021 );
  temp002 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short8( temp002 );
  temp012 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short8( temp012 );
  temp022 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short8( temp022 );
  temp003 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_short8( temp003 );
  temp013 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_short8( temp013 );
  temp023 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_short8( temp023 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar8( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar8( clamp(resc01, (short)0, (short)255) );
  vstore4(res00.s0123, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore4(res01.s0123, 0, &pdst[x + 0 + (w) * (y + 1)]);
}
768 x 432 :
Tesla T10 Processor: 
1.3827676240208879e-09 s
2560 x 1600 :
1.316618407880844e-09 s
2048 x 2048 :
1.308967071146619e-09 s
5760 x 3240 :
1.3078128965667124e-09 s
7680 x 4320 :
1.3304597593673375e-09 s
{:x_component_number=>4, :vector_length=>8, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar8 temp000;
  uchar8 temp001;
  uchar8 temp002;
  uchar8 temp003;
  uchar8 temp004;
  uchar8 temp010;
  uchar8 temp011;
  uchar8 temp012;
  uchar8 temp013;
  uchar8 temp014;
  uchar8 temp020;
  uchar8 temp021;
  uchar8 temp022;
  uchar8 temp023;
  uchar8 temp024;
  uchar8 res00;
  uchar8 res01;
  uchar8 res02;
  short8 tempc000;
  short8 tempc001;
  short8 tempc002;
  short8 tempc003;
  short8 tempc004;
  short8 tempc010;
  short8 tempc011;
  short8 tempc012;
  short8 tempc013;
  short8 tempc014;
  short8 tempc020;
  short8 tempc021;
  short8 tempc022;
  short8 tempc023;
  short8 tempc024;
  short8 resc00;
  short8 resc01;
  short8 resc02;
  temp000 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short8( temp000 );
  temp010 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short8( temp010 );
  temp020 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short8( temp020 );
  temp001 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short8( temp001 );
  temp011 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short8( temp011 );
  temp021 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short8( temp021 );
  temp002 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short8( temp002 );
  temp012 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short8( temp012 );
  temp022 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short8( temp022 );
  temp003 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_short8( temp003 );
  temp013 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_short8( temp013 );
  temp023 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_short8( temp023 );
  temp004 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_short8( temp004 );
  temp014 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_short8( temp014 );
  temp024 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_short8( temp024 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar8( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar8( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar8( clamp(resc02, (short)0, (short)255) );
  vstore8(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore8(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore8(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
2.0822636468516606e-09 s
2560 x 1600 :
1.879221583664491e-09 s
2048 x 2048 :
1.9126694052434284e-09 s
5760 x 3240 :
1.820893389780655e-09 s
7680 x 4320 :
1.8595277907041418e-09 s
{:x_component_number=>16, :vector_length=>2, :y_component_number=>1, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (16);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (19) ? w - (19) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar2 temp000;
  uchar2 temp001;
  uchar2 temp002;
  uchar2 temp100;
  uchar2 temp101;
  uchar2 temp102;
  uchar2 temp200;
  uchar2 temp201;
  uchar2 temp202;
  uchar2 temp300;
  uchar2 temp301;
  uchar2 temp302;
  uchar2 temp400;
  uchar2 temp401;
  uchar2 temp402;
  uchar2 temp500;
  uchar2 temp501;
  uchar2 temp502;
  uchar2 temp600;
  uchar2 temp601;
  uchar2 temp602;
  uchar2 temp700;
  uchar2 temp701;
  uchar2 temp702;
  uchar2 temp010;
  uchar2 temp011;
  uchar2 temp012;
  uchar2 temp110;
  uchar2 temp111;
  uchar2 temp112;
  uchar2 temp210;
  uchar2 temp211;
  uchar2 temp212;
  uchar2 temp310;
  uchar2 temp311;
  uchar2 temp312;
  uchar2 temp410;
  uchar2 temp411;
  uchar2 temp412;
  uchar2 temp510;
  uchar2 temp511;
  uchar2 temp512;
  uchar2 temp610;
  uchar2 temp611;
  uchar2 temp612;
  uchar2 temp710;
  uchar2 temp711;
  uchar2 temp712;
  uchar2 temp020;
  uchar2 temp021;
  uchar2 temp022;
  uchar2 temp120;
  uchar2 temp121;
  uchar2 temp122;
  uchar2 temp220;
  uchar2 temp221;
  uchar2 temp222;
  uchar2 temp320;
  uchar2 temp321;
  uchar2 temp322;
  uchar2 temp420;
  uchar2 temp421;
  uchar2 temp422;
  uchar2 temp520;
  uchar2 temp521;
  uchar2 temp522;
  uchar2 temp620;
  uchar2 temp621;
  uchar2 temp622;
  uchar2 temp720;
  uchar2 temp721;
  uchar2 temp722;
  uchar2 res00;
  uchar2 res10;
  uchar2 res20;
  uchar2 res30;
  uchar2 res40;
  uchar2 res50;
  uchar2 res60;
  uchar2 res70;
  int2 tempc000;
  int2 tempc001;
  int2 tempc002;
  int2 tempc100;
  int2 tempc101;
  int2 tempc102;
  int2 tempc200;
  int2 tempc201;
  int2 tempc202;
  int2 tempc300;
  int2 tempc301;
  int2 tempc302;
  int2 tempc400;
  int2 tempc401;
  int2 tempc402;
  int2 tempc500;
  int2 tempc501;
  int2 tempc502;
  int2 tempc600;
  int2 tempc601;
  int2 tempc602;
  int2 tempc700;
  int2 tempc701;
  int2 tempc702;
  int2 tempc010;
  int2 tempc011;
  int2 tempc012;
  int2 tempc110;
  int2 tempc111;
  int2 tempc112;
  int2 tempc210;
  int2 tempc211;
  int2 tempc212;
  int2 tempc310;
  int2 tempc311;
  int2 tempc312;
  int2 tempc410;
  int2 tempc411;
  int2 tempc412;
  int2 tempc510;
  int2 tempc511;
  int2 tempc512;
  int2 tempc610;
  int2 tempc611;
  int2 tempc612;
  int2 tempc710;
  int2 tempc711;
  int2 tempc712;
  int2 tempc020;
  int2 tempc021;
  int2 tempc022;
  int2 tempc120;
  int2 tempc121;
  int2 tempc122;
  int2 tempc220;
  int2 tempc221;
  int2 tempc222;
  int2 tempc320;
  int2 tempc321;
  int2 tempc322;
  int2 tempc420;
  int2 tempc421;
  int2 tempc422;
  int2 tempc520;
  int2 tempc521;
  int2 tempc522;
  int2 tempc620;
  int2 tempc621;
  int2 tempc622;
  int2 tempc720;
  int2 tempc721;
  int2 tempc722;
  int2 resc00;
  int2 resc10;
  int2 resc20;
  int2 resc30;
  int2 resc40;
  int2 resc50;
  int2 resc60;
  int2 resc70;
  temp000 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int2( temp000 );
  temp100 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + -1)]);
  tempc100 = convert_int2( temp100 );
  temp200 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + -1)]);
  tempc200 = convert_int2( temp200 );
  temp300 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + -1)]);
  tempc300 = convert_int2( temp300 );
  temp400 = vload2(0, &psrc[x + 8 + -3 + (w) * (y + -1)]);
  tempc400 = convert_int2( temp400 );
  temp500 = vload2(0, &psrc[x + 10 + -3 + (w) * (y + -1)]);
  tempc500 = convert_int2( temp500 );
  temp600 = vload2(0, &psrc[x + 12 + -3 + (w) * (y + -1)]);
  tempc600 = convert_int2( temp600 );
  temp700 = vload2(0, &psrc[x + 14 + -3 + (w) * (y + -1)]);
  tempc700 = convert_int2( temp700 );
  temp010 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int2( temp010 );
  temp110 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + -1)]);
  tempc110 = convert_int2( temp110 );
  temp210 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + -1)]);
  tempc210 = convert_int2( temp210 );
  temp310 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + -1)]);
  tempc310 = convert_int2( temp310 );
  temp410 = vload2(0, &psrc[x + 8 + 0 + (w) * (y + -1)]);
  tempc410 = convert_int2( temp410 );
  temp510 = vload2(0, &psrc[x + 10 + 0 + (w) * (y + -1)]);
  tempc510 = convert_int2( temp510 );
  temp610 = vload2(0, &psrc[x + 12 + 0 + (w) * (y + -1)]);
  tempc610 = convert_int2( temp610 );
  temp710 = vload2(0, &psrc[x + 14 + 0 + (w) * (y + -1)]);
  tempc710 = convert_int2( temp710 );
  temp020 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int2( temp020 );
  temp120 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + -1)]);
  tempc120 = convert_int2( temp120 );
  temp220 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + -1)]);
  tempc220 = convert_int2( temp220 );
  temp320 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + -1)]);
  tempc320 = convert_int2( temp320 );
  temp420 = vload2(0, &psrc[x + 8 + 3 + (w) * (y + -1)]);
  tempc420 = convert_int2( temp420 );
  temp520 = vload2(0, &psrc[x + 10 + 3 + (w) * (y + -1)]);
  tempc520 = convert_int2( temp520 );
  temp620 = vload2(0, &psrc[x + 12 + 3 + (w) * (y + -1)]);
  tempc620 = convert_int2( temp620 );
  temp720 = vload2(0, &psrc[x + 14 + 3 + (w) * (y + -1)]);
  tempc720 = convert_int2( temp720 );
  temp001 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int2( temp001 );
  temp101 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 0)]);
  tempc101 = convert_int2( temp101 );
  temp201 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 0)]);
  tempc201 = convert_int2( temp201 );
  temp301 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 0)]);
  tempc301 = convert_int2( temp301 );
  temp401 = vload2(0, &psrc[x + 8 + -3 + (w) * (y + 0)]);
  tempc401 = convert_int2( temp401 );
  temp501 = vload2(0, &psrc[x + 10 + -3 + (w) * (y + 0)]);
  tempc501 = convert_int2( temp501 );
  temp601 = vload2(0, &psrc[x + 12 + -3 + (w) * (y + 0)]);
  tempc601 = convert_int2( temp601 );
  temp701 = vload2(0, &psrc[x + 14 + -3 + (w) * (y + 0)]);
  tempc701 = convert_int2( temp701 );
  temp011 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int2( temp011 );
  temp111 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 0)]);
  tempc111 = convert_int2( temp111 );
  temp211 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 0)]);
  tempc211 = convert_int2( temp211 );
  temp311 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 0)]);
  tempc311 = convert_int2( temp311 );
  temp411 = vload2(0, &psrc[x + 8 + 0 + (w) * (y + 0)]);
  tempc411 = convert_int2( temp411 );
  temp511 = vload2(0, &psrc[x + 10 + 0 + (w) * (y + 0)]);
  tempc511 = convert_int2( temp511 );
  temp611 = vload2(0, &psrc[x + 12 + 0 + (w) * (y + 0)]);
  tempc611 = convert_int2( temp611 );
  temp711 = vload2(0, &psrc[x + 14 + 0 + (w) * (y + 0)]);
  tempc711 = convert_int2( temp711 );
  temp021 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int2( temp021 );
  temp121 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 0)]);
  tempc121 = convert_int2( temp121 );
  temp221 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 0)]);
  tempc221 = convert_int2( temp221 );
  temp321 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 0)]);
  tempc321 = convert_int2( temp321 );
  temp421 = vload2(0, &psrc[x + 8 + 3 + (w) * (y + 0)]);
  tempc421 = convert_int2( temp421 );
  temp521 = vload2(0, &psrc[x + 10 + 3 + (w) * (y + 0)]);
  tempc521 = convert_int2( temp521 );
  temp621 = vload2(0, &psrc[x + 12 + 3 + (w) * (y + 0)]);
  tempc621 = convert_int2( temp621 );
  temp721 = vload2(0, &psrc[x + 14 + 3 + (w) * (y + 0)]);
  tempc721 = convert_int2( temp721 );
  temp002 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int2( temp002 );
  temp102 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 1)]);
  tempc102 = convert_int2( temp102 );
  temp202 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 1)]);
  tempc202 = convert_int2( temp202 );
  temp302 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 1)]);
  tempc302 = convert_int2( temp302 );
  temp402 = vload2(0, &psrc[x + 8 + -3 + (w) * (y + 1)]);
  tempc402 = convert_int2( temp402 );
  temp502 = vload2(0, &psrc[x + 10 + -3 + (w) * (y + 1)]);
  tempc502 = convert_int2( temp502 );
  temp602 = vload2(0, &psrc[x + 12 + -3 + (w) * (y + 1)]);
  tempc602 = convert_int2( temp602 );
  temp702 = vload2(0, &psrc[x + 14 + -3 + (w) * (y + 1)]);
  tempc702 = convert_int2( temp702 );
  temp012 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int2( temp012 );
  temp112 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 1)]);
  tempc112 = convert_int2( temp112 );
  temp212 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 1)]);
  tempc212 = convert_int2( temp212 );
  temp312 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 1)]);
  tempc312 = convert_int2( temp312 );
  temp412 = vload2(0, &psrc[x + 8 + 0 + (w) * (y + 1)]);
  tempc412 = convert_int2( temp412 );
  temp512 = vload2(0, &psrc[x + 10 + 0 + (w) * (y + 1)]);
  tempc512 = convert_int2( temp512 );
  temp612 = vload2(0, &psrc[x + 12 + 0 + (w) * (y + 1)]);
  tempc612 = convert_int2( temp612 );
  temp712 = vload2(0, &psrc[x + 14 + 0 + (w) * (y + 1)]);
  tempc712 = convert_int2( temp712 );
  temp022 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int2( temp022 );
  temp122 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 1)]);
  tempc122 = convert_int2( temp122 );
  temp222 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 1)]);
  tempc222 = convert_int2( temp222 );
  temp322 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 1)]);
  tempc322 = convert_int2( temp322 );
  temp422 = vload2(0, &psrc[x + 8 + 3 + (w) * (y + 1)]);
  tempc422 = convert_int2( temp422 );
  temp522 = vload2(0, &psrc[x + 10 + 3 + (w) * (y + 1)]);
  tempc522 = convert_int2( temp522 );
  temp622 = vload2(0, &psrc[x + 12 + 3 + (w) * (y + 1)]);
  tempc622 = convert_int2( temp622 );
  temp722 = vload2(0, &psrc[x + 14 + 3 + (w) * (y + 1)]);
  tempc722 = convert_int2( temp722 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (int)0, (int)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar2( clamp(resc10, (int)0, (int)255) );
  resc20 =  -(tempc200) - (tempc210) - (tempc220) - (tempc201) + (tempc211) * ((int)9) - (tempc221) - (tempc202) - (tempc212) - (tempc222);
  res20 = convert_uchar2( clamp(resc20, (int)0, (int)255) );
  resc30 =  -(tempc300) - (tempc310) - (tempc320) - (tempc301) + (tempc311) * ((int)9) - (tempc321) - (tempc302) - (tempc312) - (tempc322);
  res30 = convert_uchar2( clamp(resc30, (int)0, (int)255) );
  resc40 =  -(tempc400) - (tempc410) - (tempc420) - (tempc401) + (tempc411) * ((int)9) - (tempc421) - (tempc402) - (tempc412) - (tempc422);
  res40 = convert_uchar2( clamp(resc40, (int)0, (int)255) );
  resc50 =  -(tempc500) - (tempc510) - (tempc520) - (tempc501) + (tempc511) * ((int)9) - (tempc521) - (tempc502) - (tempc512) - (tempc522);
  res50 = convert_uchar2( clamp(resc50, (int)0, (int)255) );
  resc60 =  -(tempc600) - (tempc610) - (tempc620) - (tempc601) + (tempc611) * ((int)9) - (tempc621) - (tempc602) - (tempc612) - (tempc622);
  res60 = convert_uchar2( clamp(resc60, (int)0, (int)255) );
  resc70 =  -(tempc700) - (tempc710) - (tempc720) - (tempc701) + (tempc711) * ((int)9) - (tempc721) - (tempc702) - (tempc712) - (tempc722);
  res70 = convert_uchar2( clamp(resc70, (int)0, (int)255) );
  vstore2(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res10, 0, &pdst[x + 2 + (w) * (y + 0)]);
  vstore2(res20, 0, &pdst[x + 4 + (w) * (y + 0)]);
  vstore2(res30, 0, &pdst[x + 6 + (w) * (y + 0)]);
  vstore2(res40, 0, &pdst[x + 8 + (w) * (y + 0)]);
  vstore2(res50, 0, &pdst[x + 10 + (w) * (y + 0)]);
  vstore2(res60, 0, &pdst[x + 12 + (w) * (y + 0)]);
  vstore2(res70, 0, &pdst[x + 14 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
4.016467302204141e-09 s
2560 x 1600 :
3.8370402408796764e-09 s
2048 x 2048 :
3.6587997083692858e-09 s
5760 x 3240 :
3.6951664424349526e-09 s
7680 x 4320 :
4.0253998328507515e-09 s
{:x_component_number=>8, :vector_length=>2, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (8);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar2 temp000;
  uchar2 temp001;
  uchar2 temp002;
  uchar2 temp003;
  uchar2 temp004;
  uchar2 temp100;
  uchar2 temp101;
  uchar2 temp102;
  uchar2 temp103;
  uchar2 temp104;
  uchar2 temp200;
  uchar2 temp201;
  uchar2 temp202;
  uchar2 temp203;
  uchar2 temp204;
  uchar2 temp300;
  uchar2 temp301;
  uchar2 temp302;
  uchar2 temp303;
  uchar2 temp304;
  uchar2 temp010;
  uchar2 temp011;
  uchar2 temp012;
  uchar2 temp013;
  uchar2 temp014;
  uchar2 temp110;
  uchar2 temp111;
  uchar2 temp112;
  uchar2 temp113;
  uchar2 temp114;
  uchar2 temp210;
  uchar2 temp211;
  uchar2 temp212;
  uchar2 temp213;
  uchar2 temp214;
  uchar2 temp310;
  uchar2 temp311;
  uchar2 temp312;
  uchar2 temp313;
  uchar2 temp314;
  uchar2 temp020;
  uchar2 temp021;
  uchar2 temp022;
  uchar2 temp023;
  uchar2 temp024;
  uchar2 temp120;
  uchar2 temp121;
  uchar2 temp122;
  uchar2 temp123;
  uchar2 temp124;
  uchar2 temp220;
  uchar2 temp221;
  uchar2 temp222;
  uchar2 temp223;
  uchar2 temp224;
  uchar2 temp320;
  uchar2 temp321;
  uchar2 temp322;
  uchar2 temp323;
  uchar2 temp324;
  uchar2 res00;
  uchar2 res01;
  uchar2 res02;
  uchar2 res10;
  uchar2 res11;
  uchar2 res12;
  uchar2 res20;
  uchar2 res21;
  uchar2 res22;
  uchar2 res30;
  uchar2 res31;
  uchar2 res32;
  int2 tempc000;
  int2 tempc001;
  int2 tempc002;
  int2 tempc003;
  int2 tempc004;
  int2 tempc100;
  int2 tempc101;
  int2 tempc102;
  int2 tempc103;
  int2 tempc104;
  int2 tempc200;
  int2 tempc201;
  int2 tempc202;
  int2 tempc203;
  int2 tempc204;
  int2 tempc300;
  int2 tempc301;
  int2 tempc302;
  int2 tempc303;
  int2 tempc304;
  int2 tempc010;
  int2 tempc011;
  int2 tempc012;
  int2 tempc013;
  int2 tempc014;
  int2 tempc110;
  int2 tempc111;
  int2 tempc112;
  int2 tempc113;
  int2 tempc114;
  int2 tempc210;
  int2 tempc211;
  int2 tempc212;
  int2 tempc213;
  int2 tempc214;
  int2 tempc310;
  int2 tempc311;
  int2 tempc312;
  int2 tempc313;
  int2 tempc314;
  int2 tempc020;
  int2 tempc021;
  int2 tempc022;
  int2 tempc023;
  int2 tempc024;
  int2 tempc120;
  int2 tempc121;
  int2 tempc122;
  int2 tempc123;
  int2 tempc124;
  int2 tempc220;
  int2 tempc221;
  int2 tempc222;
  int2 tempc223;
  int2 tempc224;
  int2 tempc320;
  int2 tempc321;
  int2 tempc322;
  int2 tempc323;
  int2 tempc324;
  int2 resc00;
  int2 resc01;
  int2 resc02;
  int2 resc10;
  int2 resc11;
  int2 resc12;
  int2 resc20;
  int2 resc21;
  int2 resc22;
  int2 resc30;
  int2 resc31;
  int2 resc32;
  temp000 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int2( temp000 );
  temp100 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + -1)]);
  tempc100 = convert_int2( temp100 );
  temp200 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + -1)]);
  tempc200 = convert_int2( temp200 );
  temp300 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + -1)]);
  tempc300 = convert_int2( temp300 );
  temp010 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int2( temp010 );
  temp110 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + -1)]);
  tempc110 = convert_int2( temp110 );
  temp210 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + -1)]);
  tempc210 = convert_int2( temp210 );
  temp310 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + -1)]);
  tempc310 = convert_int2( temp310 );
  temp020 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int2( temp020 );
  temp120 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + -1)]);
  tempc120 = convert_int2( temp120 );
  temp220 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + -1)]);
  tempc220 = convert_int2( temp220 );
  temp320 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + -1)]);
  tempc320 = convert_int2( temp320 );
  temp001 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int2( temp001 );
  temp101 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 0)]);
  tempc101 = convert_int2( temp101 );
  temp201 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 0)]);
  tempc201 = convert_int2( temp201 );
  temp301 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 0)]);
  tempc301 = convert_int2( temp301 );
  temp011 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int2( temp011 );
  temp111 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 0)]);
  tempc111 = convert_int2( temp111 );
  temp211 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 0)]);
  tempc211 = convert_int2( temp211 );
  temp311 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 0)]);
  tempc311 = convert_int2( temp311 );
  temp021 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int2( temp021 );
  temp121 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 0)]);
  tempc121 = convert_int2( temp121 );
  temp221 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 0)]);
  tempc221 = convert_int2( temp221 );
  temp321 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 0)]);
  tempc321 = convert_int2( temp321 );
  temp002 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int2( temp002 );
  temp102 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 1)]);
  tempc102 = convert_int2( temp102 );
  temp202 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 1)]);
  tempc202 = convert_int2( temp202 );
  temp302 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 1)]);
  tempc302 = convert_int2( temp302 );
  temp012 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int2( temp012 );
  temp112 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 1)]);
  tempc112 = convert_int2( temp112 );
  temp212 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 1)]);
  tempc212 = convert_int2( temp212 );
  temp312 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 1)]);
  tempc312 = convert_int2( temp312 );
  temp022 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int2( temp022 );
  temp122 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 1)]);
  tempc122 = convert_int2( temp122 );
  temp222 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 1)]);
  tempc222 = convert_int2( temp222 );
  temp322 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 1)]);
  tempc322 = convert_int2( temp322 );
  temp003 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_int2( temp003 );
  temp103 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 2)]);
  tempc103 = convert_int2( temp103 );
  temp203 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 2)]);
  tempc203 = convert_int2( temp203 );
  temp303 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 2)]);
  tempc303 = convert_int2( temp303 );
  temp013 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_int2( temp013 );
  temp113 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 2)]);
  tempc113 = convert_int2( temp113 );
  temp213 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 2)]);
  tempc213 = convert_int2( temp213 );
  temp313 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 2)]);
  tempc313 = convert_int2( temp313 );
  temp023 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_int2( temp023 );
  temp123 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 2)]);
  tempc123 = convert_int2( temp123 );
  temp223 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 2)]);
  tempc223 = convert_int2( temp223 );
  temp323 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 2)]);
  tempc323 = convert_int2( temp323 );
  temp004 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_int2( temp004 );
  temp104 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 3)]);
  tempc104 = convert_int2( temp104 );
  temp204 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 3)]);
  tempc204 = convert_int2( temp204 );
  temp304 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 3)]);
  tempc304 = convert_int2( temp304 );
  temp014 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_int2( temp014 );
  temp114 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 3)]);
  tempc114 = convert_int2( temp114 );
  temp214 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 3)]);
  tempc214 = convert_int2( temp214 );
  temp314 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 3)]);
  tempc314 = convert_int2( temp314 );
  temp024 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_int2( temp024 );
  temp124 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 3)]);
  tempc124 = convert_int2( temp124 );
  temp224 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 3)]);
  tempc224 = convert_int2( temp224 );
  temp324 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 3)]);
  tempc324 = convert_int2( temp324 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar2( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar2( clamp(resc02, (int)0, (int)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar2( clamp(resc10, (int)0, (int)255) );
  resc11 =  -(tempc101) - (tempc111) - (tempc121) - (tempc102) + (tempc112) * ((int)9) - (tempc122) - (tempc103) - (tempc113) - (tempc123);
  res11 = convert_uchar2( clamp(resc11, (int)0, (int)255) );
  resc12 =  -(tempc102) - (tempc112) - (tempc122) - (tempc103) + (tempc113) * ((int)9) - (tempc123) - (tempc104) - (tempc114) - (tempc124);
  res12 = convert_uchar2( clamp(resc12, (int)0, (int)255) );
  resc20 =  -(tempc200) - (tempc210) - (tempc220) - (tempc201) + (tempc211) * ((int)9) - (tempc221) - (tempc202) - (tempc212) - (tempc222);
  res20 = convert_uchar2( clamp(resc20, (int)0, (int)255) );
  resc21 =  -(tempc201) - (tempc211) - (tempc221) - (tempc202) + (tempc212) * ((int)9) - (tempc222) - (tempc203) - (tempc213) - (tempc223);
  res21 = convert_uchar2( clamp(resc21, (int)0, (int)255) );
  resc22 =  -(tempc202) - (tempc212) - (tempc222) - (tempc203) + (tempc213) * ((int)9) - (tempc223) - (tempc204) - (tempc214) - (tempc224);
  res22 = convert_uchar2( clamp(resc22, (int)0, (int)255) );
  resc30 =  -(tempc300) - (tempc310) - (tempc320) - (tempc301) + (tempc311) * ((int)9) - (tempc321) - (tempc302) - (tempc312) - (tempc322);
  res30 = convert_uchar2( clamp(resc30, (int)0, (int)255) );
  resc31 =  -(tempc301) - (tempc311) - (tempc321) - (tempc302) + (tempc312) * ((int)9) - (tempc322) - (tempc303) - (tempc313) - (tempc323);
  res31 = convert_uchar2( clamp(resc31, (int)0, (int)255) );
  resc32 =  -(tempc302) - (tempc312) - (tempc322) - (tempc303) + (tempc313) * ((int)9) - (tempc323) - (tempc304) - (tempc314) - (tempc324);
  res32 = convert_uchar2( clamp(resc32, (int)0, (int)255) );
  vstore2(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res10, 0, &pdst[x + 2 + (w) * (y + 0)]);
  vstore2(res20, 0, &pdst[x + 4 + (w) * (y + 0)]);
  vstore2(res30, 0, &pdst[x + 6 + (w) * (y + 0)]);
  vstore2(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore2(res11, 0, &pdst[x + 2 + (w) * (y + 1)]);
  vstore2(res21, 0, &pdst[x + 4 + (w) * (y + 1)]);
  vstore2(res31, 0, &pdst[x + 6 + (w) * (y + 1)]);
  vstore2(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
  vstore2(res12, 0, &pdst[x + 2 + (w) * (y + 2)]);
  vstore2(res22, 0, &pdst[x + 4 + (w) * (y + 2)]);
  vstore2(res32, 0, &pdst[x + 6 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
1.8794098002307364e-09 s
2560 x 1600 :
1.8195848798488338e-09 s
2048 x 2048 :
1.8527991102014373e-09 s
5760 x 3240 :
1.794753642969762e-09 s
7680 x 4320 :
1.8166466607974205e-09 s
{:x_component_number=>8, :vector_length=>2, :y_component_number=>1, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (8);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar2 tempload0_1;
  uchar2 tempload2_3;
  uchar2 tempload4_5;
  uchar2 tempload6_7;
  uchar2 tempload8_9;
  uchar2 tempload10_11;
  uchar2 tempload12_13;
  uchar2 res00;
  uchar2 res10;
  uchar2 res20;
  uchar2 res30;
  int2 tempc000;
  int2 tempc001;
  int2 tempc002;
  int2 tempc100;
  int2 tempc101;
  int2 tempc102;
  int2 tempc200;
  int2 tempc201;
  int2 tempc202;
  int2 tempc300;
  int2 tempc301;
  int2 tempc302;
  int2 tempc010;
  int2 tempc011;
  int2 tempc012;
  int2 tempc110;
  int2 tempc111;
  int2 tempc112;
  int2 tempc210;
  int2 tempc211;
  int2 tempc212;
  int2 tempc310;
  int2 tempc311;
  int2 tempc312;
  int2 tempc020;
  int2 tempc021;
  int2 tempc022;
  int2 tempc120;
  int2 tempc121;
  int2 tempc122;
  int2 tempc220;
  int2 tempc221;
  int2 tempc222;
  int2 tempc320;
  int2 tempc321;
  int2 tempc322;
  int2 resc00;
  int2 resc10;
  int2 resc20;
  int2 resc30;
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + -1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload6_7 = vload2(0, &psrc[x + 3 + (w) * (y + -1)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempload10_11 = vload2(0, &psrc[x + 7 + (w) * (y + -1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + -1)]);
  tempc000 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc100 = convert_int2( (uchar2)(tempload2_3.s01) );
  tempc200 = convert_int2( (uchar2)(tempload4_5.s01) );
  tempc300 = convert_int2( (uchar2)(tempload6_7.s01) );
  tempc010 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc110 = convert_int2( (uchar2)(tempload4_5.s1,tempload6_7.s0) );
  tempc210 = convert_int2( (uchar2)(tempload6_7.s1,tempload8_9.s0) );
  tempc310 = convert_int2( (uchar2)(tempload8_9.s1,tempload10_11.s0) );
  tempc020 = convert_int2( (uchar2)(tempload6_7.s01) );
  tempc120 = convert_int2( (uchar2)(tempload8_9.s01) );
  tempc220 = convert_int2( (uchar2)(tempload10_11.s01) );
  tempc320 = convert_int2( (uchar2)(tempload12_13.s01) );
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + 0)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload6_7 = vload2(0, &psrc[x + 3 + (w) * (y + 0)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempload10_11 = vload2(0, &psrc[x + 7 + (w) * (y + 0)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 0)]);
  tempc001 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc101 = convert_int2( (uchar2)(tempload2_3.s01) );
  tempc201 = convert_int2( (uchar2)(tempload4_5.s01) );
  tempc301 = convert_int2( (uchar2)(tempload6_7.s01) );
  tempc011 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc111 = convert_int2( (uchar2)(tempload4_5.s1,tempload6_7.s0) );
  tempc211 = convert_int2( (uchar2)(tempload6_7.s1,tempload8_9.s0) );
  tempc311 = convert_int2( (uchar2)(tempload8_9.s1,tempload10_11.s0) );
  tempc021 = convert_int2( (uchar2)(tempload6_7.s01) );
  tempc121 = convert_int2( (uchar2)(tempload8_9.s01) );
  tempc221 = convert_int2( (uchar2)(tempload10_11.s01) );
  tempc321 = convert_int2( (uchar2)(tempload12_13.s01) );
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + 1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload6_7 = vload2(0, &psrc[x + 3 + (w) * (y + 1)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempload10_11 = vload2(0, &psrc[x + 7 + (w) * (y + 1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 1)]);
  tempc002 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc102 = convert_int2( (uchar2)(tempload2_3.s01) );
  tempc202 = convert_int2( (uchar2)(tempload4_5.s01) );
  tempc302 = convert_int2( (uchar2)(tempload6_7.s01) );
  tempc012 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc112 = convert_int2( (uchar2)(tempload4_5.s1,tempload6_7.s0) );
  tempc212 = convert_int2( (uchar2)(tempload6_7.s1,tempload8_9.s0) );
  tempc312 = convert_int2( (uchar2)(tempload8_9.s1,tempload10_11.s0) );
  tempc022 = convert_int2( (uchar2)(tempload6_7.s01) );
  tempc122 = convert_int2( (uchar2)(tempload8_9.s01) );
  tempc222 = convert_int2( (uchar2)(tempload10_11.s01) );
  tempc322 = convert_int2( (uchar2)(tempload12_13.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (int)0, (int)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar2( clamp(resc10, (int)0, (int)255) );
  resc20 =  -(tempc200) - (tempc210) - (tempc220) - (tempc201) + (tempc211) * ((int)9) - (tempc221) - (tempc202) - (tempc212) - (tempc222);
  res20 = convert_uchar2( clamp(resc20, (int)0, (int)255) );
  resc30 =  -(tempc300) - (tempc310) - (tempc320) - (tempc301) + (tempc311) * ((int)9) - (tempc321) - (tempc302) - (tempc312) - (tempc322);
  res30 = convert_uchar2( clamp(resc30, (int)0, (int)255) );
  vstore2(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res10, 0, &pdst[x + 2 + (w) * (y + 0)]);
  vstore2(res20, 0, &pdst[x + 4 + (w) * (y + 0)]);
  vstore2(res30, 0, &pdst[x + 6 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
2.487194122290364e-09 s
2560 x 1600 :
2.3396250786508938e-09 s
2048 x 2048 :
2.3692339151614527e-09 s
5760 x 3240 :
2.383203453432998e-09 s
7680 x 4320 :
2.3836259852774978e-09 s
{:x_component_number=>2, :vector_length=>1, :y_component_number=>1, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (2);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (5) ? w - (5) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar tempload0_0;
  uchar tempload1_1;
  uchar tempload2_2;
  uchar tempload3_3;
  uchar tempload4_4;
  uchar tempload5_5;
  uchar tempload6_6;
  uchar tempload7_7;
  uchar res00;
  uchar res10;
  short tempc000;
  short tempc001;
  short tempc002;
  short tempc100;
  short tempc101;
  short tempc102;
  short tempc010;
  short tempc011;
  short tempc012;
  short tempc110;
  short tempc111;
  short tempc112;
  short tempc020;
  short tempc021;
  short tempc022;
  short tempc120;
  short tempc121;
  short tempc122;
  short resc00;
  short resc10;
  tempload0_0 = psrc[x + -3 + (w) * (y + -1)];
  tempload1_1 = psrc[x + -2 + (w) * (y + -1)];
  tempload2_2 = psrc[x + -1 + (w) * (y + -1)];
  tempload3_3 = psrc[x + 0 + (w) * (y + -1)];
  tempload4_4 = psrc[x + 1 + (w) * (y + -1)];
  tempload5_5 = psrc[x + 2 + (w) * (y + -1)];
  tempload6_6 = psrc[x + 3 + (w) * (y + -1)];
  tempload7_7 = psrc[x + 4 + (w) * (y + -1)];
  tempc000 = (uchar)(tempload0_0);
  tempc100 = (uchar)(tempload1_1);
  tempc010 = (uchar)(tempload3_3);
  tempc110 = (uchar)(tempload4_4);
  tempc020 = (uchar)(tempload6_6);
  tempc120 = (uchar)(tempload7_7);
  tempload0_0 = psrc[x + -3 + (w) * (y + 0)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 0)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 0)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 0)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 0)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 0)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 0)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 0)];
  tempc001 = (uchar)(tempload0_0);
  tempc101 = (uchar)(tempload1_1);
  tempc011 = (uchar)(tempload3_3);
  tempc111 = (uchar)(tempload4_4);
  tempc021 = (uchar)(tempload6_6);
  tempc121 = (uchar)(tempload7_7);
  tempload0_0 = psrc[x + -3 + (w) * (y + 1)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 1)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 1)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 1)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 1)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 1)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 1)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 1)];
  tempc002 = (uchar)(tempload0_0);
  tempc102 = (uchar)(tempload1_1);
  tempc012 = (uchar)(tempload3_3);
  tempc112 = (uchar)(tempload4_4);
  tempc022 = (uchar)(tempload6_6);
  tempc122 = (uchar)(tempload7_7);
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = clamp(resc00, (short)0, (short)255);
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((short)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = clamp(resc10, (short)0, (short)255);
  pdst[x + 0 + (w) * (y + 0)] = res00;
  pdst[x + 1 + (w) * (y + 0)] = res10;
}
768 x 432 :
Tesla T10 Processor: 
1.4619466877163155e-09 s
2560 x 1600 :
1.4301927448403545e-09 s
2048 x 2048 :
1.4179521064394775e-09 s
5760 x 3240 :
1.402309025271068e-09 s
7680 x 4320 :
1.3761206775589163e-09 s
{:x_component_number=>4, :vector_length=>8, :y_component_number=>1, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar8 temp000;
  uchar8 temp001;
  uchar8 temp002;
  uchar8 temp010;
  uchar8 temp011;
  uchar8 temp012;
  uchar8 temp020;
  uchar8 temp021;
  uchar8 temp022;
  uchar8 res00;
  short8 tempc000;
  short8 tempc001;
  short8 tempc002;
  short8 tempc010;
  short8 tempc011;
  short8 tempc012;
  short8 tempc020;
  short8 tempc021;
  short8 tempc022;
  short8 resc00;
  temp000 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short8( temp000 );
  temp010 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short8( temp010 );
  temp020 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short8( temp020 );
  temp001 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short8( temp001 );
  temp011 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short8( temp011 );
  temp021 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short8( temp021 );
  temp002 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short8( temp002 );
  temp012 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short8( temp012 );
  temp022 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short8( temp022 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar8( clamp(resc00, (short)0, (short)255) );
  vstore4(res00.s0123, 0, &pdst[x + 0 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
1.961503430687959e-09 s
2560 x 1600 :
1.9340125117303587e-09 s
2048 x 2048 :
1.8947052590038114e-09 s
5760 x 3240 :
1.9122280336770216e-09 s
7680 x 4320 :
1.9192073356489388e-09 s
{:x_component_number=>4, :vector_length=>1, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar tempload0_0;
  uchar tempload1_1;
  uchar tempload2_2;
  uchar tempload3_3;
  uchar tempload4_4;
  uchar tempload5_5;
  uchar tempload6_6;
  uchar tempload7_7;
  uchar tempload8_8;
  uchar tempload9_9;
  uchar res00;
  uchar res01;
  uchar res02;
  uchar res10;
  uchar res11;
  uchar res12;
  uchar res20;
  uchar res21;
  uchar res22;
  uchar res30;
  uchar res31;
  uchar res32;
  int tempc000;
  int tempc001;
  int tempc002;
  int tempc003;
  int tempc004;
  int tempc100;
  int tempc101;
  int tempc102;
  int tempc103;
  int tempc104;
  int tempc200;
  int tempc201;
  int tempc202;
  int tempc203;
  int tempc204;
  int tempc300;
  int tempc301;
  int tempc302;
  int tempc303;
  int tempc304;
  int tempc010;
  int tempc011;
  int tempc012;
  int tempc013;
  int tempc014;
  int tempc110;
  int tempc111;
  int tempc112;
  int tempc113;
  int tempc114;
  int tempc210;
  int tempc211;
  int tempc212;
  int tempc213;
  int tempc214;
  int tempc310;
  int tempc311;
  int tempc312;
  int tempc313;
  int tempc314;
  int tempc020;
  int tempc021;
  int tempc022;
  int tempc023;
  int tempc024;
  int tempc120;
  int tempc121;
  int tempc122;
  int tempc123;
  int tempc124;
  int tempc220;
  int tempc221;
  int tempc222;
  int tempc223;
  int tempc224;
  int tempc320;
  int tempc321;
  int tempc322;
  int tempc323;
  int tempc324;
  int resc00;
  int resc01;
  int resc02;
  int resc10;
  int resc11;
  int resc12;
  int resc20;
  int resc21;
  int resc22;
  int resc30;
  int resc31;
  int resc32;
  tempload0_0 = psrc[x + -3 + (w) * (y + -1)];
  tempload1_1 = psrc[x + -2 + (w) * (y + -1)];
  tempload2_2 = psrc[x + -1 + (w) * (y + -1)];
  tempload3_3 = psrc[x + 0 + (w) * (y + -1)];
  tempload4_4 = psrc[x + 1 + (w) * (y + -1)];
  tempload5_5 = psrc[x + 2 + (w) * (y + -1)];
  tempload6_6 = psrc[x + 3 + (w) * (y + -1)];
  tempload7_7 = psrc[x + 4 + (w) * (y + -1)];
  tempload8_8 = psrc[x + 5 + (w) * (y + -1)];
  tempload9_9 = psrc[x + 6 + (w) * (y + -1)];
  tempc000 = (uchar)(tempload0_0);
  tempc100 = (uchar)(tempload1_1);
  tempc200 = (uchar)(tempload2_2);
  tempc300 = (uchar)(tempload3_3);
  tempc010 = (uchar)(tempload3_3);
  tempc110 = (uchar)(tempload4_4);
  tempc210 = (uchar)(tempload5_5);
  tempc310 = (uchar)(tempload6_6);
  tempc020 = (uchar)(tempload6_6);
  tempc120 = (uchar)(tempload7_7);
  tempc220 = (uchar)(tempload8_8);
  tempc320 = (uchar)(tempload9_9);
  tempload0_0 = psrc[x + -3 + (w) * (y + 0)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 0)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 0)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 0)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 0)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 0)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 0)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 0)];
  tempload8_8 = psrc[x + 5 + (w) * (y + 0)];
  tempload9_9 = psrc[x + 6 + (w) * (y + 0)];
  tempc001 = (uchar)(tempload0_0);
  tempc101 = (uchar)(tempload1_1);
  tempc201 = (uchar)(tempload2_2);
  tempc301 = (uchar)(tempload3_3);
  tempc011 = (uchar)(tempload3_3);
  tempc111 = (uchar)(tempload4_4);
  tempc211 = (uchar)(tempload5_5);
  tempc311 = (uchar)(tempload6_6);
  tempc021 = (uchar)(tempload6_6);
  tempc121 = (uchar)(tempload7_7);
  tempc221 = (uchar)(tempload8_8);
  tempc321 = (uchar)(tempload9_9);
  tempload0_0 = psrc[x + -3 + (w) * (y + 1)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 1)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 1)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 1)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 1)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 1)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 1)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 1)];
  tempload8_8 = psrc[x + 5 + (w) * (y + 1)];
  tempload9_9 = psrc[x + 6 + (w) * (y + 1)];
  tempc002 = (uchar)(tempload0_0);
  tempc102 = (uchar)(tempload1_1);
  tempc202 = (uchar)(tempload2_2);
  tempc302 = (uchar)(tempload3_3);
  tempc012 = (uchar)(tempload3_3);
  tempc112 = (uchar)(tempload4_4);
  tempc212 = (uchar)(tempload5_5);
  tempc312 = (uchar)(tempload6_6);
  tempc022 = (uchar)(tempload6_6);
  tempc122 = (uchar)(tempload7_7);
  tempc222 = (uchar)(tempload8_8);
  tempc322 = (uchar)(tempload9_9);
  tempload0_0 = psrc[x + -3 + (w) * (y + 2)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 2)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 2)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 2)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 2)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 2)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 2)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 2)];
  tempload8_8 = psrc[x + 5 + (w) * (y + 2)];
  tempload9_9 = psrc[x + 6 + (w) * (y + 2)];
  tempc003 = (uchar)(tempload0_0);
  tempc103 = (uchar)(tempload1_1);
  tempc203 = (uchar)(tempload2_2);
  tempc303 = (uchar)(tempload3_3);
  tempc013 = (uchar)(tempload3_3);
  tempc113 = (uchar)(tempload4_4);
  tempc213 = (uchar)(tempload5_5);
  tempc313 = (uchar)(tempload6_6);
  tempc023 = (uchar)(tempload6_6);
  tempc123 = (uchar)(tempload7_7);
  tempc223 = (uchar)(tempload8_8);
  tempc323 = (uchar)(tempload9_9);
  tempload0_0 = psrc[x + -3 + (w) * (y + 3)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 3)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 3)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 3)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 3)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 3)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 3)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 3)];
  tempload8_8 = psrc[x + 5 + (w) * (y + 3)];
  tempload9_9 = psrc[x + 6 + (w) * (y + 3)];
  tempc004 = (uchar)(tempload0_0);
  tempc104 = (uchar)(tempload1_1);
  tempc204 = (uchar)(tempload2_2);
  tempc304 = (uchar)(tempload3_3);
  tempc014 = (uchar)(tempload3_3);
  tempc114 = (uchar)(tempload4_4);
  tempc214 = (uchar)(tempload5_5);
  tempc314 = (uchar)(tempload6_6);
  tempc024 = (uchar)(tempload6_6);
  tempc124 = (uchar)(tempload7_7);
  tempc224 = (uchar)(tempload8_8);
  tempc324 = (uchar)(tempload9_9);
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = clamp(resc00, (int)0, (int)255);
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = clamp(resc01, (int)0, (int)255);
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = clamp(resc02, (int)0, (int)255);
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = clamp(resc10, (int)0, (int)255);
  resc11 =  -(tempc101) - (tempc111) - (tempc121) - (tempc102) + (tempc112) * ((int)9) - (tempc122) - (tempc103) - (tempc113) - (tempc123);
  res11 = clamp(resc11, (int)0, (int)255);
  resc12 =  -(tempc102) - (tempc112) - (tempc122) - (tempc103) + (tempc113) * ((int)9) - (tempc123) - (tempc104) - (tempc114) - (tempc124);
  res12 = clamp(resc12, (int)0, (int)255);
  resc20 =  -(tempc200) - (tempc210) - (tempc220) - (tempc201) + (tempc211) * ((int)9) - (tempc221) - (tempc202) - (tempc212) - (tempc222);
  res20 = clamp(resc20, (int)0, (int)255);
  resc21 =  -(tempc201) - (tempc211) - (tempc221) - (tempc202) + (tempc212) * ((int)9) - (tempc222) - (tempc203) - (tempc213) - (tempc223);
  res21 = clamp(resc21, (int)0, (int)255);
  resc22 =  -(tempc202) - (tempc212) - (tempc222) - (tempc203) + (tempc213) * ((int)9) - (tempc223) - (tempc204) - (tempc214) - (tempc224);
  res22 = clamp(resc22, (int)0, (int)255);
  resc30 =  -(tempc300) - (tempc310) - (tempc320) - (tempc301) + (tempc311) * ((int)9) - (tempc321) - (tempc302) - (tempc312) - (tempc322);
  res30 = clamp(resc30, (int)0, (int)255);
  resc31 =  -(tempc301) - (tempc311) - (tempc321) - (tempc302) + (tempc312) * ((int)9) - (tempc322) - (tempc303) - (tempc313) - (tempc323);
  res31 = clamp(resc31, (int)0, (int)255);
  resc32 =  -(tempc302) - (tempc312) - (tempc322) - (tempc303) + (tempc313) * ((int)9) - (tempc323) - (tempc304) - (tempc314) - (tempc324);
  res32 = clamp(resc32, (int)0, (int)255);
  pdst[x + 0 + (w) * (y + 0)] = res00;
  pdst[x + 1 + (w) * (y + 0)] = res10;
  pdst[x + 2 + (w) * (y + 0)] = res20;
  pdst[x + 3 + (w) * (y + 0)] = res30;
  pdst[x + 0 + (w) * (y + 1)] = res01;
  pdst[x + 1 + (w) * (y + 1)] = res11;
  pdst[x + 2 + (w) * (y + 1)] = res21;
  pdst[x + 3 + (w) * (y + 1)] = res31;
  pdst[x + 0 + (w) * (y + 2)] = res02;
  pdst[x + 1 + (w) * (y + 2)] = res12;
  pdst[x + 2 + (w) * (y + 2)] = res22;
  pdst[x + 3 + (w) * (y + 2)] = res32;
}
768 x 432 :
Tesla T10 Processor: 
1.2312101524075536e-09 s
2560 x 1600 :
1.1609194839914239e-09 s
2048 x 2048 :
1.162861229836918e-09 s
5760 x 3240 :
1.1075786600633627e-09 s
7680 x 4320 :
1.1085592987115369e-09 s
{:x_component_number=>1, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (4);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (5) ? w - (5) : x));
  y = (y < 1 ? 1 : (y > height - (5) ? height - (5) : y));
  uchar2 temp000;
  uchar2 temp001;
  uchar2 temp002;
  uchar2 temp003;
  uchar2 temp004;
  uchar2 temp005;
  uchar2 temp010;
  uchar2 temp011;
  uchar2 temp012;
  uchar2 temp013;
  uchar2 temp014;
  uchar2 temp015;
  uchar2 temp020;
  uchar2 temp021;
  uchar2 temp022;
  uchar2 temp023;
  uchar2 temp024;
  uchar2 temp025;
  uchar2 res00;
  uchar2 res01;
  uchar2 res02;
  uchar2 res03;
  int2 tempc000;
  int2 tempc001;
  int2 tempc002;
  int2 tempc003;
  int2 tempc004;
  int2 tempc005;
  int2 tempc010;
  int2 tempc011;
  int2 tempc012;
  int2 tempc013;
  int2 tempc014;
  int2 tempc015;
  int2 tempc020;
  int2 tempc021;
  int2 tempc022;
  int2 tempc023;
  int2 tempc024;
  int2 tempc025;
  int2 resc00;
  int2 resc01;
  int2 resc02;
  int2 resc03;
  temp000 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int2( temp000 );
  temp010 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int2( temp010 );
  temp020 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int2( temp020 );
  temp001 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int2( temp001 );
  temp011 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int2( temp011 );
  temp021 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int2( temp021 );
  temp002 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int2( temp002 );
  temp012 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int2( temp012 );
  temp022 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int2( temp022 );
  temp003 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_int2( temp003 );
  temp013 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_int2( temp013 );
  temp023 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_int2( temp023 );
  temp004 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_int2( temp004 );
  temp014 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_int2( temp014 );
  temp024 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_int2( temp024 );
  temp005 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 4)]);
  tempc005 = convert_int2( temp005 );
  temp015 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 4)]);
  tempc015 = convert_int2( temp015 );
  temp025 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 4)]);
  tempc025 = convert_int2( temp025 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar2( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar2( clamp(resc02, (int)0, (int)255) );
  resc03 =  -(tempc003) - (tempc013) - (tempc023) - (tempc004) + (tempc014) * ((int)9) - (tempc024) - (tempc005) - (tempc015) - (tempc025);
  res03 = convert_uchar2( clamp(resc03, (int)0, (int)255) );
  vstore2(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore2(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
  vstore2(res03, 0, &pdst[x + 0 + (w) * (y + 3)]);
}
768 x 432 :
Tesla T10 Processor: 
1.6139899204566153e-09 s
2560 x 1600 :
1.4001630263004675e-09 s
2048 x 2048 :
1.3595342317317533e-09 s
5760 x 3240 :
1.3328250128027693e-09 s
7680 x 4320 :
1.3371061559400902e-09 s
{:x_component_number=>1, :vector_length=>4, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (4);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (4) ? w - (4) : x));
  y = (y < 1 ? 1 : (y > height - (5) ? height - (5) : y));
  uchar4 temp000;
  uchar4 temp001;
  uchar4 temp002;
  uchar4 temp003;
  uchar4 temp004;
  uchar4 temp005;
  uchar4 temp010;
  uchar4 temp011;
  uchar4 temp012;
  uchar4 temp013;
  uchar4 temp014;
  uchar4 temp015;
  uchar4 temp020;
  uchar4 temp021;
  uchar4 temp022;
  uchar4 temp023;
  uchar4 temp024;
  uchar4 temp025;
  uchar4 res00;
  uchar4 res01;
  uchar4 res02;
  uchar4 res03;
  int4 tempc000;
  int4 tempc001;
  int4 tempc002;
  int4 tempc003;
  int4 tempc004;
  int4 tempc005;
  int4 tempc010;
  int4 tempc011;
  int4 tempc012;
  int4 tempc013;
  int4 tempc014;
  int4 tempc015;
  int4 tempc020;
  int4 tempc021;
  int4 tempc022;
  int4 tempc023;
  int4 tempc024;
  int4 tempc025;
  int4 resc00;
  int4 resc01;
  int4 resc02;
  int4 resc03;
  temp000 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int4( temp000 );
  temp010 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int4( temp010 );
  temp020 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int4( temp020 );
  temp001 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int4( temp001 );
  temp011 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int4( temp011 );
  temp021 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int4( temp021 );
  temp002 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int4( temp002 );
  temp012 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int4( temp012 );
  temp022 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int4( temp022 );
  temp003 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_int4( temp003 );
  temp013 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_int4( temp013 );
  temp023 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_int4( temp023 );
  temp004 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_int4( temp004 );
  temp014 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_int4( temp014 );
  temp024 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_int4( temp024 );
  temp005 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 4)]);
  tempc005 = convert_int4( temp005 );
  temp015 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 4)]);
  tempc015 = convert_int4( temp015 );
  temp025 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 4)]);
  tempc025 = convert_int4( temp025 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar4( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar4( clamp(resc02, (int)0, (int)255) );
  resc03 =  -(tempc003) - (tempc013) - (tempc023) - (tempc004) + (tempc014) * ((int)9) - (tempc024) - (tempc005) - (tempc015) - (tempc025);
  res03 = convert_uchar4( clamp(resc03, (int)0, (int)255) );
  pdst[x + 0 + (w) * (y + 0)] = res00.s0;
  pdst[x + 0 + (w) * (y + 1)] = res01.s0;
  pdst[x + 0 + (w) * (y + 2)] = res02.s0;
  pdst[x + 0 + (w) * (y + 3)] = res03.s0;
}
768 x 432 :
Tesla T10 Processor: 
7.308761916327645e-10 s
2560 x 1600 :
6.529193548229267e-10 s
2048 x 2048 :
6.454403079131108e-10 s
5760 x 3240 :
6.037217387050827e-10 s
7680 x 4320 :
5.94313909281175e-10 s
{:x_component_number=>1, :vector_length=>16, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (19) ? w - (19) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar16 temp000;
  uchar16 temp001;
  uchar16 temp002;
  uchar16 temp003;
  uchar16 temp004;
  uchar16 temp010;
  uchar16 temp011;
  uchar16 temp012;
  uchar16 temp013;
  uchar16 temp014;
  uchar16 temp020;
  uchar16 temp021;
  uchar16 temp022;
  uchar16 temp023;
  uchar16 temp024;
  uchar16 res00;
  uchar16 res01;
  uchar16 res02;
  int16 tempc000;
  int16 tempc001;
  int16 tempc002;
  int16 tempc003;
  int16 tempc004;
  int16 tempc010;
  int16 tempc011;
  int16 tempc012;
  int16 tempc013;
  int16 tempc014;
  int16 tempc020;
  int16 tempc021;
  int16 tempc022;
  int16 tempc023;
  int16 tempc024;
  int16 resc00;
  int16 resc01;
  int16 resc02;
  temp000 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int16( temp000 );
  temp010 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int16( temp010 );
  temp020 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int16( temp020 );
  temp001 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int16( temp001 );
  temp011 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int16( temp011 );
  temp021 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int16( temp021 );
  temp002 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int16( temp002 );
  temp012 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int16( temp012 );
  temp022 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int16( temp022 );
  temp003 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_int16( temp003 );
  temp013 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_int16( temp013 );
  temp023 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_int16( temp023 );
  temp004 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_int16( temp004 );
  temp014 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_int16( temp014 );
  temp024 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_int16( temp024 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar16( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar16( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar16( clamp(resc02, (int)0, (int)255) );
  vstore16(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore16(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore16(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
4.8165741696520734e-08 s
2560 x 1600 :
4.7386989796667256e-08 s
2048 x 2048 :
4.7255152986682645e-08 s
5760 x 3240 :
4.7769062288073135e-08 s
7680 x 4320 :
4.812438201288765e-08 s
{:x_component_number=>8, :vector_length=>1, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (8);
  y = (get_global_id(1)) * (4);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (5) ? height - (5) : y));
  uchar tempload0_0;
  uchar tempload1_1;
  uchar tempload2_2;
  uchar tempload3_3;
  uchar tempload4_4;
  uchar tempload5_5;
  uchar tempload6_6;
  uchar tempload7_7;
  uchar tempload8_8;
  uchar tempload9_9;
  uchar tempload10_10;
  uchar tempload11_11;
  uchar tempload12_12;
  uchar tempload13_13;
  uchar res00;
  uchar res01;
  uchar res02;
  uchar res03;
  uchar res10;
  uchar res11;
  uchar res12;
  uchar res13;
  uchar res20;
  uchar res21;
  uchar res22;
  uchar res23;
  uchar res30;
  uchar res31;
  uchar res32;
  uchar res33;
  uchar res40;
  uchar res41;
  uchar res42;
  uchar res43;
  uchar res50;
  uchar res51;
  uchar res52;
  uchar res53;
  uchar res60;
  uchar res61;
  uchar res62;
  uchar res63;
  uchar res70;
  uchar res71;
  uchar res72;
  uchar res73;
  int tempc000;
  int tempc001;
  int tempc002;
  int tempc003;
  int tempc004;
  int tempc005;
  int tempc100;
  int tempc101;
  int tempc102;
  int tempc103;
  int tempc104;
  int tempc105;
  int tempc200;
  int tempc201;
  int tempc202;
  int tempc203;
  int tempc204;
  int tempc205;
  int tempc300;
  int tempc301;
  int tempc302;
  int tempc303;
  int tempc304;
  int tempc305;
  int tempc400;
  int tempc401;
  int tempc402;
  int tempc403;
  int tempc404;
  int tempc405;
  int tempc500;
  int tempc501;
  int tempc502;
  int tempc503;
  int tempc504;
  int tempc505;
  int tempc600;
  int tempc601;
  int tempc602;
  int tempc603;
  int tempc604;
  int tempc605;
  int tempc700;
  int tempc701;
  int tempc702;
  int tempc703;
  int tempc704;
  int tempc705;
  int tempc010;
  int tempc011;
  int tempc012;
  int tempc013;
  int tempc014;
  int tempc015;
  int tempc110;
  int tempc111;
  int tempc112;
  int tempc113;
  int tempc114;
  int tempc115;
  int tempc210;
  int tempc211;
  int tempc212;
  int tempc213;
  int tempc214;
  int tempc215;
  int tempc310;
  int tempc311;
  int tempc312;
  int tempc313;
  int tempc314;
  int tempc315;
  int tempc410;
  int tempc411;
  int tempc412;
  int tempc413;
  int tempc414;
  int tempc415;
  int tempc510;
  int tempc511;
  int tempc512;
  int tempc513;
  int tempc514;
  int tempc515;
  int tempc610;
  int tempc611;
  int tempc612;
  int tempc613;
  int tempc614;
  int tempc615;
  int tempc710;
  int tempc711;
  int tempc712;
  int tempc713;
  int tempc714;
  int tempc715;
  int tempc020;
  int tempc021;
  int tempc022;
  int tempc023;
  int tempc024;
  int tempc025;
  int tempc120;
  int tempc121;
  int tempc122;
  int tempc123;
  int tempc124;
  int tempc125;
  int tempc220;
  int tempc221;
  int tempc222;
  int tempc223;
  int tempc224;
  int tempc225;
  int tempc320;
  int tempc321;
  int tempc322;
  int tempc323;
  int tempc324;
  int tempc325;
  int tempc420;
  int tempc421;
  int tempc422;
  int tempc423;
  int tempc424;
  int tempc425;
  int tempc520;
  int tempc521;
  int tempc522;
  int tempc523;
  int tempc524;
  int tempc525;
  int tempc620;
  int tempc621;
  int tempc622;
  int tempc623;
  int tempc624;
  int tempc625;
  int tempc720;
  int tempc721;
  int tempc722;
  int tempc723;
  int tempc724;
  int tempc725;
  int resc00;
  int resc01;
  int resc02;
  int resc03;
  int resc10;
  int resc11;
  int resc12;
  int resc13;
  int resc20;
  int resc21;
  int resc22;
  int resc23;
  int resc30;
  int resc31;
  int resc32;
  int resc33;
  int resc40;
  int resc41;
  int resc42;
  int resc43;
  int resc50;
  int resc51;
  int resc52;
  int resc53;
  int resc60;
  int resc61;
  int resc62;
  int resc63;
  int resc70;
  int resc71;
  int resc72;
  int resc73;
  tempload0_0 = psrc[x + -3 + (w) * (y + -1)];
  tempload1_1 = psrc[x + -2 + (w) * (y + -1)];
  tempload2_2 = psrc[x + -1 + (w) * (y + -1)];
  tempload3_3 = psrc[x + 0 + (w) * (y + -1)];
  tempload4_4 = psrc[x + 1 + (w) * (y + -1)];
  tempload5_5 = psrc[x + 2 + (w) * (y + -1)];
  tempload6_6 = psrc[x + 3 + (w) * (y + -1)];
  tempload7_7 = psrc[x + 4 + (w) * (y + -1)];
  tempload8_8 = psrc[x + 5 + (w) * (y + -1)];
  tempload9_9 = psrc[x + 6 + (w) * (y + -1)];
  tempload10_10 = psrc[x + 7 + (w) * (y + -1)];
  tempload11_11 = psrc[x + 8 + (w) * (y + -1)];
  tempload12_12 = psrc[x + 9 + (w) * (y + -1)];
  tempload13_13 = psrc[x + 10 + (w) * (y + -1)];
  tempc000 = (uchar)(tempload0_0);
  tempc100 = (uchar)(tempload1_1);
  tempc200 = (uchar)(tempload2_2);
  tempc300 = (uchar)(tempload3_3);
  tempc400 = (uchar)(tempload4_4);
  tempc500 = (uchar)(tempload5_5);
  tempc600 = (uchar)(tempload6_6);
  tempc700 = (uchar)(tempload7_7);
  tempc010 = (uchar)(tempload3_3);
  tempc110 = (uchar)(tempload4_4);
  tempc210 = (uchar)(tempload5_5);
  tempc310 = (uchar)(tempload6_6);
  tempc410 = (uchar)(tempload7_7);
  tempc510 = (uchar)(tempload8_8);
  tempc610 = (uchar)(tempload9_9);
  tempc710 = (uchar)(tempload10_10);
  tempc020 = (uchar)(tempload6_6);
  tempc120 = (uchar)(tempload7_7);
  tempc220 = (uchar)(tempload8_8);
  tempc320 = (uchar)(tempload9_9);
  tempc420 = (uchar)(tempload10_10);
  tempc520 = (uchar)(tempload11_11);
  tempc620 = (uchar)(tempload12_12);
  tempc720 = (uchar)(tempload13_13);
  tempload0_0 = psrc[x + -3 + (w) * (y + 0)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 0)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 0)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 0)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 0)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 0)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 0)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 0)];
  tempload8_8 = psrc[x + 5 + (w) * (y + 0)];
  tempload9_9 = psrc[x + 6 + (w) * (y + 0)];
  tempload10_10 = psrc[x + 7 + (w) * (y + 0)];
  tempload11_11 = psrc[x + 8 + (w) * (y + 0)];
  tempload12_12 = psrc[x + 9 + (w) * (y + 0)];
  tempload13_13 = psrc[x + 10 + (w) * (y + 0)];
  tempc001 = (uchar)(tempload0_0);
  tempc101 = (uchar)(tempload1_1);
  tempc201 = (uchar)(tempload2_2);
  tempc301 = (uchar)(tempload3_3);
  tempc401 = (uchar)(tempload4_4);
  tempc501 = (uchar)(tempload5_5);
  tempc601 = (uchar)(tempload6_6);
  tempc701 = (uchar)(tempload7_7);
  tempc011 = (uchar)(tempload3_3);
  tempc111 = (uchar)(tempload4_4);
  tempc211 = (uchar)(tempload5_5);
  tempc311 = (uchar)(tempload6_6);
  tempc411 = (uchar)(tempload7_7);
  tempc511 = (uchar)(tempload8_8);
  tempc611 = (uchar)(tempload9_9);
  tempc711 = (uchar)(tempload10_10);
  tempc021 = (uchar)(tempload6_6);
  tempc121 = (uchar)(tempload7_7);
  tempc221 = (uchar)(tempload8_8);
  tempc321 = (uchar)(tempload9_9);
  tempc421 = (uchar)(tempload10_10);
  tempc521 = (uchar)(tempload11_11);
  tempc621 = (uchar)(tempload12_12);
  tempc721 = (uchar)(tempload13_13);
  tempload0_0 = psrc[x + -3 + (w) * (y + 1)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 1)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 1)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 1)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 1)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 1)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 1)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 1)];
  tempload8_8 = psrc[x + 5 + (w) * (y + 1)];
  tempload9_9 = psrc[x + 6 + (w) * (y + 1)];
  tempload10_10 = psrc[x + 7 + (w) * (y + 1)];
  tempload11_11 = psrc[x + 8 + (w) * (y + 1)];
  tempload12_12 = psrc[x + 9 + (w) * (y + 1)];
  tempload13_13 = psrc[x + 10 + (w) * (y + 1)];
  tempc002 = (uchar)(tempload0_0);
  tempc102 = (uchar)(tempload1_1);
  tempc202 = (uchar)(tempload2_2);
  tempc302 = (uchar)(tempload3_3);
  tempc402 = (uchar)(tempload4_4);
  tempc502 = (uchar)(tempload5_5);
  tempc602 = (uchar)(tempload6_6);
  tempc702 = (uchar)(tempload7_7);
  tempc012 = (uchar)(tempload3_3);
  tempc112 = (uchar)(tempload4_4);
  tempc212 = (uchar)(tempload5_5);
  tempc312 = (uchar)(tempload6_6);
  tempc412 = (uchar)(tempload7_7);
  tempc512 = (uchar)(tempload8_8);
  tempc612 = (uchar)(tempload9_9);
  tempc712 = (uchar)(tempload10_10);
  tempc022 = (uchar)(tempload6_6);
  tempc122 = (uchar)(tempload7_7);
  tempc222 = (uchar)(tempload8_8);
  tempc322 = (uchar)(tempload9_9);
  tempc422 = (uchar)(tempload10_10);
  tempc522 = (uchar)(tempload11_11);
  tempc622 = (uchar)(tempload12_12);
  tempc722 = (uchar)(tempload13_13);
  tempload0_0 = psrc[x + -3 + (w) * (y + 2)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 2)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 2)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 2)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 2)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 2)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 2)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 2)];
  tempload8_8 = psrc[x + 5 + (w) * (y + 2)];
  tempload9_9 = psrc[x + 6 + (w) * (y + 2)];
  tempload10_10 = psrc[x + 7 + (w) * (y + 2)];
  tempload11_11 = psrc[x + 8 + (w) * (y + 2)];
  tempload12_12 = psrc[x + 9 + (w) * (y + 2)];
  tempload13_13 = psrc[x + 10 + (w) * (y + 2)];
  tempc003 = (uchar)(tempload0_0);
  tempc103 = (uchar)(tempload1_1);
  tempc203 = (uchar)(tempload2_2);
  tempc303 = (uchar)(tempload3_3);
  tempc403 = (uchar)(tempload4_4);
  tempc503 = (uchar)(tempload5_5);
  tempc603 = (uchar)(tempload6_6);
  tempc703 = (uchar)(tempload7_7);
  tempc013 = (uchar)(tempload3_3);
  tempc113 = (uchar)(tempload4_4);
  tempc213 = (uchar)(tempload5_5);
  tempc313 = (uchar)(tempload6_6);
  tempc413 = (uchar)(tempload7_7);
  tempc513 = (uchar)(tempload8_8);
  tempc613 = (uchar)(tempload9_9);
  tempc713 = (uchar)(tempload10_10);
  tempc023 = (uchar)(tempload6_6);
  tempc123 = (uchar)(tempload7_7);
  tempc223 = (uchar)(tempload8_8);
  tempc323 = (uchar)(tempload9_9);
  tempc423 = (uchar)(tempload10_10);
  tempc523 = (uchar)(tempload11_11);
  tempc623 = (uchar)(tempload12_12);
  tempc723 = (uchar)(tempload13_13);
  tempload0_0 = psrc[x + -3 + (w) * (y + 3)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 3)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 3)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 3)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 3)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 3)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 3)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 3)];
  tempload8_8 = psrc[x + 5 + (w) * (y + 3)];
  tempload9_9 = psrc[x + 6 + (w) * (y + 3)];
  tempload10_10 = psrc[x + 7 + (w) * (y + 3)];
  tempload11_11 = psrc[x + 8 + (w) * (y + 3)];
  tempload12_12 = psrc[x + 9 + (w) * (y + 3)];
  tempload13_13 = psrc[x + 10 + (w) * (y + 3)];
  tempc004 = (uchar)(tempload0_0);
  tempc104 = (uchar)(tempload1_1);
  tempc204 = (uchar)(tempload2_2);
  tempc304 = (uchar)(tempload3_3);
  tempc404 = (uchar)(tempload4_4);
  tempc504 = (uchar)(tempload5_5);
  tempc604 = (uchar)(tempload6_6);
  tempc704 = (uchar)(tempload7_7);
  tempc014 = (uchar)(tempload3_3);
  tempc114 = (uchar)(tempload4_4);
  tempc214 = (uchar)(tempload5_5);
  tempc314 = (uchar)(tempload6_6);
  tempc414 = (uchar)(tempload7_7);
  tempc514 = (uchar)(tempload8_8);
  tempc614 = (uchar)(tempload9_9);
  tempc714 = (uchar)(tempload10_10);
  tempc024 = (uchar)(tempload6_6);
  tempc124 = (uchar)(tempload7_7);
  tempc224 = (uchar)(tempload8_8);
  tempc324 = (uchar)(tempload9_9);
  tempc424 = (uchar)(tempload10_10);
  tempc524 = (uchar)(tempload11_11);
  tempc624 = (uchar)(tempload12_12);
  tempc724 = (uchar)(tempload13_13);
  tempload0_0 = psrc[x + -3 + (w) * (y + 4)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 4)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 4)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 4)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 4)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 4)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 4)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 4)];
  tempload8_8 = psrc[x + 5 + (w) * (y + 4)];
  tempload9_9 = psrc[x + 6 + (w) * (y + 4)];
  tempload10_10 = psrc[x + 7 + (w) * (y + 4)];
  tempload11_11 = psrc[x + 8 + (w) * (y + 4)];
  tempload12_12 = psrc[x + 9 + (w) * (y + 4)];
  tempload13_13 = psrc[x + 10 + (w) * (y + 4)];
  tempc005 = (uchar)(tempload0_0);
  tempc105 = (uchar)(tempload1_1);
  tempc205 = (uchar)(tempload2_2);
  tempc305 = (uchar)(tempload3_3);
  tempc405 = (uchar)(tempload4_4);
  tempc505 = (uchar)(tempload5_5);
  tempc605 = (uchar)(tempload6_6);
  tempc705 = (uchar)(tempload7_7);
  tempc015 = (uchar)(tempload3_3);
  tempc115 = (uchar)(tempload4_4);
  tempc215 = (uchar)(tempload5_5);
  tempc315 = (uchar)(tempload6_6);
  tempc415 = (uchar)(tempload7_7);
  tempc515 = (uchar)(tempload8_8);
  tempc615 = (uchar)(tempload9_9);
  tempc715 = (uchar)(tempload10_10);
  tempc025 = (uchar)(tempload6_6);
  tempc125 = (uchar)(tempload7_7);
  tempc225 = (uchar)(tempload8_8);
  tempc325 = (uchar)(tempload9_9);
  tempc425 = (uchar)(tempload10_10);
  tempc525 = (uchar)(tempload11_11);
  tempc625 = (uchar)(tempload12_12);
  tempc725 = (uchar)(tempload13_13);
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = clamp(resc00, (int)0, (int)255);
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = clamp(resc01, (int)0, (int)255);
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = clamp(resc02, (int)0, (int)255);
  resc03 =  -(tempc003) - (tempc013) - (tempc023) - (tempc004) + (tempc014) * ((int)9) - (tempc024) - (tempc005) - (tempc015) - (tempc025);
  res03 = clamp(resc03, (int)0, (int)255);
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = clamp(resc10, (int)0, (int)255);
  resc11 =  -(tempc101) - (tempc111) - (tempc121) - (tempc102) + (tempc112) * ((int)9) - (tempc122) - (tempc103) - (tempc113) - (tempc123);
  res11 = clamp(resc11, (int)0, (int)255);
  resc12 =  -(tempc102) - (tempc112) - (tempc122) - (tempc103) + (tempc113) * ((int)9) - (tempc123) - (tempc104) - (tempc114) - (tempc124);
  res12 = clamp(resc12, (int)0, (int)255);
  resc13 =  -(tempc103) - (tempc113) - (tempc123) - (tempc104) + (tempc114) * ((int)9) - (tempc124) - (tempc105) - (tempc115) - (tempc125);
  res13 = clamp(resc13, (int)0, (int)255);
  resc20 =  -(tempc200) - (tempc210) - (tempc220) - (tempc201) + (tempc211) * ((int)9) - (tempc221) - (tempc202) - (tempc212) - (tempc222);
  res20 = clamp(resc20, (int)0, (int)255);
  resc21 =  -(tempc201) - (tempc211) - (tempc221) - (tempc202) + (tempc212) * ((int)9) - (tempc222) - (tempc203) - (tempc213) - (tempc223);
  res21 = clamp(resc21, (int)0, (int)255);
  resc22 =  -(tempc202) - (tempc212) - (tempc222) - (tempc203) + (tempc213) * ((int)9) - (tempc223) - (tempc204) - (tempc214) - (tempc224);
  res22 = clamp(resc22, (int)0, (int)255);
  resc23 =  -(tempc203) - (tempc213) - (tempc223) - (tempc204) + (tempc214) * ((int)9) - (tempc224) - (tempc205) - (tempc215) - (tempc225);
  res23 = clamp(resc23, (int)0, (int)255);
  resc30 =  -(tempc300) - (tempc310) - (tempc320) - (tempc301) + (tempc311) * ((int)9) - (tempc321) - (tempc302) - (tempc312) - (tempc322);
  res30 = clamp(resc30, (int)0, (int)255);
  resc31 =  -(tempc301) - (tempc311) - (tempc321) - (tempc302) + (tempc312) * ((int)9) - (tempc322) - (tempc303) - (tempc313) - (tempc323);
  res31 = clamp(resc31, (int)0, (int)255);
  resc32 =  -(tempc302) - (tempc312) - (tempc322) - (tempc303) + (tempc313) * ((int)9) - (tempc323) - (tempc304) - (tempc314) - (tempc324);
  res32 = clamp(resc32, (int)0, (int)255);
  resc33 =  -(tempc303) - (tempc313) - (tempc323) - (tempc304) + (tempc314) * ((int)9) - (tempc324) - (tempc305) - (tempc315) - (tempc325);
  res33 = clamp(resc33, (int)0, (int)255);
  resc40 =  -(tempc400) - (tempc410) - (tempc420) - (tempc401) + (tempc411) * ((int)9) - (tempc421) - (tempc402) - (tempc412) - (tempc422);
  res40 = clamp(resc40, (int)0, (int)255);
  resc41 =  -(tempc401) - (tempc411) - (tempc421) - (tempc402) + (tempc412) * ((int)9) - (tempc422) - (tempc403) - (tempc413) - (tempc423);
  res41 = clamp(resc41, (int)0, (int)255);
  resc42 =  -(tempc402) - (tempc412) - (tempc422) - (tempc403) + (tempc413) * ((int)9) - (tempc423) - (tempc404) - (tempc414) - (tempc424);
  res42 = clamp(resc42, (int)0, (int)255);
  resc43 =  -(tempc403) - (tempc413) - (tempc423) - (tempc404) + (tempc414) * ((int)9) - (tempc424) - (tempc405) - (tempc415) - (tempc425);
  res43 = clamp(resc43, (int)0, (int)255);
  resc50 =  -(tempc500) - (tempc510) - (tempc520) - (tempc501) + (tempc511) * ((int)9) - (tempc521) - (tempc502) - (tempc512) - (tempc522);
  res50 = clamp(resc50, (int)0, (int)255);
  resc51 =  -(tempc501) - (tempc511) - (tempc521) - (tempc502) + (tempc512) * ((int)9) - (tempc522) - (tempc503) - (tempc513) - (tempc523);
  res51 = clamp(resc51, (int)0, (int)255);
  resc52 =  -(tempc502) - (tempc512) - (tempc522) - (tempc503) + (tempc513) * ((int)9) - (tempc523) - (tempc504) - (tempc514) - (tempc524);
  res52 = clamp(resc52, (int)0, (int)255);
  resc53 =  -(tempc503) - (tempc513) - (tempc523) - (tempc504) + (tempc514) * ((int)9) - (tempc524) - (tempc505) - (tempc515) - (tempc525);
  res53 = clamp(resc53, (int)0, (int)255);
  resc60 =  -(tempc600) - (tempc610) - (tempc620) - (tempc601) + (tempc611) * ((int)9) - (tempc621) - (tempc602) - (tempc612) - (tempc622);
  res60 = clamp(resc60, (int)0, (int)255);
  resc61 =  -(tempc601) - (tempc611) - (tempc621) - (tempc602) + (tempc612) * ((int)9) - (tempc622) - (tempc603) - (tempc613) - (tempc623);
  res61 = clamp(resc61, (int)0, (int)255);
  resc62 =  -(tempc602) - (tempc612) - (tempc622) - (tempc603) + (tempc613) * ((int)9) - (tempc623) - (tempc604) - (tempc614) - (tempc624);
  res62 = clamp(resc62, (int)0, (int)255);
  resc63 =  -(tempc603) - (tempc613) - (tempc623) - (tempc604) + (tempc614) * ((int)9) - (tempc624) - (tempc605) - (tempc615) - (tempc625);
  res63 = clamp(resc63, (int)0, (int)255);
  resc70 =  -(tempc700) - (tempc710) - (tempc720) - (tempc701) + (tempc711) * ((int)9) - (tempc721) - (tempc702) - (tempc712) - (tempc722);
  res70 = clamp(resc70, (int)0, (int)255);
  resc71 =  -(tempc701) - (tempc711) - (tempc721) - (tempc702) + (tempc712) * ((int)9) - (tempc722) - (tempc703) - (tempc713) - (tempc723);
  res71 = clamp(resc71, (int)0, (int)255);
  resc72 =  -(tempc702) - (tempc712) - (tempc722) - (tempc703) + (tempc713) * ((int)9) - (tempc723) - (tempc704) - (tempc714) - (tempc724);
  res72 = clamp(resc72, (int)0, (int)255);
  resc73 =  -(tempc703) - (tempc713) - (tempc723) - (tempc704) + (tempc714) * ((int)9) - (tempc724) - (tempc705) - (tempc715) - (tempc725);
  res73 = clamp(resc73, (int)0, (int)255);
  pdst[x + 0 + (w) * (y + 0)] = res00;
  pdst[x + 1 + (w) * (y + 0)] = res10;
  pdst[x + 2 + (w) * (y + 0)] = res20;
  pdst[x + 3 + (w) * (y + 0)] = res30;
  pdst[x + 4 + (w) * (y + 0)] = res40;
  pdst[x + 5 + (w) * (y + 0)] = res50;
  pdst[x + 6 + (w) * (y + 0)] = res60;
  pdst[x + 7 + (w) * (y + 0)] = res70;
  pdst[x + 0 + (w) * (y + 1)] = res01;
  pdst[x + 1 + (w) * (y + 1)] = res11;
  pdst[x + 2 + (w) * (y + 1)] = res21;
  pdst[x + 3 + (w) * (y + 1)] = res31;
  pdst[x + 4 + (w) * (y + 1)] = res41;
  pdst[x + 5 + (w) * (y + 1)] = res51;
  pdst[x + 6 + (w) * (y + 1)] = res61;
  pdst[x + 7 + (w) * (y + 1)] = res71;
  pdst[x + 0 + (w) * (y + 2)] = res02;
  pdst[x + 1 + (w) * (y + 2)] = res12;
  pdst[x + 2 + (w) * (y + 2)] = res22;
  pdst[x + 3 + (w) * (y + 2)] = res32;
  pdst[x + 4 + (w) * (y + 2)] = res42;
  pdst[x + 5 + (w) * (y + 2)] = res52;
  pdst[x + 6 + (w) * (y + 2)] = res62;
  pdst[x + 7 + (w) * (y + 2)] = res72;
  pdst[x + 0 + (w) * (y + 3)] = res03;
  pdst[x + 1 + (w) * (y + 3)] = res13;
  pdst[x + 2 + (w) * (y + 3)] = res23;
  pdst[x + 3 + (w) * (y + 3)] = res33;
  pdst[x + 4 + (w) * (y + 3)] = res43;
  pdst[x + 5 + (w) * (y + 3)] = res53;
  pdst[x + 6 + (w) * (y + 3)] = res63;
  pdst[x + 7 + (w) * (y + 3)] = res73;
}
768 x 432 :
Tesla T10 Processor: 
2.158139534883721e-09 s
2560 x 1600 :
2.0312255056897747e-09 s
2048 x 2048 :
2.093862664101998e-09 s
5760 x 3240 :
2.05103300700843e-09 s
7680 x 4320 :
2.0458903955057193e-09 s
{:x_component_number=>1, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (4);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (4) ? w - (4) : x));
  y = (y < 1 ? 1 : (y > height - (5) ? height - (5) : y));
  uchar2 tempload0_1;
  uchar2 tempload2_3;
  uchar2 tempload4_5;
  uchar tempload6_6;
  uchar2 res00;
  uchar2 res01;
  uchar2 res02;
  uchar2 res03;
  int2 tempc000;
  int2 tempc001;
  int2 tempc002;
  int2 tempc003;
  int2 tempc004;
  int2 tempc005;
  int2 tempc010;
  int2 tempc011;
  int2 tempc012;
  int2 tempc013;
  int2 tempc014;
  int2 tempc015;
  int2 tempc020;
  int2 tempc021;
  int2 tempc022;
  int2 tempc023;
  int2 tempc024;
  int2 tempc025;
  int2 resc00;
  int2 resc01;
  int2 resc02;
  int2 resc03;
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + -1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + -1)];
  tempc000 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc010 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc020 = convert_int2( (uchar2)(tempload6_6,0) );
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + 0)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 0)];
  tempc001 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc011 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc021 = convert_int2( (uchar2)(tempload6_6,0) );
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + 1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 1)];
  tempc002 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc012 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc022 = convert_int2( (uchar2)(tempload6_6,0) );
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + 2)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 2)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 2)];
  tempc003 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc013 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc023 = convert_int2( (uchar2)(tempload6_6,0) );
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + 3)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 3)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 3)];
  tempc004 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc014 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc024 = convert_int2( (uchar2)(tempload6_6,0) );
  tempload0_1 = vload2(0, &psrc[x + -3 + (w) * (y + 4)]);
  tempload2_3 = vload2(0, &psrc[x + -1 + (w) * (y + 4)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 4)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 4)];
  tempc005 = convert_int2( (uchar2)(tempload0_1.s01) );
  tempc015 = convert_int2( (uchar2)(tempload2_3.s1,tempload4_5.s0) );
  tempc025 = convert_int2( (uchar2)(tempload6_6,0) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar2( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar2( clamp(resc02, (int)0, (int)255) );
  resc03 =  -(tempc003) - (tempc013) - (tempc023) - (tempc004) + (tempc014) * ((int)9) - (tempc024) - (tempc005) - (tempc015) - (tempc025);
  res03 = convert_uchar2( clamp(resc03, (int)0, (int)255) );
  pdst[x + 0 + (w) * (y + 0)] = res00.s0;
  pdst[x + 0 + (w) * (y + 1)] = res01.s0;
  pdst[x + 0 + (w) * (y + 2)] = res02.s0;
  pdst[x + 0 + (w) * (y + 3)] = res03.s0;
}
768 x 432 :
Tesla T10 Processor: 
7.299046693788329e-10 s
2560 x 1600 :
6.528410708851271e-10 s
2048 x 2048 :
6.454861738184034e-10 s
5760 x 3240 :
6.033613088409798e-10 s
7680 x 4320 :
5.942975008086602e-10 s
{:x_component_number=>2, :vector_length=>16, :y_component_number=>1, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (2);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (19) ? w - (19) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar16 tempload0_15;
  uchar4 tempload16_19;
  uchar2 tempload20_21;
  uchar16 res00;
  int16 tempc000;
  int16 tempc001;
  int16 tempc002;
  int16 tempc010;
  int16 tempc011;
  int16 tempc012;
  int16 tempc020;
  int16 tempc021;
  int16 tempc022;
  int16 resc00;
  tempload0_15 = vload16(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + -1)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + -1)]);
  tempc000 = convert_int16( (uchar16)(tempload0_15.s0123456789abcdef) );
  tempc010 = convert_int16( (uchar16)(tempload0_15.s3456,tempload0_15.s789a,tempload0_15.sbcd,tempload0_15.sef,tempload16_19.s012) );
  tempc020 = convert_int16( (uchar16)(tempload0_15.s6789,tempload0_15.sabc,tempload0_15.sdef,tempload16_19.s0123,tempload20_21.s01) );
  tempload0_15 = vload16(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 0)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 0)]);
  tempc001 = convert_int16( (uchar16)(tempload0_15.s0123456789abcdef) );
  tempc011 = convert_int16( (uchar16)(tempload0_15.s3456,tempload0_15.s789a,tempload0_15.sbcd,tempload0_15.sef,tempload16_19.s012) );
  tempc021 = convert_int16( (uchar16)(tempload0_15.s6789,tempload0_15.sabc,tempload0_15.sdef,tempload16_19.s0123,tempload20_21.s01) );
  tempload0_15 = vload16(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload16_19 = vload4(0, &psrc[x + 13 + (w) * (y + 1)]);
  tempload20_21 = vload2(0, &psrc[x + 17 + (w) * (y + 1)]);
  tempc002 = convert_int16( (uchar16)(tempload0_15.s0123456789abcdef) );
  tempc012 = convert_int16( (uchar16)(tempload0_15.s3456,tempload0_15.s789a,tempload0_15.sbcd,tempload0_15.sef,tempload16_19.s012) );
  tempc022 = convert_int16( (uchar16)(tempload0_15.s6789,tempload0_15.sabc,tempload0_15.sdef,tempload16_19.s0123,tempload20_21.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar16( clamp(resc00, (int)0, (int)255) );
  vstore16(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
7.6120711640051e-09 s
2560 x 1600 :
6.982528003632375e-09 s
2048 x 2048 :
7.019478676653967e-09 s
5760 x 3240 :
6.921636754921208e-09 s
7680 x 4320 :
7.38531448948959e-09 s
{:x_component_number=>1, :vector_length=>16, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (4) ? w - (4) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar4 tempload0_3;
  uchar2 tempload4_5;
  uchar tempload6_6;
  uchar16 res00;
  uchar16 res01;
  uchar16 res02;
  int16 tempc000;
  int16 tempc001;
  int16 tempc002;
  int16 tempc003;
  int16 tempc004;
  int16 tempc010;
  int16 tempc011;
  int16 tempc012;
  int16 tempc013;
  int16 tempc014;
  int16 tempc020;
  int16 tempc021;
  int16 tempc022;
  int16 tempc023;
  int16 tempc024;
  int16 resc00;
  int16 resc01;
  int16 resc02;
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + -1)];
  tempc000 = convert_int16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc010 = convert_int16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc020 = convert_int16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 0)];
  tempc001 = convert_int16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc011 = convert_int16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc021 = convert_int16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 1)];
  tempc002 = convert_int16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc012 = convert_int16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc022 = convert_int16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 2)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 2)];
  tempc003 = convert_int16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc013 = convert_int16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc023 = convert_int16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 3)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 3)];
  tempc004 = convert_int16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc014 = convert_int16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc024 = convert_int16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar16( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar16( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar16( clamp(resc02, (int)0, (int)255) );
  pdst[x + 0 + (w) * (y + 0)] = res00.s0;
  pdst[x + 0 + (w) * (y + 1)] = res01.s0;
  pdst[x + 0 + (w) * (y + 2)] = res02.s0;
}
768 x 432 :
Tesla T10 Processor: 
7.815896532879957e-10 s
2560 x 1600 :
7.14826292834769e-10 s
2048 x 2048 :
6.921929540414074e-10 s
5760 x 3240 :
6.809223829305565e-10 s
7680 x 4320 :
6.693276543931694e-10 s
{:x_component_number=>2, :vector_length=>4, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (2);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar4 tempload0_3;
  uchar4 tempload4_7;
  uchar2 tempload8_9;
  uchar4 res00;
  uchar4 res01;
  uchar4 res02;
  int4 tempc000;
  int4 tempc001;
  int4 tempc002;
  int4 tempc003;
  int4 tempc004;
  int4 tempc010;
  int4 tempc011;
  int4 tempc012;
  int4 tempc013;
  int4 tempc014;
  int4 tempc020;
  int4 tempc021;
  int4 tempc022;
  int4 tempc023;
  int4 tempc024;
  int4 resc00;
  int4 resc01;
  int4 resc02;
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempc000 = convert_int4( (uchar4)(tempload0_3.s0123) );
  tempc010 = convert_int4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc020 = convert_int4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempc001 = convert_int4( (uchar4)(tempload0_3.s0123) );
  tempc011 = convert_int4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc021 = convert_int4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempc002 = convert_int4( (uchar4)(tempload0_3.s0123) );
  tempc012 = convert_int4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc022 = convert_int4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 2)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 2)]);
  tempc003 = convert_int4( (uchar4)(tempload0_3.s0123) );
  tempc013 = convert_int4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc023 = convert_int4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 3)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 3)]);
  tempc004 = convert_int4( (uchar4)(tempload0_3.s0123) );
  tempc014 = convert_int4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc024 = convert_int4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar4( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar4( clamp(resc02, (int)0, (int)255) );
  vstore4(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore4(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore4(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
1.7223146517699922e-09 s
2560 x 1600 :
1.6145279331768307e-09 s
2048 x 2048 :
1.6437958241004311e-09 s
5760 x 3240 :
1.5797623780304267e-09 s
7680 x 4320 :
1.5794091043616253e-09 s
{:x_component_number=>2, :vector_length=>4, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (2);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (5) ? w - (5) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar4 temp000;
  uchar4 temp001;
  uchar4 temp002;
  uchar4 temp003;
  uchar4 temp004;
  uchar4 temp010;
  uchar4 temp011;
  uchar4 temp012;
  uchar4 temp013;
  uchar4 temp014;
  uchar4 temp020;
  uchar4 temp021;
  uchar4 temp022;
  uchar4 temp023;
  uchar4 temp024;
  uchar4 res00;
  uchar4 res01;
  uchar4 res02;
  short4 tempc000;
  short4 tempc001;
  short4 tempc002;
  short4 tempc003;
  short4 tempc004;
  short4 tempc010;
  short4 tempc011;
  short4 tempc012;
  short4 tempc013;
  short4 tempc014;
  short4 tempc020;
  short4 tempc021;
  short4 tempc022;
  short4 tempc023;
  short4 tempc024;
  short4 resc00;
  short4 resc01;
  short4 resc02;
  temp000 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short4( temp000 );
  temp010 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short4( temp010 );
  temp020 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short4( temp020 );
  temp001 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short4( temp001 );
  temp011 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short4( temp011 );
  temp021 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short4( temp021 );
  temp002 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short4( temp002 );
  temp012 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short4( temp012 );
  temp022 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short4( temp022 );
  temp003 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_short4( temp003 );
  temp013 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_short4( temp013 );
  temp023 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_short4( temp023 );
  temp004 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_short4( temp004 );
  temp014 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_short4( temp014 );
  temp024 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_short4( temp024 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar4( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar4( clamp(resc02, (short)0, (short)255) );
  vstore2(res00.s01, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res01.s01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore2(res02.s01, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
9.067217195943895e-10 s
2560 x 1600 :
8.682158405591039e-10 s
2048 x 2048 :
8.552386030391896e-10 s
5760 x 3240 :
8.245159244564749e-10 s
7680 x 4320 :
8.045103030126077e-10 s
{:x_component_number=>1, :vector_length=>1, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (4) ? w - (4) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar temp000;
  uchar temp001;
  uchar temp002;
  uchar temp003;
  uchar temp004;
  uchar temp010;
  uchar temp011;
  uchar temp012;
  uchar temp013;
  uchar temp014;
  uchar temp020;
  uchar temp021;
  uchar temp022;
  uchar temp023;
  uchar temp024;
  uchar res00;
  uchar res01;
  uchar res02;
  short tempc000;
  short tempc001;
  short tempc002;
  short tempc003;
  short tempc004;
  short tempc010;
  short tempc011;
  short tempc012;
  short tempc013;
  short tempc014;
  short tempc020;
  short tempc021;
  short tempc022;
  short tempc023;
  short tempc024;
  short resc00;
  short resc01;
  short resc02;
  temp000 = psrc[x + 0 + -3 + (w) * (y + -1)];
  tempc000 = temp000;
  temp010 = psrc[x + 0 + 0 + (w) * (y + -1)];
  tempc010 = temp010;
  temp020 = psrc[x + 0 + 3 + (w) * (y + -1)];
  tempc020 = temp020;
  temp001 = psrc[x + 0 + -3 + (w) * (y + 0)];
  tempc001 = temp001;
  temp011 = psrc[x + 0 + 0 + (w) * (y + 0)];
  tempc011 = temp011;
  temp021 = psrc[x + 0 + 3 + (w) * (y + 0)];
  tempc021 = temp021;
  temp002 = psrc[x + 0 + -3 + (w) * (y + 1)];
  tempc002 = temp002;
  temp012 = psrc[x + 0 + 0 + (w) * (y + 1)];
  tempc012 = temp012;
  temp022 = psrc[x + 0 + 3 + (w) * (y + 1)];
  tempc022 = temp022;
  temp003 = psrc[x + 0 + -3 + (w) * (y + 2)];
  tempc003 = temp003;
  temp013 = psrc[x + 0 + 0 + (w) * (y + 2)];
  tempc013 = temp013;
  temp023 = psrc[x + 0 + 3 + (w) * (y + 2)];
  tempc023 = temp023;
  temp004 = psrc[x + 0 + -3 + (w) * (y + 3)];
  tempc004 = temp004;
  temp014 = psrc[x + 0 + 0 + (w) * (y + 3)];
  tempc014 = temp014;
  temp024 = psrc[x + 0 + 3 + (w) * (y + 3)];
  tempc024 = temp024;
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = clamp(resc00, (short)0, (short)255);
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = clamp(resc01, (short)0, (short)255);
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = clamp(resc02, (short)0, (short)255);
  pdst[x + 0 + (w) * (y + 0)] = res00;
  pdst[x + 0 + (w) * (y + 1)] = res01;
  pdst[x + 0 + (w) * (y + 2)] = res02;
}
768 x 432 :
Tesla T10 Processor: 
7.736231708057562e-10 s
2560 x 1600 :
7.096752097275621e-10 s
2048 x 2048 :
6.83478432035806e-10 s
5760 x 3240 :
6.715409084677634e-10 s
7680 x 4320 :
6.654069946664018e-10 s
{:x_component_number=>2, :vector_length=>4, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (2);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar4 tempload0_3;
  uchar4 tempload4_7;
  uchar2 tempload8_9;
  uchar4 res00;
  uchar4 res01;
  uchar4 res02;
  short4 tempc000;
  short4 tempc001;
  short4 tempc002;
  short4 tempc003;
  short4 tempc004;
  short4 tempc010;
  short4 tempc011;
  short4 tempc012;
  short4 tempc013;
  short4 tempc014;
  short4 tempc020;
  short4 tempc021;
  short4 tempc022;
  short4 tempc023;
  short4 tempc024;
  short4 resc00;
  short4 resc01;
  short4 resc02;
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempc000 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc010 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc020 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempc001 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc011 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc021 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempc002 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc012 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc022 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 2)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 2)]);
  tempc003 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc013 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc023 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 3)]);
  tempload8_9 = vload2(0, &psrc[x + 5 + (w) * (y + 3)]);
  tempc004 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc014 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc024 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_9.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar4( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar4( clamp(resc02, (short)0, (short)255) );
  vstore4(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore4(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore4(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
1.7078389701864107e-09 s
2560 x 1600 :
1.6251197499611026e-09 s
2048 x 2048 :
1.6357922236268656e-09 s
5760 x 3240 :
1.5756706409065155e-09 s
7680 x 4320 :
1.5749151133011059e-09 s
{:x_component_number=>4, :vector_length=>2, :y_component_number=>1, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar2 temp000;
  uchar2 temp001;
  uchar2 temp002;
  uchar2 temp100;
  uchar2 temp101;
  uchar2 temp102;
  uchar2 temp010;
  uchar2 temp011;
  uchar2 temp012;
  uchar2 temp110;
  uchar2 temp111;
  uchar2 temp112;
  uchar2 temp020;
  uchar2 temp021;
  uchar2 temp022;
  uchar2 temp120;
  uchar2 temp121;
  uchar2 temp122;
  uchar2 res00;
  uchar2 res10;
  int2 tempc000;
  int2 tempc001;
  int2 tempc002;
  int2 tempc100;
  int2 tempc101;
  int2 tempc102;
  int2 tempc010;
  int2 tempc011;
  int2 tempc012;
  int2 tempc110;
  int2 tempc111;
  int2 tempc112;
  int2 tempc020;
  int2 tempc021;
  int2 tempc022;
  int2 tempc120;
  int2 tempc121;
  int2 tempc122;
  int2 resc00;
  int2 resc10;
  temp000 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int2( temp000 );
  temp100 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + -1)]);
  tempc100 = convert_int2( temp100 );
  temp010 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int2( temp010 );
  temp110 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + -1)]);
  tempc110 = convert_int2( temp110 );
  temp020 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int2( temp020 );
  temp120 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + -1)]);
  tempc120 = convert_int2( temp120 );
  temp001 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int2( temp001 );
  temp101 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 0)]);
  tempc101 = convert_int2( temp101 );
  temp011 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int2( temp011 );
  temp111 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 0)]);
  tempc111 = convert_int2( temp111 );
  temp021 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int2( temp021 );
  temp121 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 0)]);
  tempc121 = convert_int2( temp121 );
  temp002 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int2( temp002 );
  temp102 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 1)]);
  tempc102 = convert_int2( temp102 );
  temp012 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int2( temp012 );
  temp112 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 1)]);
  tempc112 = convert_int2( temp112 );
  temp022 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int2( temp022 );
  temp122 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 1)]);
  tempc122 = convert_int2( temp122 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (int)0, (int)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar2( clamp(resc10, (int)0, (int)255) );
  vstore2(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res10, 0, &pdst[x + 2 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
1.9754933511445744e-09 s
2560 x 1600 :
1.944408618670132e-09 s
2048 x 2048 :
1.9299914288089483e-09 s
5760 x 3240 :
1.917552097669628e-09 s
7680 x 4320 :
1.9143967575893107e-09 s
{:x_component_number=>8, :vector_length=>16, :y_component_number=>1, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (8);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar8 tempload0_7;
  uchar4 tempload8_11;
  uchar2 tempload12_13;
  uchar16 res00;
  int16 tempc000;
  int16 tempc001;
  int16 tempc002;
  int16 tempc010;
  int16 tempc011;
  int16 tempc012;
  int16 tempc020;
  int16 tempc021;
  int16 tempc022;
  int16 resc00;
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + -1)]);
  tempc000 = convert_int16( (uchar16)(tempload0_7.s01234567,tempload8_11.s0123,tempload12_13.s01,0,0) );
  tempc010 = convert_int16( (uchar16)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01,0,0,0,0,0) );
  tempc020 = convert_int16( (uchar16)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01,0,0,0,0,0,0,0,0) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 0)]);
  tempc001 = convert_int16( (uchar16)(tempload0_7.s01234567,tempload8_11.s0123,tempload12_13.s01,0,0) );
  tempc011 = convert_int16( (uchar16)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01,0,0,0,0,0) );
  tempc021 = convert_int16( (uchar16)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01,0,0,0,0,0,0,0,0) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 1)]);
  tempc002 = convert_int16( (uchar16)(tempload0_7.s01234567,tempload8_11.s0123,tempload12_13.s01,0,0) );
  tempc012 = convert_int16( (uchar16)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01,0,0,0,0,0) );
  tempc022 = convert_int16( (uchar16)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01,0,0,0,0,0,0,0,0) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar16( clamp(resc00, (int)0, (int)255) );
  vstore8(res00.s01234567, 0, &pdst[x + 0 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
2.434343311676483e-09 s
2560 x 1600 :
2.328665327358964e-09 s
2048 x 2048 :
2.341607351540187e-09 s
5760 x 3240 :
2.389629403010147e-09 s
7680 x 4320 :
2.370732786697941e-09 s
{:x_component_number=>1, :vector_length=>16, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (4) ? w - (4) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar4 tempload0_3;
  uchar2 tempload4_5;
  uchar tempload6_6;
  uchar16 res00;
  uchar16 res01;
  uchar16 res02;
  short16 tempc000;
  short16 tempc001;
  short16 tempc002;
  short16 tempc003;
  short16 tempc004;
  short16 tempc010;
  short16 tempc011;
  short16 tempc012;
  short16 tempc013;
  short16 tempc014;
  short16 tempc020;
  short16 tempc021;
  short16 tempc022;
  short16 tempc023;
  short16 tempc024;
  short16 resc00;
  short16 resc01;
  short16 resc02;
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + -1)];
  tempc000 = convert_short16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc010 = convert_short16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc020 = convert_short16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 0)];
  tempc001 = convert_short16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc011 = convert_short16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc021 = convert_short16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 1)];
  tempc002 = convert_short16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc012 = convert_short16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc022 = convert_short16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 2)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 2)];
  tempc003 = convert_short16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc013 = convert_short16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc023 = convert_short16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload4_5 = vload2(0, &psrc[x + 1 + (w) * (y + 3)]);
  tempload6_6 = psrc[x + 3 + (w) * (y + 3)];
  tempc004 = convert_short16( (uchar16)(tempload0_3.s0123,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0) );
  tempc014 = convert_short16( (uchar16)(tempload0_3.s3,tempload4_5.s01,tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0) );
  tempc024 = convert_short16( (uchar16)(tempload6_6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar16( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar16( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar16( clamp(resc02, (short)0, (short)255) );
  pdst[x + 0 + (w) * (y + 0)] = res00.s0;
  pdst[x + 0 + (w) * (y + 1)] = res01.s0;
  pdst[x + 0 + (w) * (y + 2)] = res02.s0;
}
768 x 432 :
Tesla T10 Processor: 
8.166616066549275e-10 s
2560 x 1600 :
7.49545219248846e-10 s
2048 x 2048 :
7.393583933173375e-10 s
5760 x 3240 :
7.222757026719653e-10 s
7680 x 4320 :
7.200694078387376e-10 s
{:x_component_number=>1, :vector_length=>16, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (4) ? w - (4) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar16 temp000;
  uchar16 temp001;
  uchar16 temp002;
  uchar16 temp003;
  uchar16 temp004;
  uchar16 temp010;
  uchar16 temp011;
  uchar16 temp012;
  uchar16 temp013;
  uchar16 temp014;
  uchar16 temp020;
  uchar16 temp021;
  uchar16 temp022;
  uchar16 temp023;
  uchar16 temp024;
  uchar16 res00;
  uchar16 res01;
  uchar16 res02;
  int16 tempc000;
  int16 tempc001;
  int16 tempc002;
  int16 tempc003;
  int16 tempc004;
  int16 tempc010;
  int16 tempc011;
  int16 tempc012;
  int16 tempc013;
  int16 tempc014;
  int16 tempc020;
  int16 tempc021;
  int16 tempc022;
  int16 tempc023;
  int16 tempc024;
  int16 resc00;
  int16 resc01;
  int16 resc02;
  temp000 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int16( temp000 );
  temp010 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int16( temp010 );
  temp020 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int16( temp020 );
  temp001 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int16( temp001 );
  temp011 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int16( temp011 );
  temp021 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int16( temp021 );
  temp002 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int16( temp002 );
  temp012 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int16( temp012 );
  temp022 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int16( temp022 );
  temp003 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_int16( temp003 );
  temp013 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_int16( temp013 );
  temp023 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_int16( temp023 );
  temp004 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_int16( temp004 );
  temp014 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_int16( temp014 );
  temp024 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_int16( temp024 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar16( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar16( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar16( clamp(resc02, (int)0, (int)255) );
  pdst[x + 0 + (w) * (y + 0)] = res00.s0;
  pdst[x + 0 + (w) * (y + 1)] = res01.s0;
  pdst[x + 0 + (w) * (y + 2)] = res02.s0;
}
768 x 432 :
Tesla T10 Processor: 
7.713886696217136e-10 s
2560 x 1600 :
7.115461958409701e-10 s
2048 x 2048 :
7.093697355735006e-10 s
5760 x 3240 :
6.720815532639177e-10 s
7680 x 4320 :
6.647911943449648e-10 s
{:x_component_number=>2, :vector_length=>2, :y_component_number=>1, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (2);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (5) ? w - (5) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar2 temp000;
  uchar2 temp001;
  uchar2 temp002;
  uchar2 temp010;
  uchar2 temp011;
  uchar2 temp012;
  uchar2 temp020;
  uchar2 temp021;
  uchar2 temp022;
  uchar2 res00;
  short2 tempc000;
  short2 tempc001;
  short2 tempc002;
  short2 tempc010;
  short2 tempc011;
  short2 tempc012;
  short2 tempc020;
  short2 tempc021;
  short2 tempc022;
  short2 resc00;
  temp000 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short2( temp000 );
  temp010 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short2( temp010 );
  temp020 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short2( temp020 );
  temp001 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short2( temp001 );
  temp011 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short2( temp011 );
  temp021 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short2( temp021 );
  temp002 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short2( temp002 );
  temp012 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short2( temp012 );
  temp022 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short2( temp022 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (short)0, (short)255) );
  vstore2(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
1.4548545752626145e-09 s
2560 x 1600 :
1.4284626698149857e-09 s
2048 x 2048 :
1.389201828138542e-09 s
5760 x 3240 :
1.4070203584946991e-09 s
7680 x 4320 :
1.382101083188422e-09 s
{:x_component_number=>8, :vector_length=>4, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (8);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar4 tempload0_3;
  uchar4 tempload4_7;
  uchar4 tempload8_11;
  uchar2 tempload12_13;
  uchar4 res00;
  uchar4 res01;
  uchar4 res02;
  uchar4 res10;
  uchar4 res11;
  uchar4 res12;
  short4 tempc000;
  short4 tempc001;
  short4 tempc002;
  short4 tempc003;
  short4 tempc004;
  short4 tempc100;
  short4 tempc101;
  short4 tempc102;
  short4 tempc103;
  short4 tempc104;
  short4 tempc010;
  short4 tempc011;
  short4 tempc012;
  short4 tempc013;
  short4 tempc014;
  short4 tempc110;
  short4 tempc111;
  short4 tempc112;
  short4 tempc113;
  short4 tempc114;
  short4 tempc020;
  short4 tempc021;
  short4 tempc022;
  short4 tempc023;
  short4 tempc024;
  short4 tempc120;
  short4 tempc121;
  short4 tempc122;
  short4 tempc123;
  short4 tempc124;
  short4 resc00;
  short4 resc01;
  short4 resc02;
  short4 resc10;
  short4 resc11;
  short4 resc12;
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + -1)]);
  tempc000 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc100 = convert_short4( (uchar4)(tempload4_7.s0123) );
  tempc010 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc110 = convert_short4( (uchar4)(tempload4_7.s3,tempload8_11.s012) );
  tempc020 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_11.s01) );
  tempc120 = convert_short4( (uchar4)(tempload8_11.s23,tempload12_13.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 0)]);
  tempc001 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc101 = convert_short4( (uchar4)(tempload4_7.s0123) );
  tempc011 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc111 = convert_short4( (uchar4)(tempload4_7.s3,tempload8_11.s012) );
  tempc021 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_11.s01) );
  tempc121 = convert_short4( (uchar4)(tempload8_11.s23,tempload12_13.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 1)]);
  tempc002 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc102 = convert_short4( (uchar4)(tempload4_7.s0123) );
  tempc012 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc112 = convert_short4( (uchar4)(tempload4_7.s3,tempload8_11.s012) );
  tempc022 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_11.s01) );
  tempc122 = convert_short4( (uchar4)(tempload8_11.s23,tempload12_13.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 2)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 2)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 2)]);
  tempc003 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc103 = convert_short4( (uchar4)(tempload4_7.s0123) );
  tempc013 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc113 = convert_short4( (uchar4)(tempload4_7.s3,tempload8_11.s012) );
  tempc023 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_11.s01) );
  tempc123 = convert_short4( (uchar4)(tempload8_11.s23,tempload12_13.s01) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 3)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 3)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 3)]);
  tempc004 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc104 = convert_short4( (uchar4)(tempload4_7.s0123) );
  tempc014 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc114 = convert_short4( (uchar4)(tempload4_7.s3,tempload8_11.s012) );
  tempc024 = convert_short4( (uchar4)(tempload4_7.s23,tempload8_11.s01) );
  tempc124 = convert_short4( (uchar4)(tempload8_11.s23,tempload12_13.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar4( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar4( clamp(resc02, (short)0, (short)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((short)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar4( clamp(resc10, (short)0, (short)255) );
  resc11 =  -(tempc101) - (tempc111) - (tempc121) - (tempc102) + (tempc112) * ((short)9) - (tempc122) - (tempc103) - (tempc113) - (tempc123);
  res11 = convert_uchar4( clamp(resc11, (short)0, (short)255) );
  resc12 =  -(tempc102) - (tempc112) - (tempc122) - (tempc103) + (tempc113) * ((short)9) - (tempc123) - (tempc104) - (tempc114) - (tempc124);
  res12 = convert_uchar4( clamp(resc12, (short)0, (short)255) );
  vstore4(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore4(res10, 0, &pdst[x + 4 + (w) * (y + 0)]);
  vstore4(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore4(res11, 0, &pdst[x + 4 + (w) * (y + 1)]);
  vstore4(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
  vstore4(res12, 0, &pdst[x + 4 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
1.4376586313680247e-09 s
2560 x 1600 :
1.4065431672311265e-09 s
2048 x 2048 :
1.431283796244538e-09 s
5760 x 3240 :
1.4292279871214977e-09 s
7680 x 4320 :
1.4196735896344784e-09 s
{:x_component_number=>4, :vector_length=>8, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar8 tempload0_7;
  uchar4 tempload8_11;
  uchar2 tempload12_13;
  uchar8 res00;
  uchar8 res01;
  uchar8 res02;
  short8 tempc000;
  short8 tempc001;
  short8 tempc002;
  short8 tempc003;
  short8 tempc004;
  short8 tempc010;
  short8 tempc011;
  short8 tempc012;
  short8 tempc013;
  short8 tempc014;
  short8 tempc020;
  short8 tempc021;
  short8 tempc022;
  short8 tempc023;
  short8 tempc024;
  short8 resc00;
  short8 resc01;
  short8 resc02;
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + -1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + -1)]);
  tempc000 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc010 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc020 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 0)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 0)]);
  tempc001 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc011 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc021 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 1)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 1)]);
  tempc002 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc012 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc022 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 2)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 2)]);
  tempc003 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc013 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc023 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload8_11 = vload4(0, &psrc[x + 5 + (w) * (y + 3)]);
  tempload12_13 = vload2(0, &psrc[x + 9 + (w) * (y + 3)]);
  tempc004 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc014 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,tempload8_11.s012) );
  tempc024 = convert_short8( (uchar8)(tempload0_7.s67,tempload8_11.s0123,tempload12_13.s01) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar8( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar8( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar8( clamp(resc02, (short)0, (short)255) );
  vstore8(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore8(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore8(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
1.8793126480053435e-09 s
2560 x 1600 :
1.792897885452985e-09 s
2048 x 2048 :
1.8347585207863326e-09 s
5760 x 3240 :
1.7988728414166523e-09 s
7680 x 4320 :
1.8179149392023866e-09 s
{:x_component_number=>1, :vector_length=>1, :y_component_number=>1, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (4) ? w - (4) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar tempload0_0;
  uchar tempload1_1;
  uchar tempload2_2;
  uchar tempload3_3;
  uchar tempload4_4;
  uchar tempload5_5;
  uchar tempload6_6;
  uchar res00;
  int tempc000;
  int tempc001;
  int tempc002;
  int tempc010;
  int tempc011;
  int tempc012;
  int tempc020;
  int tempc021;
  int tempc022;
  int resc00;
  tempload0_0 = psrc[x + -3 + (w) * (y + -1)];
  tempload1_1 = psrc[x + -2 + (w) * (y + -1)];
  tempload2_2 = psrc[x + -1 + (w) * (y + -1)];
  tempload3_3 = psrc[x + 0 + (w) * (y + -1)];
  tempload4_4 = psrc[x + 1 + (w) * (y + -1)];
  tempload5_5 = psrc[x + 2 + (w) * (y + -1)];
  tempload6_6 = psrc[x + 3 + (w) * (y + -1)];
  tempc000 = (uchar)(tempload0_0);
  tempc010 = (uchar)(tempload3_3);
  tempc020 = (uchar)(tempload6_6);
  tempload0_0 = psrc[x + -3 + (w) * (y + 0)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 0)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 0)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 0)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 0)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 0)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 0)];
  tempc001 = (uchar)(tempload0_0);
  tempc011 = (uchar)(tempload3_3);
  tempc021 = (uchar)(tempload6_6);
  tempload0_0 = psrc[x + -3 + (w) * (y + 1)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 1)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 1)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 1)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 1)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 1)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 1)];
  tempc002 = (uchar)(tempload0_0);
  tempc012 = (uchar)(tempload3_3);
  tempc022 = (uchar)(tempload6_6);
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = clamp(resc00, (int)0, (int)255);
  pdst[x + 0 + (w) * (y + 0)] = res00;
}
768 x 432 :
Tesla T10 Processor: 
1.2393709393405794e-09 s
2560 x 1600 :
1.1915128468834674e-09 s
2048 x 2048 :
1.1834932429010568e-09 s
5760 x 3240 :
1.16347961565304e-09 s
7680 x 4320 :
1.1716151281773168e-09 s
{:x_component_number=>2, :vector_length=>2, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (2);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (5) ? w - (5) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar2 temp000;
  uchar2 temp001;
  uchar2 temp002;
  uchar2 temp003;
  uchar2 temp004;
  uchar2 temp010;
  uchar2 temp011;
  uchar2 temp012;
  uchar2 temp013;
  uchar2 temp014;
  uchar2 temp020;
  uchar2 temp021;
  uchar2 temp022;
  uchar2 temp023;
  uchar2 temp024;
  uchar2 res00;
  uchar2 res01;
  uchar2 res02;
  short2 tempc000;
  short2 tempc001;
  short2 tempc002;
  short2 tempc003;
  short2 tempc004;
  short2 tempc010;
  short2 tempc011;
  short2 tempc012;
  short2 tempc013;
  short2 tempc014;
  short2 tempc020;
  short2 tempc021;
  short2 tempc022;
  short2 tempc023;
  short2 tempc024;
  short2 resc00;
  short2 resc01;
  short2 resc02;
  temp000 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short2( temp000 );
  temp010 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short2( temp010 );
  temp020 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short2( temp020 );
  temp001 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short2( temp001 );
  temp011 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short2( temp011 );
  temp021 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short2( temp021 );
  temp002 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short2( temp002 );
  temp012 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short2( temp012 );
  temp022 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short2( temp022 );
  temp003 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_short2( temp003 );
  temp013 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_short2( temp013 );
  temp023 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_short2( temp023 );
  temp004 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_short2( temp004 );
  temp014 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_short2( temp014 );
  temp024 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_short2( temp024 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar2( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar2( clamp(resc02, (short)0, (short)255) );
  vstore2(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore2(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
9.056530451150646e-10 s
2560 x 1600 :
8.673703740308694e-10 s
2048 x 2048 :
8.550857166882141e-10 s
5760 x 3240 :
8.237607380745451e-10 s
7680 x 4320 :
8.043848264580828e-10 s
{:x_component_number=>2, :vector_length=>8, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (2);
  y = (get_global_id(1)) * (4);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (5) ? w - (5) : x));
  y = (y < 1 ? 1 : (y > height - (5) ? height - (5) : y));
  uchar8 temp000;
  uchar8 temp001;
  uchar8 temp002;
  uchar8 temp003;
  uchar8 temp004;
  uchar8 temp005;
  uchar8 temp010;
  uchar8 temp011;
  uchar8 temp012;
  uchar8 temp013;
  uchar8 temp014;
  uchar8 temp015;
  uchar8 temp020;
  uchar8 temp021;
  uchar8 temp022;
  uchar8 temp023;
  uchar8 temp024;
  uchar8 temp025;
  uchar8 res00;
  uchar8 res01;
  uchar8 res02;
  uchar8 res03;
  int8 tempc000;
  int8 tempc001;
  int8 tempc002;
  int8 tempc003;
  int8 tempc004;
  int8 tempc005;
  int8 tempc010;
  int8 tempc011;
  int8 tempc012;
  int8 tempc013;
  int8 tempc014;
  int8 tempc015;
  int8 tempc020;
  int8 tempc021;
  int8 tempc022;
  int8 tempc023;
  int8 tempc024;
  int8 tempc025;
  int8 resc00;
  int8 resc01;
  int8 resc02;
  int8 resc03;
  temp000 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int8( temp000 );
  temp010 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int8( temp010 );
  temp020 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int8( temp020 );
  temp001 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int8( temp001 );
  temp011 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int8( temp011 );
  temp021 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int8( temp021 );
  temp002 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int8( temp002 );
  temp012 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int8( temp012 );
  temp022 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int8( temp022 );
  temp003 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_int8( temp003 );
  temp013 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_int8( temp013 );
  temp023 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_int8( temp023 );
  temp004 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_int8( temp004 );
  temp014 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_int8( temp014 );
  temp024 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_int8( temp024 );
  temp005 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 4)]);
  tempc005 = convert_int8( temp005 );
  temp015 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 4)]);
  tempc015 = convert_int8( temp015 );
  temp025 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 4)]);
  tempc025 = convert_int8( temp025 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar8( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar8( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar8( clamp(resc02, (int)0, (int)255) );
  resc03 =  -(tempc003) - (tempc013) - (tempc023) - (tempc004) + (tempc014) * ((int)9) - (tempc024) - (tempc005) - (tempc015) - (tempc025);
  res03 = convert_uchar8( clamp(resc03, (int)0, (int)255) );
  vstore2(res00.s01, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res01.s01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore2(res02.s01, 0, &pdst[x + 0 + (w) * (y + 2)]);
  vstore2(res03.s01, 0, &pdst[x + 0 + (w) * (y + 3)]);
}
768 x 432 :
Tesla T10 Processor: 
8.560082579391583e-10 s
2560 x 1600 :
7.945976254524567e-10 s
2048 x 2048 :
7.759440971057658e-10 s
5760 x 3240 :
7.321326012888371e-10 s
7680 x 4320 :
7.195858405016842e-10 s
{:x_component_number=>2, :vector_length=>4, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (2);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (5) ? w - (5) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar4 tempload0_3;
  uchar4 tempload4_7;
  uchar4 res00;
  uchar4 res01;
  uchar4 res02;
  short4 tempc000;
  short4 tempc001;
  short4 tempc002;
  short4 tempc003;
  short4 tempc004;
  short4 tempc010;
  short4 tempc011;
  short4 tempc012;
  short4 tempc013;
  short4 tempc014;
  short4 tempc020;
  short4 tempc021;
  short4 tempc022;
  short4 tempc023;
  short4 tempc024;
  short4 resc00;
  short4 resc01;
  short4 resc02;
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + -1)]);
  tempc000 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc010 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc020 = convert_short4( (uchar4)(tempload4_7.s23,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 0)]);
  tempc001 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc011 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc021 = convert_short4( (uchar4)(tempload4_7.s23,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 1)]);
  tempc002 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc012 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc022 = convert_short4( (uchar4)(tempload4_7.s23,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 2)]);
  tempc003 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc013 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc023 = convert_short4( (uchar4)(tempload4_7.s23,0,0) );
  tempload0_3 = vload4(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempload4_7 = vload4(0, &psrc[x + 1 + (w) * (y + 3)]);
  tempc004 = convert_short4( (uchar4)(tempload0_3.s0123) );
  tempc014 = convert_short4( (uchar4)(tempload0_3.s3,tempload4_7.s012) );
  tempc024 = convert_short4( (uchar4)(tempload4_7.s23,0,0) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar4( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar4( clamp(resc02, (short)0, (short)255) );
  vstore2(res00.s01, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res01.s01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore2(res02.s01, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
8.873884267411499e-10 s
2560 x 1600 :
8.46562503363763e-10 s
2048 x 2048 :
8.374961420084871e-10 s
5760 x 3240 :
8.18906949237959e-10 s
7680 x 4320 :
8.004545146886595e-10 s
{:x_component_number=>2, :vector_length=>1, :y_component_number=>2, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (2);
  y = (get_global_id(1)) * (2);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (5) ? w - (5) : x));
  y = (y < 1 ? 1 : (y > height - (3) ? height - (3) : y));
  uchar tempload0_0;
  uchar tempload1_1;
  uchar tempload2_2;
  uchar tempload3_3;
  uchar tempload4_4;
  uchar tempload5_5;
  uchar tempload6_6;
  uchar tempload7_7;
  uchar res00;
  uchar res01;
  uchar res10;
  uchar res11;
  int tempc000;
  int tempc001;
  int tempc002;
  int tempc003;
  int tempc100;
  int tempc101;
  int tempc102;
  int tempc103;
  int tempc010;
  int tempc011;
  int tempc012;
  int tempc013;
  int tempc110;
  int tempc111;
  int tempc112;
  int tempc113;
  int tempc020;
  int tempc021;
  int tempc022;
  int tempc023;
  int tempc120;
  int tempc121;
  int tempc122;
  int tempc123;
  int resc00;
  int resc01;
  int resc10;
  int resc11;
  tempload0_0 = psrc[x + -3 + (w) * (y + -1)];
  tempload1_1 = psrc[x + -2 + (w) * (y + -1)];
  tempload2_2 = psrc[x + -1 + (w) * (y + -1)];
  tempload3_3 = psrc[x + 0 + (w) * (y + -1)];
  tempload4_4 = psrc[x + 1 + (w) * (y + -1)];
  tempload5_5 = psrc[x + 2 + (w) * (y + -1)];
  tempload6_6 = psrc[x + 3 + (w) * (y + -1)];
  tempload7_7 = psrc[x + 4 + (w) * (y + -1)];
  tempc000 = (uchar)(tempload0_0);
  tempc100 = (uchar)(tempload1_1);
  tempc010 = (uchar)(tempload3_3);
  tempc110 = (uchar)(tempload4_4);
  tempc020 = (uchar)(tempload6_6);
  tempc120 = (uchar)(tempload7_7);
  tempload0_0 = psrc[x + -3 + (w) * (y + 0)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 0)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 0)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 0)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 0)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 0)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 0)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 0)];
  tempc001 = (uchar)(tempload0_0);
  tempc101 = (uchar)(tempload1_1);
  tempc011 = (uchar)(tempload3_3);
  tempc111 = (uchar)(tempload4_4);
  tempc021 = (uchar)(tempload6_6);
  tempc121 = (uchar)(tempload7_7);
  tempload0_0 = psrc[x + -3 + (w) * (y + 1)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 1)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 1)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 1)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 1)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 1)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 1)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 1)];
  tempc002 = (uchar)(tempload0_0);
  tempc102 = (uchar)(tempload1_1);
  tempc012 = (uchar)(tempload3_3);
  tempc112 = (uchar)(tempload4_4);
  tempc022 = (uchar)(tempload6_6);
  tempc122 = (uchar)(tempload7_7);
  tempload0_0 = psrc[x + -3 + (w) * (y + 2)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 2)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 2)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 2)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 2)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 2)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 2)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 2)];
  tempc003 = (uchar)(tempload0_0);
  tempc103 = (uchar)(tempload1_1);
  tempc013 = (uchar)(tempload3_3);
  tempc113 = (uchar)(tempload4_4);
  tempc023 = (uchar)(tempload6_6);
  tempc123 = (uchar)(tempload7_7);
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = clamp(resc00, (int)0, (int)255);
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = clamp(resc01, (int)0, (int)255);
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = clamp(resc10, (int)0, (int)255);
  resc11 =  -(tempc101) - (tempc111) - (tempc121) - (tempc102) + (tempc112) * ((int)9) - (tempc122) - (tempc103) - (tempc113) - (tempc123);
  res11 = clamp(resc11, (int)0, (int)255);
  pdst[x + 0 + (w) * (y + 0)] = res00;
  pdst[x + 1 + (w) * (y + 0)] = res10;
  pdst[x + 0 + (w) * (y + 1)] = res01;
  pdst[x + 1 + (w) * (y + 1)] = res11;
}
768 x 432 :
Tesla T10 Processor: 
1.0487582731191938e-09 s
2560 x 1600 :
1.0109822579240468e-09 s
2048 x 2048 :
1.0137205944603541e-09 s
5760 x 3240 :
9.758106507453927e-10 s
7680 x 4320 :
9.477649549050534e-10 s
{:x_component_number=>1, :vector_length=>4, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar4 temp000;
  uchar4 temp001;
  uchar4 temp002;
  uchar4 temp003;
  uchar4 temp004;
  uchar4 temp010;
  uchar4 temp011;
  uchar4 temp012;
  uchar4 temp013;
  uchar4 temp014;
  uchar4 temp020;
  uchar4 temp021;
  uchar4 temp022;
  uchar4 temp023;
  uchar4 temp024;
  uchar4 res00;
  uchar4 res01;
  uchar4 res02;
  short4 tempc000;
  short4 tempc001;
  short4 tempc002;
  short4 tempc003;
  short4 tempc004;
  short4 tempc010;
  short4 tempc011;
  short4 tempc012;
  short4 tempc013;
  short4 tempc014;
  short4 tempc020;
  short4 tempc021;
  short4 tempc022;
  short4 tempc023;
  short4 tempc024;
  short4 resc00;
  short4 resc01;
  short4 resc02;
  temp000 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short4( temp000 );
  temp010 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short4( temp010 );
  temp020 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short4( temp020 );
  temp001 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short4( temp001 );
  temp011 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short4( temp011 );
  temp021 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short4( temp021 );
  temp002 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short4( temp002 );
  temp012 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short4( temp012 );
  temp022 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short4( temp022 );
  temp003 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_short4( temp003 );
  temp013 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_short4( temp013 );
  temp023 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_short4( temp023 );
  temp004 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_short4( temp004 );
  temp014 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_short4( temp014 );
  temp024 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_short4( temp024 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar4( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar4( clamp(resc02, (short)0, (short)255) );
  vstore4(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore4(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore4(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
3.3809945959074624e-09 s
2560 x 1600 :
2.846396149995939e-09 s
2048 x 2048 :
2.7105603380317217e-09 s
5760 x 3240 :
2.6926925634093746e-09 s
7680 x 4320 :
2.7911632171271637e-09 s
{:x_component_number=>4, :vector_length=>4, :y_component_number=>2, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (2);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (3) ? height - (3) : y));
  uchar4 temp000;
  uchar4 temp001;
  uchar4 temp002;
  uchar4 temp003;
  uchar4 temp010;
  uchar4 temp011;
  uchar4 temp012;
  uchar4 temp013;
  uchar4 temp020;
  uchar4 temp021;
  uchar4 temp022;
  uchar4 temp023;
  uchar4 res00;
  uchar4 res01;
  int4 tempc000;
  int4 tempc001;
  int4 tempc002;
  int4 tempc003;
  int4 tempc010;
  int4 tempc011;
  int4 tempc012;
  int4 tempc013;
  int4 tempc020;
  int4 tempc021;
  int4 tempc022;
  int4 tempc023;
  int4 resc00;
  int4 resc01;
  temp000 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int4( temp000 );
  temp010 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int4( temp010 );
  temp020 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int4( temp020 );
  temp001 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int4( temp001 );
  temp011 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int4( temp011 );
  temp021 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int4( temp021 );
  temp002 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int4( temp002 );
  temp012 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int4( temp012 );
  temp022 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int4( temp022 );
  temp003 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_int4( temp003 );
  temp013 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_int4( temp013 );
  temp023 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_int4( temp023 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar4( clamp(resc01, (int)0, (int)255) );
  vstore4(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore4(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
}
768 x 432 :
Tesla T10 Processor: 
1.402586678001093e-09 s
2560 x 1600 :
1.3112637865353584e-09 s
2048 x 2048 :
1.2973477084724838e-09 s
5760 x 3240 :
1.3043767985289313e-09 s
7680 x 4320 :
1.3248943915720293e-09 s
{:x_component_number=>1, :vector_length=>1, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (4);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (4) ? w - (4) : x));
  y = (y < 1 ? 1 : (y > height - (5) ? height - (5) : y));
  uchar temp000;
  uchar temp001;
  uchar temp002;
  uchar temp003;
  uchar temp004;
  uchar temp005;
  uchar temp010;
  uchar temp011;
  uchar temp012;
  uchar temp013;
  uchar temp014;
  uchar temp015;
  uchar temp020;
  uchar temp021;
  uchar temp022;
  uchar temp023;
  uchar temp024;
  uchar temp025;
  uchar res00;
  uchar res01;
  uchar res02;
  uchar res03;
  short tempc000;
  short tempc001;
  short tempc002;
  short tempc003;
  short tempc004;
  short tempc005;
  short tempc010;
  short tempc011;
  short tempc012;
  short tempc013;
  short tempc014;
  short tempc015;
  short tempc020;
  short tempc021;
  short tempc022;
  short tempc023;
  short tempc024;
  short tempc025;
  short resc00;
  short resc01;
  short resc02;
  short resc03;
  temp000 = psrc[x + 0 + -3 + (w) * (y + -1)];
  tempc000 = temp000;
  temp010 = psrc[x + 0 + 0 + (w) * (y + -1)];
  tempc010 = temp010;
  temp020 = psrc[x + 0 + 3 + (w) * (y + -1)];
  tempc020 = temp020;
  temp001 = psrc[x + 0 + -3 + (w) * (y + 0)];
  tempc001 = temp001;
  temp011 = psrc[x + 0 + 0 + (w) * (y + 0)];
  tempc011 = temp011;
  temp021 = psrc[x + 0 + 3 + (w) * (y + 0)];
  tempc021 = temp021;
  temp002 = psrc[x + 0 + -3 + (w) * (y + 1)];
  tempc002 = temp002;
  temp012 = psrc[x + 0 + 0 + (w) * (y + 1)];
  tempc012 = temp012;
  temp022 = psrc[x + 0 + 3 + (w) * (y + 1)];
  tempc022 = temp022;
  temp003 = psrc[x + 0 + -3 + (w) * (y + 2)];
  tempc003 = temp003;
  temp013 = psrc[x + 0 + 0 + (w) * (y + 2)];
  tempc013 = temp013;
  temp023 = psrc[x + 0 + 3 + (w) * (y + 2)];
  tempc023 = temp023;
  temp004 = psrc[x + 0 + -3 + (w) * (y + 3)];
  tempc004 = temp004;
  temp014 = psrc[x + 0 + 0 + (w) * (y + 3)];
  tempc014 = temp014;
  temp024 = psrc[x + 0 + 3 + (w) * (y + 3)];
  tempc024 = temp024;
  temp005 = psrc[x + 0 + -3 + (w) * (y + 4)];
  tempc005 = temp005;
  temp015 = psrc[x + 0 + 0 + (w) * (y + 4)];
  tempc015 = temp015;
  temp025 = psrc[x + 0 + 3 + (w) * (y + 4)];
  tempc025 = temp025;
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = clamp(resc00, (short)0, (short)255);
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = clamp(resc01, (short)0, (short)255);
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = clamp(resc02, (short)0, (short)255);
  resc03 =  -(tempc003) - (tempc013) - (tempc023) - (tempc004) + (tempc014) * ((short)9) - (tempc024) - (tempc005) - (tempc015) - (tempc025);
  res03 = clamp(resc03, (short)0, (short)255);
  pdst[x + 0 + (w) * (y + 0)] = res00;
  pdst[x + 0 + (w) * (y + 1)] = res01;
  pdst[x + 0 + (w) * (y + 2)] = res02;
  pdst[x + 0 + (w) * (y + 3)] = res03;
}
768 x 432 :
Tesla T10 Processor: 
7.279616248709697e-10 s
2560 x 1600 :
6.607399202090964e-10 s
2048 x 2048 :
6.399669765481893e-10 s
5760 x 3240 :
6.060868451466724e-10 s
7680 x 4320 :
5.96028112056837e-10 s
{:x_component_number=>4, :vector_length=>4, :y_component_number=>4, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (4);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (5) ? height - (5) : y));
  uchar4 temp000;
  uchar4 temp001;
  uchar4 temp002;
  uchar4 temp003;
  uchar4 temp004;
  uchar4 temp005;
  uchar4 temp010;
  uchar4 temp011;
  uchar4 temp012;
  uchar4 temp013;
  uchar4 temp014;
  uchar4 temp015;
  uchar4 temp020;
  uchar4 temp021;
  uchar4 temp022;
  uchar4 temp023;
  uchar4 temp024;
  uchar4 temp025;
  uchar4 res00;
  uchar4 res01;
  uchar4 res02;
  uchar4 res03;
  short4 tempc000;
  short4 tempc001;
  short4 tempc002;
  short4 tempc003;
  short4 tempc004;
  short4 tempc005;
  short4 tempc010;
  short4 tempc011;
  short4 tempc012;
  short4 tempc013;
  short4 tempc014;
  short4 tempc015;
  short4 tempc020;
  short4 tempc021;
  short4 tempc022;
  short4 tempc023;
  short4 tempc024;
  short4 tempc025;
  short4 resc00;
  short4 resc01;
  short4 resc02;
  short4 resc03;
  temp000 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short4( temp000 );
  temp010 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short4( temp010 );
  temp020 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short4( temp020 );
  temp001 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short4( temp001 );
  temp011 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short4( temp011 );
  temp021 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short4( temp021 );
  temp002 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short4( temp002 );
  temp012 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short4( temp012 );
  temp022 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short4( temp022 );
  temp003 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_short4( temp003 );
  temp013 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_short4( temp013 );
  temp023 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_short4( temp023 );
  temp004 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_short4( temp004 );
  temp014 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_short4( temp014 );
  temp024 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_short4( temp024 );
  temp005 = vload4(0, &psrc[x + 0 + -3 + (w) * (y + 4)]);
  tempc005 = convert_short4( temp005 );
  temp015 = vload4(0, &psrc[x + 0 + 0 + (w) * (y + 4)]);
  tempc015 = convert_short4( temp015 );
  temp025 = vload4(0, &psrc[x + 0 + 3 + (w) * (y + 4)]);
  tempc025 = convert_short4( temp025 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar4( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar4( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar4( clamp(resc02, (short)0, (short)255) );
  resc03 =  -(tempc003) - (tempc013) - (tempc023) - (tempc004) + (tempc014) * ((short)9) - (tempc024) - (tempc005) - (tempc015) - (tempc025);
  res03 = convert_uchar4( clamp(resc03, (short)0, (short)255) );
  vstore4(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore4(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore4(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
  vstore4(res03, 0, &pdst[x + 0 + (w) * (y + 3)]);
}
768 x 432 :
Tesla T10 Processor: 
1.1652437913655961e-09 s
2560 x 1600 :
1.0575768577023078e-09 s
2048 x 2048 :
1.0745540735134907e-09 s
5760 x 3240 :
1.0051753866736635e-09 s
7680 x 4320 :
1.002973673691705e-09 s
{:x_component_number=>8, :vector_length=>8, :y_component_number=>1, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (8);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar8 temp000;
  uchar8 temp001;
  uchar8 temp002;
  uchar8 temp010;
  uchar8 temp011;
  uchar8 temp012;
  uchar8 temp020;
  uchar8 temp021;
  uchar8 temp022;
  uchar8 res00;
  int8 tempc000;
  int8 tempc001;
  int8 tempc002;
  int8 tempc010;
  int8 tempc011;
  int8 tempc012;
  int8 tempc020;
  int8 tempc021;
  int8 tempc022;
  int8 resc00;
  temp000 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int8( temp000 );
  temp010 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int8( temp010 );
  temp020 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int8( temp020 );
  temp001 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int8( temp001 );
  temp011 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int8( temp011 );
  temp021 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int8( temp021 );
  temp002 = vload8(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int8( temp002 );
  temp012 = vload8(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int8( temp012 );
  temp022 = vload8(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int8( temp022 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar8( clamp(resc00, (int)0, (int)255) );
  vstore8(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
}
768 x 432 :
Tesla T10 Processor: 
2.4982694759851842e-09 s
2560 x 1600 :
2.395214502882317e-09 s
2048 x 2048 :
2.4161470919582734e-09 s
5760 x 3240 :
2.41596824441264e-09 s
7680 x 4320 :
2.4356080262043305e-09 s
{:x_component_number=>4, :vector_length=>1, :y_component_number=>1, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (4);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (7) ? w - (7) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar tempload0_0;
  uchar tempload1_1;
  uchar tempload2_2;
  uchar tempload3_3;
  uchar tempload4_4;
  uchar tempload5_5;
  uchar tempload6_6;
  uchar tempload7_7;
  uchar tempload8_8;
  uchar tempload9_9;
  uchar res00;
  uchar res10;
  uchar res20;
  uchar res30;
  int tempc000;
  int tempc001;
  int tempc002;
  int tempc100;
  int tempc101;
  int tempc102;
  int tempc200;
  int tempc201;
  int tempc202;
  int tempc300;
  int tempc301;
  int tempc302;
  int tempc010;
  int tempc011;
  int tempc012;
  int tempc110;
  int tempc111;
  int tempc112;
  int tempc210;
  int tempc211;
  int tempc212;
  int tempc310;
  int tempc311;
  int tempc312;
  int tempc020;
  int tempc021;
  int tempc022;
  int tempc120;
  int tempc121;
  int tempc122;
  int tempc220;
  int tempc221;
  int tempc222;
  int tempc320;
  int tempc321;
  int tempc322;
  int resc00;
  int resc10;
  int resc20;
  int resc30;
  tempload0_0 = psrc[x + -3 + (w) * (y + -1)];
  tempload1_1 = psrc[x + -2 + (w) * (y + -1)];
  tempload2_2 = psrc[x + -1 + (w) * (y + -1)];
  tempload3_3 = psrc[x + 0 + (w) * (y + -1)];
  tempload4_4 = psrc[x + 1 + (w) * (y + -1)];
  tempload5_5 = psrc[x + 2 + (w) * (y + -1)];
  tempload6_6 = psrc[x + 3 + (w) * (y + -1)];
  tempload7_7 = psrc[x + 4 + (w) * (y + -1)];
  tempload8_8 = psrc[x + 5 + (w) * (y + -1)];
  tempload9_9 = psrc[x + 6 + (w) * (y + -1)];
  tempc000 = (uchar)(tempload0_0);
  tempc100 = (uchar)(tempload1_1);
  tempc200 = (uchar)(tempload2_2);
  tempc300 = (uchar)(tempload3_3);
  tempc010 = (uchar)(tempload3_3);
  tempc110 = (uchar)(tempload4_4);
  tempc210 = (uchar)(tempload5_5);
  tempc310 = (uchar)(tempload6_6);
  tempc020 = (uchar)(tempload6_6);
  tempc120 = (uchar)(tempload7_7);
  tempc220 = (uchar)(tempload8_8);
  tempc320 = (uchar)(tempload9_9);
  tempload0_0 = psrc[x + -3 + (w) * (y + 0)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 0)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 0)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 0)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 0)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 0)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 0)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 0)];
  tempload8_8 = psrc[x + 5 + (w) * (y + 0)];
  tempload9_9 = psrc[x + 6 + (w) * (y + 0)];
  tempc001 = (uchar)(tempload0_0);
  tempc101 = (uchar)(tempload1_1);
  tempc201 = (uchar)(tempload2_2);
  tempc301 = (uchar)(tempload3_3);
  tempc011 = (uchar)(tempload3_3);
  tempc111 = (uchar)(tempload4_4);
  tempc211 = (uchar)(tempload5_5);
  tempc311 = (uchar)(tempload6_6);
  tempc021 = (uchar)(tempload6_6);
  tempc121 = (uchar)(tempload7_7);
  tempc221 = (uchar)(tempload8_8);
  tempc321 = (uchar)(tempload9_9);
  tempload0_0 = psrc[x + -3 + (w) * (y + 1)];
  tempload1_1 = psrc[x + -2 + (w) * (y + 1)];
  tempload2_2 = psrc[x + -1 + (w) * (y + 1)];
  tempload3_3 = psrc[x + 0 + (w) * (y + 1)];
  tempload4_4 = psrc[x + 1 + (w) * (y + 1)];
  tempload5_5 = psrc[x + 2 + (w) * (y + 1)];
  tempload6_6 = psrc[x + 3 + (w) * (y + 1)];
  tempload7_7 = psrc[x + 4 + (w) * (y + 1)];
  tempload8_8 = psrc[x + 5 + (w) * (y + 1)];
  tempload9_9 = psrc[x + 6 + (w) * (y + 1)];
  tempc002 = (uchar)(tempload0_0);
  tempc102 = (uchar)(tempload1_1);
  tempc202 = (uchar)(tempload2_2);
  tempc302 = (uchar)(tempload3_3);
  tempc012 = (uchar)(tempload3_3);
  tempc112 = (uchar)(tempload4_4);
  tempc212 = (uchar)(tempload5_5);
  tempc312 = (uchar)(tempload6_6);
  tempc022 = (uchar)(tempload6_6);
  tempc122 = (uchar)(tempload7_7);
  tempc222 = (uchar)(tempload8_8);
  tempc322 = (uchar)(tempload9_9);
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = clamp(resc00, (int)0, (int)255);
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = clamp(resc10, (int)0, (int)255);
  resc20 =  -(tempc200) - (tempc210) - (tempc220) - (tempc201) + (tempc211) * ((int)9) - (tempc221) - (tempc202) - (tempc212) - (tempc222);
  res20 = clamp(resc20, (int)0, (int)255);
  resc30 =  -(tempc300) - (tempc310) - (tempc320) - (tempc301) + (tempc311) * ((int)9) - (tempc321) - (tempc302) - (tempc312) - (tempc322);
  res30 = clamp(resc30, (int)0, (int)255);
  pdst[x + 0 + (w) * (y + 0)] = res00;
  pdst[x + 1 + (w) * (y + 0)] = res10;
  pdst[x + 2 + (w) * (y + 0)] = res20;
  pdst[x + 3 + (w) * (y + 0)] = res30;
}
768 x 432 :
Tesla T10 Processor: 
1.975687655595361e-09 s
2560 x 1600 :
1.9292606767059295e-09 s
2048 x 2048 :
1.8836286428756394e-09 s
5760 x 3240 :
1.90044026078817e-09 s
7680 x 4320 :
1.88828894740976e-09 s
{:x_component_number=>8, :vector_length=>2, :y_component_number=>4, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (8);
  y = (get_global_id(1)) * (4);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (11) ? w - (11) : x));
  y = (y < 1 ? 1 : (y > height - (5) ? height - (5) : y));
  uchar2 temp000;
  uchar2 temp001;
  uchar2 temp002;
  uchar2 temp003;
  uchar2 temp004;
  uchar2 temp005;
  uchar2 temp100;
  uchar2 temp101;
  uchar2 temp102;
  uchar2 temp103;
  uchar2 temp104;
  uchar2 temp105;
  uchar2 temp200;
  uchar2 temp201;
  uchar2 temp202;
  uchar2 temp203;
  uchar2 temp204;
  uchar2 temp205;
  uchar2 temp300;
  uchar2 temp301;
  uchar2 temp302;
  uchar2 temp303;
  uchar2 temp304;
  uchar2 temp305;
  uchar2 temp010;
  uchar2 temp011;
  uchar2 temp012;
  uchar2 temp013;
  uchar2 temp014;
  uchar2 temp015;
  uchar2 temp110;
  uchar2 temp111;
  uchar2 temp112;
  uchar2 temp113;
  uchar2 temp114;
  uchar2 temp115;
  uchar2 temp210;
  uchar2 temp211;
  uchar2 temp212;
  uchar2 temp213;
  uchar2 temp214;
  uchar2 temp215;
  uchar2 temp310;
  uchar2 temp311;
  uchar2 temp312;
  uchar2 temp313;
  uchar2 temp314;
  uchar2 temp315;
  uchar2 temp020;
  uchar2 temp021;
  uchar2 temp022;
  uchar2 temp023;
  uchar2 temp024;
  uchar2 temp025;
  uchar2 temp120;
  uchar2 temp121;
  uchar2 temp122;
  uchar2 temp123;
  uchar2 temp124;
  uchar2 temp125;
  uchar2 temp220;
  uchar2 temp221;
  uchar2 temp222;
  uchar2 temp223;
  uchar2 temp224;
  uchar2 temp225;
  uchar2 temp320;
  uchar2 temp321;
  uchar2 temp322;
  uchar2 temp323;
  uchar2 temp324;
  uchar2 temp325;
  uchar2 res00;
  uchar2 res01;
  uchar2 res02;
  uchar2 res03;
  uchar2 res10;
  uchar2 res11;
  uchar2 res12;
  uchar2 res13;
  uchar2 res20;
  uchar2 res21;
  uchar2 res22;
  uchar2 res23;
  uchar2 res30;
  uchar2 res31;
  uchar2 res32;
  uchar2 res33;
  int2 tempc000;
  int2 tempc001;
  int2 tempc002;
  int2 tempc003;
  int2 tempc004;
  int2 tempc005;
  int2 tempc100;
  int2 tempc101;
  int2 tempc102;
  int2 tempc103;
  int2 tempc104;
  int2 tempc105;
  int2 tempc200;
  int2 tempc201;
  int2 tempc202;
  int2 tempc203;
  int2 tempc204;
  int2 tempc205;
  int2 tempc300;
  int2 tempc301;
  int2 tempc302;
  int2 tempc303;
  int2 tempc304;
  int2 tempc305;
  int2 tempc010;
  int2 tempc011;
  int2 tempc012;
  int2 tempc013;
  int2 tempc014;
  int2 tempc015;
  int2 tempc110;
  int2 tempc111;
  int2 tempc112;
  int2 tempc113;
  int2 tempc114;
  int2 tempc115;
  int2 tempc210;
  int2 tempc211;
  int2 tempc212;
  int2 tempc213;
  int2 tempc214;
  int2 tempc215;
  int2 tempc310;
  int2 tempc311;
  int2 tempc312;
  int2 tempc313;
  int2 tempc314;
  int2 tempc315;
  int2 tempc020;
  int2 tempc021;
  int2 tempc022;
  int2 tempc023;
  int2 tempc024;
  int2 tempc025;
  int2 tempc120;
  int2 tempc121;
  int2 tempc122;
  int2 tempc123;
  int2 tempc124;
  int2 tempc125;
  int2 tempc220;
  int2 tempc221;
  int2 tempc222;
  int2 tempc223;
  int2 tempc224;
  int2 tempc225;
  int2 tempc320;
  int2 tempc321;
  int2 tempc322;
  int2 tempc323;
  int2 tempc324;
  int2 tempc325;
  int2 resc00;
  int2 resc01;
  int2 resc02;
  int2 resc03;
  int2 resc10;
  int2 resc11;
  int2 resc12;
  int2 resc13;
  int2 resc20;
  int2 resc21;
  int2 resc22;
  int2 resc23;
  int2 resc30;
  int2 resc31;
  int2 resc32;
  int2 resc33;
  temp000 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int2( temp000 );
  temp100 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + -1)]);
  tempc100 = convert_int2( temp100 );
  temp200 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + -1)]);
  tempc200 = convert_int2( temp200 );
  temp300 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + -1)]);
  tempc300 = convert_int2( temp300 );
  temp010 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int2( temp010 );
  temp110 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + -1)]);
  tempc110 = convert_int2( temp110 );
  temp210 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + -1)]);
  tempc210 = convert_int2( temp210 );
  temp310 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + -1)]);
  tempc310 = convert_int2( temp310 );
  temp020 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int2( temp020 );
  temp120 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + -1)]);
  tempc120 = convert_int2( temp120 );
  temp220 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + -1)]);
  tempc220 = convert_int2( temp220 );
  temp320 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + -1)]);
  tempc320 = convert_int2( temp320 );
  temp001 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int2( temp001 );
  temp101 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 0)]);
  tempc101 = convert_int2( temp101 );
  temp201 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 0)]);
  tempc201 = convert_int2( temp201 );
  temp301 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 0)]);
  tempc301 = convert_int2( temp301 );
  temp011 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int2( temp011 );
  temp111 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 0)]);
  tempc111 = convert_int2( temp111 );
  temp211 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 0)]);
  tempc211 = convert_int2( temp211 );
  temp311 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 0)]);
  tempc311 = convert_int2( temp311 );
  temp021 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int2( temp021 );
  temp121 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 0)]);
  tempc121 = convert_int2( temp121 );
  temp221 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 0)]);
  tempc221 = convert_int2( temp221 );
  temp321 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 0)]);
  tempc321 = convert_int2( temp321 );
  temp002 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int2( temp002 );
  temp102 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 1)]);
  tempc102 = convert_int2( temp102 );
  temp202 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 1)]);
  tempc202 = convert_int2( temp202 );
  temp302 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 1)]);
  tempc302 = convert_int2( temp302 );
  temp012 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int2( temp012 );
  temp112 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 1)]);
  tempc112 = convert_int2( temp112 );
  temp212 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 1)]);
  tempc212 = convert_int2( temp212 );
  temp312 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 1)]);
  tempc312 = convert_int2( temp312 );
  temp022 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int2( temp022 );
  temp122 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 1)]);
  tempc122 = convert_int2( temp122 );
  temp222 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 1)]);
  tempc222 = convert_int2( temp222 );
  temp322 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 1)]);
  tempc322 = convert_int2( temp322 );
  temp003 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_int2( temp003 );
  temp103 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 2)]);
  tempc103 = convert_int2( temp103 );
  temp203 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 2)]);
  tempc203 = convert_int2( temp203 );
  temp303 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 2)]);
  tempc303 = convert_int2( temp303 );
  temp013 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_int2( temp013 );
  temp113 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 2)]);
  tempc113 = convert_int2( temp113 );
  temp213 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 2)]);
  tempc213 = convert_int2( temp213 );
  temp313 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 2)]);
  tempc313 = convert_int2( temp313 );
  temp023 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_int2( temp023 );
  temp123 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 2)]);
  tempc123 = convert_int2( temp123 );
  temp223 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 2)]);
  tempc223 = convert_int2( temp223 );
  temp323 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 2)]);
  tempc323 = convert_int2( temp323 );
  temp004 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_int2( temp004 );
  temp104 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 3)]);
  tempc104 = convert_int2( temp104 );
  temp204 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 3)]);
  tempc204 = convert_int2( temp204 );
  temp304 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 3)]);
  tempc304 = convert_int2( temp304 );
  temp014 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_int2( temp014 );
  temp114 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 3)]);
  tempc114 = convert_int2( temp114 );
  temp214 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 3)]);
  tempc214 = convert_int2( temp214 );
  temp314 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 3)]);
  tempc314 = convert_int2( temp314 );
  temp024 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_int2( temp024 );
  temp124 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 3)]);
  tempc124 = convert_int2( temp124 );
  temp224 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 3)]);
  tempc224 = convert_int2( temp224 );
  temp324 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 3)]);
  tempc324 = convert_int2( temp324 );
  temp005 = vload2(0, &psrc[x + 0 + -3 + (w) * (y + 4)]);
  tempc005 = convert_int2( temp005 );
  temp105 = vload2(0, &psrc[x + 2 + -3 + (w) * (y + 4)]);
  tempc105 = convert_int2( temp105 );
  temp205 = vload2(0, &psrc[x + 4 + -3 + (w) * (y + 4)]);
  tempc205 = convert_int2( temp205 );
  temp305 = vload2(0, &psrc[x + 6 + -3 + (w) * (y + 4)]);
  tempc305 = convert_int2( temp305 );
  temp015 = vload2(0, &psrc[x + 0 + 0 + (w) * (y + 4)]);
  tempc015 = convert_int2( temp015 );
  temp115 = vload2(0, &psrc[x + 2 + 0 + (w) * (y + 4)]);
  tempc115 = convert_int2( temp115 );
  temp215 = vload2(0, &psrc[x + 4 + 0 + (w) * (y + 4)]);
  tempc215 = convert_int2( temp215 );
  temp315 = vload2(0, &psrc[x + 6 + 0 + (w) * (y + 4)]);
  tempc315 = convert_int2( temp315 );
  temp025 = vload2(0, &psrc[x + 0 + 3 + (w) * (y + 4)]);
  tempc025 = convert_int2( temp025 );
  temp125 = vload2(0, &psrc[x + 2 + 3 + (w) * (y + 4)]);
  tempc125 = convert_int2( temp125 );
  temp225 = vload2(0, &psrc[x + 4 + 3 + (w) * (y + 4)]);
  tempc225 = convert_int2( temp225 );
  temp325 = vload2(0, &psrc[x + 6 + 3 + (w) * (y + 4)]);
  tempc325 = convert_int2( temp325 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar2( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar2( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar2( clamp(resc02, (int)0, (int)255) );
  resc03 =  -(tempc003) - (tempc013) - (tempc023) - (tempc004) + (tempc014) * ((int)9) - (tempc024) - (tempc005) - (tempc015) - (tempc025);
  res03 = convert_uchar2( clamp(resc03, (int)0, (int)255) );
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = convert_uchar2( clamp(resc10, (int)0, (int)255) );
  resc11 =  -(tempc101) - (tempc111) - (tempc121) - (tempc102) + (tempc112) * ((int)9) - (tempc122) - (tempc103) - (tempc113) - (tempc123);
  res11 = convert_uchar2( clamp(resc11, (int)0, (int)255) );
  resc12 =  -(tempc102) - (tempc112) - (tempc122) - (tempc103) + (tempc113) * ((int)9) - (tempc123) - (tempc104) - (tempc114) - (tempc124);
  res12 = convert_uchar2( clamp(resc12, (int)0, (int)255) );
  resc13 =  -(tempc103) - (tempc113) - (tempc123) - (tempc104) + (tempc114) * ((int)9) - (tempc124) - (tempc105) - (tempc115) - (tempc125);
  res13 = convert_uchar2( clamp(resc13, (int)0, (int)255) );
  resc20 =  -(tempc200) - (tempc210) - (tempc220) - (tempc201) + (tempc211) * ((int)9) - (tempc221) - (tempc202) - (tempc212) - (tempc222);
  res20 = convert_uchar2( clamp(resc20, (int)0, (int)255) );
  resc21 =  -(tempc201) - (tempc211) - (tempc221) - (tempc202) + (tempc212) * ((int)9) - (tempc222) - (tempc203) - (tempc213) - (tempc223);
  res21 = convert_uchar2( clamp(resc21, (int)0, (int)255) );
  resc22 =  -(tempc202) - (tempc212) - (tempc222) - (tempc203) + (tempc213) * ((int)9) - (tempc223) - (tempc204) - (tempc214) - (tempc224);
  res22 = convert_uchar2( clamp(resc22, (int)0, (int)255) );
  resc23 =  -(tempc203) - (tempc213) - (tempc223) - (tempc204) + (tempc214) * ((int)9) - (tempc224) - (tempc205) - (tempc215) - (tempc225);
  res23 = convert_uchar2( clamp(resc23, (int)0, (int)255) );
  resc30 =  -(tempc300) - (tempc310) - (tempc320) - (tempc301) + (tempc311) * ((int)9) - (tempc321) - (tempc302) - (tempc312) - (tempc322);
  res30 = convert_uchar2( clamp(resc30, (int)0, (int)255) );
  resc31 =  -(tempc301) - (tempc311) - (tempc321) - (tempc302) + (tempc312) * ((int)9) - (tempc322) - (tempc303) - (tempc313) - (tempc323);
  res31 = convert_uchar2( clamp(resc31, (int)0, (int)255) );
  resc32 =  -(tempc302) - (tempc312) - (tempc322) - (tempc303) + (tempc313) * ((int)9) - (tempc323) - (tempc304) - (tempc314) - (tempc324);
  res32 = convert_uchar2( clamp(resc32, (int)0, (int)255) );
  resc33 =  -(tempc303) - (tempc313) - (tempc323) - (tempc304) + (tempc314) * ((int)9) - (tempc324) - (tempc305) - (tempc315) - (tempc325);
  res33 = convert_uchar2( clamp(resc33, (int)0, (int)255) );
  vstore2(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res10, 0, &pdst[x + 2 + (w) * (y + 0)]);
  vstore2(res20, 0, &pdst[x + 4 + (w) * (y + 0)]);
  vstore2(res30, 0, &pdst[x + 6 + (w) * (y + 0)]);
  vstore2(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore2(res11, 0, &pdst[x + 2 + (w) * (y + 1)]);
  vstore2(res21, 0, &pdst[x + 4 + (w) * (y + 1)]);
  vstore2(res31, 0, &pdst[x + 6 + (w) * (y + 1)]);
  vstore2(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
  vstore2(res12, 0, &pdst[x + 2 + (w) * (y + 2)]);
  vstore2(res22, 0, &pdst[x + 4 + (w) * (y + 2)]);
  vstore2(res32, 0, &pdst[x + 6 + (w) * (y + 2)]);
  vstore2(res03, 0, &pdst[x + 0 + (w) * (y + 3)]);
  vstore2(res13, 0, &pdst[x + 2 + (w) * (y + 3)]);
  vstore2(res23, 0, &pdst[x + 4 + (w) * (y + 3)]);
  vstore2(res33, 0, &pdst[x + 6 + (w) * (y + 3)]);
}
768 x 432 :
Tesla T10 Processor: 
2.423170805756269e-09 s
2560 x 1600 :
2.2173690529894186e-09 s
2048 x 2048 :
2.2026871687263325e-09 s
5760 x 3240 :
2.1699422518413565e-09 s
7680 x 4320 :
2.180512260446858e-09 s
{:x_component_number=>2, :vector_length=>8, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>false, :load_overlap=>false}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (2);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (5) ? w - (5) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar8 tempload0_7;
  uchar8 res00;
  uchar8 res01;
  uchar8 res02;
  short8 tempc000;
  short8 tempc001;
  short8 tempc002;
  short8 tempc003;
  short8 tempc004;
  short8 tempc010;
  short8 tempc011;
  short8 tempc012;
  short8 tempc013;
  short8 tempc014;
  short8 tempc020;
  short8 tempc021;
  short8 tempc022;
  short8 tempc023;
  short8 tempc024;
  short8 resc00;
  short8 resc01;
  short8 resc02;
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + -1)]);
  tempc000 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc010 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,0,0,0) );
  tempc020 = convert_short8( (uchar8)(tempload0_7.s67,0,0,0,0,0,0) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 0)]);
  tempc001 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc011 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,0,0,0) );
  tempc021 = convert_short8( (uchar8)(tempload0_7.s67,0,0,0,0,0,0) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 1)]);
  tempc002 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc012 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,0,0,0) );
  tempc022 = convert_short8( (uchar8)(tempload0_7.s67,0,0,0,0,0,0) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 2)]);
  tempc003 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc013 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,0,0,0) );
  tempc023 = convert_short8( (uchar8)(tempload0_7.s67,0,0,0,0,0,0) );
  tempload0_7 = vload8(0, &psrc[x + -3 + (w) * (y + 3)]);
  tempc004 = convert_short8( (uchar8)(tempload0_7.s01234567) );
  tempc014 = convert_short8( (uchar8)(tempload0_7.s345,tempload0_7.s67,0,0,0) );
  tempc024 = convert_short8( (uchar8)(tempload0_7.s67,0,0,0,0,0,0) );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar8( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar8( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar8( clamp(resc02, (short)0, (short)255) );
  vstore2(res00.s01, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore2(res01.s01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore2(res02.s01, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
8.871941222903637e-10 s
2560 x 1600 :
8.464450774570637e-10 s
2048 x 2048 :
8.38711588498742e-10 s
5760 x 3240 :
8.189670208819761e-10 s
7680 x 4320 :
8.002605086312788e-10 s
{:x_component_number=>16, :vector_length=>16, :y_component_number=>3, :temporary_size=>4, :vector_recompute=>false, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (16);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (19) ? w - (19) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar16 temp000;
  uchar16 temp001;
  uchar16 temp002;
  uchar16 temp003;
  uchar16 temp004;
  uchar16 temp010;
  uchar16 temp011;
  uchar16 temp012;
  uchar16 temp013;
  uchar16 temp014;
  uchar16 temp020;
  uchar16 temp021;
  uchar16 temp022;
  uchar16 temp023;
  uchar16 temp024;
  uchar16 res00;
  uchar16 res01;
  uchar16 res02;
  int16 tempc000;
  int16 tempc001;
  int16 tempc002;
  int16 tempc003;
  int16 tempc004;
  int16 tempc010;
  int16 tempc011;
  int16 tempc012;
  int16 tempc013;
  int16 tempc014;
  int16 tempc020;
  int16 tempc021;
  int16 tempc022;
  int16 tempc023;
  int16 tempc024;
  int16 resc00;
  int16 resc01;
  int16 resc02;
  temp000 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_int16( temp000 );
  temp010 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_int16( temp010 );
  temp020 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_int16( temp020 );
  temp001 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_int16( temp001 );
  temp011 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_int16( temp011 );
  temp021 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_int16( temp021 );
  temp002 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_int16( temp002 );
  temp012 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_int16( temp012 );
  temp022 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_int16( temp022 );
  temp003 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_int16( temp003 );
  temp013 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_int16( temp013 );
  temp023 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_int16( temp023 );
  temp004 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_int16( temp004 );
  temp014 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_int16( temp014 );
  temp024 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_int16( temp024 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar16( clamp(resc00, (int)0, (int)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((int)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar16( clamp(resc01, (int)0, (int)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((int)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar16( clamp(resc02, (int)0, (int)255) );
  vstore16(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore16(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore16(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
4.6969214888578544e-09 s
2560 x 1600 :
4.158466261090632e-09 s
2048 x 2048 :
4.1059081974794775e-09 s
5760 x 3240 :
4.274873254194664e-09 s
7680 x 4320 :
4.3505655674719405e-09 s
{:x_component_number=>16, :vector_length=>1, :y_component_number=>1, :temporary_size=>4, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (16);
  y = (get_global_id(1)) * (1);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (19) ? w - (19) : x));
  y = (y < 1 ? 1 : (y > height - (2) ? height - (2) : y));
  uchar temp000;
  uchar temp001;
  uchar temp002;
  uchar temp100;
  uchar temp101;
  uchar temp102;
  uchar temp200;
  uchar temp201;
  uchar temp202;
  uchar temp300;
  uchar temp301;
  uchar temp302;
  uchar temp400;
  uchar temp401;
  uchar temp402;
  uchar temp500;
  uchar temp501;
  uchar temp502;
  uchar temp600;
  uchar temp601;
  uchar temp602;
  uchar temp700;
  uchar temp701;
  uchar temp702;
  uchar temp800;
  uchar temp801;
  uchar temp802;
  uchar temp900;
  uchar temp901;
  uchar temp902;
  uchar temp1000;
  uchar temp1001;
  uchar temp1002;
  uchar temp1100;
  uchar temp1101;
  uchar temp1102;
  uchar temp1200;
  uchar temp1201;
  uchar temp1202;
  uchar temp1300;
  uchar temp1301;
  uchar temp1302;
  uchar temp1400;
  uchar temp1401;
  uchar temp1402;
  uchar temp1500;
  uchar temp1501;
  uchar temp1502;
  uchar temp010;
  uchar temp011;
  uchar temp012;
  uchar temp110;
  uchar temp111;
  uchar temp112;
  uchar temp210;
  uchar temp211;
  uchar temp212;
  uchar temp310;
  uchar temp311;
  uchar temp312;
  uchar temp410;
  uchar temp411;
  uchar temp412;
  uchar temp510;
  uchar temp511;
  uchar temp512;
  uchar temp610;
  uchar temp611;
  uchar temp612;
  uchar temp710;
  uchar temp711;
  uchar temp712;
  uchar temp810;
  uchar temp811;
  uchar temp812;
  uchar temp910;
  uchar temp911;
  uchar temp912;
  uchar temp1010;
  uchar temp1011;
  uchar temp1012;
  uchar temp1110;
  uchar temp1111;
  uchar temp1112;
  uchar temp1210;
  uchar temp1211;
  uchar temp1212;
  uchar temp1310;
  uchar temp1311;
  uchar temp1312;
  uchar temp1410;
  uchar temp1411;
  uchar temp1412;
  uchar temp1510;
  uchar temp1511;
  uchar temp1512;
  uchar temp020;
  uchar temp021;
  uchar temp022;
  uchar temp120;
  uchar temp121;
  uchar temp122;
  uchar temp220;
  uchar temp221;
  uchar temp222;
  uchar temp320;
  uchar temp321;
  uchar temp322;
  uchar temp420;
  uchar temp421;
  uchar temp422;
  uchar temp520;
  uchar temp521;
  uchar temp522;
  uchar temp620;
  uchar temp621;
  uchar temp622;
  uchar temp720;
  uchar temp721;
  uchar temp722;
  uchar temp820;
  uchar temp821;
  uchar temp822;
  uchar temp920;
  uchar temp921;
  uchar temp922;
  uchar temp1020;
  uchar temp1021;
  uchar temp1022;
  uchar temp1120;
  uchar temp1121;
  uchar temp1122;
  uchar temp1220;
  uchar temp1221;
  uchar temp1222;
  uchar temp1320;
  uchar temp1321;
  uchar temp1322;
  uchar temp1420;
  uchar temp1421;
  uchar temp1422;
  uchar temp1520;
  uchar temp1521;
  uchar temp1522;
  uchar res00;
  uchar res10;
  uchar res20;
  uchar res30;
  uchar res40;
  uchar res50;
  uchar res60;
  uchar res70;
  uchar res80;
  uchar res90;
  uchar res100;
  uchar res110;
  uchar res120;
  uchar res130;
  uchar res140;
  uchar res150;
  int tempc000;
  int tempc001;
  int tempc002;
  int tempc100;
  int tempc101;
  int tempc102;
  int tempc200;
  int tempc201;
  int tempc202;
  int tempc300;
  int tempc301;
  int tempc302;
  int tempc400;
  int tempc401;
  int tempc402;
  int tempc500;
  int tempc501;
  int tempc502;
  int tempc600;
  int tempc601;
  int tempc602;
  int tempc700;
  int tempc701;
  int tempc702;
  int tempc800;
  int tempc801;
  int tempc802;
  int tempc900;
  int tempc901;
  int tempc902;
  int tempc1000;
  int tempc1001;
  int tempc1002;
  int tempc1100;
  int tempc1101;
  int tempc1102;
  int tempc1200;
  int tempc1201;
  int tempc1202;
  int tempc1300;
  int tempc1301;
  int tempc1302;
  int tempc1400;
  int tempc1401;
  int tempc1402;
  int tempc1500;
  int tempc1501;
  int tempc1502;
  int tempc010;
  int tempc011;
  int tempc012;
  int tempc110;
  int tempc111;
  int tempc112;
  int tempc210;
  int tempc211;
  int tempc212;
  int tempc310;
  int tempc311;
  int tempc312;
  int tempc410;
  int tempc411;
  int tempc412;
  int tempc510;
  int tempc511;
  int tempc512;
  int tempc610;
  int tempc611;
  int tempc612;
  int tempc710;
  int tempc711;
  int tempc712;
  int tempc810;
  int tempc811;
  int tempc812;
  int tempc910;
  int tempc911;
  int tempc912;
  int tempc1010;
  int tempc1011;
  int tempc1012;
  int tempc1110;
  int tempc1111;
  int tempc1112;
  int tempc1210;
  int tempc1211;
  int tempc1212;
  int tempc1310;
  int tempc1311;
  int tempc1312;
  int tempc1410;
  int tempc1411;
  int tempc1412;
  int tempc1510;
  int tempc1511;
  int tempc1512;
  int tempc020;
  int tempc021;
  int tempc022;
  int tempc120;
  int tempc121;
  int tempc122;
  int tempc220;
  int tempc221;
  int tempc222;
  int tempc320;
  int tempc321;
  int tempc322;
  int tempc420;
  int tempc421;
  int tempc422;
  int tempc520;
  int tempc521;
  int tempc522;
  int tempc620;
  int tempc621;
  int tempc622;
  int tempc720;
  int tempc721;
  int tempc722;
  int tempc820;
  int tempc821;
  int tempc822;
  int tempc920;
  int tempc921;
  int tempc922;
  int tempc1020;
  int tempc1021;
  int tempc1022;
  int tempc1120;
  int tempc1121;
  int tempc1122;
  int tempc1220;
  int tempc1221;
  int tempc1222;
  int tempc1320;
  int tempc1321;
  int tempc1322;
  int tempc1420;
  int tempc1421;
  int tempc1422;
  int tempc1520;
  int tempc1521;
  int tempc1522;
  int resc00;
  int resc10;
  int resc20;
  int resc30;
  int resc40;
  int resc50;
  int resc60;
  int resc70;
  int resc80;
  int resc90;
  int resc100;
  int resc110;
  int resc120;
  int resc130;
  int resc140;
  int resc150;
  temp000 = psrc[x + 0 + -3 + (w) * (y + -1)];
  tempc000 = temp000;
  temp100 = psrc[x + 1 + -3 + (w) * (y + -1)];
  tempc100 = temp100;
  temp200 = psrc[x + 2 + -3 + (w) * (y + -1)];
  tempc200 = temp200;
  temp300 = psrc[x + 3 + -3 + (w) * (y + -1)];
  tempc300 = temp300;
  temp400 = psrc[x + 4 + -3 + (w) * (y + -1)];
  tempc400 = temp400;
  temp500 = psrc[x + 5 + -3 + (w) * (y + -1)];
  tempc500 = temp500;
  temp600 = psrc[x + 6 + -3 + (w) * (y + -1)];
  tempc600 = temp600;
  temp700 = psrc[x + 7 + -3 + (w) * (y + -1)];
  tempc700 = temp700;
  temp800 = psrc[x + 8 + -3 + (w) * (y + -1)];
  tempc800 = temp800;
  temp900 = psrc[x + 9 + -3 + (w) * (y + -1)];
  tempc900 = temp900;
  temp1000 = psrc[x + 10 + -3 + (w) * (y + -1)];
  tempc1000 = temp1000;
  temp1100 = psrc[x + 11 + -3 + (w) * (y + -1)];
  tempc1100 = temp1100;
  temp1200 = psrc[x + 12 + -3 + (w) * (y + -1)];
  tempc1200 = temp1200;
  temp1300 = psrc[x + 13 + -3 + (w) * (y + -1)];
  tempc1300 = temp1300;
  temp1400 = psrc[x + 14 + -3 + (w) * (y + -1)];
  tempc1400 = temp1400;
  temp1500 = psrc[x + 15 + -3 + (w) * (y + -1)];
  tempc1500 = temp1500;
  temp010 = psrc[x + 0 + 0 + (w) * (y + -1)];
  tempc010 = temp010;
  temp110 = psrc[x + 1 + 0 + (w) * (y + -1)];
  tempc110 = temp110;
  temp210 = psrc[x + 2 + 0 + (w) * (y + -1)];
  tempc210 = temp210;
  temp310 = psrc[x + 3 + 0 + (w) * (y + -1)];
  tempc310 = temp310;
  temp410 = psrc[x + 4 + 0 + (w) * (y + -1)];
  tempc410 = temp410;
  temp510 = psrc[x + 5 + 0 + (w) * (y + -1)];
  tempc510 = temp510;
  temp610 = psrc[x + 6 + 0 + (w) * (y + -1)];
  tempc610 = temp610;
  temp710 = psrc[x + 7 + 0 + (w) * (y + -1)];
  tempc710 = temp710;
  temp810 = psrc[x + 8 + 0 + (w) * (y + -1)];
  tempc810 = temp810;
  temp910 = psrc[x + 9 + 0 + (w) * (y + -1)];
  tempc910 = temp910;
  temp1010 = psrc[x + 10 + 0 + (w) * (y + -1)];
  tempc1010 = temp1010;
  temp1110 = psrc[x + 11 + 0 + (w) * (y + -1)];
  tempc1110 = temp1110;
  temp1210 = psrc[x + 12 + 0 + (w) * (y + -1)];
  tempc1210 = temp1210;
  temp1310 = psrc[x + 13 + 0 + (w) * (y + -1)];
  tempc1310 = temp1310;
  temp1410 = psrc[x + 14 + 0 + (w) * (y + -1)];
  tempc1410 = temp1410;
  temp1510 = psrc[x + 15 + 0 + (w) * (y + -1)];
  tempc1510 = temp1510;
  temp020 = psrc[x + 0 + 3 + (w) * (y + -1)];
  tempc020 = temp020;
  temp120 = psrc[x + 1 + 3 + (w) * (y + -1)];
  tempc120 = temp120;
  temp220 = psrc[x + 2 + 3 + (w) * (y + -1)];
  tempc220 = temp220;
  temp320 = psrc[x + 3 + 3 + (w) * (y + -1)];
  tempc320 = temp320;
  temp420 = psrc[x + 4 + 3 + (w) * (y + -1)];
  tempc420 = temp420;
  temp520 = psrc[x + 5 + 3 + (w) * (y + -1)];
  tempc520 = temp520;
  temp620 = psrc[x + 6 + 3 + (w) * (y + -1)];
  tempc620 = temp620;
  temp720 = psrc[x + 7 + 3 + (w) * (y + -1)];
  tempc720 = temp720;
  temp820 = psrc[x + 8 + 3 + (w) * (y + -1)];
  tempc820 = temp820;
  temp920 = psrc[x + 9 + 3 + (w) * (y + -1)];
  tempc920 = temp920;
  temp1020 = psrc[x + 10 + 3 + (w) * (y + -1)];
  tempc1020 = temp1020;
  temp1120 = psrc[x + 11 + 3 + (w) * (y + -1)];
  tempc1120 = temp1120;
  temp1220 = psrc[x + 12 + 3 + (w) * (y + -1)];
  tempc1220 = temp1220;
  temp1320 = psrc[x + 13 + 3 + (w) * (y + -1)];
  tempc1320 = temp1320;
  temp1420 = psrc[x + 14 + 3 + (w) * (y + -1)];
  tempc1420 = temp1420;
  temp1520 = psrc[x + 15 + 3 + (w) * (y + -1)];
  tempc1520 = temp1520;
  temp001 = psrc[x + 0 + -3 + (w) * (y + 0)];
  tempc001 = temp001;
  temp101 = psrc[x + 1 + -3 + (w) * (y + 0)];
  tempc101 = temp101;
  temp201 = psrc[x + 2 + -3 + (w) * (y + 0)];
  tempc201 = temp201;
  temp301 = psrc[x + 3 + -3 + (w) * (y + 0)];
  tempc301 = temp301;
  temp401 = psrc[x + 4 + -3 + (w) * (y + 0)];
  tempc401 = temp401;
  temp501 = psrc[x + 5 + -3 + (w) * (y + 0)];
  tempc501 = temp501;
  temp601 = psrc[x + 6 + -3 + (w) * (y + 0)];
  tempc601 = temp601;
  temp701 = psrc[x + 7 + -3 + (w) * (y + 0)];
  tempc701 = temp701;
  temp801 = psrc[x + 8 + -3 + (w) * (y + 0)];
  tempc801 = temp801;
  temp901 = psrc[x + 9 + -3 + (w) * (y + 0)];
  tempc901 = temp901;
  temp1001 = psrc[x + 10 + -3 + (w) * (y + 0)];
  tempc1001 = temp1001;
  temp1101 = psrc[x + 11 + -3 + (w) * (y + 0)];
  tempc1101 = temp1101;
  temp1201 = psrc[x + 12 + -3 + (w) * (y + 0)];
  tempc1201 = temp1201;
  temp1301 = psrc[x + 13 + -3 + (w) * (y + 0)];
  tempc1301 = temp1301;
  temp1401 = psrc[x + 14 + -3 + (w) * (y + 0)];
  tempc1401 = temp1401;
  temp1501 = psrc[x + 15 + -3 + (w) * (y + 0)];
  tempc1501 = temp1501;
  temp011 = psrc[x + 0 + 0 + (w) * (y + 0)];
  tempc011 = temp011;
  temp111 = psrc[x + 1 + 0 + (w) * (y + 0)];
  tempc111 = temp111;
  temp211 = psrc[x + 2 + 0 + (w) * (y + 0)];
  tempc211 = temp211;
  temp311 = psrc[x + 3 + 0 + (w) * (y + 0)];
  tempc311 = temp311;
  temp411 = psrc[x + 4 + 0 + (w) * (y + 0)];
  tempc411 = temp411;
  temp511 = psrc[x + 5 + 0 + (w) * (y + 0)];
  tempc511 = temp511;
  temp611 = psrc[x + 6 + 0 + (w) * (y + 0)];
  tempc611 = temp611;
  temp711 = psrc[x + 7 + 0 + (w) * (y + 0)];
  tempc711 = temp711;
  temp811 = psrc[x + 8 + 0 + (w) * (y + 0)];
  tempc811 = temp811;
  temp911 = psrc[x + 9 + 0 + (w) * (y + 0)];
  tempc911 = temp911;
  temp1011 = psrc[x + 10 + 0 + (w) * (y + 0)];
  tempc1011 = temp1011;
  temp1111 = psrc[x + 11 + 0 + (w) * (y + 0)];
  tempc1111 = temp1111;
  temp1211 = psrc[x + 12 + 0 + (w) * (y + 0)];
  tempc1211 = temp1211;
  temp1311 = psrc[x + 13 + 0 + (w) * (y + 0)];
  tempc1311 = temp1311;
  temp1411 = psrc[x + 14 + 0 + (w) * (y + 0)];
  tempc1411 = temp1411;
  temp1511 = psrc[x + 15 + 0 + (w) * (y + 0)];
  tempc1511 = temp1511;
  temp021 = psrc[x + 0 + 3 + (w) * (y + 0)];
  tempc021 = temp021;
  temp121 = psrc[x + 1 + 3 + (w) * (y + 0)];
  tempc121 = temp121;
  temp221 = psrc[x + 2 + 3 + (w) * (y + 0)];
  tempc221 = temp221;
  temp321 = psrc[x + 3 + 3 + (w) * (y + 0)];
  tempc321 = temp321;
  temp421 = psrc[x + 4 + 3 + (w) * (y + 0)];
  tempc421 = temp421;
  temp521 = psrc[x + 5 + 3 + (w) * (y + 0)];
  tempc521 = temp521;
  temp621 = psrc[x + 6 + 3 + (w) * (y + 0)];
  tempc621 = temp621;
  temp721 = psrc[x + 7 + 3 + (w) * (y + 0)];
  tempc721 = temp721;
  temp821 = psrc[x + 8 + 3 + (w) * (y + 0)];
  tempc821 = temp821;
  temp921 = psrc[x + 9 + 3 + (w) * (y + 0)];
  tempc921 = temp921;
  temp1021 = psrc[x + 10 + 3 + (w) * (y + 0)];
  tempc1021 = temp1021;
  temp1121 = psrc[x + 11 + 3 + (w) * (y + 0)];
  tempc1121 = temp1121;
  temp1221 = psrc[x + 12 + 3 + (w) * (y + 0)];
  tempc1221 = temp1221;
  temp1321 = psrc[x + 13 + 3 + (w) * (y + 0)];
  tempc1321 = temp1321;
  temp1421 = psrc[x + 14 + 3 + (w) * (y + 0)];
  tempc1421 = temp1421;
  temp1521 = psrc[x + 15 + 3 + (w) * (y + 0)];
  tempc1521 = temp1521;
  temp002 = psrc[x + 0 + -3 + (w) * (y + 1)];
  tempc002 = temp002;
  temp102 = psrc[x + 1 + -3 + (w) * (y + 1)];
  tempc102 = temp102;
  temp202 = psrc[x + 2 + -3 + (w) * (y + 1)];
  tempc202 = temp202;
  temp302 = psrc[x + 3 + -3 + (w) * (y + 1)];
  tempc302 = temp302;
  temp402 = psrc[x + 4 + -3 + (w) * (y + 1)];
  tempc402 = temp402;
  temp502 = psrc[x + 5 + -3 + (w) * (y + 1)];
  tempc502 = temp502;
  temp602 = psrc[x + 6 + -3 + (w) * (y + 1)];
  tempc602 = temp602;
  temp702 = psrc[x + 7 + -3 + (w) * (y + 1)];
  tempc702 = temp702;
  temp802 = psrc[x + 8 + -3 + (w) * (y + 1)];
  tempc802 = temp802;
  temp902 = psrc[x + 9 + -3 + (w) * (y + 1)];
  tempc902 = temp902;
  temp1002 = psrc[x + 10 + -3 + (w) * (y + 1)];
  tempc1002 = temp1002;
  temp1102 = psrc[x + 11 + -3 + (w) * (y + 1)];
  tempc1102 = temp1102;
  temp1202 = psrc[x + 12 + -3 + (w) * (y + 1)];
  tempc1202 = temp1202;
  temp1302 = psrc[x + 13 + -3 + (w) * (y + 1)];
  tempc1302 = temp1302;
  temp1402 = psrc[x + 14 + -3 + (w) * (y + 1)];
  tempc1402 = temp1402;
  temp1502 = psrc[x + 15 + -3 + (w) * (y + 1)];
  tempc1502 = temp1502;
  temp012 = psrc[x + 0 + 0 + (w) * (y + 1)];
  tempc012 = temp012;
  temp112 = psrc[x + 1 + 0 + (w) * (y + 1)];
  tempc112 = temp112;
  temp212 = psrc[x + 2 + 0 + (w) * (y + 1)];
  tempc212 = temp212;
  temp312 = psrc[x + 3 + 0 + (w) * (y + 1)];
  tempc312 = temp312;
  temp412 = psrc[x + 4 + 0 + (w) * (y + 1)];
  tempc412 = temp412;
  temp512 = psrc[x + 5 + 0 + (w) * (y + 1)];
  tempc512 = temp512;
  temp612 = psrc[x + 6 + 0 + (w) * (y + 1)];
  tempc612 = temp612;
  temp712 = psrc[x + 7 + 0 + (w) * (y + 1)];
  tempc712 = temp712;
  temp812 = psrc[x + 8 + 0 + (w) * (y + 1)];
  tempc812 = temp812;
  temp912 = psrc[x + 9 + 0 + (w) * (y + 1)];
  tempc912 = temp912;
  temp1012 = psrc[x + 10 + 0 + (w) * (y + 1)];
  tempc1012 = temp1012;
  temp1112 = psrc[x + 11 + 0 + (w) * (y + 1)];
  tempc1112 = temp1112;
  temp1212 = psrc[x + 12 + 0 + (w) * (y + 1)];
  tempc1212 = temp1212;
  temp1312 = psrc[x + 13 + 0 + (w) * (y + 1)];
  tempc1312 = temp1312;
  temp1412 = psrc[x + 14 + 0 + (w) * (y + 1)];
  tempc1412 = temp1412;
  temp1512 = psrc[x + 15 + 0 + (w) * (y + 1)];
  tempc1512 = temp1512;
  temp022 = psrc[x + 0 + 3 + (w) * (y + 1)];
  tempc022 = temp022;
  temp122 = psrc[x + 1 + 3 + (w) * (y + 1)];
  tempc122 = temp122;
  temp222 = psrc[x + 2 + 3 + (w) * (y + 1)];
  tempc222 = temp222;
  temp322 = psrc[x + 3 + 3 + (w) * (y + 1)];
  tempc322 = temp322;
  temp422 = psrc[x + 4 + 3 + (w) * (y + 1)];
  tempc422 = temp422;
  temp522 = psrc[x + 5 + 3 + (w) * (y + 1)];
  tempc522 = temp522;
  temp622 = psrc[x + 6 + 3 + (w) * (y + 1)];
  tempc622 = temp622;
  temp722 = psrc[x + 7 + 3 + (w) * (y + 1)];
  tempc722 = temp722;
  temp822 = psrc[x + 8 + 3 + (w) * (y + 1)];
  tempc822 = temp822;
  temp922 = psrc[x + 9 + 3 + (w) * (y + 1)];
  tempc922 = temp922;
  temp1022 = psrc[x + 10 + 3 + (w) * (y + 1)];
  tempc1022 = temp1022;
  temp1122 = psrc[x + 11 + 3 + (w) * (y + 1)];
  tempc1122 = temp1122;
  temp1222 = psrc[x + 12 + 3 + (w) * (y + 1)];
  tempc1222 = temp1222;
  temp1322 = psrc[x + 13 + 3 + (w) * (y + 1)];
  tempc1322 = temp1322;
  temp1422 = psrc[x + 14 + 3 + (w) * (y + 1)];
  tempc1422 = temp1422;
  temp1522 = psrc[x + 15 + 3 + (w) * (y + 1)];
  tempc1522 = temp1522;
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((int)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = clamp(resc00, (int)0, (int)255);
  resc10 =  -(tempc100) - (tempc110) - (tempc120) - (tempc101) + (tempc111) * ((int)9) - (tempc121) - (tempc102) - (tempc112) - (tempc122);
  res10 = clamp(resc10, (int)0, (int)255);
  resc20 =  -(tempc200) - (tempc210) - (tempc220) - (tempc201) + (tempc211) * ((int)9) - (tempc221) - (tempc202) - (tempc212) - (tempc222);
  res20 = clamp(resc20, (int)0, (int)255);
  resc30 =  -(tempc300) - (tempc310) - (tempc320) - (tempc301) + (tempc311) * ((int)9) - (tempc321) - (tempc302) - (tempc312) - (tempc322);
  res30 = clamp(resc30, (int)0, (int)255);
  resc40 =  -(tempc400) - (tempc410) - (tempc420) - (tempc401) + (tempc411) * ((int)9) - (tempc421) - (tempc402) - (tempc412) - (tempc422);
  res40 = clamp(resc40, (int)0, (int)255);
  resc50 =  -(tempc500) - (tempc510) - (tempc520) - (tempc501) + (tempc511) * ((int)9) - (tempc521) - (tempc502) - (tempc512) - (tempc522);
  res50 = clamp(resc50, (int)0, (int)255);
  resc60 =  -(tempc600) - (tempc610) - (tempc620) - (tempc601) + (tempc611) * ((int)9) - (tempc621) - (tempc602) - (tempc612) - (tempc622);
  res60 = clamp(resc60, (int)0, (int)255);
  resc70 =  -(tempc700) - (tempc710) - (tempc720) - (tempc701) + (tempc711) * ((int)9) - (tempc721) - (tempc702) - (tempc712) - (tempc722);
  res70 = clamp(resc70, (int)0, (int)255);
  resc80 =  -(tempc800) - (tempc810) - (tempc820) - (tempc801) + (tempc811) * ((int)9) - (tempc821) - (tempc802) - (tempc812) - (tempc822);
  res80 = clamp(resc80, (int)0, (int)255);
  resc90 =  -(tempc900) - (tempc910) - (tempc920) - (tempc901) + (tempc911) * ((int)9) - (tempc921) - (tempc902) - (tempc912) - (tempc922);
  res90 = clamp(resc90, (int)0, (int)255);
  resc100 =  -(tempc1000) - (tempc1010) - (tempc1020) - (tempc1001) + (tempc1011) * ((int)9) - (tempc1021) - (tempc1002) - (tempc1012) - (tempc1022);
  res100 = clamp(resc100, (int)0, (int)255);
  resc110 =  -(tempc1100) - (tempc1110) - (tempc1120) - (tempc1101) + (tempc1111) * ((int)9) - (tempc1121) - (tempc1102) - (tempc1112) - (tempc1122);
  res110 = clamp(resc110, (int)0, (int)255);
  resc120 =  -(tempc1200) - (tempc1210) - (tempc1220) - (tempc1201) + (tempc1211) * ((int)9) - (tempc1221) - (tempc1202) - (tempc1212) - (tempc1222);
  res120 = clamp(resc120, (int)0, (int)255);
  resc130 =  -(tempc1300) - (tempc1310) - (tempc1320) - (tempc1301) + (tempc1311) * ((int)9) - (tempc1321) - (tempc1302) - (tempc1312) - (tempc1322);
  res130 = clamp(resc130, (int)0, (int)255);
  resc140 =  -(tempc1400) - (tempc1410) - (tempc1420) - (tempc1401) + (tempc1411) * ((int)9) - (tempc1421) - (tempc1402) - (tempc1412) - (tempc1422);
  res140 = clamp(resc140, (int)0, (int)255);
  resc150 =  -(tempc1500) - (tempc1510) - (tempc1520) - (tempc1501) + (tempc1511) * ((int)9) - (tempc1521) - (tempc1502) - (tempc1512) - (tempc1522);
  res150 = clamp(resc150, (int)0, (int)255);
  pdst[x + 0 + (w) * (y + 0)] = res00;
  pdst[x + 1 + (w) * (y + 0)] = res10;
  pdst[x + 2 + (w) * (y + 0)] = res20;
  pdst[x + 3 + (w) * (y + 0)] = res30;
  pdst[x + 4 + (w) * (y + 0)] = res40;
  pdst[x + 5 + (w) * (y + 0)] = res50;
  pdst[x + 6 + (w) * (y + 0)] = res60;
  pdst[x + 7 + (w) * (y + 0)] = res70;
  pdst[x + 8 + (w) * (y + 0)] = res80;
  pdst[x + 9 + (w) * (y + 0)] = res90;
  pdst[x + 10 + (w) * (y + 0)] = res100;
  pdst[x + 11 + (w) * (y + 0)] = res110;
  pdst[x + 12 + (w) * (y + 0)] = res120;
  pdst[x + 13 + (w) * (y + 0)] = res130;
  pdst[x + 14 + (w) * (y + 0)] = res140;
  pdst[x + 15 + (w) * (y + 0)] = res150;
}
768 x 432 :
Tesla T10 Processor: 
3.992082093630457e-09 s
2560 x 1600 :
3.842856737458179e-09 s
2048 x 2048 :
3.659908134413858e-09 s
5760 x 3240 :
3.74841738035713e-09 s
7680 x 4320 :
4.031346456330962e-09 s
{:x_component_number=>1, :vector_length=>16, :y_component_number=>3, :temporary_size=>2, :vector_recompute=>true, :load_overlap=>true}
__kernel void math(const __global uchar * psrc, __global uchar * pdst, const int width, const int height){
  int y;
  int x;
  int w;
  x = (get_global_id(0)) * (1);
  y = (get_global_id(1)) * (3);
  w = (width) * (3);
  x = (x < 3 ? 3 : (x > w - (19) ? w - (19) : x));
  y = (y < 1 ? 1 : (y > height - (4) ? height - (4) : y));
  uchar16 temp000;
  uchar16 temp001;
  uchar16 temp002;
  uchar16 temp003;
  uchar16 temp004;
  uchar16 temp010;
  uchar16 temp011;
  uchar16 temp012;
  uchar16 temp013;
  uchar16 temp014;
  uchar16 temp020;
  uchar16 temp021;
  uchar16 temp022;
  uchar16 temp023;
  uchar16 temp024;
  uchar16 res00;
  uchar16 res01;
  uchar16 res02;
  short16 tempc000;
  short16 tempc001;
  short16 tempc002;
  short16 tempc003;
  short16 tempc004;
  short16 tempc010;
  short16 tempc011;
  short16 tempc012;
  short16 tempc013;
  short16 tempc014;
  short16 tempc020;
  short16 tempc021;
  short16 tempc022;
  short16 tempc023;
  short16 tempc024;
  short16 resc00;
  short16 resc01;
  short16 resc02;
  temp000 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + -1)]);
  tempc000 = convert_short16( temp000 );
  temp010 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + -1)]);
  tempc010 = convert_short16( temp010 );
  temp020 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + -1)]);
  tempc020 = convert_short16( temp020 );
  temp001 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 0)]);
  tempc001 = convert_short16( temp001 );
  temp011 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 0)]);
  tempc011 = convert_short16( temp011 );
  temp021 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 0)]);
  tempc021 = convert_short16( temp021 );
  temp002 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 1)]);
  tempc002 = convert_short16( temp002 );
  temp012 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 1)]);
  tempc012 = convert_short16( temp012 );
  temp022 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 1)]);
  tempc022 = convert_short16( temp022 );
  temp003 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 2)]);
  tempc003 = convert_short16( temp003 );
  temp013 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 2)]);
  tempc013 = convert_short16( temp013 );
  temp023 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 2)]);
  tempc023 = convert_short16( temp023 );
  temp004 = vload16(0, &psrc[x + 0 + -3 + (w) * (y + 3)]);
  tempc004 = convert_short16( temp004 );
  temp014 = vload16(0, &psrc[x + 0 + 0 + (w) * (y + 3)]);
  tempc014 = convert_short16( temp014 );
  temp024 = vload16(0, &psrc[x + 0 + 3 + (w) * (y + 3)]);
  tempc024 = convert_short16( temp024 );
  resc00 =  -(tempc000) - (tempc010) - (tempc020) - (tempc001) + (tempc011) * ((short)9) - (tempc021) - (tempc002) - (tempc012) - (tempc022);
  res00 = convert_uchar16( clamp(resc00, (short)0, (short)255) );
  resc01 =  -(tempc001) - (tempc011) - (tempc021) - (tempc002) + (tempc012) * ((short)9) - (tempc022) - (tempc003) - (tempc013) - (tempc023);
  res01 = convert_uchar16( clamp(resc01, (short)0, (short)255) );
  resc02 =  -(tempc002) - (tempc012) - (tempc022) - (tempc003) + (tempc013) * ((short)9) - (tempc023) - (tempc004) - (tempc014) - (tempc024);
  res02 = convert_uchar16( clamp(resc02, (short)0, (short)255) );
  vstore16(res00, 0, &pdst[x + 0 + (w) * (y + 0)]);
  vstore16(res01, 0, &pdst[x + 0 + (w) * (y + 1)]);
  vstore16(res02, 0, &pdst[x + 0 + (w) * (y + 2)]);
}
768 x 432 :
Tesla T10 Processor: 
4.5670775396198923e-08 s
#+END_EXAMPLE
